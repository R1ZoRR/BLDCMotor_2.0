
BLDCMotor_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b24  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08008cb0  08008cb0  00018cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ea8  08008ea8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08008ea8  08008ea8  00018ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008eb0  08008eb0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008eb0  08008eb0  00018eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008eb4  08008eb4  00018eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000001c  08008ed4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08008ed4  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126b7  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a5  00000000  00000000  000326fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00034ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00035d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209ba  00000000  00000000  00036d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e73  00000000  00000000  0005773a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c83b6  00000000  00000000  000695ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d30  00000000  00000000  001319b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c94 	.word	0x08008c94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08008c94 	.word	0x08008c94

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <__aeabi_uldivmod>:
 800114c:	b953      	cbnz	r3, 8001164 <__aeabi_uldivmod+0x18>
 800114e:	b94a      	cbnz	r2, 8001164 <__aeabi_uldivmod+0x18>
 8001150:	2900      	cmp	r1, #0
 8001152:	bf08      	it	eq
 8001154:	2800      	cmpeq	r0, #0
 8001156:	bf1c      	itt	ne
 8001158:	f04f 31ff 	movne.w	r1, #4294967295
 800115c:	f04f 30ff 	movne.w	r0, #4294967295
 8001160:	f000 b96e 	b.w	8001440 <__aeabi_idiv0>
 8001164:	f1ad 0c08 	sub.w	ip, sp, #8
 8001168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800116c:	f000 f806 	bl	800117c <__udivmoddi4>
 8001170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr

0800117c <__udivmoddi4>:
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	9e08      	ldr	r6, [sp, #32]
 8001182:	460d      	mov	r5, r1
 8001184:	4604      	mov	r4, r0
 8001186:	468e      	mov	lr, r1
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 8083 	bne.w	8001294 <__udivmoddi4+0x118>
 800118e:	428a      	cmp	r2, r1
 8001190:	4617      	mov	r7, r2
 8001192:	d947      	bls.n	8001224 <__udivmoddi4+0xa8>
 8001194:	fab2 f382 	clz	r3, r2
 8001198:	b14b      	cbz	r3, 80011ae <__udivmoddi4+0x32>
 800119a:	f1c3 0120 	rsb	r1, r3, #32
 800119e:	fa05 fe03 	lsl.w	lr, r5, r3
 80011a2:	fa20 f101 	lsr.w	r1, r0, r1
 80011a6:	409f      	lsls	r7, r3
 80011a8:	ea41 0e0e 	orr.w	lr, r1, lr
 80011ac:	409c      	lsls	r4, r3
 80011ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011b2:	fbbe fcf8 	udiv	ip, lr, r8
 80011b6:	fa1f f987 	uxth.w	r9, r7
 80011ba:	fb08 e21c 	mls	r2, r8, ip, lr
 80011be:	fb0c f009 	mul.w	r0, ip, r9
 80011c2:	0c21      	lsrs	r1, r4, #16
 80011c4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d90a      	bls.n	80011e2 <__udivmoddi4+0x66>
 80011cc:	18ba      	adds	r2, r7, r2
 80011ce:	f10c 31ff 	add.w	r1, ip, #4294967295
 80011d2:	f080 8118 	bcs.w	8001406 <__udivmoddi4+0x28a>
 80011d6:	4290      	cmp	r0, r2
 80011d8:	f240 8115 	bls.w	8001406 <__udivmoddi4+0x28a>
 80011dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80011e0:	443a      	add	r2, r7
 80011e2:	1a12      	subs	r2, r2, r0
 80011e4:	fbb2 f0f8 	udiv	r0, r2, r8
 80011e8:	fb08 2210 	mls	r2, r8, r0, r2
 80011ec:	fb00 f109 	mul.w	r1, r0, r9
 80011f0:	b2a4      	uxth	r4, r4
 80011f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011f6:	42a1      	cmp	r1, r4
 80011f8:	d909      	bls.n	800120e <__udivmoddi4+0x92>
 80011fa:	193c      	adds	r4, r7, r4
 80011fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8001200:	f080 8103 	bcs.w	800140a <__udivmoddi4+0x28e>
 8001204:	42a1      	cmp	r1, r4
 8001206:	f240 8100 	bls.w	800140a <__udivmoddi4+0x28e>
 800120a:	3802      	subs	r0, #2
 800120c:	443c      	add	r4, r7
 800120e:	1a64      	subs	r4, r4, r1
 8001210:	2100      	movs	r1, #0
 8001212:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001216:	b11e      	cbz	r6, 8001220 <__udivmoddi4+0xa4>
 8001218:	2200      	movs	r2, #0
 800121a:	40dc      	lsrs	r4, r3
 800121c:	e9c6 4200 	strd	r4, r2, [r6]
 8001220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001224:	b902      	cbnz	r2, 8001228 <__udivmoddi4+0xac>
 8001226:	deff      	udf	#255	; 0xff
 8001228:	fab2 f382 	clz	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d14f      	bne.n	80012d0 <__udivmoddi4+0x154>
 8001230:	1a8d      	subs	r5, r1, r2
 8001232:	2101      	movs	r1, #1
 8001234:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001238:	fa1f f882 	uxth.w	r8, r2
 800123c:	fbb5 fcfe 	udiv	ip, r5, lr
 8001240:	fb0e 551c 	mls	r5, lr, ip, r5
 8001244:	fb08 f00c 	mul.w	r0, r8, ip
 8001248:	0c22      	lsrs	r2, r4, #16
 800124a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800124e:	42a8      	cmp	r0, r5
 8001250:	d907      	bls.n	8001262 <__udivmoddi4+0xe6>
 8001252:	197d      	adds	r5, r7, r5
 8001254:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001258:	d202      	bcs.n	8001260 <__udivmoddi4+0xe4>
 800125a:	42a8      	cmp	r0, r5
 800125c:	f200 80e9 	bhi.w	8001432 <__udivmoddi4+0x2b6>
 8001260:	4694      	mov	ip, r2
 8001262:	1a2d      	subs	r5, r5, r0
 8001264:	fbb5 f0fe 	udiv	r0, r5, lr
 8001268:	fb0e 5510 	mls	r5, lr, r0, r5
 800126c:	fb08 f800 	mul.w	r8, r8, r0
 8001270:	b2a4      	uxth	r4, r4
 8001272:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001276:	45a0      	cmp	r8, r4
 8001278:	d907      	bls.n	800128a <__udivmoddi4+0x10e>
 800127a:	193c      	adds	r4, r7, r4
 800127c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001280:	d202      	bcs.n	8001288 <__udivmoddi4+0x10c>
 8001282:	45a0      	cmp	r8, r4
 8001284:	f200 80d9 	bhi.w	800143a <__udivmoddi4+0x2be>
 8001288:	4610      	mov	r0, r2
 800128a:	eba4 0408 	sub.w	r4, r4, r8
 800128e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001292:	e7c0      	b.n	8001216 <__udivmoddi4+0x9a>
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x12e>
 8001298:	2e00      	cmp	r6, #0
 800129a:	f000 80b1 	beq.w	8001400 <__udivmoddi4+0x284>
 800129e:	2100      	movs	r1, #0
 80012a0:	e9c6 0500 	strd	r0, r5, [r6]
 80012a4:	4608      	mov	r0, r1
 80012a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012aa:	fab3 f183 	clz	r1, r3
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d14b      	bne.n	800134a <__udivmoddi4+0x1ce>
 80012b2:	42ab      	cmp	r3, r5
 80012b4:	d302      	bcc.n	80012bc <__udivmoddi4+0x140>
 80012b6:	4282      	cmp	r2, r0
 80012b8:	f200 80b9 	bhi.w	800142e <__udivmoddi4+0x2b2>
 80012bc:	1a84      	subs	r4, r0, r2
 80012be:	eb65 0303 	sbc.w	r3, r5, r3
 80012c2:	2001      	movs	r0, #1
 80012c4:	469e      	mov	lr, r3
 80012c6:	2e00      	cmp	r6, #0
 80012c8:	d0aa      	beq.n	8001220 <__udivmoddi4+0xa4>
 80012ca:	e9c6 4e00 	strd	r4, lr, [r6]
 80012ce:	e7a7      	b.n	8001220 <__udivmoddi4+0xa4>
 80012d0:	409f      	lsls	r7, r3
 80012d2:	f1c3 0220 	rsb	r2, r3, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80012e0:	fa1f f887 	uxth.w	r8, r7
 80012e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80012e8:	fa24 f202 	lsr.w	r2, r4, r2
 80012ec:	409d      	lsls	r5, r3
 80012ee:	fb00 fc08 	mul.w	ip, r0, r8
 80012f2:	432a      	orrs	r2, r5
 80012f4:	0c15      	lsrs	r5, r2, #16
 80012f6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012fa:	45ac      	cmp	ip, r5
 80012fc:	fa04 f403 	lsl.w	r4, r4, r3
 8001300:	d909      	bls.n	8001316 <__udivmoddi4+0x19a>
 8001302:	197d      	adds	r5, r7, r5
 8001304:	f100 31ff 	add.w	r1, r0, #4294967295
 8001308:	f080 808f 	bcs.w	800142a <__udivmoddi4+0x2ae>
 800130c:	45ac      	cmp	ip, r5
 800130e:	f240 808c 	bls.w	800142a <__udivmoddi4+0x2ae>
 8001312:	3802      	subs	r0, #2
 8001314:	443d      	add	r5, r7
 8001316:	eba5 050c 	sub.w	r5, r5, ip
 800131a:	fbb5 f1fe 	udiv	r1, r5, lr
 800131e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001322:	fb01 f908 	mul.w	r9, r1, r8
 8001326:	b295      	uxth	r5, r2
 8001328:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800132c:	45a9      	cmp	r9, r5
 800132e:	d907      	bls.n	8001340 <__udivmoddi4+0x1c4>
 8001330:	197d      	adds	r5, r7, r5
 8001332:	f101 32ff 	add.w	r2, r1, #4294967295
 8001336:	d274      	bcs.n	8001422 <__udivmoddi4+0x2a6>
 8001338:	45a9      	cmp	r9, r5
 800133a:	d972      	bls.n	8001422 <__udivmoddi4+0x2a6>
 800133c:	3902      	subs	r1, #2
 800133e:	443d      	add	r5, r7
 8001340:	eba5 0509 	sub.w	r5, r5, r9
 8001344:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001348:	e778      	b.n	800123c <__udivmoddi4+0xc0>
 800134a:	f1c1 0720 	rsb	r7, r1, #32
 800134e:	408b      	lsls	r3, r1
 8001350:	fa22 fc07 	lsr.w	ip, r2, r7
 8001354:	ea4c 0c03 	orr.w	ip, ip, r3
 8001358:	fa25 f407 	lsr.w	r4, r5, r7
 800135c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001360:	fbb4 f9fe 	udiv	r9, r4, lr
 8001364:	fa1f f88c 	uxth.w	r8, ip
 8001368:	fb0e 4419 	mls	r4, lr, r9, r4
 800136c:	fa20 f307 	lsr.w	r3, r0, r7
 8001370:	fb09 fa08 	mul.w	sl, r9, r8
 8001374:	408d      	lsls	r5, r1
 8001376:	431d      	orrs	r5, r3
 8001378:	0c2b      	lsrs	r3, r5, #16
 800137a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800137e:	45a2      	cmp	sl, r4
 8001380:	fa02 f201 	lsl.w	r2, r2, r1
 8001384:	fa00 f301 	lsl.w	r3, r0, r1
 8001388:	d909      	bls.n	800139e <__udivmoddi4+0x222>
 800138a:	eb1c 0404 	adds.w	r4, ip, r4
 800138e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001392:	d248      	bcs.n	8001426 <__udivmoddi4+0x2aa>
 8001394:	45a2      	cmp	sl, r4
 8001396:	d946      	bls.n	8001426 <__udivmoddi4+0x2aa>
 8001398:	f1a9 0902 	sub.w	r9, r9, #2
 800139c:	4464      	add	r4, ip
 800139e:	eba4 040a 	sub.w	r4, r4, sl
 80013a2:	fbb4 f0fe 	udiv	r0, r4, lr
 80013a6:	fb0e 4410 	mls	r4, lr, r0, r4
 80013aa:	fb00 fa08 	mul.w	sl, r0, r8
 80013ae:	b2ad      	uxth	r5, r5
 80013b0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013b4:	45a2      	cmp	sl, r4
 80013b6:	d908      	bls.n	80013ca <__udivmoddi4+0x24e>
 80013b8:	eb1c 0404 	adds.w	r4, ip, r4
 80013bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80013c0:	d22d      	bcs.n	800141e <__udivmoddi4+0x2a2>
 80013c2:	45a2      	cmp	sl, r4
 80013c4:	d92b      	bls.n	800141e <__udivmoddi4+0x2a2>
 80013c6:	3802      	subs	r0, #2
 80013c8:	4464      	add	r4, ip
 80013ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013ce:	fba0 8902 	umull	r8, r9, r0, r2
 80013d2:	eba4 040a 	sub.w	r4, r4, sl
 80013d6:	454c      	cmp	r4, r9
 80013d8:	46c6      	mov	lr, r8
 80013da:	464d      	mov	r5, r9
 80013dc:	d319      	bcc.n	8001412 <__udivmoddi4+0x296>
 80013de:	d016      	beq.n	800140e <__udivmoddi4+0x292>
 80013e0:	b15e      	cbz	r6, 80013fa <__udivmoddi4+0x27e>
 80013e2:	ebb3 020e 	subs.w	r2, r3, lr
 80013e6:	eb64 0405 	sbc.w	r4, r4, r5
 80013ea:	fa04 f707 	lsl.w	r7, r4, r7
 80013ee:	fa22 f301 	lsr.w	r3, r2, r1
 80013f2:	431f      	orrs	r7, r3
 80013f4:	40cc      	lsrs	r4, r1
 80013f6:	e9c6 7400 	strd	r7, r4, [r6]
 80013fa:	2100      	movs	r1, #0
 80013fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001400:	4631      	mov	r1, r6
 8001402:	4630      	mov	r0, r6
 8001404:	e70c      	b.n	8001220 <__udivmoddi4+0xa4>
 8001406:	468c      	mov	ip, r1
 8001408:	e6eb      	b.n	80011e2 <__udivmoddi4+0x66>
 800140a:	4610      	mov	r0, r2
 800140c:	e6ff      	b.n	800120e <__udivmoddi4+0x92>
 800140e:	4543      	cmp	r3, r8
 8001410:	d2e6      	bcs.n	80013e0 <__udivmoddi4+0x264>
 8001412:	ebb8 0e02 	subs.w	lr, r8, r2
 8001416:	eb69 050c 	sbc.w	r5, r9, ip
 800141a:	3801      	subs	r0, #1
 800141c:	e7e0      	b.n	80013e0 <__udivmoddi4+0x264>
 800141e:	4628      	mov	r0, r5
 8001420:	e7d3      	b.n	80013ca <__udivmoddi4+0x24e>
 8001422:	4611      	mov	r1, r2
 8001424:	e78c      	b.n	8001340 <__udivmoddi4+0x1c4>
 8001426:	4681      	mov	r9, r0
 8001428:	e7b9      	b.n	800139e <__udivmoddi4+0x222>
 800142a:	4608      	mov	r0, r1
 800142c:	e773      	b.n	8001316 <__udivmoddi4+0x19a>
 800142e:	4608      	mov	r0, r1
 8001430:	e749      	b.n	80012c6 <__udivmoddi4+0x14a>
 8001432:	f1ac 0c02 	sub.w	ip, ip, #2
 8001436:	443d      	add	r5, r7
 8001438:	e713      	b.n	8001262 <__udivmoddi4+0xe6>
 800143a:	3802      	subs	r0, #2
 800143c:	443c      	add	r4, r7
 800143e:	e724      	b.n	800128a <__udivmoddi4+0x10e>

08001440 <__aeabi_idiv0>:
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <initialize_PID_constants>:
float error, lastError;
float integral, derivative;

float pid_time = 0;

void initialize_PID_constants() {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	Kp = 30;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <initialize_PID_constants+0x58>)
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <initialize_PID_constants+0x5c>)
 800144c:	601a      	str	r2, [r3, #0]
	Ki = (2 * Kp) / TIME_INTERVAL_MS;
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <initialize_PID_constants+0x58>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fb8b 	bl	8000b70 <__addsf3>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <initialize_PID_constants+0x60>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	4610      	mov	r0, r2
 8001466:	f7ff fd3f 	bl	8000ee8 <__aeabi_fdiv>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <initialize_PID_constants+0x64>)
 8001470:	601a      	str	r2, [r3, #0]
    Kd = (Kp * TIME_INTERVAL_MS) / 8;
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <initialize_PID_constants+0x58>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <initialize_PID_constants+0x60>)
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fc7f 	bl	8000d80 <__aeabi_fmul>
 8001482:	4603      	mov	r3, r0
 8001484:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fd2d 	bl	8000ee8 <__aeabi_fdiv>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <initialize_PID_constants+0x68>)
 8001494:	601a      	str	r2, [r3, #0]
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000007c 	.word	0x2000007c
 80014a0:	41f00000 	.word	0x41f00000
 80014a4:	20000004 	.word	0x20000004
 80014a8:	20000054 	.word	0x20000054
 80014ac:	20000074 	.word	0x20000074

080014b0 <move_rotor>:
uint16_t cnt_hall_last = 0;

/////////////////////////////////

// Функция изменяет ШИМ в соответсвии с указанным вектором тяги
void move_rotor(float to_angle) {
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	// Расчет потенциалов и заполнения шима для фаз
	U_PWM = pwm*(sin((to_angle) * M_PI/180));
 80014b8:	4b97      	ldr	r3, [pc, #604]	; (8001718 <move_rotor+0x268>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ffd5 	bl	800046c <__aeabi_i2d>
 80014c2:	4604      	mov	r4, r0
 80014c4:	460d      	mov	r5, r1
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7fe ffe2 	bl	8000490 <__aeabi_f2d>
 80014cc:	a390      	add	r3, pc, #576	; (adr r3, 8001710 <move_rotor+0x260>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f835 	bl	8000540 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b8e      	ldr	r3, [pc, #568]	; (800171c <move_rotor+0x26c>)
 80014e4:	f7ff f956 	bl	8000794 <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f006 fbce 	bl	8007c90 <sin>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4620      	mov	r0, r4
 80014fa:	4629      	mov	r1, r5
 80014fc:	f7ff f820 	bl	8000540 <__aeabi_dmul>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f7ff fadc 	bl	8000ac4 <__aeabi_d2f>
 800150c:	4603      	mov	r3, r0
 800150e:	4a84      	ldr	r2, [pc, #528]	; (8001720 <move_rotor+0x270>)
 8001510:	6013      	str	r3, [r2, #0]
	V_PWM = pwm*(sin((to_angle+120) * M_PI/180));
 8001512:	4b81      	ldr	r3, [pc, #516]	; (8001718 <move_rotor+0x268>)
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ffa8 	bl	800046c <__aeabi_i2d>
 800151c:	4604      	mov	r4, r0
 800151e:	460d      	mov	r5, r1
 8001520:	4980      	ldr	r1, [pc, #512]	; (8001724 <move_rotor+0x274>)
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fb24 	bl	8000b70 <__addsf3>
 8001528:	4603      	mov	r3, r0
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ffb0 	bl	8000490 <__aeabi_f2d>
 8001530:	a377      	add	r3, pc, #476	; (adr r3, 8001710 <move_rotor+0x260>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f803 	bl	8000540 <__aeabi_dmul>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b75      	ldr	r3, [pc, #468]	; (800171c <move_rotor+0x26c>)
 8001548:	f7ff f924 	bl	8000794 <__aeabi_ddiv>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f006 fb9c 	bl	8007c90 <sin>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4620      	mov	r0, r4
 800155e:	4629      	mov	r1, r5
 8001560:	f7fe ffee 	bl	8000540 <__aeabi_dmul>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff faaa 	bl	8000ac4 <__aeabi_d2f>
 8001570:	4603      	mov	r3, r0
 8001572:	4a6d      	ldr	r2, [pc, #436]	; (8001728 <move_rotor+0x278>)
 8001574:	6013      	str	r3, [r2, #0]
	W_PWM = pwm*(sin((to_angle+240) * M_PI/180));
 8001576:	4b68      	ldr	r3, [pc, #416]	; (8001718 <move_rotor+0x268>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff76 	bl	800046c <__aeabi_i2d>
 8001580:	4604      	mov	r4, r0
 8001582:	460d      	mov	r5, r1
 8001584:	4969      	ldr	r1, [pc, #420]	; (800172c <move_rotor+0x27c>)
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff faf2 	bl	8000b70 <__addsf3>
 800158c:	4603      	mov	r3, r0
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ff7e 	bl	8000490 <__aeabi_f2d>
 8001594:	a35e      	add	r3, pc, #376	; (adr r3, 8001710 <move_rotor+0x260>)
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	f7fe ffd1 	bl	8000540 <__aeabi_dmul>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b5c      	ldr	r3, [pc, #368]	; (800171c <move_rotor+0x26c>)
 80015ac:	f7ff f8f2 	bl	8000794 <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f006 fb6a 	bl	8007c90 <sin>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7fe ffbc 	bl	8000540 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fa78 	bl	8000ac4 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a56      	ldr	r2, [pc, #344]	; (8001730 <move_rotor+0x280>)
 80015d8:	6013      	str	r3, [r2, #0]

	TIM1->CCR1 = 0;
 80015da:	4b56      	ldr	r3, [pc, #344]	; (8001734 <move_rotor+0x284>)
 80015dc:	2200      	movs	r2, #0
 80015de:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80015e0:	4b54      	ldr	r3, [pc, #336]	; (8001734 <move_rotor+0x284>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = 0;
 80015e6:	4b54      	ldr	r3, [pc, #336]	; (8001738 <move_rotor+0x288>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34

	/////////////////////////////////
	// Перенастройка шима на фазах

	if(U_PWM >= 0) { // if, т. к. позитивными и негативными ключами управляют разные каналы таймеров
 80015ec:	4b4c      	ldr	r3, [pc, #304]	; (8001720 <move_rotor+0x270>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f04f 0100 	mov.w	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fd75 	bl	80010e4 <__aeabi_fcmpge>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d010      	beq.n	8001622 <move_rotor+0x172>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001600:	2100      	movs	r1, #0
 8001602:	484e      	ldr	r0, [pc, #312]	; (800173c <move_rotor+0x28c>)
 8001604:	f005 fdf0 	bl	80071e8 <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR1 = U_PWM;
 8001608:	4b45      	ldr	r3, [pc, #276]	; (8001720 <move_rotor+0x270>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4c49      	ldr	r4, [pc, #292]	; (8001734 <move_rotor+0x284>)
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fd7c 	bl	800110c <__aeabi_f2uiz>
 8001614:	4603      	mov	r3, r0
 8001616:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001618:	2100      	movs	r1, #0
 800161a:	4848      	ldr	r0, [pc, #288]	; (800173c <move_rotor+0x28c>)
 800161c:	f004 fe78 	bl	8006310 <HAL_TIM_PWM_Start>
 8001620:	e011      	b.n	8001646 <move_rotor+0x196>
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001622:	2100      	movs	r1, #0
 8001624:	4845      	ldr	r0, [pc, #276]	; (800173c <move_rotor+0x28c>)
 8001626:	f004 feb1 	bl	800638c <HAL_TIM_PWM_Stop>
		TIM1->CCR1 = -U_PWM;
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <move_rotor+0x270>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001632:	4c40      	ldr	r4, [pc, #256]	; (8001734 <move_rotor+0x284>)
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fd69 	bl	800110c <__aeabi_f2uiz>
 800163a:	4603      	mov	r3, r0
 800163c:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800163e:	2100      	movs	r1, #0
 8001640:	483e      	ldr	r0, [pc, #248]	; (800173c <move_rotor+0x28c>)
 8001642:	f005 fda7 	bl	8007194 <HAL_TIMEx_PWMN_Start>
	}

	if(V_PWM >= 0) {
 8001646:	4b38      	ldr	r3, [pc, #224]	; (8001728 <move_rotor+0x278>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f04f 0100 	mov.w	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fd48 	bl	80010e4 <__aeabi_fcmpge>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d010      	beq.n	800167c <move_rotor+0x1cc>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800165a:	2104      	movs	r1, #4
 800165c:	4837      	ldr	r0, [pc, #220]	; (800173c <move_rotor+0x28c>)
 800165e:	f005 fdc3 	bl	80071e8 <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR2 = V_PWM;
 8001662:	4b31      	ldr	r3, [pc, #196]	; (8001728 <move_rotor+0x278>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4c33      	ldr	r4, [pc, #204]	; (8001734 <move_rotor+0x284>)
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fd4f 	bl	800110c <__aeabi_f2uiz>
 800166e:	4603      	mov	r3, r0
 8001670:	63a3      	str	r3, [r4, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001672:	2104      	movs	r1, #4
 8001674:	4831      	ldr	r0, [pc, #196]	; (800173c <move_rotor+0x28c>)
 8001676:	f004 fe4b 	bl	8006310 <HAL_TIM_PWM_Start>
 800167a:	e011      	b.n	80016a0 <move_rotor+0x1f0>
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800167c:	2104      	movs	r1, #4
 800167e:	482f      	ldr	r0, [pc, #188]	; (800173c <move_rotor+0x28c>)
 8001680:	f004 fe84 	bl	800638c <HAL_TIM_PWM_Stop>
		TIM1->CCR2 = -V_PWM;
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <move_rotor+0x278>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800168c:	4c29      	ldr	r4, [pc, #164]	; (8001734 <move_rotor+0x284>)
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fd3c 	bl	800110c <__aeabi_f2uiz>
 8001694:	4603      	mov	r3, r0
 8001696:	63a3      	str	r3, [r4, #56]	; 0x38
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001698:	2104      	movs	r1, #4
 800169a:	4828      	ldr	r0, [pc, #160]	; (800173c <move_rotor+0x28c>)
 800169c:	f005 fd7a 	bl	8007194 <HAL_TIMEx_PWMN_Start>
	}

	if(W_PWM >= 0) {
 80016a0:	4b23      	ldr	r3, [pc, #140]	; (8001730 <move_rotor+0x280>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f04f 0100 	mov.w	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fd1b 	bl	80010e4 <__aeabi_fcmpge>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d010      	beq.n	80016d6 <move_rotor+0x226>
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 80016b4:	2100      	movs	r1, #0
 80016b6:	4822      	ldr	r0, [pc, #136]	; (8001740 <move_rotor+0x290>)
 80016b8:	f005 fd96 	bl	80071e8 <HAL_TIMEx_PWMN_Stop>
		TIM8->CCR1 = W_PWM;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <move_rotor+0x280>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4c1d      	ldr	r4, [pc, #116]	; (8001738 <move_rotor+0x288>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fd22 	bl	800110c <__aeabi_f2uiz>
 80016c8:	4603      	mov	r3, r0
 80016ca:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80016cc:	2100      	movs	r1, #0
 80016ce:	481c      	ldr	r0, [pc, #112]	; (8001740 <move_rotor+0x290>)
 80016d0:	f004 fe1e 	bl	8006310 <HAL_TIM_PWM_Start>
 80016d4:	e011      	b.n	80016fa <move_rotor+0x24a>
	}
	else {
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80016d6:	2100      	movs	r1, #0
 80016d8:	4819      	ldr	r0, [pc, #100]	; (8001740 <move_rotor+0x290>)
 80016da:	f004 fe57 	bl	800638c <HAL_TIM_PWM_Stop>
		TIM8->CCR1 = -W_PWM;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <move_rotor+0x280>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016e6:	4c14      	ldr	r4, [pc, #80]	; (8001738 <move_rotor+0x288>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fd0f 	bl	800110c <__aeabi_f2uiz>
 80016ee:	4603      	mov	r3, r0
 80016f0:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 80016f2:	2100      	movs	r1, #0
 80016f4:	4812      	ldr	r0, [pc, #72]	; (8001740 <move_rotor+0x290>)
 80016f6:	f005 fd4d 	bl	8007194 <HAL_TIMEx_PWMN_Start>
	}

	// Сброс счетчиков таймеров для синхронизации
	TIM1->CNT = 0;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <move_rotor+0x284>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = 0;
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <move_rotor+0x288>)
 8001702:	2200      	movs	r2, #0
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
	return;
 8001706:	bf00      	nop
}
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	54442d18 	.word	0x54442d18
 8001714:	400921fb 	.word	0x400921fb
 8001718:	20000000 	.word	0x20000000
 800171c:	40668000 	.word	0x40668000
 8001720:	20000058 	.word	0x20000058
 8001724:	42f00000 	.word	0x42f00000
 8001728:	2000005c 	.word	0x2000005c
 800172c:	43700000 	.word	0x43700000
 8001730:	20000064 	.word	0x20000064
 8001734:	40010000 	.word	0x40010000
 8001738:	40010400 	.word	0x40010400
 800173c:	200002a4 	.word	0x200002a4
 8001740:	2000013c 	.word	0x2000013c

08001744 <motor_control>:

// Функция, управляющая последовательностью переключением обмоток двигателя
float offset = -60;
void motor_control(uint8_t command, uint16_t pwm) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	460a      	mov	r2, r1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	4613      	mov	r3, r2
 8001752:	80bb      	strh	r3, [r7, #4]
	switch (command) {
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d05b      	beq.n	8001812 <motor_control+0xce>
 800175a:	2b02      	cmp	r3, #2
 800175c:	d172      	bne.n	8001844 <motor_control+0x100>
		case Eright:
			switch (step) {
 800175e:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <motor_control+0x10c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	3b01      	subs	r3, #1
 8001764:	2b05      	cmp	r3, #5
 8001766:	d852      	bhi.n	800180e <motor_control+0xca>
 8001768:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <motor_control+0x2c>)
 800176a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176e:	bf00      	nop
 8001770:	080017f9 	.word	0x080017f9
 8001774:	080017cd 	.word	0x080017cd
 8001778:	080017e3 	.word	0x080017e3
 800177c:	080017a1 	.word	0x080017a1
 8001780:	08001789 	.word	0x08001789
 8001784:	080017b7 	.word	0x080017b7
			case 0b101:
				move_rotor(0 + offset);
 8001788:	4b32      	ldr	r3, [pc, #200]	; (8001854 <motor_control+0x110>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f04f 0100 	mov.w	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff f9ed 	bl	8000b70 <__addsf3>
 8001796:	4603      	mov	r3, r0
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fe89 	bl	80014b0 <move_rotor>
				break;
 800179e:	e037      	b.n	8001810 <motor_control+0xcc>
			case 0b100:
				move_rotor(60 + offset);
 80017a0:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <motor_control+0x110>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	492c      	ldr	r1, [pc, #176]	; (8001858 <motor_control+0x114>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f9e2 	bl	8000b70 <__addsf3>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fe7e 	bl	80014b0 <move_rotor>
				break;
 80017b4:	e02c      	b.n	8001810 <motor_control+0xcc>
			case 0b110:
				move_rotor(120 + offset);
 80017b6:	4b27      	ldr	r3, [pc, #156]	; (8001854 <motor_control+0x110>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4928      	ldr	r1, [pc, #160]	; (800185c <motor_control+0x118>)
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f9d7 	bl	8000b70 <__addsf3>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fe73 	bl	80014b0 <move_rotor>
				break;
 80017ca:	e021      	b.n	8001810 <motor_control+0xcc>
			case 0b010:
				move_rotor(180 + offset);
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <motor_control+0x110>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4923      	ldr	r1, [pc, #140]	; (8001860 <motor_control+0x11c>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f9cc 	bl	8000b70 <__addsf3>
 80017d8:	4603      	mov	r3, r0
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fe68 	bl	80014b0 <move_rotor>
				break;
 80017e0:	e016      	b.n	8001810 <motor_control+0xcc>
			case 0b011:
				move_rotor(240 + offset);
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <motor_control+0x110>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	491f      	ldr	r1, [pc, #124]	; (8001864 <motor_control+0x120>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff f9c1 	bl	8000b70 <__addsf3>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe5d 	bl	80014b0 <move_rotor>
				break;
 80017f6:	e00b      	b.n	8001810 <motor_control+0xcc>
			case 0b001:
				move_rotor(300 + offset);
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <motor_control+0x110>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	491a      	ldr	r1, [pc, #104]	; (8001868 <motor_control+0x124>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f9b6 	bl	8000b70 <__addsf3>
 8001804:	4603      	mov	r3, r0
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fe52 	bl	80014b0 <move_rotor>
				break;
 800180c:	e000      	b.n	8001810 <motor_control+0xcc>

			default:
				break;
 800180e:	bf00      	nop
			}
			break;
 8001810:	e019      	b.n	8001846 <motor_control+0x102>

		case Estop:
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001812:	2100      	movs	r1, #0
 8001814:	4815      	ldr	r0, [pc, #84]	; (800186c <motor_control+0x128>)
 8001816:	f004 fdb9 	bl	800638c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800181a:	2100      	movs	r1, #0
 800181c:	4813      	ldr	r0, [pc, #76]	; (800186c <motor_control+0x128>)
 800181e:	f005 fce3 	bl	80071e8 <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001822:	2104      	movs	r1, #4
 8001824:	4811      	ldr	r0, [pc, #68]	; (800186c <motor_control+0x128>)
 8001826:	f004 fdb1 	bl	800638c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800182a:	2104      	movs	r1, #4
 800182c:	480f      	ldr	r0, [pc, #60]	; (800186c <motor_control+0x128>)
 800182e:	f005 fcdb 	bl	80071e8 <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001832:	2100      	movs	r1, #0
 8001834:	480e      	ldr	r0, [pc, #56]	; (8001870 <motor_control+0x12c>)
 8001836:	f004 fda9 	bl	800638c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 800183a:	2100      	movs	r1, #0
 800183c:	480c      	ldr	r0, [pc, #48]	; (8001870 <motor_control+0x12c>)
 800183e:	f005 fcd3 	bl	80071e8 <HAL_TIMEx_PWMN_Stop>
			break;
 8001842:	e000      	b.n	8001846 <motor_control+0x102>
//			}
//
//			break;

		default:
			break;
 8001844:	bf00      	nop
	}
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000038 	.word	0x20000038
 8001854:	2000000c 	.word	0x2000000c
 8001858:	42700000 	.word	0x42700000
 800185c:	42f00000 	.word	0x42f00000
 8001860:	43340000 	.word	0x43340000
 8001864:	43700000 	.word	0x43700000
 8001868:	43960000 	.word	0x43960000
 800186c:	200002a4 	.word	0x200002a4
 8001870:	2000013c 	.word	0x2000013c

08001874 <cur_sector>:

// Чтение показателей датчиков Холла
void cur_sector() {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	hal_U = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 8001878:	2120      	movs	r1, #32
 800187a:	4815      	ldr	r0, [pc, #84]	; (80018d0 <cur_sector+0x5c>)
 800187c:	f002 fbb0 	bl	8003fe0 <HAL_GPIO_ReadPin>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <cur_sector+0x60>)
 8001886:	701a      	strb	r2, [r3, #0]
	hal_V = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8001888:	2101      	movs	r1, #1
 800188a:	4811      	ldr	r0, [pc, #68]	; (80018d0 <cur_sector+0x5c>)
 800188c:	f002 fba8 	bl	8003fe0 <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <cur_sector+0x64>)
 8001896:	701a      	strb	r2, [r3, #0]
	hal_W = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 8001898:	2102      	movs	r1, #2
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <cur_sector+0x5c>)
 800189c:	f002 fba0 	bl	8003fe0 <HAL_GPIO_ReadPin>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <cur_sector+0x68>)
 80018a6:	701a      	strb	r2, [r3, #0]
	step = (hal_W) | (hal_V << 1) | (hal_U << 2);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <cur_sector+0x64>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b25a      	sxtb	r2, r3
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <cur_sector+0x68>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b25a      	sxtb	r2, r3
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <cur_sector+0x60>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	4313      	orrs	r3, r2
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <cur_sector+0x6c>)
 80018ca:	701a      	strb	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40020000 	.word	0x40020000
 80018d4:	20000060 	.word	0x20000060
 80018d8:	20000068 	.word	0x20000068
 80018dc:	20000070 	.word	0x20000070
 80018e0:	20000038 	.word	0x20000038

080018e4 <HAL_GPIO_EXTI_Callback>:


// Обработчик прерываний датчиков Холла
float currnetAngle = 0;
float angle = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	dc02      	bgt.n	80018fa <HAL_GPIO_EXTI_Callback+0x16>
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	dc02      	bgt.n	80018fe <HAL_GPIO_EXTI_Callback+0x1a>
			cur_sector();
			motor_control(Eright, pwm);
		}
		break;
	}
}
 80018f8:	e018      	b.n	800192c <HAL_GPIO_EXTI_Callback+0x48>
	switch(GPIO_Pin) {
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	d116      	bne.n	800192c <HAL_GPIO_EXTI_Callback+0x48>
		if (START_FLAG!=0){
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_GPIO_EXTI_Callback+0x50>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d011      	beq.n	800192a <HAL_GPIO_EXTI_Callback+0x46>
			cnt_hall += 1;
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <HAL_GPIO_EXTI_Callback+0x54>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	3301      	adds	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_GPIO_EXTI_Callback+0x54>)
 8001910:	801a      	strh	r2, [r3, #0]
			angle = currnetAngle;
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_GPIO_EXTI_Callback+0x58>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001918:	6013      	str	r3, [r2, #0]
			cur_sector();
 800191a:	f7ff ffab 	bl	8001874 <cur_sector>
			motor_control(Eright, pwm);
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_GPIO_EXTI_Callback+0x60>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	4619      	mov	r1, r3
 8001924:	2002      	movs	r0, #2
 8001926:	f7ff ff0d 	bl	8001744 <motor_control>
		break;
 800192a:	bf00      	nop
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000039 	.word	0x20000039
 8001938:	20000044 	.word	0x20000044
 800193c:	20000048 	.word	0x20000048
 8001940:	2000004c 	.word	0x2000004c
 8001944:	20000000 	.word	0x20000000

08001948 <calculateSpeed>:

#define PULSES_PER_REVOLUTION 	6
#define GEAR_RATIO 				28 // Передаточное число
#define STEPS_REDUCER 			2

void calculateSpeed() {
 8001948:	b598      	push	{r3, r4, r7, lr}
 800194a:	af00      	add	r7, sp, #0
	currentSpeed = cnt_hall * 60 / (336 * pid_time / 1000); // Текущая скорость в об/мин. Расчет: cnt_hall * 3.571428 = 60 c * cnt_hall / 16.8 = , где  16.8 = 336 * 0.05 - кол-во прерываний датчика холла за 0.05 с, для вращения со скоростью 1 об/с
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <calculateSpeed+0x4c>)
 800194e:	881b      	ldrh	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f9bc 	bl	8000cd8 <__aeabi_i2f>
 8001960:	4604      	mov	r4, r0
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <calculateSpeed+0x50>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	490d      	ldr	r1, [pc, #52]	; (800199c <calculateSpeed+0x54>)
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fa09 	bl	8000d80 <__aeabi_fmul>
 800196e:	4603      	mov	r3, r0
 8001970:	490b      	ldr	r1, [pc, #44]	; (80019a0 <calculateSpeed+0x58>)
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fab8 	bl	8000ee8 <__aeabi_fdiv>
 8001978:	4603      	mov	r3, r0
 800197a:	4619      	mov	r1, r3
 800197c:	4620      	mov	r0, r4
 800197e:	f7ff fab3 	bl	8000ee8 <__aeabi_fdiv>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <calculateSpeed+0x5c>)
 8001988:	601a      	str	r2, [r3, #0]
	cnt_hall = 0; // Сброс счетчика импульсов
 800198a:	4b02      	ldr	r3, [pc, #8]	; (8001994 <calculateSpeed+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	801a      	strh	r2, [r3, #0]
}
 8001990:	bf00      	nop
 8001992:	bd98      	pop	{r3, r4, r7, pc}
 8001994:	20000044 	.word	0x20000044
 8001998:	20000040 	.word	0x20000040
 800199c:	43a80000 	.word	0x43a80000
 80019a0:	447a0000 	.word	0x447a0000
 80019a4:	2000003c 	.word	0x2000003c

080019a8 <calculatePID>:

void calculatePID() {
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
    error = targetRPM - currentSpeed;
 80019ae:	4b51      	ldr	r3, [pc, #324]	; (8001af4 <calculatePID+0x14c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a51      	ldr	r2, [pc, #324]	; (8001af8 <calculatePID+0x150>)
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f8d7 	bl	8000b6c <__aeabi_fsub>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b4e      	ldr	r3, [pc, #312]	; (8001afc <calculatePID+0x154>)
 80019c4:	601a      	str	r2, [r3, #0]
    integral += error;
 80019c6:	4b4e      	ldr	r3, [pc, #312]	; (8001b00 <calculatePID+0x158>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a4c      	ldr	r2, [pc, #304]	; (8001afc <calculatePID+0x154>)
 80019cc:	6812      	ldr	r2, [r2, #0]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff f8cd 	bl	8000b70 <__addsf3>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461a      	mov	r2, r3
 80019da:	4b49      	ldr	r3, [pc, #292]	; (8001b00 <calculatePID+0x158>)
 80019dc:	601a      	str	r2, [r3, #0]
    derivative = error - lastError;
 80019de:	4b47      	ldr	r3, [pc, #284]	; (8001afc <calculatePID+0x154>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a48      	ldr	r2, [pc, #288]	; (8001b04 <calculatePID+0x15c>)
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff f8bf 	bl	8000b6c <__aeabi_fsub>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <calculatePID+0x160>)
 80019f4:	601a      	str	r2, [r3, #0]

    float tmp_pwm = Kp*error + Ki*integral + Kd*derivative;
 80019f6:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <calculatePID+0x164>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a40      	ldr	r2, [pc, #256]	; (8001afc <calculatePID+0x154>)
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f9bd 	bl	8000d80 <__aeabi_fmul>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461c      	mov	r4, r3
 8001a0a:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <calculatePID+0x168>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a3c      	ldr	r2, [pc, #240]	; (8001b00 <calculatePID+0x158>)
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff f9b3 	bl	8000d80 <__aeabi_fmul>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f7ff f8a6 	bl	8000b70 <__addsf3>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461c      	mov	r4, r3
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <calculatePID+0x16c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a36      	ldr	r2, [pc, #216]	; (8001b08 <calculatePID+0x160>)
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f9a4 	bl	8000d80 <__aeabi_fmul>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff f897 	bl	8000b70 <__addsf3>
 8001a42:	4603      	mov	r3, r0
 8001a44:	607b      	str	r3, [r7, #4]
    if ((tmp_pwm - pwm) > 0) {
 8001a46:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <calculatePID+0x170>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f944 	bl	8000cd8 <__aeabi_i2f>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4619      	mov	r1, r3
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff f889 	bl	8000b6c <__aeabi_fsub>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	f04f 0100 	mov.w	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fb49 	bl	80010f8 <__aeabi_fcmpgt>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d018      	beq.n	8001a9e <calculatePID+0xf6>
    	if ((tmp_pwm - pwm) > 50) {
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <calculatePID+0x170>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff f931 	bl	8000cd8 <__aeabi_i2f>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4619      	mov	r1, r3
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff f876 	bl	8000b6c <__aeabi_fsub>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4926      	ldr	r1, [pc, #152]	; (8001b1c <calculatePID+0x174>)
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fb37 	bl	80010f8 <__aeabi_fcmpgt>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01e      	beq.n	8001ace <calculatePID+0x126>
    		pwm += 50;
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <calculatePID+0x170>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	3332      	adds	r3, #50	; 0x32
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <calculatePID+0x170>)
 8001a9a:	801a      	strh	r2, [r3, #0]
 8001a9c:	e017      	b.n	8001ace <calculatePID+0x126>
    	}
    }
    else {
		if ((tmp_pwm - pwm) < -50) {
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <calculatePID+0x170>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f918 	bl	8000cd8 <__aeabi_i2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff f85d 	bl	8000b6c <__aeabi_fsub>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	491a      	ldr	r1, [pc, #104]	; (8001b20 <calculatePID+0x178>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fb00 	bl	80010bc <__aeabi_fcmplt>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <calculatePID+0x126>
			pwm -= 50;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <calculatePID+0x170>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	3b32      	subs	r3, #50	; 0x32
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <calculatePID+0x170>)
 8001acc:	801a      	strh	r2, [r3, #0]
		}
    }
    if (pwm > 3751) pwm = 3751;
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <calculatePID+0x170>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	f640 62a7 	movw	r2, #3751	; 0xea7
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d903      	bls.n	8001ae2 <calculatePID+0x13a>
 8001ada:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <calculatePID+0x170>)
 8001adc:	f640 62a7 	movw	r2, #3751	; 0xea7
 8001ae0:	801a      	strh	r2, [r3, #0]
    if (pwm < 0) pwm = 2700;
    lastError = error;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <calculatePID+0x154>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <calculatePID+0x15c>)
 8001ae8:	6013      	str	r3, [r2, #0]
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd90      	pop	{r4, r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000008 	.word	0x20000008
 8001af8:	2000003c 	.word	0x2000003c
 8001afc:	20000078 	.word	0x20000078
 8001b00:	20000084 	.word	0x20000084
 8001b04:	2000006c 	.word	0x2000006c
 8001b08:	20000050 	.word	0x20000050
 8001b0c:	2000007c 	.word	0x2000007c
 8001b10:	20000054 	.word	0x20000054
 8001b14:	20000074 	.word	0x20000074
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	42480000 	.word	0x42480000
 8001b20:	c2480000 	.word	0xc2480000
 8001b24:	00000000 	.word	0x00000000

08001b28 <HAL_TIM_PeriodElapsedCallback>:

bool angleFlag = 0;
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	if (htim == &htim14) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d140      	bne.n	8001bba <HAL_TIM_PeriodElapsedCallback+0x92>
		pid_time += 0.5; // 0.5 мс - период таймера 14. Расчет: (TIM_ARR * TIM_PSC) / TIM_FREQ / ) = ((499+1) * (59+1)) / 60 000 000 = 0,0005 с = 0.5 мс
 8001b38:	4b26      	ldr	r3, [pc, #152]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff f815 	bl	8000b70 <__addsf3>
 8001b46:	4603      	mov	r3, r0
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4b22      	ldr	r3, [pc, #136]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b4c:	601a      	str	r2, [r3, #0]
		if (((pid_time >= TIME_INTERVAL_MS)&&(cnt_hall >= 5))||(pid_time >= 2000)) {
 8001b4e:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fac3 	bl	80010e4 <__aeabi_fcmpge>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_TIM_PeriodElapsedCallback+0x44>
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d809      	bhi.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x58>
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	491b      	ldr	r1, [pc, #108]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fab6 	bl	80010e4 <__aeabi_fcmpge>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d100      	bne.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x58>
			calculatePID();
			motor_control(Eright, pwm);
			pid_time = TIM14->CNT*0.001;
		}
	}
}
 8001b7e:	e01c      	b.n	8001bba <HAL_TIM_PeriodElapsedCallback+0x92>
			calculateSpeed();
 8001b80:	f7ff fee2 	bl	8001948 <calculateSpeed>
			calculatePID();
 8001b84:	f7ff ff10 	bl	80019a8 <calculatePID>
			motor_control(Eright, pwm);
 8001b88:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	2002      	movs	r0, #2
 8001b90:	f7ff fdd8 	bl	8001744 <motor_control>
			pid_time = TIM14->CNT*0.001;
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fc57 	bl	800044c <__aeabi_ui2d>
 8001b9e:	a30a      	add	r3, pc, #40	; (adr r3, 8001bc8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fccc 	bl	8000540 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7fe ff88 	bl	8000ac4 <__aeabi_d2f>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a07      	ldr	r2, [pc, #28]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bcc:	3f50624d 	.word	0x3f50624d
 8001bd0:	200002e4 	.word	0x200002e4
 8001bd4:	20000040 	.word	0x20000040
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	20000044 	.word	0x20000044
 8001be0:	44fa0000 	.word	0x44fa0000
 8001be4:	20000000 	.word	0x20000000
 8001be8:	40002000 	.word	0x40002000

08001bec <start>:

//////////////////////////////////////////////////
//////////////////////////////////////////////////

// функция - инициализация
void start(){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	initialize_PID_constants();
 8001bf0:	f7ff fc28 	bl	8001444 <initialize_PID_constants>
	START_FLAG=1;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <start+0x28>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim14);
 8001bfa:	4807      	ldr	r0, [pc, #28]	; (8001c18 <start+0x2c>)
 8001bfc:	f004 fafd 	bl	80061fa <HAL_TIM_Base_Start_IT>
	cur_sector();
 8001c00:	f7ff fe38 	bl	8001874 <cur_sector>
	motor_control(Eright, pwm);
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <start+0x30>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f7ff fd9a 	bl	8001744 <motor_control>
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000039 	.word	0x20000039
 8001c18:	200002e4 	.word	0x200002e4
 8001c1c:	20000000 	.word	0x20000000

08001c20 <loop>:

// Бесконечный цикл
void loop(){
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0

}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c30:	f000 ffd8 	bl	8002be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c34:	f000 f817 	bl	8001c66 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c38:	f000 fb3e 	bl	80022b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c3c:	f000 fb06 	bl	800224c <MX_DMA_Init>
  MX_ADC1_Init();
 8001c40:	f000 f858 	bl	8001cf4 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001c44:	f000 f8c0 	bl	8001dc8 <MX_I2C3_Init>
  MX_TIM1_Init();
 8001c48:	f000 f8ec 	bl	8001e24 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001c4c:	f000 f9ea 	bl	8002024 <MX_TIM8_Init>
  MX_TIM14_Init();
 8001c50:	f000 fa88 	bl	8002164 <MX_TIM14_Init>
  MX_USART3_UART_Init();
 8001c54:	f000 fad0 	bl	80021f8 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001c58:	f000 f990 	bl	8001f7c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  start();
 8001c5c:	f7ff ffc6 	bl	8001bec <start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001c60:	f7ff ffde 	bl	8001c20 <loop>
 8001c64:	e7fc      	b.n	8001c60 <main+0x34>

08001c66 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b092      	sub	sp, #72	; 0x48
 8001c6a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6c:	f107 0318 	add.w	r3, r7, #24
 8001c70:	2230      	movs	r2, #48	; 0x30
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f006 f803 	bl	8007c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c90:	2302      	movs	r3, #2
 8001c92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001c9e:	23f0      	movs	r3, #240	; 0xf0
 8001ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001caa:	f107 0318 	add.w	r3, r7, #24
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 fdf2 	bl	8005898 <HAL_RCC_OscConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001cba:	f000 fb99 	bl	80023f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cbe:	230f      	movs	r3, #15
 8001cc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2103      	movs	r1, #3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f004 f846 	bl	8005d6c <HAL_RCC_ClockConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001ce6:	f000 fb83 	bl	80023f0 <Error_Handler>
  }
}
 8001cea:	bf00      	nop
 8001cec:	3748      	adds	r7, #72	; 0x48
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d06:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d08:	4a2d      	ldr	r2, [pc, #180]	; (8001dc0 <MX_ADC1_Init+0xcc>)
 8001d0a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d1e:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d30:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d32:	4a24      	ldr	r2, [pc, #144]	; (8001dc4 <MX_ADC1_Init+0xd0>)
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d3e:	2203      	movs	r2, #3
 8001d40:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d4e:	481b      	ldr	r0, [pc, #108]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d50:	f000 ffb6 	bl	8002cc0 <HAL_ADC_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 8001d5a:	f000 fb49 	bl	80023f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d6a:	463b      	mov	r3, r7
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4813      	ldr	r0, [pc, #76]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d70:	f001 f946 	bl	8003000 <HAL_ADC_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001d7a:	f000 fb39 	bl	80023f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d82:	2302      	movs	r3, #2
 8001d84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d86:	463b      	mov	r3, r7
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480c      	ldr	r0, [pc, #48]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001d8c:	f001 f938 	bl	8003000 <HAL_ADC_ConfigChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001d96:	f000 fb2b 	bl	80023f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d9e:	463b      	mov	r3, r7
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <MX_ADC1_Init+0xc8>)
 8001da4:	f001 f92c 	bl	8003000 <HAL_ADC_ConfigChannel>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8001dae:	f000 fb1f 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200001fc 	.word	0x200001fc
 8001dc0:	40012000 	.word	0x40012000
 8001dc4:	0f000001 	.word	0x0f000001

08001dc8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <MX_I2C3_Init+0x50>)
 8001dce:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <MX_I2C3_Init+0x54>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_I2C3_Init+0x50>)
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <MX_I2C3_Init+0x58>)
 8001dd6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_I2C3_Init+0x50>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_I2C3_Init+0x50>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_I2C3_Init+0x50>)
 8001de6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dec:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <MX_I2C3_Init+0x50>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001df2:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_I2C3_Init+0x50>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <MX_I2C3_Init+0x50>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_I2C3_Init+0x50>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e04:	4804      	ldr	r0, [pc, #16]	; (8001e18 <MX_I2C3_Init+0x50>)
 8001e06:	f002 f91b 	bl	8004040 <HAL_I2C_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e10:	f000 faee 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200000e8 	.word	0x200000e8
 8001e1c:	40005c00 	.word	0x40005c00
 8001e20:	000186a0 	.word	0x000186a0

08001e24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b096      	sub	sp, #88	; 0x58
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]
 8001e52:	615a      	str	r2, [r3, #20]
 8001e54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2220      	movs	r2, #32
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f005 ff0f 	bl	8007c80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e62:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001e64:	4a44      	ldr	r2, [pc, #272]	; (8001f78 <MX_TIM1_Init+0x154>)
 8001e66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e68:	4b42      	ldr	r3, [pc, #264]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001e70:	2220      	movs	r2, #32
 8001e72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3750;
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001e76:	f640 62a6 	movw	r2, #3750	; 0xea6
 8001e7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7c:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e82:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e88:	4b3a      	ldr	r3, [pc, #232]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e8e:	4839      	ldr	r0, [pc, #228]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001e90:	f004 f988 	bl	80061a4 <HAL_TIM_Base_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001e9a:	f000 faa9 	bl	80023f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ea4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4832      	ldr	r0, [pc, #200]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001eac:	f004 fd86 	bl	80069bc <HAL_TIM_ConfigClockSource>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001eb6:	f000 fa9b 	bl	80023f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001eba:	482e      	ldr	r0, [pc, #184]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001ebc:	f004 f9f4 	bl	80062a8 <HAL_TIM_PWM_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001ec6:	f000 fa93 	bl	80023f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ed2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4826      	ldr	r0, [pc, #152]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001eda:	f005 f9c6 	bl	800726a <HAL_TIMEx_MasterConfigSynchronization>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ee4:	f000 fa84 	bl	80023f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee8:	2360      	movs	r3, #96	; 0x60
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4819      	ldr	r0, [pc, #100]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001f0e:	f004 fc8f 	bl	8006830 <HAL_TIM_PWM_ConfigChannel>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001f18:	f000 fa6a 	bl	80023f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f20:	2204      	movs	r2, #4
 8001f22:	4619      	mov	r1, r3
 8001f24:	4813      	ldr	r0, [pc, #76]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001f26:	f004 fc83 	bl	8006830 <HAL_TIM_PWM_ConfigChannel>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001f30:	f000 fa5e 	bl	80023f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	4619      	mov	r1, r3
 8001f56:	4807      	ldr	r0, [pc, #28]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001f58:	f005 f9cb 	bl	80072f2 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001f62:	f000 fa45 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f66:	4803      	ldr	r0, [pc, #12]	; (8001f74 <MX_TIM1_Init+0x150>)
 8001f68:	f000 fc7e 	bl	8002868 <HAL_TIM_MspPostInit>

}
 8001f6c:	bf00      	nop
 8001f6e:	3758      	adds	r7, #88	; 0x58
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	200002a4 	.word	0x200002a4
 8001f78:	40010000 	.word	0x40010000

08001f7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	; 0x30
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	2224      	movs	r2, #36	; 0x24
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f005 fe78 	bl	8007c80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f90:	1d3b      	adds	r3, r7, #4
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f98:	4b20      	ldr	r3, [pc, #128]	; (800201c <MX_TIM4_Init+0xa0>)
 8001f9a:	4a21      	ldr	r2, [pc, #132]	; (8002020 <MX_TIM4_Init+0xa4>)
 8001f9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fb8:	4b18      	ldr	r3, [pc, #96]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001fce:	230a      	movs	r3, #10
 8001fd0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001fde:	230a      	movs	r3, #10
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <MX_TIM4_Init+0xa0>)
 8001fea:	f004 fa27 	bl	800643c <HAL_TIM_Encoder_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ff4:	f000 f9fc 	bl	80023f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_TIM4_Init+0xa0>)
 8002006:	f005 f930 	bl	800726a <HAL_TIMEx_MasterConfigSynchronization>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002010:	f000 f9ee 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	3730      	adds	r7, #48	; 0x30
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000017c 	.word	0x2000017c
 8002020:	40000800 	.word	0x40000800

08002024 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b096      	sub	sp, #88	; 0x58
 8002028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002038:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002042:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	611a      	str	r2, [r3, #16]
 8002052:	615a      	str	r2, [r3, #20]
 8002054:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	2220      	movs	r2, #32
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f005 fe0f 	bl	8007c80 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002062:	4b3e      	ldr	r3, [pc, #248]	; (800215c <MX_TIM8_Init+0x138>)
 8002064:	4a3e      	ldr	r2, [pc, #248]	; (8002160 <MX_TIM8_Init+0x13c>)
 8002066:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002068:	4b3c      	ldr	r3, [pc, #240]	; (800215c <MX_TIM8_Init+0x138>)
 800206a:	2200      	movs	r2, #0
 800206c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800206e:	4b3b      	ldr	r3, [pc, #236]	; (800215c <MX_TIM8_Init+0x138>)
 8002070:	2220      	movs	r2, #32
 8002072:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3750;
 8002074:	4b39      	ldr	r3, [pc, #228]	; (800215c <MX_TIM8_Init+0x138>)
 8002076:	f640 62a6 	movw	r2, #3750	; 0xea6
 800207a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207c:	4b37      	ldr	r3, [pc, #220]	; (800215c <MX_TIM8_Init+0x138>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <MX_TIM8_Init+0x138>)
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002088:	4b34      	ldr	r3, [pc, #208]	; (800215c <MX_TIM8_Init+0x138>)
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800208e:	4833      	ldr	r0, [pc, #204]	; (800215c <MX_TIM8_Init+0x138>)
 8002090:	f004 f888 	bl	80061a4 <HAL_TIM_Base_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800209a:	f000 f9a9 	bl	80023f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80020a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020a8:	4619      	mov	r1, r3
 80020aa:	482c      	ldr	r0, [pc, #176]	; (800215c <MX_TIM8_Init+0x138>)
 80020ac:	f004 fc86 	bl	80069bc <HAL_TIM_ConfigClockSource>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80020b6:	f000 f99b 	bl	80023f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80020ba:	4828      	ldr	r0, [pc, #160]	; (800215c <MX_TIM8_Init+0x138>)
 80020bc:	f004 f8f4 	bl	80062a8 <HAL_TIM_PWM_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80020c6:	f000 f993 	bl	80023f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80020d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020d6:	4619      	mov	r1, r3
 80020d8:	4820      	ldr	r0, [pc, #128]	; (800215c <MX_TIM8_Init+0x138>)
 80020da:	f005 f8c6 	bl	800726a <HAL_TIMEx_MasterConfigSynchronization>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80020e4:	f000 f984 	bl	80023f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e8:	2360      	movs	r3, #96	; 0x60
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	2200      	movs	r2, #0
 800210a:	4619      	mov	r1, r3
 800210c:	4813      	ldr	r0, [pc, #76]	; (800215c <MX_TIM8_Init+0x138>)
 800210e:	f004 fb8f 	bl	8006830 <HAL_TIM_PWM_ConfigChannel>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002118:	f000 f96a 	bl	80023f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002124:	2300      	movs	r3, #0
 8002126:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002128:	2380      	movs	r3, #128	; 0x80
 800212a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002134:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4807      	ldr	r0, [pc, #28]	; (800215c <MX_TIM8_Init+0x138>)
 8002140:	f005 f8d7 	bl	80072f2 <HAL_TIMEx_ConfigBreakDeadTime>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800214a:	f000 f951 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800214e:	4803      	ldr	r0, [pc, #12]	; (800215c <MX_TIM8_Init+0x138>)
 8002150:	f000 fb8a 	bl	8002868 <HAL_TIM_MspPostInit>

}
 8002154:	bf00      	nop
 8002156:	3758      	adds	r7, #88	; 0x58
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	2000013c 	.word	0x2000013c
 8002160:	40010400 	.word	0x40010400

08002164 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
 8002178:	615a      	str	r2, [r3, #20]
 800217a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800217c:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <MX_TIM14_Init+0x8c>)
 800217e:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <MX_TIM14_Init+0x90>)
 8002180:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 59;
 8002182:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <MX_TIM14_Init+0x8c>)
 8002184:	223b      	movs	r2, #59	; 0x3b
 8002186:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <MX_TIM14_Init+0x8c>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 800218e:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <MX_TIM14_Init+0x8c>)
 8002190:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002194:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002196:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <MX_TIM14_Init+0x8c>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <MX_TIM14_Init+0x8c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80021a2:	4813      	ldr	r0, [pc, #76]	; (80021f0 <MX_TIM14_Init+0x8c>)
 80021a4:	f003 fffe 	bl	80061a4 <HAL_TIM_Base_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80021ae:	f000 f91f 	bl	80023f0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80021b2:	480f      	ldr	r0, [pc, #60]	; (80021f0 <MX_TIM14_Init+0x8c>)
 80021b4:	f004 f844 	bl	8006240 <HAL_TIM_OC_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80021be:	f000 f917 	bl	80023f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	2200      	movs	r2, #0
 80021d6:	4619      	mov	r1, r3
 80021d8:	4805      	ldr	r0, [pc, #20]	; (80021f0 <MX_TIM14_Init+0x8c>)
 80021da:	f004 fac9 	bl	8006770 <HAL_TIM_OC_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80021e4:	f000 f904 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80021e8:	bf00      	nop
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	200002e4 	.word	0x200002e4
 80021f4:	40002000 	.word	0x40002000

080021f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_USART3_UART_Init+0x4c>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <MX_USART3_UART_Init+0x50>)
 8002200:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <MX_USART3_UART_Init+0x4c>)
 8002204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002208:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_USART3_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_USART3_UART_Init+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_USART3_UART_Init+0x4c>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_USART3_UART_Init+0x4c>)
 800221e:	220c      	movs	r2, #12
 8002220:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_USART3_UART_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_USART3_UART_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_USART3_UART_Init+0x4c>)
 8002230:	f005 f8e6 	bl	8007400 <HAL_UART_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800223a:	f000 f8d9 	bl	80023f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200001bc 	.word	0x200001bc
 8002248:	40004800 	.word	0x40004800

0800224c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <MX_DMA_Init+0x68>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a16      	ldr	r2, [pc, #88]	; (80022b4 <MX_DMA_Init+0x68>)
 800225c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <MX_DMA_Init+0x68>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <MX_DMA_Init+0x68>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <MX_DMA_Init+0x68>)
 8002278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <MX_DMA_Init+0x68>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	200f      	movs	r0, #15
 8002290:	f001 f9bb 	bl	800360a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002294:	200f      	movs	r0, #15
 8002296:	f001 f9d4 	bl	8003642 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	2038      	movs	r0, #56	; 0x38
 80022a0:	f001 f9b3 	bl	800360a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022a4:	2038      	movs	r0, #56	; 0x38
 80022a6:	f001 f9cc 	bl	8003642 <HAL_NVIC_EnableIRQ>

}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08c      	sub	sp, #48	; 0x30
 80022bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022be:	f107 031c 	add.w	r3, r7, #28
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	4b43      	ldr	r3, [pc, #268]	; (80023e0 <MX_GPIO_Init+0x128>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a42      	ldr	r2, [pc, #264]	; (80023e0 <MX_GPIO_Init+0x128>)
 80022d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <MX_GPIO_Init+0x128>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	4b3c      	ldr	r3, [pc, #240]	; (80023e0 <MX_GPIO_Init+0x128>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a3b      	ldr	r2, [pc, #236]	; (80023e0 <MX_GPIO_Init+0x128>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <MX_GPIO_Init+0x128>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	4b35      	ldr	r3, [pc, #212]	; (80023e0 <MX_GPIO_Init+0x128>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a34      	ldr	r2, [pc, #208]	; (80023e0 <MX_GPIO_Init+0x128>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <MX_GPIO_Init+0x128>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b2e      	ldr	r3, [pc, #184]	; (80023e0 <MX_GPIO_Init+0x128>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a2d      	ldr	r2, [pc, #180]	; (80023e0 <MX_GPIO_Init+0x128>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <MX_GPIO_Init+0x128>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <MX_GPIO_Init+0x128>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a26      	ldr	r2, [pc, #152]	; (80023e0 <MX_GPIO_Init+0x128>)
 8002348:	f043 0310 	orr.w	r3, r3, #16
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <MX_GPIO_Init+0x128>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0310 	and.w	r3, r3, #16
 8002356:	60bb      	str	r3, [r7, #8]
 8002358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <MX_GPIO_Init+0x128>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <MX_GPIO_Init+0x128>)
 8002364:	f043 0308 	orr.w	r3, r3, #8
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <MX_GPIO_Init+0x128>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8002376:	2323      	movs	r3, #35	; 0x23
 8002378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_GPIO_Init+0x12c>)
 800237c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	4619      	mov	r1, r3
 8002388:	4817      	ldr	r0, [pc, #92]	; (80023e8 <MX_GPIO_Init+0x130>)
 800238a:	f001 fc8b 	bl	8003ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <MX_GPIO_Init+0x12c>)
 8002394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4619      	mov	r1, r3
 80023a0:	4812      	ldr	r0, [pc, #72]	; (80023ec <MX_GPIO_Init+0x134>)
 80023a2:	f001 fc7f 	bl	8003ca4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2006      	movs	r0, #6
 80023ac:	f001 f92d 	bl	800360a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023b0:	2006      	movs	r0, #6
 80023b2:	f001 f946 	bl	8003642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	2007      	movs	r0, #7
 80023bc:	f001 f925 	bl	800360a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80023c0:	2007      	movs	r0, #7
 80023c2:	f001 f93e 	bl	8003642 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2017      	movs	r0, #23
 80023cc:	f001 f91d 	bl	800360a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023d0:	2017      	movs	r0, #23
 80023d2:	f001 f936 	bl	8003642 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023d6:	bf00      	nop
 80023d8:	3730      	adds	r7, #48	; 0x30
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	10310000 	.word	0x10310000
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020800 	.word	0x40020800

080023f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f4:	b672      	cpsid	i
}
 80023f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <Error_Handler+0x8>
	...

080023fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <HAL_MspInit+0x48>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	4a0e      	ldr	r2, [pc, #56]	; (8002444 <HAL_MspInit+0x48>)
 800240c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002410:	6453      	str	r3, [r2, #68]	; 0x44
 8002412:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_MspInit+0x48>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_MspInit+0x48>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_MspInit+0x48>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_MspInit+0x48>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40023800 	.word	0x40023800

08002448 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	; 0x30
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 031c 	add.w	r3, r7, #28
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a4d      	ldr	r2, [pc, #308]	; (800259c <HAL_ADC_MspInit+0x154>)
 8002466:	4293      	cmp	r3, r2
 8002468:	f040 8094 	bne.w	8002594 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	4a4a      	ldr	r2, [pc, #296]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 8002476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247a:	6453      	str	r3, [r2, #68]	; 0x44
 800247c:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	4b44      	ldr	r3, [pc, #272]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4a43      	ldr	r2, [pc, #268]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6313      	str	r3, [r2, #48]	; 0x30
 8002498:	4b41      	ldr	r3, [pc, #260]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	4a3c      	ldr	r2, [pc, #240]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	6313      	str	r3, [r2, #48]	; 0x30
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	4a35      	ldr	r2, [pc, #212]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 80024ca:	f043 0302 	orr.w	r3, r3, #2
 80024ce:	6313      	str	r3, [r2, #48]	; 0x30
 80024d0:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <HAL_ADC_MspInit+0x158>)
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80024dc:	2338      	movs	r3, #56	; 0x38
 80024de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024e0:	2303      	movs	r3, #3
 80024e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	4619      	mov	r1, r3
 80024ee:	482d      	ldr	r0, [pc, #180]	; (80025a4 <HAL_ADC_MspInit+0x15c>)
 80024f0:	f001 fbd8 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80024f4:	2318      	movs	r3, #24
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024f8:	2303      	movs	r3, #3
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f107 031c 	add.w	r3, r7, #28
 8002504:	4619      	mov	r1, r3
 8002506:	4828      	ldr	r0, [pc, #160]	; (80025a8 <HAL_ADC_MspInit+0x160>)
 8002508:	f001 fbcc 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800250c:	2302      	movs	r3, #2
 800250e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002510:	2303      	movs	r3, #3
 8002512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	4619      	mov	r1, r3
 800251e:	4823      	ldr	r0, [pc, #140]	; (80025ac <HAL_ADC_MspInit+0x164>)
 8002520:	f001 fbc0 	bl	8003ca4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 8002526:	4a23      	ldr	r2, [pc, #140]	; (80025b4 <HAL_ADC_MspInit+0x16c>)
 8002528:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 800252c:	2200      	movs	r2, #0
 800252e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002530:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 8002538:	2200      	movs	r2, #0
 800253a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 800253e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002542:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 8002546:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800254a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800254c:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 800254e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002552:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002554:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 8002556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800255a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800255c:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 800255e:	2200      	movs	r2, #0
 8002560:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002562:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 8002564:	2200      	movs	r2, #0
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002568:	4811      	ldr	r0, [pc, #68]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 800256a:	f001 f885 	bl	8003678 <HAL_DMA_Init>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002574:	f7ff ff3c 	bl	80023f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
 800257e:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <HAL_ADC_MspInit+0x168>)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002584:	2200      	movs	r2, #0
 8002586:	2100      	movs	r1, #0
 8002588:	2012      	movs	r0, #18
 800258a:	f001 f83e 	bl	800360a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800258e:	2012      	movs	r0, #18
 8002590:	f001 f857 	bl	8003642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002594:	bf00      	nop
 8002596:	3730      	adds	r7, #48	; 0x30
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40012000 	.word	0x40012000
 80025a0:	40023800 	.word	0x40023800
 80025a4:	40020800 	.word	0x40020800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	40020400 	.word	0x40020400
 80025b0:	20000244 	.word	0x20000244
 80025b4:	40026410 	.word	0x40026410

080025b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0314 	add.w	r3, r7, #20
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a44      	ldr	r2, [pc, #272]	; (80026e8 <HAL_I2C_MspInit+0x130>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	f040 8082 	bne.w	80026e0 <HAL_I2C_MspInit+0x128>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025dc:	2300      	movs	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	4b42      	ldr	r3, [pc, #264]	; (80026ec <HAL_I2C_MspInit+0x134>)
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	4a41      	ldr	r2, [pc, #260]	; (80026ec <HAL_I2C_MspInit+0x134>)
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	6313      	str	r3, [r2, #48]	; 0x30
 80025ec:	4b3f      	ldr	r3, [pc, #252]	; (80026ec <HAL_I2C_MspInit+0x134>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_I2C_MspInit+0x134>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	4a3a      	ldr	r2, [pc, #232]	; (80026ec <HAL_I2C_MspInit+0x134>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6313      	str	r3, [r2, #48]	; 0x30
 8002608:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_I2C_MspInit+0x134>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002614:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261a:	2312      	movs	r3, #18
 800261c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002622:	2303      	movs	r3, #3
 8002624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002626:	2304      	movs	r3, #4
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	4619      	mov	r1, r3
 8002630:	482f      	ldr	r0, [pc, #188]	; (80026f0 <HAL_I2C_MspInit+0x138>)
 8002632:	f001 fb37 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800263a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800263c:	2312      	movs	r3, #18
 800263e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002644:	2303      	movs	r3, #3
 8002646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002648:	2304      	movs	r3, #4
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4619      	mov	r1, r3
 8002652:	4828      	ldr	r0, [pc, #160]	; (80026f4 <HAL_I2C_MspInit+0x13c>)
 8002654:	f001 fb26 	bl	8003ca4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002658:	2300      	movs	r3, #0
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_I2C_MspInit+0x134>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	4a22      	ldr	r2, [pc, #136]	; (80026ec <HAL_I2C_MspInit+0x134>)
 8002662:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002666:	6413      	str	r3, [r2, #64]	; 0x40
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_I2C_MspInit+0x134>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8002674:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 8002676:	4a21      	ldr	r2, [pc, #132]	; (80026fc <HAL_I2C_MspInit+0x144>)
 8002678:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800267a:	4b1f      	ldr	r3, [pc, #124]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 800267c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002680:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 8002684:	2240      	movs	r2, #64	; 0x40
 8002686:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 8002690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002694:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 8002698:	2200      	movs	r2, #0
 800269a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800269c:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80026b4:	4810      	ldr	r0, [pc, #64]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 80026b6:	f000 ffdf 	bl	8003678 <HAL_DMA_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80026c0:	f7ff fe96 	bl	80023f0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 80026c8:	635a      	str	r2, [r3, #52]	; 0x34
 80026ca:	4a0b      	ldr	r2, [pc, #44]	; (80026f8 <HAL_I2C_MspInit+0x140>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80026d0:	2200      	movs	r2, #0
 80026d2:	2100      	movs	r1, #0
 80026d4:	2048      	movs	r0, #72	; 0x48
 80026d6:	f000 ff98 	bl	800360a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80026da:	2048      	movs	r0, #72	; 0x48
 80026dc:	f000 ffb1 	bl	8003642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80026e0:	bf00      	nop
 80026e2:	3728      	adds	r7, #40	; 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40005c00 	.word	0x40005c00
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40020800 	.word	0x40020800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	20000088 	.word	0x20000088
 80026fc:	40026070 	.word	0x40026070

08002700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2a      	ldr	r2, [pc, #168]	; (80027b8 <HAL_TIM_Base_MspInit+0xb8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d116      	bne.n	8002740 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a28      	ldr	r2, [pc, #160]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b26      	ldr	r3, [pc, #152]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	2019      	movs	r0, #25
 8002734:	f000 ff69 	bl	800360a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002738:	2019      	movs	r0, #25
 800273a:	f000 ff82 	bl	8003642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800273e:	e036      	b.n	80027ae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1e      	ldr	r2, [pc, #120]	; (80027c0 <HAL_TIM_Base_MspInit+0xc0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d116      	bne.n	8002778 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	202d      	movs	r0, #45	; 0x2d
 800276c:	f000 ff4d 	bl	800360a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002770:	202d      	movs	r0, #45	; 0x2d
 8002772:	f000 ff66 	bl	8003642 <HAL_NVIC_EnableIRQ>
}
 8002776:	e01a      	b.n	80027ae <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM14)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <HAL_TIM_Base_MspInit+0xc4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d115      	bne.n	80027ae <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b0d      	ldr	r3, [pc, #52]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	4a0c      	ldr	r2, [pc, #48]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 800278c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002790:	6413      	str	r3, [r2, #64]	; 0x40
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_TIM_Base_MspInit+0xbc>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	202d      	movs	r0, #45	; 0x2d
 80027a4:	f000 ff31 	bl	800360a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80027a8:	202d      	movs	r0, #45	; 0x2d
 80027aa:	f000 ff4a 	bl	8003642 <HAL_NVIC_EnableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40010000 	.word	0x40010000
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40010400 	.word	0x40010400
 80027c4:	40002000 	.word	0x40002000

080027c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1d      	ldr	r2, [pc, #116]	; (800285c <HAL_TIM_Encoder_MspInit+0x94>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d134      	bne.n	8002854 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <HAL_TIM_Encoder_MspInit+0x98>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_TIM_Encoder_MspInit+0x98>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <HAL_TIM_Encoder_MspInit+0x98>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 0304 	and.w	r3, r3, #4
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_TIM_Encoder_MspInit+0x98>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	4a14      	ldr	r2, [pc, #80]	; (8002860 <HAL_TIM_Encoder_MspInit+0x98>)
 8002810:	f043 0308 	orr.w	r3, r3, #8
 8002814:	6313      	str	r3, [r2, #48]	; 0x30
 8002816:	4b12      	ldr	r3, [pc, #72]	; (8002860 <HAL_TIM_Encoder_MspInit+0x98>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002822:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800282c:	2301      	movs	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002834:	2302      	movs	r3, #2
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4619      	mov	r1, r3
 800283e:	4809      	ldr	r0, [pc, #36]	; (8002864 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002840:	f001 fa30 	bl	8003ca4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	201e      	movs	r0, #30
 800284a:	f000 fede 	bl	800360a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800284e:	201e      	movs	r0, #30
 8002850:	f000 fef7 	bl	8003642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40000800 	.word	0x40000800
 8002860:	40023800 	.word	0x40023800
 8002864:	40020c00 	.word	0x40020c00

08002868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a33      	ldr	r2, [pc, #204]	; (8002954 <HAL_TIM_MspPostInit+0xec>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d11f      	bne.n	80028ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	4b32      	ldr	r3, [pc, #200]	; (8002958 <HAL_TIM_MspPostInit+0xf0>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a31      	ldr	r2, [pc, #196]	; (8002958 <HAL_TIM_MspPostInit+0xf0>)
 8002894:	f043 0310 	orr.w	r3, r3, #16
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b2f      	ldr	r3, [pc, #188]	; (8002958 <HAL_TIM_MspPostInit+0xf0>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80028a6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80028aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028b8:	2301      	movs	r3, #1
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	4826      	ldr	r0, [pc, #152]	; (800295c <HAL_TIM_MspPostInit+0xf4>)
 80028c4:	f001 f9ee 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80028c8:	e040      	b.n	800294c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a24      	ldr	r2, [pc, #144]	; (8002960 <HAL_TIM_MspPostInit+0xf8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d13b      	bne.n	800294c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <HAL_TIM_MspPostInit+0xf0>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <HAL_TIM_MspPostInit+0xf0>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6313      	str	r3, [r2, #48]	; 0x30
 80028e4:	4b1c      	ldr	r3, [pc, #112]	; (8002958 <HAL_TIM_MspPostInit+0xf0>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	4b18      	ldr	r3, [pc, #96]	; (8002958 <HAL_TIM_MspPostInit+0xf0>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_TIM_MspPostInit+0xf0>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b15      	ldr	r3, [pc, #84]	; (8002958 <HAL_TIM_MspPostInit+0xf0>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002918:	2300      	movs	r3, #0
 800291a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800291c:	2303      	movs	r3, #3
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	4619      	mov	r1, r3
 8002926:	480f      	ldr	r0, [pc, #60]	; (8002964 <HAL_TIM_MspPostInit+0xfc>)
 8002928:	f001 f9bc 	bl	8003ca4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800292c:	2340      	movs	r3, #64	; 0x40
 800292e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800293c:	2303      	movs	r3, #3
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	4619      	mov	r1, r3
 8002946:	4808      	ldr	r0, [pc, #32]	; (8002968 <HAL_TIM_MspPostInit+0x100>)
 8002948:	f001 f9ac 	bl	8003ca4 <HAL_GPIO_Init>
}
 800294c:	bf00      	nop
 800294e:	3728      	adds	r7, #40	; 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40010000 	.word	0x40010000
 8002958:	40023800 	.word	0x40023800
 800295c:	40021000 	.word	0x40021000
 8002960:	40010400 	.word	0x40010400
 8002964:	40020000 	.word	0x40020000
 8002968:	40020800 	.word	0x40020800

0800296c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1d      	ldr	r2, [pc, #116]	; (8002a00 <HAL_UART_MspInit+0x94>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d134      	bne.n	80029f8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <HAL_UART_MspInit+0x98>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_UART_MspInit+0x98>)
 8002998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800299c:	6413      	str	r3, [r2, #64]	; 0x40
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_UART_MspInit+0x98>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_UART_MspInit+0x98>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <HAL_UART_MspInit+0x98>)
 80029b4:	f043 0308 	orr.w	r3, r3, #8
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_UART_MspInit+0x98>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029d8:	2307      	movs	r3, #7
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	4809      	ldr	r0, [pc, #36]	; (8002a08 <HAL_UART_MspInit+0x9c>)
 80029e4:	f001 f95e 	bl	8003ca4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80029e8:	2200      	movs	r2, #0
 80029ea:	2100      	movs	r1, #0
 80029ec:	2027      	movs	r0, #39	; 0x27
 80029ee:	f000 fe0c 	bl	800360a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029f2:	2027      	movs	r0, #39	; 0x27
 80029f4:	f000 fe25 	bl	8003642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029f8:	bf00      	nop
 80029fa:	3728      	adds	r7, #40	; 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40004800 	.word	0x40004800
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020c00 	.word	0x40020c00

08002a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a10:	e7fe      	b.n	8002a10 <NMI_Handler+0x4>

08002a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a16:	e7fe      	b.n	8002a16 <HardFault_Handler+0x4>

08002a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a1c:	e7fe      	b.n	8002a1c <MemManage_Handler+0x4>

08002a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <BusFault_Handler+0x4>

08002a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <UsageFault_Handler+0x4>

08002a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr

08002a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr

08002a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a52:	f000 f919 	bl	8002c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a5e:	2001      	movs	r0, #1
 8002a60:	f001 fad6 	bl	8004010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002a6c:	2002      	movs	r0, #2
 8002a6e:	f001 facf 	bl	8004010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8002a7c:	4802      	ldr	r0, [pc, #8]	; (8002a88 <DMA1_Stream4_IRQHandler+0x10>)
 8002a7e:	f000 fecb 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	20000088 	.word	0x20000088

08002a8c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <ADC_IRQHandler+0x10>)
 8002a92:	f000 f958 	bl	8002d46 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200001fc 	.word	0x200001fc

08002aa0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002aa4:	2020      	movs	r0, #32
 8002aa6:	f001 fab3 	bl	8004010 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002aaa:	2080      	movs	r0, #128	; 0x80
 8002aac:	f001 fab0 	bl	8004010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002aba:	f003 fd51 	bl	8006560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200002a4 	.word	0x200002a4

08002ac8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002acc:	4802      	ldr	r0, [pc, #8]	; (8002ad8 <TIM4_IRQHandler+0x10>)
 8002ace:	f003 fd47 	bl	8006560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000017c 	.word	0x2000017c

08002adc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ae0:	4802      	ldr	r0, [pc, #8]	; (8002aec <USART3_IRQHandler+0x10>)
 8002ae2:	f004 fcdb 	bl	800749c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200001bc 	.word	0x200001bc

08002af0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002af4:	4803      	ldr	r0, [pc, #12]	; (8002b04 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8002af6:	f003 fd33 	bl	8006560 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8002afa:	4803      	ldr	r0, [pc, #12]	; (8002b08 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002afc:	f003 fd30 	bl	8006560 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	2000013c 	.word	0x2000013c
 8002b08:	200002e4 	.word	0x200002e4

08002b0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <DMA2_Stream0_IRQHandler+0x10>)
 8002b12:	f000 fe81 	bl	8003818 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000244 	.word	0x20000244

08002b20 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <I2C3_EV_IRQHandler+0x10>)
 8002b26:	f001 fbcf 	bl	80042c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200000e8 	.word	0x200000e8

08002b34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <SystemInit+0x50>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a11      	ldr	r2, [pc, #68]	; (8002b84 <SystemInit+0x50>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <SystemInit+0x50>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <SystemInit+0x50>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <SystemInit+0x50>)
 8002b50:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <SystemInit+0x50>)
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <SystemInit+0x54>)
 8002b5e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <SystemInit+0x50>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a07      	ldr	r2, [pc, #28]	; (8002b84 <SystemInit+0x50>)
 8002b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SystemInit+0x50>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <SystemInit+0x58>)
 8002b74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b78:	609a      	str	r2, [r3, #8]
#endif
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800
 8002b88:	24003010 	.word	0x24003010
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b96:	e003      	b.n	8002ba0 <LoopCopyDataInit>

08002b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b98:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b9e:	3104      	adds	r1, #4

08002ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ba0:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ba8:	d3f6      	bcc.n	8002b98 <CopyDataInit>
  ldr  r2, =_sbss
 8002baa:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002bac:	e002      	b.n	8002bb4 <LoopFillZerobss>

08002bae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002bb0:	f842 3b04 	str.w	r3, [r2], #4

08002bb4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8002bb4:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002bb8:	d3f9      	bcc.n	8002bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002bba:	f7ff ffbb 	bl	8002b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bbe:	f005 f83b 	bl	8007c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bc2:	f7ff f833 	bl	8001c2c <main>
  bx  lr
 8002bc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002bcc:	08008eb8 	.word	0x08008eb8
  ldr  r0, =_sdata
 8002bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002bd4:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 8002bd8:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 8002bdc:	20000328 	.word	0x20000328

08002be0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <CAN1_RX0_IRQHandler>
	...

08002be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <HAL_Init+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <HAL_Init+0x40>)
 8002bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_Init+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <HAL_Init+0x40>)
 8002bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_Init+0x40>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_Init+0x40>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c0c:	2003      	movs	r0, #3
 8002c0e:	f000 fcf1 	bl	80035f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c12:	200f      	movs	r0, #15
 8002c14:	f000 f808 	bl	8002c28 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002c18:	f7ff fbf0 	bl	80023fc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023c00 	.word	0x40023c00

08002c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_InitTick+0x54>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_InitTick+0x58>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fd09 	bl	800365e <HAL_SYSTICK_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00e      	b.n	8002c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b0f      	cmp	r3, #15
 8002c5a:	d80a      	bhi.n	8002c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	f000 fcd1 	bl	800360a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c68:	4a06      	ldr	r2, [pc, #24]	; (8002c84 <HAL_InitTick+0x5c>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000010 	.word	0x20000010
 8002c80:	20000018 	.word	0x20000018
 8002c84:	20000014 	.word	0x20000014

08002c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c8c:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_IncTick+0x1c>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_IncTick+0x20>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <HAL_IncTick+0x20>)
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	20000018 	.word	0x20000018
 8002ca8:	20000324 	.word	0x20000324

08002cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <HAL_GetTick+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	20000324 	.word	0x20000324

08002cc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e033      	b.n	8002d3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d109      	bne.n	8002cf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fbb2 	bl	8002448 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d118      	bne.n	8002d30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d06:	f023 0302 	bic.w	r3, r3, #2
 8002d0a:	f043 0202 	orr.w	r2, r3, #2
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fa94 	bl	8003240 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f023 0303 	bic.w	r3, r3, #3
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d2e:	e001      	b.n	8002d34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	2300      	movs	r3, #0
 8002d54:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	bf0c      	ite	eq
 8002d7a:	2301      	moveq	r3, #1
 8002d7c:	2300      	movne	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d049      	beq.n	8002e1c <HAL_ADC_IRQHandler+0xd6>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d046      	beq.n	8002e1c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d105      	bne.n	8002da6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d12b      	bne.n	8002e0c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d127      	bne.n	8002e0c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d006      	beq.n	8002dd8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d119      	bne.n	8002e0c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0220 	bic.w	r2, r2, #32
 8002de6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f8db 	bl	8002fc8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f06f 0212 	mvn.w	r2, #18
 8002e1a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	bf0c      	ite	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e3c:	2b80      	cmp	r3, #128	; 0x80
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d057      	beq.n	8002efe <HAL_ADC_IRQHandler+0x1b8>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d054      	beq.n	8002efe <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d105      	bne.n	8002e6c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d139      	bne.n	8002eee <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d006      	beq.n	8002e96 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d12b      	bne.n	8002eee <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d124      	bne.n	8002eee <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11d      	bne.n	8002eee <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d119      	bne.n	8002eee <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 faaa 	bl	8003448 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f06f 020c 	mvn.w	r2, #12
 8002efc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d017      	beq.n	8002f60 <HAL_ADC_IRQHandler+0x21a>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d014      	beq.n	8002f60 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d10d      	bne.n	8002f60 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f842 	bl	8002fda <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f06f 0201 	mvn.w	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d015      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0x27a>
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d012      	beq.n	8002fc0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f043 0202 	orr.w	r2, r3, #2
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f06f 0220 	mvn.w	r2, #32
 8002fae:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f81b 	bl	8002fec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f06f 0220 	mvn.w	r2, #32
 8002fbe:	601a      	str	r2, [r3, #0]
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bc80      	pop	{r7}
 8002fd8:	4770      	bx	lr

08002fda <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_ADC_ConfigChannel+0x1c>
 8003018:	2302      	movs	r3, #2
 800301a:	e103      	b.n	8003224 <HAL_ADC_ConfigChannel+0x224>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b09      	cmp	r3, #9
 800302a:	d925      	bls.n	8003078 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68d9      	ldr	r1, [r3, #12]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	b29b      	uxth	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	3b1e      	subs	r3, #30
 8003042:	2207      	movs	r2, #7
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43da      	mvns	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	400a      	ands	r2, r1
 8003050:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68d9      	ldr	r1, [r3, #12]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	b29b      	uxth	r3, r3
 8003062:	4618      	mov	r0, r3
 8003064:	4603      	mov	r3, r0
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4403      	add	r3, r0
 800306a:	3b1e      	subs	r3, #30
 800306c:	409a      	lsls	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	60da      	str	r2, [r3, #12]
 8003076:	e022      	b.n	80030be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6919      	ldr	r1, [r3, #16]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	461a      	mov	r2, r3
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	2207      	movs	r2, #7
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	400a      	ands	r2, r1
 800309a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6919      	ldr	r1, [r3, #16]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	689a      	ldr	r2, [r3, #8]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	4618      	mov	r0, r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4403      	add	r3, r0
 80030b4:	409a      	lsls	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d824      	bhi.n	8003110 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	3b05      	subs	r3, #5
 80030d8:	221f      	movs	r2, #31
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	400a      	ands	r2, r1
 80030e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	4618      	mov	r0, r3
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	3b05      	subs	r3, #5
 8003102:	fa00 f203 	lsl.w	r2, r0, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	635a      	str	r2, [r3, #52]	; 0x34
 800310e:	e04c      	b.n	80031aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b0c      	cmp	r3, #12
 8003116:	d824      	bhi.n	8003162 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	3b23      	subs	r3, #35	; 0x23
 800312a:	221f      	movs	r2, #31
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43da      	mvns	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	400a      	ands	r2, r1
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	b29b      	uxth	r3, r3
 8003146:	4618      	mov	r0, r3
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	3b23      	subs	r3, #35	; 0x23
 8003154:	fa00 f203 	lsl.w	r2, r0, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	631a      	str	r2, [r3, #48]	; 0x30
 8003160:	e023      	b.n	80031aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	3b41      	subs	r3, #65	; 0x41
 8003174:	221f      	movs	r2, #31
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	400a      	ands	r2, r1
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	4618      	mov	r0, r3
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	3b41      	subs	r3, #65	; 0x41
 800319e:	fa00 f203 	lsl.w	r2, r0, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a20      	ldr	r2, [pc, #128]	; (8003230 <HAL_ADC_ConfigChannel+0x230>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d109      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x1c8>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b12      	cmp	r3, #18
 80031ba:	d105      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80031bc:	4b1d      	ldr	r3, [pc, #116]	; (8003234 <HAL_ADC_ConfigChannel+0x234>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <HAL_ADC_ConfigChannel+0x234>)
 80031c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031c6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a18      	ldr	r2, [pc, #96]	; (8003230 <HAL_ADC_ConfigChannel+0x230>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d123      	bne.n	800321a <HAL_ADC_ConfigChannel+0x21a>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d003      	beq.n	80031e2 <HAL_ADC_ConfigChannel+0x1e2>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b11      	cmp	r3, #17
 80031e0:	d11b      	bne.n	800321a <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <HAL_ADC_ConfigChannel+0x234>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4a13      	ldr	r2, [pc, #76]	; (8003234 <HAL_ADC_ConfigChannel+0x234>)
 80031e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031ec:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d111      	bne.n	800321a <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <HAL_ADC_ConfigChannel+0x238>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a10      	ldr	r2, [pc, #64]	; (800323c <HAL_ADC_ConfigChannel+0x23c>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	0c9a      	lsrs	r2, r3, #18
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800320c:	e002      	b.n	8003214 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3b01      	subs	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f9      	bne.n	800320e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40012000 	.word	0x40012000
 8003234:	40012300 	.word	0x40012300
 8003238:	20000010 	.word	0x20000010
 800323c:	431bde83 	.word	0x431bde83

08003240 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003248:	4b7d      	ldr	r3, [pc, #500]	; (8003440 <ADC_Init+0x200>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a7c      	ldr	r2, [pc, #496]	; (8003440 <ADC_Init+0x200>)
 800324e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003252:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003254:	4b7a      	ldr	r3, [pc, #488]	; (8003440 <ADC_Init+0x200>)
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4978      	ldr	r1, [pc, #480]	; (8003440 <ADC_Init+0x200>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003270:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	021a      	lsls	r2, r3, #8
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003294:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ce:	4a5d      	ldr	r2, [pc, #372]	; (8003444 <ADC_Init+0x204>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d022      	beq.n	800331a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003304:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	e00f      	b.n	800333a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003338:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0202 	bic.w	r2, r2, #2
 8003348:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6899      	ldr	r1, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	005a      	lsls	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d027      	beq.n	80033b6 <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003374:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003384:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	3b01      	subs	r3, #1
 800338c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003390:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	fa92 f2a2 	rbit	r2, r2
 8003398:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	fab2 f282 	clz	r2, r2
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	fa03 f102 	lsl.w	r1, r3, r2
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	e007      	b.n	80033c6 <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033c4:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	051a      	lsls	r2, r3, #20
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	025a      	lsls	r2, r3, #9
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	430a      	orrs	r2, r1
 800340e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800341e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6899      	ldr	r1, [r3, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	029a      	lsls	r2, r3, #10
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40012300 	.word	0x40012300
 8003444:	0f000001 	.word	0x0f000001

08003448 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr
	...

0800345c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <__NVIC_SetPriorityGrouping+0x44>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003478:	4013      	ands	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348e:	4a04      	ldr	r2, [pc, #16]	; (80034a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	60d3      	str	r3, [r2, #12]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <__NVIC_GetPriorityGrouping+0x18>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	f003 0307 	and.w	r3, r3, #7
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	db0b      	blt.n	80034ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	4906      	ldr	r1, [pc, #24]	; (80034f4 <__NVIC_EnableIRQ+0x34>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2001      	movs	r0, #1
 80034e2:	fa00 f202 	lsl.w	r2, r0, r2
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	e000e100 	.word	0xe000e100

080034f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	2b00      	cmp	r3, #0
 800350a:	db0a      	blt.n	8003522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	490c      	ldr	r1, [pc, #48]	; (8003544 <__NVIC_SetPriority+0x4c>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	0112      	lsls	r2, r2, #4
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	440b      	add	r3, r1
 800351c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003520:	e00a      	b.n	8003538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	b2da      	uxtb	r2, r3
 8003526:	4908      	ldr	r1, [pc, #32]	; (8003548 <__NVIC_SetPriority+0x50>)
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	3b04      	subs	r3, #4
 8003530:	0112      	lsls	r2, r2, #4
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	440b      	add	r3, r1
 8003536:	761a      	strb	r2, [r3, #24]
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000e100 	.word	0xe000e100
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800354c:	b480      	push	{r7}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	f1c3 0307 	rsb	r3, r3, #7
 8003566:	2b04      	cmp	r3, #4
 8003568:	bf28      	it	cs
 800356a:	2304      	movcs	r3, #4
 800356c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3304      	adds	r3, #4
 8003572:	2b06      	cmp	r3, #6
 8003574:	d902      	bls.n	800357c <NVIC_EncodePriority+0x30>
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3b03      	subs	r3, #3
 800357a:	e000      	b.n	800357e <NVIC_EncodePriority+0x32>
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	f04f 32ff 	mov.w	r2, #4294967295
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43da      	mvns	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	401a      	ands	r2, r3
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003594:	f04f 31ff 	mov.w	r1, #4294967295
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	fa01 f303 	lsl.w	r3, r1, r3
 800359e:	43d9      	mvns	r1, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a4:	4313      	orrs	r3, r2
         );
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3724      	adds	r7, #36	; 0x24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035c0:	d301      	bcc.n	80035c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035c2:	2301      	movs	r3, #1
 80035c4:	e00f      	b.n	80035e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <SysTick_Config+0x40>)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ce:	210f      	movs	r1, #15
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	f7ff ff90 	bl	80034f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <SysTick_Config+0x40>)
 80035da:	2200      	movs	r2, #0
 80035dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035de:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <SysTick_Config+0x40>)
 80035e0:	2207      	movs	r2, #7
 80035e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	e000e010 	.word	0xe000e010

080035f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff2d 	bl	800345c <__NVIC_SetPriorityGrouping>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	4603      	mov	r3, r0
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800361c:	f7ff ff42 	bl	80034a4 <__NVIC_GetPriorityGrouping>
 8003620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	6978      	ldr	r0, [r7, #20]
 8003628:	f7ff ff90 	bl	800354c <NVIC_EncodePriority>
 800362c:	4602      	mov	r2, r0
 800362e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff ff5f 	bl	80034f8 <__NVIC_SetPriority>
}
 800363a:	bf00      	nop
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800364c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff35 	bl	80034c0 <__NVIC_EnableIRQ>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ffa2 	bl	80035b0 <SysTick_Config>
 800366c:	4603      	mov	r3, r0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003684:	f7ff fb12 	bl	8002cac <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e099      	b.n	80037c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b4:	e00f      	b.n	80036d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036b6:	f7ff faf9 	bl	8002cac <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d908      	bls.n	80036d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2203      	movs	r2, #3
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e078      	b.n	80037c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1e8      	bne.n	80036b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4b38      	ldr	r3, [pc, #224]	; (80037d0 <HAL_DMA_Init+0x158>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003702:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800371a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	2b04      	cmp	r3, #4
 800372e:	d107      	bne.n	8003740 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	4313      	orrs	r3, r2
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0307 	bic.w	r3, r3, #7
 8003756:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	4313      	orrs	r3, r2
 8003760:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2b04      	cmp	r3, #4
 8003768:	d117      	bne.n	800379a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fa17 	bl	8003bb0 <DMA_CheckFifoParam>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d008      	beq.n	800379a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2240      	movs	r2, #64	; 0x40
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003796:	2301      	movs	r3, #1
 8003798:	e016      	b.n	80037c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9d0 	bl	8003b48 <DMA_CalcBaseAndBitshift>
 80037a8:	4603      	mov	r3, r0
 80037aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	223f      	movs	r2, #63	; 0x3f
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	f010803f 	.word	0xf010803f

080037d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d004      	beq.n	80037f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2280      	movs	r2, #128	; 0x80
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e00c      	b.n	800380c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2205      	movs	r2, #5
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
	...

08003818 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003824:	4b92      	ldr	r3, [pc, #584]	; (8003a70 <HAL_DMA_IRQHandler+0x258>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a92      	ldr	r2, [pc, #584]	; (8003a74 <HAL_DMA_IRQHandler+0x25c>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0a9b      	lsrs	r3, r3, #10
 8003830:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003836:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	2208      	movs	r2, #8
 8003844:	409a      	lsls	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4013      	ands	r3, r2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01a      	beq.n	8003884 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d013      	beq.n	8003884 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0204 	bic.w	r2, r2, #4
 800386a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	2208      	movs	r2, #8
 8003872:	409a      	lsls	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387c:	f043 0201 	orr.w	r2, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	2201      	movs	r2, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d012      	beq.n	80038ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	2201      	movs	r2, #1
 80038a8:	409a      	lsls	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	f043 0202 	orr.w	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038be:	2204      	movs	r2, #4
 80038c0:	409a      	lsls	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d012      	beq.n	80038f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00b      	beq.n	80038f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	2204      	movs	r2, #4
 80038de:	409a      	lsls	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	f043 0204 	orr.w	r2, r3, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	2210      	movs	r2, #16
 80038f6:	409a      	lsls	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d043      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d03c      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	2210      	movs	r2, #16
 8003914:	409a      	lsls	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d018      	beq.n	800395a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d024      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
 8003946:	e01f      	b.n	8003988 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01b      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
 8003958:	e016      	b.n	8003988 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d107      	bne.n	8003978 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0208 	bic.w	r2, r2, #8
 8003976:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398c:	2220      	movs	r2, #32
 800398e:	409a      	lsls	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 808e 	beq.w	8003ab6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8086 	beq.w	8003ab6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	2220      	movs	r2, #32
 80039b0:	409a      	lsls	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b05      	cmp	r3, #5
 80039c0:	d136      	bne.n	8003a30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0216 	bic.w	r2, r2, #22
 80039d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <HAL_DMA_IRQHandler+0x1da>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d007      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0208 	bic.w	r2, r2, #8
 8003a00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a06:	223f      	movs	r2, #63	; 0x3f
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d07d      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
        }
        return;
 8003a2e:	e078      	b.n	8003b22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01c      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d108      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d030      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	4798      	blx	r3
 8003a5c:	e02b      	b.n	8003ab6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d027      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	4798      	blx	r3
 8003a6e:	e022      	b.n	8003ab6 <HAL_DMA_IRQHandler+0x29e>
 8003a70:	20000010 	.word	0x20000010
 8003a74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0210 	bic.w	r2, r2, #16
 8003a94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d032      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d022      	beq.n	8003b10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2205      	movs	r2, #5
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d307      	bcc.n	8003afe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f2      	bne.n	8003ae2 <HAL_DMA_IRQHandler+0x2ca>
 8003afc:	e000      	b.n	8003b00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003afe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
 8003b20:	e000      	b.n	8003b24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b22:	bf00      	nop
    }
  }
}
 8003b24:	3718      	adds	r7, #24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop

08003b2c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b3a:	b2db      	uxtb	r3, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr
	...

08003b48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	3b10      	subs	r3, #16
 8003b58:	4a13      	ldr	r2, [pc, #76]	; (8003ba8 <DMA_CalcBaseAndBitshift+0x60>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b62:	4a12      	ldr	r2, [pc, #72]	; (8003bac <DMA_CalcBaseAndBitshift+0x64>)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d909      	bls.n	8003b8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	1d1a      	adds	r2, r3, #4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	659a      	str	r2, [r3, #88]	; 0x58
 8003b88:	e007      	b.n	8003b9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	aaaaaaab 	.word	0xaaaaaaab
 8003bac:	08008cc8 	.word	0x08008cc8

08003bb0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d11f      	bne.n	8003c0a <DMA_CheckFifoParam+0x5a>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d856      	bhi.n	8003c7e <DMA_CheckFifoParam+0xce>
 8003bd0:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <DMA_CheckFifoParam+0x28>)
 8003bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd6:	bf00      	nop
 8003bd8:	08003be9 	.word	0x08003be9
 8003bdc:	08003bfb 	.word	0x08003bfb
 8003be0:	08003be9 	.word	0x08003be9
 8003be4:	08003c7f 	.word	0x08003c7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d046      	beq.n	8003c82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf8:	e043      	b.n	8003c82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c02:	d140      	bne.n	8003c86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c08:	e03d      	b.n	8003c86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c12:	d121      	bne.n	8003c58 <DMA_CheckFifoParam+0xa8>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d837      	bhi.n	8003c8a <DMA_CheckFifoParam+0xda>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <DMA_CheckFifoParam+0x70>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c31 	.word	0x08003c31
 8003c24:	08003c37 	.word	0x08003c37
 8003c28:	08003c31 	.word	0x08003c31
 8003c2c:	08003c49 	.word	0x08003c49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
      break;
 8003c34:	e030      	b.n	8003c98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d025      	beq.n	8003c8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c46:	e022      	b.n	8003c8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c50:	d11f      	bne.n	8003c92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c56:	e01c      	b.n	8003c92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d903      	bls.n	8003c66 <DMA_CheckFifoParam+0xb6>
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	2b03      	cmp	r3, #3
 8003c62:	d003      	beq.n	8003c6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c64:	e018      	b.n	8003c98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	73fb      	strb	r3, [r7, #15]
      break;
 8003c6a:	e015      	b.n	8003c98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00e      	beq.n	8003c96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c7c:	e00b      	b.n	8003c96 <DMA_CheckFifoParam+0xe6>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e00a      	b.n	8003c98 <DMA_CheckFifoParam+0xe8>
      break;
 8003c82:	bf00      	nop
 8003c84:	e008      	b.n	8003c98 <DMA_CheckFifoParam+0xe8>
      break;
 8003c86:	bf00      	nop
 8003c88:	e006      	b.n	8003c98 <DMA_CheckFifoParam+0xe8>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e004      	b.n	8003c98 <DMA_CheckFifoParam+0xe8>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e002      	b.n	8003c98 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c92:	bf00      	nop
 8003c94:	e000      	b.n	8003c98 <DMA_CheckFifoParam+0xe8>
      break;
 8003c96:	bf00      	nop
    }
  } 
  
  return status; 
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b087      	sub	sp, #28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb2:	e16f      	b.n	8003f94 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	2101      	movs	r1, #1
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 8161 	beq.w	8003f8e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d00b      	beq.n	8003cec <HAL_GPIO_Init+0x48>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d007      	beq.n	8003cec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ce0:	2b11      	cmp	r3, #17
 8003ce2:	d003      	beq.n	8003cec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b12      	cmp	r3, #18
 8003cea:	d130      	bne.n	8003d4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d22:	2201      	movs	r2, #1
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f003 0201 	and.w	r2, r3, #1
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	2203      	movs	r2, #3
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d003      	beq.n	8003d8e <HAL_GPIO_Init+0xea>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b12      	cmp	r3, #18
 8003d8c:	d123      	bne.n	8003dd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	08da      	lsrs	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3208      	adds	r2, #8
 8003d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	220f      	movs	r2, #15
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43db      	mvns	r3, r3
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4013      	ands	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	08da      	lsrs	r2, r3, #3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3208      	adds	r2, #8
 8003dd0:	6939      	ldr	r1, [r7, #16]
 8003dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	2203      	movs	r2, #3
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4013      	ands	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0203 	and.w	r2, r3, #3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 80bb 	beq.w	8003f8e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	4b64      	ldr	r3, [pc, #400]	; (8003fb0 <HAL_GPIO_Init+0x30c>)
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e20:	4a63      	ldr	r2, [pc, #396]	; (8003fb0 <HAL_GPIO_Init+0x30c>)
 8003e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e26:	6453      	str	r3, [r2, #68]	; 0x44
 8003e28:	4b61      	ldr	r3, [pc, #388]	; (8003fb0 <HAL_GPIO_Init+0x30c>)
 8003e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003e34:	4a5f      	ldr	r2, [pc, #380]	; (8003fb4 <HAL_GPIO_Init+0x310>)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	089b      	lsrs	r3, r3, #2
 8003e3a:	3302      	adds	r3, #2
 8003e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	220f      	movs	r2, #15
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	43db      	mvns	r3, r3
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	4013      	ands	r3, r2
 8003e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a57      	ldr	r2, [pc, #348]	; (8003fb8 <HAL_GPIO_Init+0x314>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d031      	beq.n	8003ec4 <HAL_GPIO_Init+0x220>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a56      	ldr	r2, [pc, #344]	; (8003fbc <HAL_GPIO_Init+0x318>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d02b      	beq.n	8003ec0 <HAL_GPIO_Init+0x21c>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a55      	ldr	r2, [pc, #340]	; (8003fc0 <HAL_GPIO_Init+0x31c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d025      	beq.n	8003ebc <HAL_GPIO_Init+0x218>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a54      	ldr	r2, [pc, #336]	; (8003fc4 <HAL_GPIO_Init+0x320>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d01f      	beq.n	8003eb8 <HAL_GPIO_Init+0x214>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a53      	ldr	r2, [pc, #332]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d019      	beq.n	8003eb4 <HAL_GPIO_Init+0x210>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a52      	ldr	r2, [pc, #328]	; (8003fcc <HAL_GPIO_Init+0x328>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d013      	beq.n	8003eb0 <HAL_GPIO_Init+0x20c>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a51      	ldr	r2, [pc, #324]	; (8003fd0 <HAL_GPIO_Init+0x32c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00d      	beq.n	8003eac <HAL_GPIO_Init+0x208>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a50      	ldr	r2, [pc, #320]	; (8003fd4 <HAL_GPIO_Init+0x330>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d007      	beq.n	8003ea8 <HAL_GPIO_Init+0x204>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a4f      	ldr	r2, [pc, #316]	; (8003fd8 <HAL_GPIO_Init+0x334>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d101      	bne.n	8003ea4 <HAL_GPIO_Init+0x200>
 8003ea0:	2308      	movs	r3, #8
 8003ea2:	e010      	b.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003ea4:	2309      	movs	r3, #9
 8003ea6:	e00e      	b.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003ea8:	2307      	movs	r3, #7
 8003eaa:	e00c      	b.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003eac:	2306      	movs	r3, #6
 8003eae:	e00a      	b.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003eb0:	2305      	movs	r3, #5
 8003eb2:	e008      	b.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	e006      	b.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e004      	b.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e002      	b.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_GPIO_Init+0x222>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	f002 0203 	and.w	r2, r2, #3
 8003ecc:	0092      	lsls	r2, r2, #2
 8003ece:	4093      	lsls	r3, r2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ed8:	4936      	ldr	r1, [pc, #216]	; (8003fb4 <HAL_GPIO_Init+0x310>)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <HAL_GPIO_Init+0x338>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003f0a:	4a34      	ldr	r2, [pc, #208]	; (8003fdc <HAL_GPIO_Init+0x338>)
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f10:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <HAL_GPIO_Init+0x338>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f34:	4a29      	ldr	r2, [pc, #164]	; (8003fdc <HAL_GPIO_Init+0x338>)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f3a:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <HAL_GPIO_Init+0x338>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4013      	ands	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f5e:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_GPIO_Init+0x338>)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f64:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_GPIO_Init+0x338>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f88:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <HAL_GPIO_Init+0x338>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	3301      	adds	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f47f ae88 	bne.w	8003cb4 <HAL_GPIO_Init+0x10>
  }
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40013800 	.word	0x40013800
 8003fb8:	40020000 	.word	0x40020000
 8003fbc:	40020400 	.word	0x40020400
 8003fc0:	40020800 	.word	0x40020800
 8003fc4:	40020c00 	.word	0x40020c00
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40021400 	.word	0x40021400
 8003fd0:	40021800 	.word	0x40021800
 8003fd4:	40021c00 	.word	0x40021c00
 8003fd8:	40022000 	.word	0x40022000
 8003fdc:	40013c00 	.word	0x40013c00

08003fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	887b      	ldrh	r3, [r7, #2]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e001      	b.n	8004002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr
	...

08004010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d006      	beq.n	8004034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004026:	4a05      	ldr	r2, [pc, #20]	; (800403c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd fc58 	bl	80018e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40013c00 	.word	0x40013c00

08004040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e12b      	b.n	80042aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fe faa6 	bl	80025b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2224      	movs	r2, #36	; 0x24
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040a4:	f002 f83a 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 80040a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4a81      	ldr	r2, [pc, #516]	; (80042b4 <HAL_I2C_Init+0x274>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d807      	bhi.n	80040c4 <HAL_I2C_Init+0x84>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4a80      	ldr	r2, [pc, #512]	; (80042b8 <HAL_I2C_Init+0x278>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	bf94      	ite	ls
 80040bc:	2301      	movls	r3, #1
 80040be:	2300      	movhi	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	e006      	b.n	80040d2 <HAL_I2C_Init+0x92>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4a7d      	ldr	r2, [pc, #500]	; (80042bc <HAL_I2C_Init+0x27c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	bf94      	ite	ls
 80040cc:	2301      	movls	r3, #1
 80040ce:	2300      	movhi	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e0e7      	b.n	80042aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a78      	ldr	r2, [pc, #480]	; (80042c0 <HAL_I2C_Init+0x280>)
 80040de:	fba2 2303 	umull	r2, r3, r2, r3
 80040e2:	0c9b      	lsrs	r3, r3, #18
 80040e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a6a      	ldr	r2, [pc, #424]	; (80042b4 <HAL_I2C_Init+0x274>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d802      	bhi.n	8004114 <HAL_I2C_Init+0xd4>
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	3301      	adds	r3, #1
 8004112:	e009      	b.n	8004128 <HAL_I2C_Init+0xe8>
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	4a69      	ldr	r2, [pc, #420]	; (80042c4 <HAL_I2C_Init+0x284>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	099b      	lsrs	r3, r3, #6
 8004126:	3301      	adds	r3, #1
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6812      	ldr	r2, [r2, #0]
 800412c:	430b      	orrs	r3, r1
 800412e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800413a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	495c      	ldr	r1, [pc, #368]	; (80042b4 <HAL_I2C_Init+0x274>)
 8004144:	428b      	cmp	r3, r1
 8004146:	d819      	bhi.n	800417c <HAL_I2C_Init+0x13c>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1e59      	subs	r1, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	fbb1 f3f3 	udiv	r3, r1, r3
 8004156:	1c59      	adds	r1, r3, #1
 8004158:	f640 73fc 	movw	r3, #4092	; 0xffc
 800415c:	400b      	ands	r3, r1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_I2C_Init+0x138>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1e59      	subs	r1, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004170:	3301      	adds	r3, #1
 8004172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004176:	e051      	b.n	800421c <HAL_I2C_Init+0x1dc>
 8004178:	2304      	movs	r3, #4
 800417a:	e04f      	b.n	800421c <HAL_I2C_Init+0x1dc>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d111      	bne.n	80041a8 <HAL_I2C_Init+0x168>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1e58      	subs	r0, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6859      	ldr	r1, [r3, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	440b      	add	r3, r1
 8004192:	fbb0 f3f3 	udiv	r3, r0, r3
 8004196:	3301      	adds	r3, #1
 8004198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf0c      	ite	eq
 80041a0:	2301      	moveq	r3, #1
 80041a2:	2300      	movne	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	e012      	b.n	80041ce <HAL_I2C_Init+0x18e>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	1e58      	subs	r0, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6859      	ldr	r1, [r3, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	0099      	lsls	r1, r3, #2
 80041b8:	440b      	add	r3, r1
 80041ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80041be:	3301      	adds	r3, #1
 80041c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	bf0c      	ite	eq
 80041c8:	2301      	moveq	r3, #1
 80041ca:	2300      	movne	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_Init+0x196>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e022      	b.n	800421c <HAL_I2C_Init+0x1dc>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10e      	bne.n	80041fc <HAL_I2C_Init+0x1bc>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1e58      	subs	r0, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6859      	ldr	r1, [r3, #4]
 80041e6:	460b      	mov	r3, r1
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	440b      	add	r3, r1
 80041ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f0:	3301      	adds	r3, #1
 80041f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fa:	e00f      	b.n	800421c <HAL_I2C_Init+0x1dc>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1e58      	subs	r0, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	0099      	lsls	r1, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004212:	3301      	adds	r3, #1
 8004214:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	6809      	ldr	r1, [r1, #0]
 8004220:	4313      	orrs	r3, r2
 8004222:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800424a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6911      	ldr	r1, [r2, #16]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68d2      	ldr	r2, [r2, #12]
 8004256:	4311      	orrs	r1, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	430b      	orrs	r3, r1
 800425e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	000186a0 	.word	0x000186a0
 80042b8:	001e847f 	.word	0x001e847f
 80042bc:	003d08ff 	.word	0x003d08ff
 80042c0:	431bde83 	.word	0x431bde83
 80042c4:	10624dd3 	.word	0x10624dd3

080042c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	2b10      	cmp	r3, #16
 80042f6:	d003      	beq.n	8004300 <HAL_I2C_EV_IRQHandler+0x38>
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b40      	cmp	r3, #64	; 0x40
 80042fc:	f040 80b6 	bne.w	800446c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10d      	bne.n	8004336 <HAL_I2C_EV_IRQHandler+0x6e>
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004320:	d003      	beq.n	800432a <HAL_I2C_EV_IRQHandler+0x62>
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004328:	d101      	bne.n	800432e <HAL_I2C_EV_IRQHandler+0x66>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <HAL_I2C_EV_IRQHandler+0x68>
 800432e:	2300      	movs	r3, #0
 8004330:	2b01      	cmp	r3, #1
 8004332:	f000 8127 	beq.w	8004584 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00c      	beq.n	800435a <HAL_I2C_EV_IRQHandler+0x92>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	0a5b      	lsrs	r3, r3, #9
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d006      	beq.n	800435a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f001 fa88 	bl	8005862 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fc6a 	bl	8004c2c <I2C_Master_SB>
 8004358:	e087      	b.n	800446a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	08db      	lsrs	r3, r3, #3
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <HAL_I2C_EV_IRQHandler+0xb2>
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	0a5b      	lsrs	r3, r3, #9
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fcdf 	bl	8004d36 <I2C_Master_ADD10>
 8004378:	e077      	b.n	800446a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	085b      	lsrs	r3, r3, #1
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_I2C_EV_IRQHandler+0xd2>
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	0a5b      	lsrs	r3, r3, #9
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fcf8 	bl	8004d88 <I2C_Master_ADDR>
 8004398:	e067      	b.n	800446a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	089b      	lsrs	r3, r3, #2
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d030      	beq.n	8004408 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043b4:	f000 80e8 	beq.w	8004588 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	09db      	lsrs	r3, r3, #7
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00f      	beq.n	80043e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	0a9b      	lsrs	r3, r3, #10
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	089b      	lsrs	r3, r3, #2
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d103      	bne.n	80043e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f937 	bl	8004650 <I2C_MasterTransmit_TXE>
 80043e2:	e042      	b.n	800446a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	089b      	lsrs	r3, r3, #2
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80cb 	beq.w	8004588 <HAL_I2C_EV_IRQHandler+0x2c0>
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	0a5b      	lsrs	r3, r3, #9
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 80c4 	beq.w	8004588 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f9c1 	bl	8004788 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004406:	e0bf      	b.n	8004588 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004416:	f000 80b7 	beq.w	8004588 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00f      	beq.n	8004446 <HAL_I2C_EV_IRQHandler+0x17e>
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	0a9b      	lsrs	r3, r3, #10
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_I2C_EV_IRQHandler+0x17e>
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	089b      	lsrs	r3, r3, #2
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa88 	bl	8004954 <I2C_MasterReceive_RXNE>
 8004444:	e011      	b.n	800446a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	089b      	lsrs	r3, r3, #2
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	f000 809a 	beq.w	8004588 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	0a5b      	lsrs	r3, r3, #9
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8093 	beq.w	8004588 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 faf8 	bl	8004a58 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004468:	e08e      	b.n	8004588 <HAL_I2C_EV_IRQHandler+0x2c0>
 800446a:	e08d      	b.n	8004588 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	2b00      	cmp	r3, #0
 8004472:	d004      	beq.n	800447e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	e007      	b.n	800448e <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d012      	beq.n	80044c0 <HAL_I2C_EV_IRQHandler+0x1f8>
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	0a5b      	lsrs	r3, r3, #9
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00c      	beq.n	80044c0 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80044b6:	69b9      	ldr	r1, [r7, #24]
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 feb1 	bl	8005220 <I2C_Slave_ADDR>
 80044be:	e066      	b.n	800458e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	091b      	lsrs	r3, r3, #4
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <HAL_I2C_EV_IRQHandler+0x218>
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	0a5b      	lsrs	r3, r3, #9
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 fee5 	bl	80052a8 <I2C_Slave_STOPF>
 80044de:	e056      	b.n	800458e <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044e0:	7bbb      	ldrb	r3, [r7, #14]
 80044e2:	2b21      	cmp	r3, #33	; 0x21
 80044e4:	d002      	beq.n	80044ec <HAL_I2C_EV_IRQHandler+0x224>
 80044e6:	7bbb      	ldrb	r3, [r7, #14]
 80044e8:	2b29      	cmp	r3, #41	; 0x29
 80044ea:	d125      	bne.n	8004538 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	09db      	lsrs	r3, r3, #7
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00f      	beq.n	8004518 <HAL_I2C_EV_IRQHandler+0x250>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	0a9b      	lsrs	r3, r3, #10
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <HAL_I2C_EV_IRQHandler+0x250>
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fdc9 	bl	80050a8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004516:	e039      	b.n	800458c <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d033      	beq.n	800458c <HAL_I2C_EV_IRQHandler+0x2c4>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	0a5b      	lsrs	r3, r3, #9
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d02d      	beq.n	800458c <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fdf6 	bl	8005122 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004536:	e029      	b.n	800458c <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00f      	beq.n	8004564 <HAL_I2C_EV_IRQHandler+0x29c>
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	0a9b      	lsrs	r3, r3, #10
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_I2C_EV_IRQHandler+0x29c>
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	089b      	lsrs	r3, r3, #2
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d103      	bne.n	8004564 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fe00 	bl	8005162 <I2C_SlaveReceive_RXNE>
 8004562:	e014      	b.n	800458e <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	089b      	lsrs	r3, r3, #2
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00e      	beq.n	800458e <HAL_I2C_EV_IRQHandler+0x2c6>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	0a5b      	lsrs	r3, r3, #9
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fe2e 	bl	80051de <I2C_SlaveReceive_BTF>
 8004582:	e004      	b.n	800458e <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004584:	bf00      	nop
 8004586:	e002      	b.n	800458e <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004588:	bf00      	nop
 800458a:	e000      	b.n	800458e <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800458c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800458e:	3720      	adds	r7, #32
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr

080045a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr

080045b8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bc80      	pop	{r7}
 80045c8:	4770      	bx	lr

080045ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70fb      	strb	r3, [r7, #3]
 80045e8:	4613      	mov	r3, r2
 80045ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bc80      	pop	{r7}
 800462a:	4770      	bx	lr

0800462c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004666:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004672:	2b00      	cmp	r3, #0
 8004674:	d150      	bne.n	8004718 <I2C_MasterTransmit_TXE+0xc8>
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	2b21      	cmp	r3, #33	; 0x21
 800467a:	d14d      	bne.n	8004718 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b08      	cmp	r3, #8
 8004680:	d01d      	beq.n	80046be <I2C_MasterTransmit_TXE+0x6e>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b20      	cmp	r3, #32
 8004686:	d01a      	beq.n	80046be <I2C_MasterTransmit_TXE+0x6e>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800468e:	d016      	beq.n	80046be <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800469e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2211      	movs	r2, #17
 80046a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff ff6c 	bl	8004594 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046bc:	e060      	b.n	8004780 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046cc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046dc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	d107      	bne.n	8004708 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ff81 	bl	8004608 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004706:	e03b      	b.n	8004780 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff ff3f 	bl	8004594 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004716:	e033      	b.n	8004780 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b21      	cmp	r3, #33	; 0x21
 800471c:	d005      	beq.n	800472a <I2C_MasterTransmit_TXE+0xda>
 800471e:	7bbb      	ldrb	r3, [r7, #14]
 8004720:	2b40      	cmp	r3, #64	; 0x40
 8004722:	d12d      	bne.n	8004780 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004724:	7bfb      	ldrb	r3, [r7, #15]
 8004726:	2b22      	cmp	r3, #34	; 0x22
 8004728:	d12a      	bne.n	8004780 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472e:	b29b      	uxth	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d108      	bne.n	8004746 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004742:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004744:	e01c      	b.n	8004780 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b40      	cmp	r3, #64	; 0x40
 8004750:	d103      	bne.n	800475a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f898 	bl	8004888 <I2C_MemoryTransmit_TXE_BTF>
}
 8004758:	e012      	b.n	8004780 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	781a      	ldrb	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004774:	b29b      	uxth	r3, r3
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800477e:	e7ff      	b.n	8004780 <I2C_MasterTransmit_TXE+0x130>
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b21      	cmp	r3, #33	; 0x21
 80047a0:	d165      	bne.n	800486e <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d012      	beq.n	80047d2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80047d0:	e056      	b.n	8004880 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d01d      	beq.n	8004814 <I2C_MasterTransmit_BTF+0x8c>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d01a      	beq.n	8004814 <I2C_MasterTransmit_BTF+0x8c>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047e4:	d016      	beq.n	8004814 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047f4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2211      	movs	r2, #17
 80047fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fec1 	bl	8004594 <HAL_I2C_MasterTxCpltCallback>
}
 8004812:	e035      	b.n	8004880 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004822:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004832:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	d107      	bne.n	800485e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff fed6 	bl	8004608 <HAL_I2C_MemTxCpltCallback>
}
 800485c:	e010      	b.n	8004880 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff fe94 	bl	8004594 <HAL_I2C_MasterTxCpltCallback>
}
 800486c:	e008      	b.n	8004880 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b40      	cmp	r3, #64	; 0x40
 8004878:	d102      	bne.n	8004880 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f804 	bl	8004888 <I2C_MemoryTransmit_TXE_BTF>
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004894:	2b00      	cmp	r3, #0
 8004896:	d11d      	bne.n	80048d4 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10b      	bne.n	80048b8 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b0:	1c9a      	adds	r2, r3, #2
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80048b6:	e048      	b.n	800494a <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048bc:	b29b      	uxth	r3, r3
 80048be:	121b      	asrs	r3, r3, #8
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048d2:	e03a      	b.n	800494a <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d10b      	bne.n	80048f4 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ec:	1c5a      	adds	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048f2:	e02a      	b.n	800494a <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d126      	bne.n	800494a <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b22      	cmp	r3, #34	; 0x22
 8004906:	d108      	bne.n	800491a <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004916:	601a      	str	r2, [r3, #0]
}
 8004918:	e017      	b.n	800494a <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b21      	cmp	r3, #33	; 0x21
 8004924:	d111      	bne.n	800494a <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	bc80      	pop	{r7}
 8004952:	4770      	bx	lr

08004954 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b22      	cmp	r3, #34	; 0x22
 8004966:	d173      	bne.n	8004a50 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d920      	bls.n	80049b8 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	691a      	ldr	r2, [r3, #16]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d154      	bne.n	8004a50 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b4:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80049b6:	e04b      	b.n	8004a50 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d047      	beq.n	8004a50 <I2C_MasterReceive_RXNE+0xfc>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d002      	beq.n	80049cc <I2C_MasterReceive_RXNE+0x78>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d141      	bne.n	8004a50 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049da:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049ea:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	b2d2      	uxtb	r2, r2
 80049f8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b40      	cmp	r3, #64	; 0x40
 8004a24:	d10a      	bne.n	8004a3c <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7ff fdf0 	bl	800461a <HAL_I2C_MemRxCpltCallback>
}
 8004a3a:	e009      	b.n	8004a50 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2212      	movs	r2, #18
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff fdab 	bl	80045a6 <HAL_I2C_MasterRxCpltCallback>
}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d11b      	bne.n	8004aa8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a7e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691a      	ldr	r2, [r3, #16]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004aa6:	e0bd      	b.n	8004c24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d129      	bne.n	8004b06 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d00a      	beq.n	8004ade <I2C_MasterReceive_BTF+0x86>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d007      	beq.n	8004ade <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004adc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b04:	e08e      	b.n	8004c24 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d176      	bne.n	8004bfe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d002      	beq.n	8004b1c <I2C_MasterReceive_BTF+0xc4>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d108      	bne.n	8004b2e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e019      	b.n	8004b62 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d002      	beq.n	8004b3a <I2C_MasterReceive_BTF+0xe2>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d108      	bne.n	8004b4c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	e00a      	b.n	8004b62 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b10      	cmp	r3, #16
 8004b50:	d007      	beq.n	8004b62 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b60:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	b2d2      	uxtb	r2, r2
 8004b6e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bbc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b40      	cmp	r3, #64	; 0x40
 8004bd0:	d10a      	bne.n	8004be8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fd1a 	bl	800461a <HAL_I2C_MemRxCpltCallback>
}
 8004be6:	e01d      	b.n	8004c24 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2212      	movs	r2, #18
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff fcd5 	bl	80045a6 <HAL_I2C_MasterRxCpltCallback>
}
 8004bfc:	e012      	b.n	8004c24 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	d117      	bne.n	8004c70 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d109      	bne.n	8004c5c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c58:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004c5a:	e067      	b.n	8004d2c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	b2da      	uxtb	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	611a      	str	r2, [r3, #16]
}
 8004c6e:	e05d      	b.n	8004d2c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c78:	d133      	bne.n	8004ce2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b21      	cmp	r3, #33	; 0x21
 8004c84:	d109      	bne.n	8004c9a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c96:	611a      	str	r2, [r3, #16]
 8004c98:	e008      	b.n	8004cac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d004      	beq.n	8004cbe <I2C_Master_SB+0x92>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d108      	bne.n	8004cd0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d032      	beq.n	8004d2c <I2C_Master_SB+0x100>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d02d      	beq.n	8004d2c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cde:	605a      	str	r2, [r3, #4]
}
 8004ce0:	e024      	b.n	8004d2c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10e      	bne.n	8004d08 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	11db      	asrs	r3, r3, #7
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 0306 	and.w	r3, r3, #6
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f063 030f 	orn	r3, r3, #15
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	611a      	str	r2, [r3, #16]
}
 8004d06:	e011      	b.n	8004d2c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d10d      	bne.n	8004d2c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	11db      	asrs	r3, r3, #7
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	f003 0306 	and.w	r3, r3, #6
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f063 030e 	orn	r3, r3, #14
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	611a      	str	r2, [r3, #16]
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bc80      	pop	{r7}
 8004d34:	4770      	bx	lr

08004d36 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d103      	bne.n	8004d5a <I2C_Master_ADD10+0x24>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d011      	beq.n	8004d7e <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d104      	bne.n	8004d6e <I2C_Master_ADD10+0x38>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d007      	beq.n	8004d7e <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d7c:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b091      	sub	sp, #68	; 0x44
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b22      	cmp	r3, #34	; 0x22
 8004db0:	f040 8169 	bne.w	8005086 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10f      	bne.n	8004ddc <I2C_Master_ADDR+0x54>
 8004dbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d10b      	bne.n	8004ddc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	e160      	b.n	800509e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d11d      	bne.n	8004e20 <I2C_Master_ADDR+0x98>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dec:	d118      	bne.n	8004e20 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dee:	2300      	movs	r3, #0
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e12:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	651a      	str	r2, [r3, #80]	; 0x50
 8004e1e:	e13e      	b.n	800509e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d113      	bne.n	8004e52 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	e115      	b.n	800507e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	f040 808a 	bne.w	8004f72 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e64:	d137      	bne.n	8004ed6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e74:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e84:	d113      	bne.n	8004eae <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e94:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e96:	2300      	movs	r3, #0
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	e0e7      	b.n	800507e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	623b      	str	r3, [r7, #32]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	623b      	str	r3, [r7, #32]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	623b      	str	r3, [r7, #32]
 8004ec2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	e0d3      	b.n	800507e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d02e      	beq.n	8004f3a <I2C_Master_ADDR+0x1b2>
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	d02b      	beq.n	8004f3a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	2b12      	cmp	r3, #18
 8004ee6:	d102      	bne.n	8004eee <I2C_Master_ADDR+0x166>
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d125      	bne.n	8004f3a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d00e      	beq.n	8004f12 <I2C_Master_ADDR+0x18a>
 8004ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d00b      	beq.n	8004f12 <I2C_Master_ADDR+0x18a>
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d008      	beq.n	8004f12 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	e007      	b.n	8004f22 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f20:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f22:	2300      	movs	r3, #0
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	e0a1      	b.n	800507e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f48:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e085      	b.n	800507e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d14d      	bne.n	8005018 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d016      	beq.n	8004fb0 <I2C_Master_ADDR+0x228>
 8004f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d013      	beq.n	8004fb0 <I2C_Master_ADDR+0x228>
 8004f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d010      	beq.n	8004fb0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e007      	b.n	8004fc0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fbe:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fce:	d117      	bne.n	8005000 <I2C_Master_ADDR+0x278>
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fd6:	d00b      	beq.n	8004ff0 <I2C_Master_ADDR+0x268>
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d008      	beq.n	8004ff0 <I2C_Master_ADDR+0x268>
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d005      	beq.n	8004ff0 <I2C_Master_ADDR+0x268>
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	2b10      	cmp	r3, #16
 8004fe8:	d002      	beq.n	8004ff0 <I2C_Master_ADDR+0x268>
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	d107      	bne.n	8005000 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ffe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	e032      	b.n	800507e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005026:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005036:	d117      	bne.n	8005068 <I2C_Master_ADDR+0x2e0>
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800503e:	d00b      	beq.n	8005058 <I2C_Master_ADDR+0x2d0>
 8005040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005042:	2b01      	cmp	r3, #1
 8005044:	d008      	beq.n	8005058 <I2C_Master_ADDR+0x2d0>
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	2b08      	cmp	r3, #8
 800504a:	d005      	beq.n	8005058 <I2C_Master_ADDR+0x2d0>
 800504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504e:	2b10      	cmp	r3, #16
 8005050:	d002      	beq.n	8005058 <I2C_Master_ADDR+0x2d0>
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	2b20      	cmp	r3, #32
 8005056:	d107      	bne.n	8005068 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005066:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005068:	2300      	movs	r3, #0
 800506a:	613b      	str	r3, [r7, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	613b      	str	r3, [r7, #16]
 800507c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005084:	e00b      	b.n	800509e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005086:	2300      	movs	r3, #0
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	68fb      	ldr	r3, [r7, #12]
}
 800509c:	e7ff      	b.n	800509e <I2C_Master_ADDR+0x316>
 800509e:	bf00      	nop
 80050a0:	3744      	adds	r7, #68	; 0x44
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr

080050a8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02b      	beq.n	800511a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d114      	bne.n	800511a <I2C_SlaveTransmit_TXE+0x72>
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b29      	cmp	r3, #41	; 0x29
 80050f4:	d111      	bne.n	800511a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005104:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2221      	movs	r2, #33	; 0x21
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2228      	movs	r2, #40	; 0x28
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f7ff fa4f 	bl	80045b8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800511a:	bf00      	nop
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d011      	beq.n	8005158 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	781a      	ldrb	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005170:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d02c      	beq.n	80051d6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	691a      	ldr	r2, [r3, #16]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d114      	bne.n	80051d6 <I2C_SlaveReceive_RXNE+0x74>
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	2b2a      	cmp	r3, #42	; 0x2a
 80051b0:	d111      	bne.n	80051d6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051c0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2222      	movs	r2, #34	; 0x22
 80051c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2228      	movs	r2, #40	; 0x28
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff f9fa 	bl	80045ca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d012      	beq.n	8005216 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	bc80      	pop	{r7}
 800521e:	4770      	bx	lr

08005220 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800522a:	2300      	movs	r3, #0
 800522c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800523a:	2b28      	cmp	r3, #40	; 0x28
 800523c:	d127      	bne.n	800528e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	089b      	lsrs	r3, r3, #2
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	09db      	lsrs	r3, r3, #7
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d103      	bne.n	8005272 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	81bb      	strh	r3, [r7, #12]
 8005270:	e002      	b.n	8005278 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005280:	89ba      	ldrh	r2, [r7, #12]
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	4619      	mov	r1, r3
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff f9a8 	bl	80045dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800528c:	e008      	b.n	80052a0 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f06f 0202 	mvn.w	r2, #2
 8005296:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80052c8:	2300      	movs	r3, #0
 80052ca:	60bb      	str	r3, [r7, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	60bb      	str	r3, [r7, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005304:	d172      	bne.n	80053ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	2b22      	cmp	r3, #34	; 0x22
 800530a:	d002      	beq.n	8005312 <I2C_Slave_STOPF+0x6a>
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	2b2a      	cmp	r3, #42	; 0x2a
 8005310:	d135      	bne.n	800537e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	b29a      	uxth	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d005      	beq.n	8005336 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0204 	orr.w	r2, r3, #4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005344:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	4618      	mov	r0, r3
 800534c:	f7fe fbee 	bl	8003b2c <HAL_DMA_GetState>
 8005350:	4603      	mov	r3, r0
 8005352:	2b01      	cmp	r3, #1
 8005354:	d049      	beq.n	80053ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	4a69      	ldr	r2, [pc, #420]	; (8005500 <I2C_Slave_STOPF+0x258>)
 800535c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	4618      	mov	r0, r3
 8005364:	f7fe fa36 	bl	80037d4 <HAL_DMA_Abort_IT>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d03d      	beq.n	80053ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005378:	4610      	mov	r0, r2
 800537a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800537c:	e035      	b.n	80053ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f043 0204 	orr.w	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe fbb8 	bl	8003b2c <HAL_DMA_GetState>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d014      	beq.n	80053ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c6:	4a4e      	ldr	r2, [pc, #312]	; (8005500 <I2C_Slave_STOPF+0x258>)
 80053c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe fa00 	bl	80037d4 <HAL_DMA_Abort_IT>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053e4:	4610      	mov	r0, r2
 80053e6:	4798      	blx	r3
 80053e8:	e000      	b.n	80053ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d03e      	beq.n	8005474 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b04      	cmp	r3, #4
 8005402:	d112      	bne.n	800542a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	d112      	bne.n	800545e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005454:	b29b      	uxth	r3, r3
 8005456:	3b01      	subs	r3, #1
 8005458:	b29a      	uxth	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	f043 0204 	orr.w	r2, r3, #4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f843 	bl	8005508 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005482:	e039      	b.n	80054f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005484:	7bfb      	ldrb	r3, [r7, #15]
 8005486:	2b2a      	cmp	r3, #42	; 0x2a
 8005488:	d109      	bne.n	800549e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2228      	movs	r2, #40	; 0x28
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff f896 	bl	80045ca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b28      	cmp	r3, #40	; 0x28
 80054a8:	d111      	bne.n	80054ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a15      	ldr	r2, [pc, #84]	; (8005504 <I2C_Slave_STOPF+0x25c>)
 80054ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff f895 	bl	80045f6 <HAL_I2C_ListenCpltCallback>
}
 80054cc:	e014      	b.n	80054f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d2:	2b22      	cmp	r3, #34	; 0x22
 80054d4:	d002      	beq.n	80054dc <I2C_Slave_STOPF+0x234>
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	2b22      	cmp	r3, #34	; 0x22
 80054da:	d10d      	bne.n	80054f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff f869 	bl	80045ca <HAL_I2C_SlaveRxCpltCallback>
}
 80054f8:	bf00      	nop
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	08005765 	.word	0x08005765
 8005504:	ffff0000 	.word	0xffff0000

08005508 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005516:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b10      	cmp	r3, #16
 8005522:	d10a      	bne.n	800553a <I2C_ITError+0x32>
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b22      	cmp	r3, #34	; 0x22
 8005528:	d107      	bne.n	800553a <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005538:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005540:	2b28      	cmp	r3, #40	; 0x28
 8005542:	d107      	bne.n	8005554 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2228      	movs	r2, #40	; 0x28
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005552:	e015      	b.n	8005580 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800555e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005562:	d006      	beq.n	8005572 <I2C_ITError+0x6a>
 8005564:	7bfb      	ldrb	r3, [r7, #15]
 8005566:	2b60      	cmp	r3, #96	; 0x60
 8005568:	d003      	beq.n	8005572 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800558e:	d162      	bne.n	8005656 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800559e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d020      	beq.n	80055f0 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	4a6a      	ldr	r2, [pc, #424]	; (800575c <I2C_ITError+0x254>)
 80055b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe f90a 	bl	80037d4 <HAL_DMA_Abort_IT>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8089 	beq.w	80056da <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0201 	bic.w	r2, r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055ea:	4610      	mov	r0, r2
 80055ec:	4798      	blx	r3
 80055ee:	e074      	b.n	80056da <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	4a59      	ldr	r2, [pc, #356]	; (800575c <I2C_ITError+0x254>)
 80055f6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe f8e9 	bl	80037d4 <HAL_DMA_Abort_IT>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d068      	beq.n	80056da <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	d10b      	bne.n	800562e <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005650:	4610      	mov	r0, r2
 8005652:	4798      	blx	r3
 8005654:	e041      	b.n	80056da <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b60      	cmp	r3, #96	; 0x60
 8005660:	d125      	bne.n	80056ae <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2220      	movs	r2, #32
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b40      	cmp	r3, #64	; 0x40
 800567c:	d10b      	bne.n	8005696 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f7fe ffc9 	bl	800463e <HAL_I2C_AbortCpltCallback>
 80056ac:	e015      	b.n	80056da <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d10b      	bne.n	80056d4 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7fe ffa9 	bl	800462c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10e      	bne.n	8005708 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d104      	bne.n	8005708 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005716:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b04      	cmp	r3, #4
 800572a:	d113      	bne.n	8005754 <I2C_ITError+0x24c>
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2b28      	cmp	r3, #40	; 0x28
 8005730:	d110      	bne.n	8005754 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a0a      	ldr	r2, [pc, #40]	; (8005760 <I2C_ITError+0x258>)
 8005736:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fe ff51 	bl	80045f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	08005765 	.word	0x08005765
 8005760:	ffff0000 	.word	0xffff0000

08005764 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005770:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005778:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005786:	2200      	movs	r2, #0
 8005788:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005796:	2200      	movs	r2, #0
 8005798:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d003      	beq.n	80057c0 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	2200      	movs	r2, #0
 80057be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	2200      	movs	r2, #0
 80057ce:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b60      	cmp	r3, #96	; 0x60
 80057ea:	d10e      	bne.n	800580a <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7fe ff1b 	bl	800463e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005808:	e027      	b.n	800585a <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800580a:	7afb      	ldrb	r3, [r7, #11]
 800580c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005810:	2b28      	cmp	r3, #40	; 0x28
 8005812:	d117      	bne.n	8005844 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005832:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2228      	movs	r2, #40	; 0x28
 800583e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005842:	e007      	b.n	8005854 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7fe fee9 	bl	800462c <HAL_I2C_ErrorCallback>
}
 800585a:	bf00      	nop
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005872:	d103      	bne.n	800587c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800587a:	e007      	b.n	800588c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005884:	d102      	bne.n	800588c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2208      	movs	r2, #8
 800588a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr
	...

08005898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b090      	sub	sp, #64	; 0x40
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e253      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d050      	beq.n	8005958 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058b6:	4ba3      	ldr	r3, [pc, #652]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d00c      	beq.n	80058dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058c2:	4ba0      	ldr	r3, [pc, #640]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d112      	bne.n	80058f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058ce:	4b9d      	ldr	r3, [pc, #628]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058da:	d10b      	bne.n	80058f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058dc:	4b99      	ldr	r3, [pc, #612]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d036      	beq.n	8005956 <HAL_RCC_OscConfig+0xbe>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d132      	bne.n	8005956 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e22e      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	4b93      	ldr	r3, [pc, #588]	; (8005b48 <HAL_RCC_OscConfig+0x2b0>)
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d013      	beq.n	800592e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005906:	f7fd f9d1 	bl	8002cac <HAL_GetTick>
 800590a:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590c:	e008      	b.n	8005920 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800590e:	f7fd f9cd 	bl	8002cac <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b64      	cmp	r3, #100	; 0x64
 800591a:	d901      	bls.n	8005920 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e218      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005920:	4b88      	ldr	r3, [pc, #544]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f0      	beq.n	800590e <HAL_RCC_OscConfig+0x76>
 800592c:	e014      	b.n	8005958 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800592e:	f7fd f9bd 	bl	8002cac <HAL_GetTick>
 8005932:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005936:	f7fd f9b9 	bl	8002cac <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b64      	cmp	r3, #100	; 0x64
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e204      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005948:	4b7e      	ldr	r3, [pc, #504]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1f0      	bne.n	8005936 <HAL_RCC_OscConfig+0x9e>
 8005954:	e000      	b.n	8005958 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005956:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d077      	beq.n	8005a54 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005964:	4b77      	ldr	r3, [pc, #476]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 030c 	and.w	r3, r3, #12
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005970:	4b74      	ldr	r3, [pc, #464]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005978:	2b08      	cmp	r3, #8
 800597a:	d126      	bne.n	80059ca <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800597c:	4b71      	ldr	r3, [pc, #452]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d120      	bne.n	80059ca <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005988:	4b6e      	ldr	r3, [pc, #440]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_RCC_OscConfig+0x108>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e1d8      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059a0:	4b68      	ldr	r3, [pc, #416]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	21f8      	movs	r1, #248	; 0xf8
 80059ae:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059b2:	fa91 f1a1 	rbit	r1, r1
 80059b6:	62f9      	str	r1, [r7, #44]	; 0x2c
  return result;
 80059b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059ba:	fab1 f181 	clz	r1, r1
 80059be:	b2c9      	uxtb	r1, r1
 80059c0:	408b      	lsls	r3, r1
 80059c2:	4960      	ldr	r1, [pc, #384]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059c8:	e044      	b.n	8005a54 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d02a      	beq.n	8005a28 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059d2:	4b5e      	ldr	r3, [pc, #376]	; (8005b4c <HAL_RCC_OscConfig+0x2b4>)
 80059d4:	2201      	movs	r2, #1
 80059d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fd f968 	bl	8002cac <HAL_GetTick>
 80059dc:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059e0:	f7fd f964 	bl	8002cac <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e1af      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059f2:	4b54      	ldr	r3, [pc, #336]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f0      	beq.n	80059e0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fe:	4b51      	ldr	r3, [pc, #324]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	21f8      	movs	r1, #248	; 0xf8
 8005a0c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a10:	fa91 f1a1 	rbit	r1, r1
 8005a14:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8005a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a18:	fab1 f181 	clz	r1, r1
 8005a1c:	b2c9      	uxtb	r1, r1
 8005a1e:	408b      	lsls	r3, r1
 8005a20:	4948      	ldr	r1, [pc, #288]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	600b      	str	r3, [r1, #0]
 8005a26:	e015      	b.n	8005a54 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a28:	4b48      	ldr	r3, [pc, #288]	; (8005b4c <HAL_RCC_OscConfig+0x2b4>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2e:	f7fd f93d 	bl	8002cac <HAL_GetTick>
 8005a32:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a36:	f7fd f939 	bl	8002cac <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e184      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a48:	4b3e      	ldr	r3, [pc, #248]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1f0      	bne.n	8005a36 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d030      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d016      	beq.n	8005a96 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a68:	4b39      	ldr	r3, [pc, #228]	; (8005b50 <HAL_RCC_OscConfig+0x2b8>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a6e:	f7fd f91d 	bl	8002cac <HAL_GetTick>
 8005a72:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a74:	e008      	b.n	8005a88 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a76:	f7fd f919 	bl	8002cac <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e164      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a88:	4b2e      	ldr	r3, [pc, #184]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0f0      	beq.n	8005a76 <HAL_RCC_OscConfig+0x1de>
 8005a94:	e015      	b.n	8005ac2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a96:	4b2e      	ldr	r3, [pc, #184]	; (8005b50 <HAL_RCC_OscConfig+0x2b8>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a9c:	f7fd f906 	bl	8002cac <HAL_GetTick>
 8005aa0:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aa4:	f7fd f902 	bl	8002cac <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e14d      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab6:	4b23      	ldr	r3, [pc, #140]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aba:	f003 0302 	and.w	r3, r3, #2
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f0      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 8088 	beq.w	8005be0 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad6:	4b1b      	ldr	r3, [pc, #108]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d110      	bne.n	8005b04 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	4b17      	ldr	r3, [pc, #92]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	4a16      	ldr	r2, [pc, #88]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af0:	6413      	str	r3, [r2, #64]	; 0x40
 8005af2:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <HAL_RCC_OscConfig+0x2ac>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b04:	4b13      	ldr	r3, [pc, #76]	; (8005b54 <HAL_RCC_OscConfig+0x2bc>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a12      	ldr	r2, [pc, #72]	; (8005b54 <HAL_RCC_OscConfig+0x2bc>)
 8005b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b0e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b10:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <HAL_RCC_OscConfig+0x2bc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d123      	bne.n	8005b64 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b1c:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <HAL_RCC_OscConfig+0x2bc>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a0c      	ldr	r2, [pc, #48]	; (8005b54 <HAL_RCC_OscConfig+0x2bc>)
 8005b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b28:	f7fd f8c0 	bl	8002cac <HAL_GetTick>
 8005b2c:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b2e:	e013      	b.n	8005b58 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b30:	f7fd f8bc 	bl	8002cac <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d90c      	bls.n	8005b58 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e107      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
 8005b42:	bf00      	nop
 8005b44:	40023800 	.word	0x40023800
 8005b48:	40023802 	.word	0x40023802
 8005b4c:	42470000 	.word	0x42470000
 8005b50:	42470e80 	.word	0x42470e80
 8005b54:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b58:	4b80      	ldr	r3, [pc, #512]	; (8005d5c <HAL_RCC_OscConfig+0x4c4>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0e5      	beq.n	8005b30 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	4b7d      	ldr	r3, [pc, #500]	; (8005d60 <HAL_RCC_OscConfig+0x4c8>)
 8005b6a:	b2d2      	uxtb	r2, r2
 8005b6c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d015      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b76:	f7fd f899 	bl	8002cac <HAL_GetTick>
 8005b7a:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7c:	e00a      	b.n	8005b94 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b7e:	f7fd f895 	bl	8002cac <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e0de      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b94:	4b73      	ldr	r3, [pc, #460]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0ee      	beq.n	8005b7e <HAL_RCC_OscConfig+0x2e6>
 8005ba0:	e014      	b.n	8005bcc <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ba2:	f7fd f883 	bl	8002cac <HAL_GetTick>
 8005ba6:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba8:	e00a      	b.n	8005bc0 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005baa:	f7fd f87f 	bl	8002cac <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d901      	bls.n	8005bc0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e0c8      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bc0:	4b68      	ldr	r3, [pc, #416]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1ee      	bne.n	8005baa <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d105      	bne.n	8005be0 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bd4:	4b63      	ldr	r3, [pc, #396]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	4a62      	ldr	r2, [pc, #392]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	699b      	ldr	r3, [r3, #24]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 80b3 	beq.w	8005d50 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bea:	4b5e      	ldr	r3, [pc, #376]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 030c 	and.w	r3, r3, #12
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d07d      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d162      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bfe:	4b5a      	ldr	r3, [pc, #360]	; (8005d68 <HAL_RCC_OscConfig+0x4d0>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c04:	f7fd f852 	bl	8002cac <HAL_GetTick>
 8005c08:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c0c:	f7fd f84e 	bl	8002cac <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b64      	cmp	r3, #100	; 0x64
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e099      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1e:	4b51      	ldr	r3, [pc, #324]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f0      	bne.n	8005c0c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69da      	ldr	r2, [r3, #28]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c38:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005c3c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3e:	6939      	ldr	r1, [r7, #16]
 8005c40:	fa91 f1a1 	rbit	r1, r1
 8005c44:	60f9      	str	r1, [r7, #12]
  return result;
 8005c46:	68f9      	ldr	r1, [r7, #12]
 8005c48:	fab1 f181 	clz	r1, r1
 8005c4c:	b2c9      	uxtb	r1, r1
 8005c4e:	408b      	lsls	r3, r1
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8005c5e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c60:	69b9      	ldr	r1, [r7, #24]
 8005c62:	fa91 f1a1 	rbit	r1, r1
 8005c66:	6179      	str	r1, [r7, #20]
  return result;
 8005c68:	6979      	ldr	r1, [r7, #20]
 8005c6a:	fab1 f181 	clz	r1, r1
 8005c6e:	b2c9      	uxtb	r1, r1
 8005c70:	408b      	lsls	r3, r1
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8005c7c:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7e:	6a39      	ldr	r1, [r7, #32]
 8005c80:	fa91 f1a1 	rbit	r1, r1
 8005c84:	61f9      	str	r1, [r7, #28]
  return result;
 8005c86:	69f9      	ldr	r1, [r7, #28]
 8005c88:	fab1 f181 	clz	r1, r1
 8005c8c:	b2c9      	uxtb	r1, r1
 8005c8e:	408b      	lsls	r3, r1
 8005c90:	4934      	ldr	r1, [pc, #208]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c96:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <HAL_RCC_OscConfig+0x4d0>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fd f806 	bl	8002cac <HAL_GetTick>
 8005ca0:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ca4:	f7fd f802 	bl	8002cac <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	; 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e04d      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cb6:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x40c>
 8005cc2:	e045      	b.n	8005d50 <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc4:	4b28      	ldr	r3, [pc, #160]	; (8005d68 <HAL_RCC_OscConfig+0x4d0>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cca:	f7fc ffef 	bl	8002cac <HAL_GetTick>
 8005cce:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cd2:	f7fc ffeb 	bl	8002cac <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b64      	cmp	r3, #100	; 0x64
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e036      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce4:	4b1f      	ldr	r3, [pc, #124]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f0      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x43a>
 8005cf0:	e02e      	b.n	8005d50 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d101      	bne.n	8005cfe <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e029      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005cfe:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <HAL_RCC_OscConfig+0x4cc>)
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d11c      	bne.n	8005d4c <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d115      	bne.n	8005d4c <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d22:	099b      	lsrs	r3, r3, #6
 8005d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d10d      	bne.n	8005d4c <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d106      	bne.n	8005d4c <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d40:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d001      	beq.n	8005d50 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3740      	adds	r7, #64	; 0x40
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	40007000 	.word	0x40007000
 8005d60:	40023870 	.word	0x40023870
 8005d64:	40023800 	.word	0x40023800
 8005d68:	42470060 	.word	0x42470060

08005d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e0d2      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d80:	4b6b      	ldr	r3, [pc, #428]	; (8005f30 <HAL_RCC_ClockConfig+0x1c4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 030f 	and.w	r3, r3, #15
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d90c      	bls.n	8005da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8e:	4b68      	ldr	r3, [pc, #416]	; (8005f30 <HAL_RCC_ClockConfig+0x1c4>)
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d96:	4b66      	ldr	r3, [pc, #408]	; (8005f30 <HAL_RCC_ClockConfig+0x1c4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d001      	beq.n	8005da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e0be      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d020      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d005      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005dc0:	4b5c      	ldr	r3, [pc, #368]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	4a5b      	ldr	r2, [pc, #364]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0308 	and.w	r3, r3, #8
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005dd8:	4b56      	ldr	r3, [pc, #344]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	4a55      	ldr	r2, [pc, #340]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005de2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005de4:	4b53      	ldr	r3, [pc, #332]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	4950      	ldr	r1, [pc, #320]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d040      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d107      	bne.n	8005e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e0a:	4b4a      	ldr	r3, [pc, #296]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d115      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e085      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d107      	bne.n	8005e32 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e22:	4b44      	ldr	r3, [pc, #272]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d109      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e079      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e32:	4b40      	ldr	r3, [pc, #256]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e071      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e42:	4b3c      	ldr	r3, [pc, #240]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f023 0203 	bic.w	r2, r3, #3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4939      	ldr	r1, [pc, #228]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e54:	f7fc ff2a 	bl	8002cac <HAL_GetTick>
 8005e58:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e5a:	e00a      	b.n	8005e72 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e5c:	f7fc ff26 	bl	8002cac <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e059      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e72:	4b30      	ldr	r3, [pc, #192]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 020c 	and.w	r2, r3, #12
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d1eb      	bne.n	8005e5c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e84:	4b2a      	ldr	r3, [pc, #168]	; (8005f30 <HAL_RCC_ClockConfig+0x1c4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d20c      	bcs.n	8005eac <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e92:	4b27      	ldr	r3, [pc, #156]	; (8005f30 <HAL_RCC_ClockConfig+0x1c4>)
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e9a:	4b25      	ldr	r3, [pc, #148]	; (8005f30 <HAL_RCC_ClockConfig+0x1c4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e03c      	b.n	8005f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eb8:	4b1e      	ldr	r3, [pc, #120]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	491b      	ldr	r1, [pc, #108]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d009      	beq.n	8005eea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ed6:	4b17      	ldr	r3, [pc, #92]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4913      	ldr	r1, [pc, #76]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005eea:	f000 f82b 	bl	8005f44 <HAL_RCC_GetSysClockFreq>
 8005eee:	4601      	mov	r1, r0
 8005ef0:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <HAL_RCC_ClockConfig+0x1c8>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ef8:	22f0      	movs	r2, #240	; 0xf0
 8005efa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	fa92 f2a2 	rbit	r2, r2
 8005f02:	60fa      	str	r2, [r7, #12]
  return result;
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	fab2 f282 	clz	r2, r2
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	40d3      	lsrs	r3, r2
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	; (8005f38 <HAL_RCC_ClockConfig+0x1cc>)
 8005f10:	5cd3      	ldrb	r3, [r2, r3]
 8005f12:	fa21 f303 	lsr.w	r3, r1, r3
 8005f16:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <HAL_RCC_ClockConfig+0x1d0>)
 8005f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f1a:	4b09      	ldr	r3, [pc, #36]	; (8005f40 <HAL_RCC_ClockConfig+0x1d4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fc fe82 	bl	8002c28 <HAL_InitTick>

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40023c00 	.word	0x40023c00
 8005f34:	40023800 	.word	0x40023800
 8005f38:	08008cb0 	.word	0x08008cb0
 8005f3c:	20000010 	.word	0x20000010
 8005f40:	20000014 	.word	0x20000014

08005f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	607b      	str	r3, [r7, #4]
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	2300      	movs	r3, #0
 8005f56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f5c:	4b67      	ldr	r3, [pc, #412]	; (80060fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f003 030c 	and.w	r3, r3, #12
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d00d      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0x40>
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	f200 80bd 	bhi.w	80060e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d002      	beq.n	8005f78 <HAL_RCC_GetSysClockFreq+0x34>
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d003      	beq.n	8005f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8005f76:	e0b7      	b.n	80060e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f78:	4b61      	ldr	r3, [pc, #388]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005f7a:	60bb      	str	r3, [r7, #8]
       break;
 8005f7c:	e0b7      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f7e:	4b61      	ldr	r3, [pc, #388]	; (8006104 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005f80:	60bb      	str	r3, [r7, #8]
      break;
 8005f82:	e0b4      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f84:	4b5d      	ldr	r3, [pc, #372]	; (80060fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f8e:	4b5b      	ldr	r3, [pc, #364]	; (80060fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d04d      	beq.n	8006036 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f9a:	4b58      	ldr	r3, [pc, #352]	; (80060fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	099b      	lsrs	r3, r3, #6
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f04f 0300 	mov.w	r3, #0
 8005fa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	ea02 0800 	and.w	r8, r2, r0
 8005fb2:	ea03 0901 	and.w	r9, r3, r1
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	4649      	mov	r1, r9
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	014b      	lsls	r3, r1, #5
 8005fc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005fc8:	0142      	lsls	r2, r0, #5
 8005fca:	4610      	mov	r0, r2
 8005fcc:	4619      	mov	r1, r3
 8005fce:	ebb0 0008 	subs.w	r0, r0, r8
 8005fd2:	eb61 0109 	sbc.w	r1, r1, r9
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	018b      	lsls	r3, r1, #6
 8005fe0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005fe4:	0182      	lsls	r2, r0, #6
 8005fe6:	1a12      	subs	r2, r2, r0
 8005fe8:	eb63 0301 	sbc.w	r3, r3, r1
 8005fec:	f04f 0000 	mov.w	r0, #0
 8005ff0:	f04f 0100 	mov.w	r1, #0
 8005ff4:	00d9      	lsls	r1, r3, #3
 8005ff6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ffa:	00d0      	lsls	r0, r2, #3
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	eb12 0208 	adds.w	r2, r2, r8
 8006004:	eb43 0309 	adc.w	r3, r3, r9
 8006008:	f04f 0000 	mov.w	r0, #0
 800600c:	f04f 0100 	mov.w	r1, #0
 8006010:	0259      	lsls	r1, r3, #9
 8006012:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006016:	0250      	lsls	r0, r2, #9
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4610      	mov	r0, r2
 800601e:	4619      	mov	r1, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	461a      	mov	r2, r3
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	f7fb f890 	bl	800114c <__aeabi_uldivmod>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4613      	mov	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e04a      	b.n	80060cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006036:	4b31      	ldr	r3, [pc, #196]	; (80060fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	099b      	lsrs	r3, r3, #6
 800603c:	461a      	mov	r2, r3
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006046:	f04f 0100 	mov.w	r1, #0
 800604a:	ea02 0400 	and.w	r4, r2, r0
 800604e:	ea03 0501 	and.w	r5, r3, r1
 8006052:	4620      	mov	r0, r4
 8006054:	4629      	mov	r1, r5
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	014b      	lsls	r3, r1, #5
 8006060:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006064:	0142      	lsls	r2, r0, #5
 8006066:	4610      	mov	r0, r2
 8006068:	4619      	mov	r1, r3
 800606a:	1b00      	subs	r0, r0, r4
 800606c:	eb61 0105 	sbc.w	r1, r1, r5
 8006070:	f04f 0200 	mov.w	r2, #0
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	018b      	lsls	r3, r1, #6
 800607a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800607e:	0182      	lsls	r2, r0, #6
 8006080:	1a12      	subs	r2, r2, r0
 8006082:	eb63 0301 	sbc.w	r3, r3, r1
 8006086:	f04f 0000 	mov.w	r0, #0
 800608a:	f04f 0100 	mov.w	r1, #0
 800608e:	00d9      	lsls	r1, r3, #3
 8006090:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006094:	00d0      	lsls	r0, r2, #3
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	1912      	adds	r2, r2, r4
 800609c:	eb45 0303 	adc.w	r3, r5, r3
 80060a0:	f04f 0000 	mov.w	r0, #0
 80060a4:	f04f 0100 	mov.w	r1, #0
 80060a8:	0299      	lsls	r1, r3, #10
 80060aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80060ae:	0290      	lsls	r0, r2, #10
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4610      	mov	r0, r2
 80060b6:	4619      	mov	r1, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	461a      	mov	r2, r3
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	f7fb f844 	bl	800114c <__aeabi_uldivmod>
 80060c4:	4602      	mov	r2, r0
 80060c6:	460b      	mov	r3, r1
 80060c8:	4613      	mov	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060cc:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	0c1b      	lsrs	r3, r3, #16
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	3301      	adds	r3, #1
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e4:	60bb      	str	r3, [r7, #8]
      break;
 80060e6:	e002      	b.n	80060ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060e8:	4b05      	ldr	r3, [pc, #20]	; (8006100 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80060ea:	60bb      	str	r3, [r7, #8]
      break;
 80060ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060ee:	68bb      	ldr	r3, [r7, #8]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80060fa:	bf00      	nop
 80060fc:	40023800 	.word	0x40023800
 8006100:	00f42400 	.word	0x00f42400
 8006104:	007a1200 	.word	0x007a1200

08006108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800610c:	4b02      	ldr	r3, [pc, #8]	; (8006118 <HAL_RCC_GetHCLKFreq+0x10>)
 800610e:	681b      	ldr	r3, [r3, #0]
}
 8006110:	4618      	mov	r0, r3
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr
 8006118:	20000010 	.word	0x20000010

0800611c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006122:	f7ff fff1 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 8006126:	4601      	mov	r1, r0
 8006128:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006130:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006134:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	fa92 f2a2 	rbit	r2, r2
 800613c:	603a      	str	r2, [r7, #0]
  return result;
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	fab2 f282 	clz	r2, r2
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	40d3      	lsrs	r3, r2
 8006148:	4a04      	ldr	r2, [pc, #16]	; (800615c <HAL_RCC_GetPCLK1Freq+0x40>)
 800614a:	5cd3      	ldrb	r3, [r2, r3]
 800614c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40023800 	.word	0x40023800
 800615c:	08008cc0 	.word	0x08008cc0

08006160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8006166:	f7ff ffcf 	bl	8006108 <HAL_RCC_GetHCLKFreq>
 800616a:	4601      	mov	r1, r0
 800616c:	4b0b      	ldr	r3, [pc, #44]	; (800619c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006174:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8006178:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	fa92 f2a2 	rbit	r2, r2
 8006180:	603a      	str	r2, [r7, #0]
  return result;
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	fab2 f282 	clz	r2, r2
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	40d3      	lsrs	r3, r2
 800618c:	4a04      	ldr	r2, [pc, #16]	; (80061a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800618e:	5cd3      	ldrb	r3, [r2, r3]
 8006190:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40023800 	.word	0x40023800
 80061a0:	08008cc0 	.word	0x08008cc0

080061a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e01d      	b.n	80061f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fc fa98 	bl	8002700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f000 fcd2 	bl	8006b8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3708      	adds	r7, #8
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f042 0201 	orr.w	r2, r2, #1
 8006210:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b06      	cmp	r3, #6
 8006222:	d007      	beq.n	8006234 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0201 	orr.w	r2, r2, #1
 8006232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr

08006240 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e01d      	b.n	800628e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f815 	bl	8006296 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	3304      	adds	r3, #4
 800627c:	4619      	mov	r1, r3
 800627e:	4610      	mov	r0, r2
 8006280:	f000 fc84 	bl	8006b8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bc80      	pop	{r7}
 80062a6:	4770      	bx	lr

080062a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e01d      	b.n	80062f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d106      	bne.n	80062d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f815 	bl	80062fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	4610      	mov	r0, r2
 80062e8:	f000 fc50 	bl	8006b8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2201      	movs	r2, #1
 8006320:	6839      	ldr	r1, [r7, #0]
 8006322:	4618      	mov	r0, r3
 8006324:	f000 ff12 	bl	800714c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a15      	ldr	r2, [pc, #84]	; (8006384 <HAL_TIM_PWM_Start+0x74>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d004      	beq.n	800633c <HAL_TIM_PWM_Start+0x2c>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a14      	ldr	r2, [pc, #80]	; (8006388 <HAL_TIM_PWM_Start+0x78>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d101      	bne.n	8006340 <HAL_TIM_PWM_Start+0x30>
 800633c:	2301      	movs	r3, #1
 800633e:	e000      	b.n	8006342 <HAL_TIM_PWM_Start+0x32>
 8006340:	2300      	movs	r3, #0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006354:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b06      	cmp	r3, #6
 8006366:	d007      	beq.n	8006378 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0201 	orr.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	40010000 	.word	0x40010000
 8006388:	40010400 	.word	0x40010400

0800638c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2200      	movs	r2, #0
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fed4 	bl	800714c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a22      	ldr	r2, [pc, #136]	; (8006434 <HAL_TIM_PWM_Stop+0xa8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d004      	beq.n	80063b8 <HAL_TIM_PWM_Stop+0x2c>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a21      	ldr	r2, [pc, #132]	; (8006438 <HAL_TIM_PWM_Stop+0xac>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d101      	bne.n	80063bc <HAL_TIM_PWM_Stop+0x30>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e000      	b.n	80063be <HAL_TIM_PWM_Stop+0x32>
 80063bc:	2300      	movs	r3, #0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d017      	beq.n	80063f2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6a1a      	ldr	r2, [r3, #32]
 80063c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10f      	bne.n	80063f2 <HAL_TIM_PWM_Stop+0x66>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6a1a      	ldr	r2, [r3, #32]
 80063d8:	f240 4344 	movw	r3, #1092	; 0x444
 80063dc:	4013      	ands	r3, r2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d107      	bne.n	80063f2 <HAL_TIM_PWM_Stop+0x66>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a1a      	ldr	r2, [r3, #32]
 80063f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80063fc:	4013      	ands	r3, r2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10f      	bne.n	8006422 <HAL_TIM_PWM_Stop+0x96>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6a1a      	ldr	r2, [r3, #32]
 8006408:	f240 4344 	movw	r3, #1092	; 0x444
 800640c:	4013      	ands	r3, r2
 800640e:	2b00      	cmp	r3, #0
 8006410:	d107      	bne.n	8006422 <HAL_TIM_PWM_Stop+0x96>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0201 	bic.w	r2, r2, #1
 8006420:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	40010000 	.word	0x40010000
 8006438:	40010400 	.word	0x40010400

0800643c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e083      	b.n	8006558 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f7fc f9af 	bl	80027c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2202      	movs	r2, #2
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6812      	ldr	r2, [r2, #0]
 800647c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006480:	f023 0307 	bic.w	r3, r3, #7
 8006484:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3304      	adds	r3, #4
 800648e:	4619      	mov	r1, r3
 8006490:	4610      	mov	r0, r2
 8006492:	f000 fb7b 	bl	8006b8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064be:	f023 0303 	bic.w	r3, r3, #3
 80064c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	4313      	orrs	r3, r2
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80064dc:	f023 030c 	bic.w	r3, r3, #12
 80064e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	4313      	orrs	r3, r2
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	011a      	lsls	r2, r3, #4
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	031b      	lsls	r3, r3, #12
 800650c:	4313      	orrs	r3, r2
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800651a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006522:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	4313      	orrs	r3, r2
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3718      	adds	r7, #24
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b02      	cmp	r3, #2
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b02      	cmp	r3, #2
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0202 	mvn.w	r2, #2
 800658c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fad7 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 faca 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fad9 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0304 	and.w	r3, r3, #4
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d122      	bne.n	8006610 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d11b      	bne.n	8006610 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0204 	mvn.w	r2, #4
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2202      	movs	r2, #2
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 faad 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 faa0 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 faaf 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0308 	and.w	r3, r3, #8
 800661a:	2b08      	cmp	r3, #8
 800661c:	d122      	bne.n	8006664 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b08      	cmp	r3, #8
 800662a:	d11b      	bne.n	8006664 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0208 	mvn.w	r2, #8
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2204      	movs	r2, #4
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fa83 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fa76 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fa85 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b10      	cmp	r3, #16
 8006670:	d122      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	2b10      	cmp	r3, #16
 800667e:	d11b      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0210 	mvn.w	r2, #16
 8006688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2208      	movs	r2, #8
 800668e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa59 	bl	8006b56 <HAL_TIM_IC_CaptureCallback>
 80066a4:	e005      	b.n	80066b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fa4c 	bl	8006b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fa5b 	bl	8006b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d10e      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d107      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0201 	mvn.w	r2, #1
 80066dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fb fa22 	bl	8001b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ee:	2b80      	cmp	r3, #128	; 0x80
 80066f0:	d10e      	bne.n	8006710 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fc:	2b80      	cmp	r3, #128	; 0x80
 80066fe:	d107      	bne.n	8006710 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fe4b 	bl	80073a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d10e      	bne.n	800673c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006728:	2b40      	cmp	r3, #64	; 0x40
 800672a:	d107      	bne.n	800673c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 fa1f 	bl	8006b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b20      	cmp	r3, #32
 8006748:	d10e      	bne.n	8006768 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0320 	and.w	r3, r3, #32
 8006754:	2b20      	cmp	r3, #32
 8006756:	d107      	bne.n	8006768 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0220 	mvn.w	r2, #32
 8006760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fe16 	bl	8007394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006768:	bf00      	nop
 800676a:	3708      	adds	r7, #8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006782:	2b01      	cmp	r3, #1
 8006784:	d101      	bne.n	800678a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006786:	2302      	movs	r3, #2
 8006788:	e04e      	b.n	8006828 <HAL_TIM_OC_ConfigChannel+0xb8>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2202      	movs	r2, #2
 8006796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b0c      	cmp	r3, #12
 800679e:	d839      	bhi.n	8006814 <HAL_TIM_OC_ConfigChannel+0xa4>
 80067a0:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80067a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a6:	bf00      	nop
 80067a8:	080067dd 	.word	0x080067dd
 80067ac:	08006815 	.word	0x08006815
 80067b0:	08006815 	.word	0x08006815
 80067b4:	08006815 	.word	0x08006815
 80067b8:	080067eb 	.word	0x080067eb
 80067bc:	08006815 	.word	0x08006815
 80067c0:	08006815 	.word	0x08006815
 80067c4:	08006815 	.word	0x08006815
 80067c8:	080067f9 	.word	0x080067f9
 80067cc:	08006815 	.word	0x08006815
 80067d0:	08006815 	.word	0x08006815
 80067d4:	08006815 	.word	0x08006815
 80067d8:	08006807 	.word	0x08006807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68b9      	ldr	r1, [r7, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fa70 	bl	8006cc8 <TIM_OC1_SetConfig>
      break;
 80067e8:	e015      	b.n	8006816 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fad9 	bl	8006da8 <TIM_OC2_SetConfig>
      break;
 80067f6:	e00e      	b.n	8006816 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fb46 	bl	8006e90 <TIM_OC3_SetConfig>
      break;
 8006804:	e007      	b.n	8006816 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68b9      	ldr	r1, [r7, #8]
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fbb3 	bl	8006f78 <TIM_OC4_SetConfig>
      break;
 8006812:	e000      	b.n	8006816 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006814:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006846:	2302      	movs	r3, #2
 8006848:	e0b4      	b.n	80069b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2202      	movs	r2, #2
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b0c      	cmp	r3, #12
 800685e:	f200 809f 	bhi.w	80069a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006862:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006868:	0800689d 	.word	0x0800689d
 800686c:	080069a1 	.word	0x080069a1
 8006870:	080069a1 	.word	0x080069a1
 8006874:	080069a1 	.word	0x080069a1
 8006878:	080068dd 	.word	0x080068dd
 800687c:	080069a1 	.word	0x080069a1
 8006880:	080069a1 	.word	0x080069a1
 8006884:	080069a1 	.word	0x080069a1
 8006888:	0800691f 	.word	0x0800691f
 800688c:	080069a1 	.word	0x080069a1
 8006890:	080069a1 	.word	0x080069a1
 8006894:	080069a1 	.word	0x080069a1
 8006898:	0800695f 	.word	0x0800695f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fa10 	bl	8006cc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0208 	orr.w	r2, r2, #8
 80068b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 0204 	bic.w	r2, r2, #4
 80068c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6999      	ldr	r1, [r3, #24]
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	691a      	ldr	r2, [r3, #16]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	430a      	orrs	r2, r1
 80068d8:	619a      	str	r2, [r3, #24]
      break;
 80068da:	e062      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fa60 	bl	8006da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6999      	ldr	r1, [r3, #24]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	021a      	lsls	r2, r3, #8
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	619a      	str	r2, [r3, #24]
      break;
 800691c:	e041      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fab3 	bl	8006e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f042 0208 	orr.w	r2, r2, #8
 8006938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0204 	bic.w	r2, r2, #4
 8006948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69d9      	ldr	r1, [r3, #28]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	61da      	str	r2, [r3, #28]
      break;
 800695c:	e021      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68b9      	ldr	r1, [r7, #8]
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fb07 	bl	8006f78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69d9      	ldr	r1, [r3, #28]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	021a      	lsls	r2, r3, #8
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	61da      	str	r2, [r3, #28]
      break;
 800699e:	e000      	b.n	80069a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80069a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d101      	bne.n	80069d4 <HAL_TIM_ConfigClockSource+0x18>
 80069d0:	2302      	movs	r3, #2
 80069d2:	e0b3      	b.n	8006b3c <HAL_TIM_ConfigClockSource+0x180>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a0c:	d03e      	beq.n	8006a8c <HAL_TIM_ConfigClockSource+0xd0>
 8006a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a12:	f200 8087 	bhi.w	8006b24 <HAL_TIM_ConfigClockSource+0x168>
 8006a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1a:	f000 8085 	beq.w	8006b28 <HAL_TIM_ConfigClockSource+0x16c>
 8006a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a22:	d87f      	bhi.n	8006b24 <HAL_TIM_ConfigClockSource+0x168>
 8006a24:	2b70      	cmp	r3, #112	; 0x70
 8006a26:	d01a      	beq.n	8006a5e <HAL_TIM_ConfigClockSource+0xa2>
 8006a28:	2b70      	cmp	r3, #112	; 0x70
 8006a2a:	d87b      	bhi.n	8006b24 <HAL_TIM_ConfigClockSource+0x168>
 8006a2c:	2b60      	cmp	r3, #96	; 0x60
 8006a2e:	d050      	beq.n	8006ad2 <HAL_TIM_ConfigClockSource+0x116>
 8006a30:	2b60      	cmp	r3, #96	; 0x60
 8006a32:	d877      	bhi.n	8006b24 <HAL_TIM_ConfigClockSource+0x168>
 8006a34:	2b50      	cmp	r3, #80	; 0x50
 8006a36:	d03c      	beq.n	8006ab2 <HAL_TIM_ConfigClockSource+0xf6>
 8006a38:	2b50      	cmp	r3, #80	; 0x50
 8006a3a:	d873      	bhi.n	8006b24 <HAL_TIM_ConfigClockSource+0x168>
 8006a3c:	2b40      	cmp	r3, #64	; 0x40
 8006a3e:	d058      	beq.n	8006af2 <HAL_TIM_ConfigClockSource+0x136>
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d86f      	bhi.n	8006b24 <HAL_TIM_ConfigClockSource+0x168>
 8006a44:	2b30      	cmp	r3, #48	; 0x30
 8006a46:	d064      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x156>
 8006a48:	2b30      	cmp	r3, #48	; 0x30
 8006a4a:	d86b      	bhi.n	8006b24 <HAL_TIM_ConfigClockSource+0x168>
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d060      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x156>
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d867      	bhi.n	8006b24 <HAL_TIM_ConfigClockSource+0x168>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d05c      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x156>
 8006a58:	2b10      	cmp	r3, #16
 8006a5a:	d05a      	beq.n	8006b12 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006a5c:	e062      	b.n	8006b24 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	6899      	ldr	r1, [r3, #8]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f000 fb4e 	bl	800710e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a80:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	609a      	str	r2, [r3, #8]
      break;
 8006a8a:	e04e      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6818      	ldr	r0, [r3, #0]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	6899      	ldr	r1, [r3, #8]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f000 fb37 	bl	800710e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aae:	609a      	str	r2, [r3, #8]
      break;
 8006ab0:	e03b      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	6859      	ldr	r1, [r3, #4]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	f000 faae 	bl	8007020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2150      	movs	r1, #80	; 0x50
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 fb05 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006ad0:	e02b      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6818      	ldr	r0, [r3, #0]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6859      	ldr	r1, [r3, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f000 facc 	bl	800707c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2160      	movs	r1, #96	; 0x60
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 faf5 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006af0:	e01b      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6859      	ldr	r1, [r3, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f000 fa8e 	bl	8007020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2140      	movs	r1, #64	; 0x40
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fae5 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006b10:	e00b      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	f000 fadc 	bl	80070da <TIM_ITRx_SetConfig>
      break;
 8006b22:	e002      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b24:	bf00      	nop
 8006b26:	e000      	b.n	8006b2a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b28:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bc80      	pop	{r7}
 8006b54:	4770      	bx	lr

08006b56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bc80      	pop	{r7}
 8006b66:	4770      	bx	lr

08006b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr

08006b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b083      	sub	sp, #12
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr

08006b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a3f      	ldr	r2, [pc, #252]	; (8006c9c <TIM_Base_SetConfig+0x110>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d013      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006baa:	d00f      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a3c      	ldr	r2, [pc, #240]	; (8006ca0 <TIM_Base_SetConfig+0x114>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00b      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a3b      	ldr	r2, [pc, #236]	; (8006ca4 <TIM_Base_SetConfig+0x118>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d007      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a3a      	ldr	r2, [pc, #232]	; (8006ca8 <TIM_Base_SetConfig+0x11c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d003      	beq.n	8006bcc <TIM_Base_SetConfig+0x40>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a39      	ldr	r2, [pc, #228]	; (8006cac <TIM_Base_SetConfig+0x120>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d108      	bne.n	8006bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2e      	ldr	r2, [pc, #184]	; (8006c9c <TIM_Base_SetConfig+0x110>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d02b      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bec:	d027      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a2b      	ldr	r2, [pc, #172]	; (8006ca0 <TIM_Base_SetConfig+0x114>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d023      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a2a      	ldr	r2, [pc, #168]	; (8006ca4 <TIM_Base_SetConfig+0x118>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d01f      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a29      	ldr	r2, [pc, #164]	; (8006ca8 <TIM_Base_SetConfig+0x11c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d01b      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a28      	ldr	r2, [pc, #160]	; (8006cac <TIM_Base_SetConfig+0x120>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d017      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a27      	ldr	r2, [pc, #156]	; (8006cb0 <TIM_Base_SetConfig+0x124>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d013      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a26      	ldr	r2, [pc, #152]	; (8006cb4 <TIM_Base_SetConfig+0x128>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00f      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a25      	ldr	r2, [pc, #148]	; (8006cb8 <TIM_Base_SetConfig+0x12c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00b      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a24      	ldr	r2, [pc, #144]	; (8006cbc <TIM_Base_SetConfig+0x130>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a23      	ldr	r2, [pc, #140]	; (8006cc0 <TIM_Base_SetConfig+0x134>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_Base_SetConfig+0xb2>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a22      	ldr	r2, [pc, #136]	; (8006cc4 <TIM_Base_SetConfig+0x138>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d108      	bne.n	8006c50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <TIM_Base_SetConfig+0x110>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_Base_SetConfig+0xf8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a0b      	ldr	r2, [pc, #44]	; (8006cac <TIM_Base_SetConfig+0x120>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d103      	bne.n	8006c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	691a      	ldr	r2, [r3, #16]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	615a      	str	r2, [r3, #20]
}
 8006c92:	bf00      	nop
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr
 8006c9c:	40010000 	.word	0x40010000
 8006ca0:	40000400 	.word	0x40000400
 8006ca4:	40000800 	.word	0x40000800
 8006ca8:	40000c00 	.word	0x40000c00
 8006cac:	40010400 	.word	0x40010400
 8006cb0:	40014000 	.word	0x40014000
 8006cb4:	40014400 	.word	0x40014400
 8006cb8:	40014800 	.word	0x40014800
 8006cbc:	40001800 	.word	0x40001800
 8006cc0:	40001c00 	.word	0x40001c00
 8006cc4:	40002000 	.word	0x40002000

08006cc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	f023 0201 	bic.w	r2, r3, #1
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0303 	bic.w	r3, r3, #3
 8006cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f023 0302 	bic.w	r3, r3, #2
 8006d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a20      	ldr	r2, [pc, #128]	; (8006da0 <TIM_OC1_SetConfig+0xd8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d003      	beq.n	8006d2c <TIM_OC1_SetConfig+0x64>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a1f      	ldr	r2, [pc, #124]	; (8006da4 <TIM_OC1_SetConfig+0xdc>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d10c      	bne.n	8006d46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f023 0308 	bic.w	r3, r3, #8
 8006d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	f023 0304 	bic.w	r3, r3, #4
 8006d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a15      	ldr	r2, [pc, #84]	; (8006da0 <TIM_OC1_SetConfig+0xd8>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d003      	beq.n	8006d56 <TIM_OC1_SetConfig+0x8e>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a14      	ldr	r2, [pc, #80]	; (8006da4 <TIM_OC1_SetConfig+0xdc>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d111      	bne.n	8006d7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	695b      	ldr	r3, [r3, #20]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	621a      	str	r2, [r3, #32]
}
 8006d94:	bf00      	nop
 8006d96:	371c      	adds	r7, #28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bc80      	pop	{r7}
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	40010000 	.word	0x40010000
 8006da4:	40010400 	.word	0x40010400

08006da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	f023 0210 	bic.w	r2, r3, #16
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f023 0320 	bic.w	r3, r3, #32
 8006df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	011b      	lsls	r3, r3, #4
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a21      	ldr	r2, [pc, #132]	; (8006e88 <TIM_OC2_SetConfig+0xe0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d003      	beq.n	8006e10 <TIM_OC2_SetConfig+0x68>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a20      	ldr	r2, [pc, #128]	; (8006e8c <TIM_OC2_SetConfig+0xe4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d10d      	bne.n	8006e2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a16      	ldr	r2, [pc, #88]	; (8006e88 <TIM_OC2_SetConfig+0xe0>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d003      	beq.n	8006e3c <TIM_OC2_SetConfig+0x94>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a15      	ldr	r2, [pc, #84]	; (8006e8c <TIM_OC2_SetConfig+0xe4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d113      	bne.n	8006e64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	621a      	str	r2, [r3, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr
 8006e88:	40010000 	.word	0x40010000
 8006e8c:	40010400 	.word	0x40010400

08006e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	021b      	lsls	r3, r3, #8
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a21      	ldr	r2, [pc, #132]	; (8006f70 <TIM_OC3_SetConfig+0xe0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d003      	beq.n	8006ef6 <TIM_OC3_SetConfig+0x66>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a20      	ldr	r2, [pc, #128]	; (8006f74 <TIM_OC3_SetConfig+0xe4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d10d      	bne.n	8006f12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a16      	ldr	r2, [pc, #88]	; (8006f70 <TIM_OC3_SetConfig+0xe0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_OC3_SetConfig+0x92>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a15      	ldr	r2, [pc, #84]	; (8006f74 <TIM_OC3_SetConfig+0xe4>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d113      	bne.n	8006f4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	011b      	lsls	r3, r3, #4
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	621a      	str	r2, [r3, #32]
}
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40010400 	.word	0x40010400

08006f78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	021b      	lsls	r3, r3, #8
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	031b      	lsls	r3, r3, #12
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a11      	ldr	r2, [pc, #68]	; (8007018 <TIM_OC4_SetConfig+0xa0>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d003      	beq.n	8006fe0 <TIM_OC4_SetConfig+0x68>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a10      	ldr	r2, [pc, #64]	; (800701c <TIM_OC4_SetConfig+0xa4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d109      	bne.n	8006ff4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	019b      	lsls	r3, r3, #6
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr
 8007018:	40010000 	.word	0x40010000
 800701c:	40010400 	.word	0x40010400

08007020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007020:	b480      	push	{r7}
 8007022:	b087      	sub	sp, #28
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	f023 0201 	bic.w	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800704a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f023 030a 	bic.w	r3, r3, #10
 800705c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	621a      	str	r2, [r3, #32]
}
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	bc80      	pop	{r7}
 800707a:	4770      	bx	lr

0800707c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	f023 0210 	bic.w	r2, r3, #16
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80070a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	031b      	lsls	r3, r3, #12
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80070b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	011b      	lsls	r3, r3, #4
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	621a      	str	r2, [r3, #32]
}
 80070d0:	bf00      	nop
 80070d2:	371c      	adds	r7, #28
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr

080070da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80070da:	b480      	push	{r7}
 80070dc:	b085      	sub	sp, #20
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	f043 0307 	orr.w	r3, r3, #7
 80070fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	609a      	str	r2, [r3, #8]
}
 8007104:	bf00      	nop
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	bc80      	pop	{r7}
 800710c:	4770      	bx	lr

0800710e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800710e:	b480      	push	{r7}
 8007110:	b087      	sub	sp, #28
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
 800711a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007128:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	021a      	lsls	r2, r3, #8
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	431a      	orrs	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4313      	orrs	r3, r2
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	4313      	orrs	r3, r2
 800713a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	609a      	str	r2, [r3, #8]
}
 8007142:	bf00      	nop
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr

0800714c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f003 031f 	and.w	r3, r3, #31
 800715e:	2201      	movs	r2, #1
 8007160:	fa02 f303 	lsl.w	r3, r2, r3
 8007164:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6a1a      	ldr	r2, [r3, #32]
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	43db      	mvns	r3, r3
 800716e:	401a      	ands	r2, r3
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f003 031f 	and.w	r3, r3, #31
 800717e:	6879      	ldr	r1, [r7, #4]
 8007180:	fa01 f303 	lsl.w	r3, r1, r3
 8007184:	431a      	orrs	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	621a      	str	r2, [r3, #32]
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr

08007194 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2204      	movs	r2, #4
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 f906 	bl	80073b8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b06      	cmp	r3, #6
 80071cc:	d007      	beq.n	80071de <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0201 	orr.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2200      	movs	r2, #0
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f8dc 	bl	80073b8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6a1a      	ldr	r2, [r3, #32]
 8007206:	f241 1311 	movw	r3, #4369	; 0x1111
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10f      	bne.n	8007230 <HAL_TIMEx_PWMN_Stop+0x48>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6a1a      	ldr	r2, [r3, #32]
 8007216:	f240 4344 	movw	r3, #1092	; 0x444
 800721a:	4013      	ands	r3, r2
 800721c:	2b00      	cmp	r3, #0
 800721e:	d107      	bne.n	8007230 <HAL_TIMEx_PWMN_Stop+0x48>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800722e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6a1a      	ldr	r2, [r3, #32]
 8007236:	f241 1311 	movw	r3, #4369	; 0x1111
 800723a:	4013      	ands	r3, r2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10f      	bne.n	8007260 <HAL_TIMEx_PWMN_Stop+0x78>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6a1a      	ldr	r2, [r3, #32]
 8007246:	f240 4344 	movw	r3, #1092	; 0x444
 800724a:	4013      	ands	r3, r2
 800724c:	2b00      	cmp	r3, #0
 800724e:	d107      	bne.n	8007260 <HAL_TIMEx_PWMN_Stop+0x78>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 0201 	bic.w	r2, r2, #1
 800725e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800727a:	2b01      	cmp	r3, #1
 800727c:	d101      	bne.n	8007282 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800727e:	2302      	movs	r3, #2
 8007280:	e032      	b.n	80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2202      	movs	r2, #2
 800728e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ba:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bc80      	pop	{r7}
 80072f0:	4770      	bx	lr

080072f2 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b085      	sub	sp, #20
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800730a:	2302      	movs	r3, #2
 800730c:	e03d      	b.n	800738a <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	4313      	orrs	r3, r2
 8007330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	4313      	orrs	r3, r2
 800733e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	4313      	orrs	r3, r2
 800735a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	4313      	orrs	r3, r2
 8007368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr

08007394 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr

080073a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr

080073b8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f003 031f 	and.w	r3, r3, #31
 80073ca:	2204      	movs	r2, #4
 80073cc:	fa02 f303 	lsl.w	r3, r2, r3
 80073d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a1a      	ldr	r2, [r3, #32]
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	43db      	mvns	r3, r3
 80073da:	401a      	ands	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6a1a      	ldr	r2, [r3, #32]
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f003 031f 	and.w	r3, r3, #31
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	fa01 f303 	lsl.w	r3, r1, r3
 80073f0:	431a      	orrs	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	621a      	str	r2, [r3, #32]
}
 80073f6:	bf00      	nop
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr

08007400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e03f      	b.n	8007492 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fb faa0 	bl	800296c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2224      	movs	r2, #36	; 0x24
 8007430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fa63 	bl	8007910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695a      	ldr	r2, [r3, #20]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10d      	bne.n	80074ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <HAL_UART_IRQHandler+0x52>
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f991 	bl	800780e <UART_Receive_IT>
      return;
 80074ec:	e0d0      	b.n	8007690 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 80b0 	beq.w	8007656 <HAL_UART_IRQHandler+0x1ba>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <HAL_UART_IRQHandler+0x70>
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007506:	2b00      	cmp	r3, #0
 8007508:	f000 80a5 	beq.w	8007656 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <HAL_UART_IRQHandler+0x90>
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007524:	f043 0201 	orr.w	r2, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f003 0304 	and.w	r3, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <HAL_UART_IRQHandler+0xb0>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007544:	f043 0202 	orr.w	r2, r3, #2
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <HAL_UART_IRQHandler+0xd0>
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f003 0301 	and.w	r3, r3, #1
 800755c:	2b00      	cmp	r3, #0
 800755e:	d005      	beq.n	800756c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007564:	f043 0204 	orr.w	r2, r3, #4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d00f      	beq.n	8007596 <HAL_UART_IRQHandler+0xfa>
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	f003 0320 	and.w	r3, r3, #32
 800757c:	2b00      	cmp	r3, #0
 800757e:	d104      	bne.n	800758a <HAL_UART_IRQHandler+0xee>
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	f043 0208 	orr.w	r2, r3, #8
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d077      	beq.n	800768e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d007      	beq.n	80075b8 <HAL_UART_IRQHandler+0x11c>
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	f003 0320 	and.w	r3, r3, #32
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f92b 	bl	800780e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	bf0c      	ite	eq
 80075c6:	2301      	moveq	r3, #1
 80075c8:	2300      	movne	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d2:	f003 0308 	and.w	r3, r3, #8
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d102      	bne.n	80075e0 <HAL_UART_IRQHandler+0x144>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d031      	beq.n	8007644 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f876 	bl	80076d2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f0:	2b40      	cmp	r3, #64	; 0x40
 80075f2:	d123      	bne.n	800763c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	695a      	ldr	r2, [r3, #20]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007602:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007608:	2b00      	cmp	r3, #0
 800760a:	d013      	beq.n	8007634 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007610:	4a21      	ldr	r2, [pc, #132]	; (8007698 <HAL_UART_IRQHandler+0x1fc>)
 8007612:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007618:	4618      	mov	r0, r3
 800761a:	f7fc f8db 	bl	80037d4 <HAL_DMA_Abort_IT>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d016      	beq.n	8007652 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800762e:	4610      	mov	r0, r2
 8007630:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007632:	e00e      	b.n	8007652 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f843 	bl	80076c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763a:	e00a      	b.n	8007652 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f83f 	bl	80076c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007642:	e006      	b.n	8007652 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f83b 	bl	80076c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007650:	e01d      	b.n	800768e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007652:	bf00      	nop
    return;
 8007654:	e01b      	b.n	800768e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765c:	2b00      	cmp	r3, #0
 800765e:	d008      	beq.n	8007672 <HAL_UART_IRQHandler+0x1d6>
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f862 	bl	8007734 <UART_Transmit_IT>
    return;
 8007670:	e00e      	b.n	8007690 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d009      	beq.n	8007690 <HAL_UART_IRQHandler+0x1f4>
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007682:	2b00      	cmp	r3, #0
 8007684:	d004      	beq.n	8007690 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f8a9 	bl	80077de <UART_EndTransmit_IT>
    return;
 800768c:	e000      	b.n	8007690 <HAL_UART_IRQHandler+0x1f4>
    return;
 800768e:	bf00      	nop
  }
}
 8007690:	3720      	adds	r7, #32
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	0800770d 	.word	0x0800770d

0800769c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bc80      	pop	{r7}
 80076ac:	4770      	bx	lr

080076ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b083      	sub	sp, #12
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bc80      	pop	{r7}
 80076be:	4770      	bx	lr

080076c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bc80      	pop	{r7}
 80076d0:	4770      	bx	lr

080076d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076e8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	695a      	ldr	r2, [r3, #20]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	bc80      	pop	{r7}
 800770a:	4770      	bx	lr

0800770c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f7ff ffca 	bl	80076c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800772c:	bf00      	nop
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b21      	cmp	r3, #33	; 0x21
 8007746:	d144      	bne.n	80077d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007750:	d11a      	bne.n	8007788 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	461a      	mov	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007766:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d105      	bne.n	800777c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	1c9a      	adds	r2, r3, #2
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	621a      	str	r2, [r3, #32]
 800777a:	e00e      	b.n	800779a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	621a      	str	r2, [r3, #32]
 8007786:	e008      	b.n	800779a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	1c59      	adds	r1, r3, #1
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	6211      	str	r1, [r2, #32]
 8007792:	781a      	ldrb	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	4619      	mov	r1, r3
 80077a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10f      	bne.n	80077ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80077bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	e000      	b.n	80077d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077d2:	2302      	movs	r3, #2
  }
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3714      	adds	r7, #20
 80077d8:	46bd      	mov	sp, r7
 80077da:	bc80      	pop	{r7}
 80077dc:	4770      	bx	lr

080077de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff ff4c 	bl	800769c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b22      	cmp	r3, #34	; 0x22
 8007820:	d171      	bne.n	8007906 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782a:	d123      	bne.n	8007874 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007830:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10e      	bne.n	8007858 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	b29b      	uxth	r3, r3
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	b29a      	uxth	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	1c9a      	adds	r2, r3, #2
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	629a      	str	r2, [r3, #40]	; 0x28
 8007856:	e029      	b.n	80078ac <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	b29b      	uxth	r3, r3
 8007860:	b2db      	uxtb	r3, r3
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	629a      	str	r2, [r3, #40]	; 0x28
 8007872:	e01b      	b.n	80078ac <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10a      	bne.n	8007892 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6858      	ldr	r0, [r3, #4]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007886:	1c59      	adds	r1, r3, #1
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6291      	str	r1, [r2, #40]	; 0x28
 800788c:	b2c2      	uxtb	r2, r0
 800788e:	701a      	strb	r2, [r3, #0]
 8007890:	e00c      	b.n	80078ac <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	b2da      	uxtb	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789e:	1c58      	adds	r0, r3, #1
 80078a0:	6879      	ldr	r1, [r7, #4]
 80078a2:	6288      	str	r0, [r1, #40]	; 0x28
 80078a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078a8:	b2d2      	uxtb	r2, r2
 80078aa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	4619      	mov	r1, r3
 80078ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d120      	bne.n	8007902 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0220 	bic.w	r2, r2, #32
 80078ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	695a      	ldr	r2, [r3, #20]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0201 	bic.w	r2, r2, #1
 80078ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff fed8 	bl	80076ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e002      	b.n	8007908 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	e000      	b.n	8007908 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007906:	2302      	movs	r3, #2
  }
}
 8007908:	4618      	mov	r0, r3
 800790a:	3710      	adds	r7, #16
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	430a      	orrs	r2, r1
 800792c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	69db      	ldr	r3, [r3, #28]
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007950:	f023 030c 	bic.w	r3, r3, #12
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6812      	ldr	r2, [r2, #0]
 8007958:	68f9      	ldr	r1, [r7, #12]
 800795a:	430b      	orrs	r3, r1
 800795c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695b      	ldr	r3, [r3, #20]
 8007964:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699a      	ldr	r2, [r3, #24]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800797c:	f040 80aa 	bne.w	8007ad4 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4aa9      	ldr	r2, [pc, #676]	; (8007c2c <UART_SetConfig+0x31c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d004      	beq.n	8007994 <UART_SetConfig+0x84>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4aa8      	ldr	r2, [pc, #672]	; (8007c30 <UART_SetConfig+0x320>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d14f      	bne.n	8007a34 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007994:	f7fe fbe4 	bl	8006160 <HAL_RCC_GetPCLK2Freq>
 8007998:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009a      	lsls	r2, r3, #2
 80079a4:	441a      	add	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b0:	4aa0      	ldr	r2, [pc, #640]	; (8007c34 <UART_SetConfig+0x324>)
 80079b2:	fba2 2303 	umull	r2, r3, r2, r3
 80079b6:	095b      	lsrs	r3, r3, #5
 80079b8:	0119      	lsls	r1, r3, #4
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	009a      	lsls	r2, r3, #2
 80079c4:	441a      	add	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80079d0:	4b98      	ldr	r3, [pc, #608]	; (8007c34 <UART_SetConfig+0x324>)
 80079d2:	fba3 0302 	umull	r0, r3, r3, r2
 80079d6:	095b      	lsrs	r3, r3, #5
 80079d8:	2064      	movs	r0, #100	; 0x64
 80079da:	fb00 f303 	mul.w	r3, r0, r3
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	00db      	lsls	r3, r3, #3
 80079e2:	3332      	adds	r3, #50	; 0x32
 80079e4:	4a93      	ldr	r2, [pc, #588]	; (8007c34 <UART_SetConfig+0x324>)
 80079e6:	fba2 2303 	umull	r2, r3, r2, r3
 80079ea:	095b      	lsrs	r3, r3, #5
 80079ec:	005b      	lsls	r3, r3, #1
 80079ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079f2:	4419      	add	r1, r3
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	009a      	lsls	r2, r3, #2
 80079fe:	441a      	add	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a0a:	4b8a      	ldr	r3, [pc, #552]	; (8007c34 <UART_SetConfig+0x324>)
 8007a0c:	fba3 0302 	umull	r0, r3, r3, r2
 8007a10:	095b      	lsrs	r3, r3, #5
 8007a12:	2064      	movs	r0, #100	; 0x64
 8007a14:	fb00 f303 	mul.w	r3, r0, r3
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	3332      	adds	r3, #50	; 0x32
 8007a1e:	4a85      	ldr	r2, [pc, #532]	; (8007c34 <UART_SetConfig+0x324>)
 8007a20:	fba2 2303 	umull	r2, r3, r2, r3
 8007a24:	095b      	lsrs	r3, r3, #5
 8007a26:	f003 0207 	and.w	r2, r3, #7
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	440a      	add	r2, r1
 8007a30:	609a      	str	r2, [r3, #8]
 8007a32:	e0f7      	b.n	8007c24 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a34:	f7fe fb72 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 8007a38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009a      	lsls	r2, r3, #2
 8007a44:	441a      	add	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a50:	4a78      	ldr	r2, [pc, #480]	; (8007c34 <UART_SetConfig+0x324>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	095b      	lsrs	r3, r3, #5
 8007a58:	0119      	lsls	r1, r3, #4
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4413      	add	r3, r2
 8007a62:	009a      	lsls	r2, r3, #2
 8007a64:	441a      	add	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	005b      	lsls	r3, r3, #1
 8007a6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a70:	4b70      	ldr	r3, [pc, #448]	; (8007c34 <UART_SetConfig+0x324>)
 8007a72:	fba3 0302 	umull	r0, r3, r3, r2
 8007a76:	095b      	lsrs	r3, r3, #5
 8007a78:	2064      	movs	r0, #100	; 0x64
 8007a7a:	fb00 f303 	mul.w	r3, r0, r3
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	00db      	lsls	r3, r3, #3
 8007a82:	3332      	adds	r3, #50	; 0x32
 8007a84:	4a6b      	ldr	r2, [pc, #428]	; (8007c34 <UART_SetConfig+0x324>)
 8007a86:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8a:	095b      	lsrs	r3, r3, #5
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007a92:	4419      	add	r1, r3
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009a      	lsls	r2, r3, #2
 8007a9e:	441a      	add	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	fbb2 f2f3 	udiv	r2, r2, r3
 8007aaa:	4b62      	ldr	r3, [pc, #392]	; (8007c34 <UART_SetConfig+0x324>)
 8007aac:	fba3 0302 	umull	r0, r3, r3, r2
 8007ab0:	095b      	lsrs	r3, r3, #5
 8007ab2:	2064      	movs	r0, #100	; 0x64
 8007ab4:	fb00 f303 	mul.w	r3, r0, r3
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	3332      	adds	r3, #50	; 0x32
 8007abe:	4a5d      	ldr	r2, [pc, #372]	; (8007c34 <UART_SetConfig+0x324>)
 8007ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac4:	095b      	lsrs	r3, r3, #5
 8007ac6:	f003 0207 	and.w	r2, r3, #7
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	440a      	add	r2, r1
 8007ad0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007ad2:	e0a7      	b.n	8007c24 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a54      	ldr	r2, [pc, #336]	; (8007c2c <UART_SetConfig+0x31c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d004      	beq.n	8007ae8 <UART_SetConfig+0x1d8>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a53      	ldr	r2, [pc, #332]	; (8007c30 <UART_SetConfig+0x320>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d14e      	bne.n	8007b86 <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ae8:	f7fe fb3a 	bl	8006160 <HAL_RCC_GetPCLK2Freq>
 8007aec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	4613      	mov	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	009a      	lsls	r2, r3, #2
 8007af8:	441a      	add	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b04:	4a4b      	ldr	r2, [pc, #300]	; (8007c34 <UART_SetConfig+0x324>)
 8007b06:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0a:	095b      	lsrs	r3, r3, #5
 8007b0c:	0119      	lsls	r1, r3, #4
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009a      	lsls	r2, r3, #2
 8007b18:	441a      	add	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b24:	4b43      	ldr	r3, [pc, #268]	; (8007c34 <UART_SetConfig+0x324>)
 8007b26:	fba3 0302 	umull	r0, r3, r3, r2
 8007b2a:	095b      	lsrs	r3, r3, #5
 8007b2c:	2064      	movs	r0, #100	; 0x64
 8007b2e:	fb00 f303 	mul.w	r3, r0, r3
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	3332      	adds	r3, #50	; 0x32
 8007b38:	4a3e      	ldr	r2, [pc, #248]	; (8007c34 <UART_SetConfig+0x324>)
 8007b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3e:	095b      	lsrs	r3, r3, #5
 8007b40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b44:	4419      	add	r1, r3
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	009a      	lsls	r2, r3, #2
 8007b50:	441a      	add	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b5c:	4b35      	ldr	r3, [pc, #212]	; (8007c34 <UART_SetConfig+0x324>)
 8007b5e:	fba3 0302 	umull	r0, r3, r3, r2
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	2064      	movs	r0, #100	; 0x64
 8007b66:	fb00 f303 	mul.w	r3, r0, r3
 8007b6a:	1ad3      	subs	r3, r2, r3
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	3332      	adds	r3, #50	; 0x32
 8007b70:	4a30      	ldr	r2, [pc, #192]	; (8007c34 <UART_SetConfig+0x324>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	f003 020f 	and.w	r2, r3, #15
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	440a      	add	r2, r1
 8007b82:	609a      	str	r2, [r3, #8]
 8007b84:	e04e      	b.n	8007c24 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b86:	f7fe fac9 	bl	800611c <HAL_RCC_GetPCLK1Freq>
 8007b8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009a      	lsls	r2, r3, #2
 8007b96:	441a      	add	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba2:	4a24      	ldr	r2, [pc, #144]	; (8007c34 <UART_SetConfig+0x324>)
 8007ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba8:	095b      	lsrs	r3, r3, #5
 8007baa:	0119      	lsls	r1, r3, #4
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009a      	lsls	r2, r3, #2
 8007bb6:	441a      	add	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bc2:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <UART_SetConfig+0x324>)
 8007bc4:	fba3 0302 	umull	r0, r3, r3, r2
 8007bc8:	095b      	lsrs	r3, r3, #5
 8007bca:	2064      	movs	r0, #100	; 0x64
 8007bcc:	fb00 f303 	mul.w	r3, r0, r3
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	3332      	adds	r3, #50	; 0x32
 8007bd6:	4a17      	ldr	r2, [pc, #92]	; (8007c34 <UART_SetConfig+0x324>)
 8007bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bdc:	095b      	lsrs	r3, r3, #5
 8007bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007be2:	4419      	add	r1, r3
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	009a      	lsls	r2, r3, #2
 8007bee:	441a      	add	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bfa:	4b0e      	ldr	r3, [pc, #56]	; (8007c34 <UART_SetConfig+0x324>)
 8007bfc:	fba3 0302 	umull	r0, r3, r3, r2
 8007c00:	095b      	lsrs	r3, r3, #5
 8007c02:	2064      	movs	r0, #100	; 0x64
 8007c04:	fb00 f303 	mul.w	r3, r0, r3
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	3332      	adds	r3, #50	; 0x32
 8007c0e:	4a09      	ldr	r2, [pc, #36]	; (8007c34 <UART_SetConfig+0x324>)
 8007c10:	fba2 2303 	umull	r2, r3, r2, r3
 8007c14:	095b      	lsrs	r3, r3, #5
 8007c16:	f003 020f 	and.w	r2, r3, #15
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	440a      	add	r2, r1
 8007c20:	609a      	str	r2, [r3, #8]
}
 8007c22:	e7ff      	b.n	8007c24 <UART_SetConfig+0x314>
 8007c24:	bf00      	nop
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	40011000 	.word	0x40011000
 8007c30:	40011400 	.word	0x40011400
 8007c34:	51eb851f 	.word	0x51eb851f

08007c38 <__libc_init_array>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	2600      	movs	r6, #0
 8007c3c:	4d0c      	ldr	r5, [pc, #48]	; (8007c70 <__libc_init_array+0x38>)
 8007c3e:	4c0d      	ldr	r4, [pc, #52]	; (8007c74 <__libc_init_array+0x3c>)
 8007c40:	1b64      	subs	r4, r4, r5
 8007c42:	10a4      	asrs	r4, r4, #2
 8007c44:	42a6      	cmp	r6, r4
 8007c46:	d109      	bne.n	8007c5c <__libc_init_array+0x24>
 8007c48:	f001 f824 	bl	8008c94 <_init>
 8007c4c:	2600      	movs	r6, #0
 8007c4e:	4d0a      	ldr	r5, [pc, #40]	; (8007c78 <__libc_init_array+0x40>)
 8007c50:	4c0a      	ldr	r4, [pc, #40]	; (8007c7c <__libc_init_array+0x44>)
 8007c52:	1b64      	subs	r4, r4, r5
 8007c54:	10a4      	asrs	r4, r4, #2
 8007c56:	42a6      	cmp	r6, r4
 8007c58:	d105      	bne.n	8007c66 <__libc_init_array+0x2e>
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c60:	4798      	blx	r3
 8007c62:	3601      	adds	r6, #1
 8007c64:	e7ee      	b.n	8007c44 <__libc_init_array+0xc>
 8007c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6a:	4798      	blx	r3
 8007c6c:	3601      	adds	r6, #1
 8007c6e:	e7f2      	b.n	8007c56 <__libc_init_array+0x1e>
 8007c70:	08008eb0 	.word	0x08008eb0
 8007c74:	08008eb0 	.word	0x08008eb0
 8007c78:	08008eb0 	.word	0x08008eb0
 8007c7c:	08008eb4 	.word	0x08008eb4

08007c80 <memset>:
 8007c80:	4603      	mov	r3, r0
 8007c82:	4402      	add	r2, r0
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d100      	bne.n	8007c8a <memset+0xa>
 8007c88:	4770      	bx	lr
 8007c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c8e:	e7f9      	b.n	8007c84 <memset+0x4>

08007c90 <sin>:
 8007c90:	b530      	push	{r4, r5, lr}
 8007c92:	4a20      	ldr	r2, [pc, #128]	; (8007d14 <sin+0x84>)
 8007c94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	dc06      	bgt.n	8007cac <sin+0x1c>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f000 fe33 	bl	8008910 <__kernel_sin>
 8007caa:	e006      	b.n	8007cba <sin+0x2a>
 8007cac:	4a1a      	ldr	r2, [pc, #104]	; (8007d18 <sin+0x88>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	dd05      	ble.n	8007cbe <sin+0x2e>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	f7f8 fa8b 	bl	80001d0 <__aeabi_dsub>
 8007cba:	b007      	add	sp, #28
 8007cbc:	bd30      	pop	{r4, r5, pc}
 8007cbe:	aa02      	add	r2, sp, #8
 8007cc0:	f000 f82e 	bl	8007d20 <__ieee754_rem_pio2>
 8007cc4:	f000 0003 	and.w	r0, r0, #3
 8007cc8:	2801      	cmp	r0, #1
 8007cca:	d009      	beq.n	8007ce0 <sin+0x50>
 8007ccc:	2802      	cmp	r0, #2
 8007cce:	d00e      	beq.n	8007cee <sin+0x5e>
 8007cd0:	b9c0      	cbnz	r0, 8007d04 <sin+0x74>
 8007cd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cde:	e7e2      	b.n	8007ca6 <sin+0x16>
 8007ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce8:	f000 fa0a 	bl	8008100 <__kernel_cos>
 8007cec:	e7e5      	b.n	8007cba <sin+0x2a>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cfa:	f000 fe09 	bl	8008910 <__kernel_sin>
 8007cfe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007d02:	e7da      	b.n	8007cba <sin+0x2a>
 8007d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d0c:	f000 f9f8 	bl	8008100 <__kernel_cos>
 8007d10:	e7f5      	b.n	8007cfe <sin+0x6e>
 8007d12:	bf00      	nop
 8007d14:	3fe921fb 	.word	0x3fe921fb
 8007d18:	7fefffff 	.word	0x7fefffff
 8007d1c:	00000000 	.word	0x00000000

08007d20 <__ieee754_rem_pio2>:
 8007d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	4614      	mov	r4, r2
 8007d26:	4ac4      	ldr	r2, [pc, #784]	; (8008038 <__ieee754_rem_pio2+0x318>)
 8007d28:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8007d2c:	b08d      	sub	sp, #52	; 0x34
 8007d2e:	4592      	cmp	sl, r2
 8007d30:	9104      	str	r1, [sp, #16]
 8007d32:	dc07      	bgt.n	8007d44 <__ieee754_rem_pio2+0x24>
 8007d34:	2200      	movs	r2, #0
 8007d36:	2300      	movs	r3, #0
 8007d38:	e9c4 0100 	strd	r0, r1, [r4]
 8007d3c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007d40:	2500      	movs	r5, #0
 8007d42:	e024      	b.n	8007d8e <__ieee754_rem_pio2+0x6e>
 8007d44:	4abd      	ldr	r2, [pc, #756]	; (800803c <__ieee754_rem_pio2+0x31c>)
 8007d46:	4592      	cmp	sl, r2
 8007d48:	dc72      	bgt.n	8007e30 <__ieee754_rem_pio2+0x110>
 8007d4a:	9b04      	ldr	r3, [sp, #16]
 8007d4c:	4dbc      	ldr	r5, [pc, #752]	; (8008040 <__ieee754_rem_pio2+0x320>)
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	a3ab      	add	r3, pc, #684	; (adr r3, 8008000 <__ieee754_rem_pio2+0x2e0>)
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	dd36      	ble.n	8007dc6 <__ieee754_rem_pio2+0xa6>
 8007d58:	f7f8 fa3a 	bl	80001d0 <__aeabi_dsub>
 8007d5c:	45aa      	cmp	sl, r5
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460f      	mov	r7, r1
 8007d62:	d018      	beq.n	8007d96 <__ieee754_rem_pio2+0x76>
 8007d64:	a3a8      	add	r3, pc, #672	; (adr r3, 8008008 <__ieee754_rem_pio2+0x2e8>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f7f8 fa31 	bl	80001d0 <__aeabi_dsub>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4630      	mov	r0, r6
 8007d74:	e9c4 2300 	strd	r2, r3, [r4]
 8007d78:	4639      	mov	r1, r7
 8007d7a:	f7f8 fa29 	bl	80001d0 <__aeabi_dsub>
 8007d7e:	a3a2      	add	r3, pc, #648	; (adr r3, 8008008 <__ieee754_rem_pio2+0x2e8>)
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 fa24 	bl	80001d0 <__aeabi_dsub>
 8007d88:	2501      	movs	r5, #1
 8007d8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d8e:	4628      	mov	r0, r5
 8007d90:	b00d      	add	sp, #52	; 0x34
 8007d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d96:	a39e      	add	r3, pc, #632	; (adr r3, 8008010 <__ieee754_rem_pio2+0x2f0>)
 8007d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9c:	f7f8 fa18 	bl	80001d0 <__aeabi_dsub>
 8007da0:	a39d      	add	r3, pc, #628	; (adr r3, 8008018 <__ieee754_rem_pio2+0x2f8>)
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	4606      	mov	r6, r0
 8007da8:	460f      	mov	r7, r1
 8007daa:	f7f8 fa11 	bl	80001d0 <__aeabi_dsub>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4630      	mov	r0, r6
 8007db4:	e9c4 2300 	strd	r2, r3, [r4]
 8007db8:	4639      	mov	r1, r7
 8007dba:	f7f8 fa09 	bl	80001d0 <__aeabi_dsub>
 8007dbe:	a396      	add	r3, pc, #600	; (adr r3, 8008018 <__ieee754_rem_pio2+0x2f8>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	e7de      	b.n	8007d84 <__ieee754_rem_pio2+0x64>
 8007dc6:	f7f8 fa05 	bl	80001d4 <__adddf3>
 8007dca:	45aa      	cmp	sl, r5
 8007dcc:	4606      	mov	r6, r0
 8007dce:	460f      	mov	r7, r1
 8007dd0:	d016      	beq.n	8007e00 <__ieee754_rem_pio2+0xe0>
 8007dd2:	a38d      	add	r3, pc, #564	; (adr r3, 8008008 <__ieee754_rem_pio2+0x2e8>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 f9fc 	bl	80001d4 <__adddf3>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	4630      	mov	r0, r6
 8007de2:	e9c4 2300 	strd	r2, r3, [r4]
 8007de6:	4639      	mov	r1, r7
 8007de8:	f7f8 f9f2 	bl	80001d0 <__aeabi_dsub>
 8007dec:	a386      	add	r3, pc, #536	; (adr r3, 8008008 <__ieee754_rem_pio2+0x2e8>)
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	f7f8 f9ef 	bl	80001d4 <__adddf3>
 8007df6:	f04f 35ff 	mov.w	r5, #4294967295
 8007dfa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007dfe:	e7c6      	b.n	8007d8e <__ieee754_rem_pio2+0x6e>
 8007e00:	a383      	add	r3, pc, #524	; (adr r3, 8008010 <__ieee754_rem_pio2+0x2f0>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 f9e5 	bl	80001d4 <__adddf3>
 8007e0a:	a383      	add	r3, pc, #524	; (adr r3, 8008018 <__ieee754_rem_pio2+0x2f8>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	4606      	mov	r6, r0
 8007e12:	460f      	mov	r7, r1
 8007e14:	f7f8 f9de 	bl	80001d4 <__adddf3>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	e9c4 2300 	strd	r2, r3, [r4]
 8007e22:	4639      	mov	r1, r7
 8007e24:	f7f8 f9d4 	bl	80001d0 <__aeabi_dsub>
 8007e28:	a37b      	add	r3, pc, #492	; (adr r3, 8008018 <__ieee754_rem_pio2+0x2f8>)
 8007e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2e:	e7e0      	b.n	8007df2 <__ieee754_rem_pio2+0xd2>
 8007e30:	4a84      	ldr	r2, [pc, #528]	; (8008044 <__ieee754_rem_pio2+0x324>)
 8007e32:	4592      	cmp	sl, r2
 8007e34:	f300 80d5 	bgt.w	8007fe2 <__ieee754_rem_pio2+0x2c2>
 8007e38:	f000 fe20 	bl	8008a7c <fabs>
 8007e3c:	a378      	add	r3, pc, #480	; (adr r3, 8008020 <__ieee754_rem_pio2+0x300>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	4606      	mov	r6, r0
 8007e44:	460f      	mov	r7, r1
 8007e46:	f7f8 fb7b 	bl	8000540 <__aeabi_dmul>
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	4b7e      	ldr	r3, [pc, #504]	; (8008048 <__ieee754_rem_pio2+0x328>)
 8007e4e:	f7f8 f9c1 	bl	80001d4 <__adddf3>
 8007e52:	f7f8 fe0f 	bl	8000a74 <__aeabi_d2iz>
 8007e56:	4605      	mov	r5, r0
 8007e58:	f7f8 fb08 	bl	800046c <__aeabi_i2d>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e64:	a366      	add	r3, pc, #408	; (adr r3, 8008000 <__ieee754_rem_pio2+0x2e0>)
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f7f8 fb69 	bl	8000540 <__aeabi_dmul>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4630      	mov	r0, r6
 8007e74:	4639      	mov	r1, r7
 8007e76:	f7f8 f9ab 	bl	80001d0 <__aeabi_dsub>
 8007e7a:	a363      	add	r3, pc, #396	; (adr r3, 8008008 <__ieee754_rem_pio2+0x2e8>)
 8007e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e80:	4680      	mov	r8, r0
 8007e82:	4689      	mov	r9, r1
 8007e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e88:	f7f8 fb5a 	bl	8000540 <__aeabi_dmul>
 8007e8c:	2d1f      	cmp	r5, #31
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	dc0e      	bgt.n	8007eb2 <__ieee754_rem_pio2+0x192>
 8007e94:	4b6d      	ldr	r3, [pc, #436]	; (800804c <__ieee754_rem_pio2+0x32c>)
 8007e96:	1e6a      	subs	r2, r5, #1
 8007e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e9c:	4553      	cmp	r3, sl
 8007e9e:	d008      	beq.n	8007eb2 <__ieee754_rem_pio2+0x192>
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	4649      	mov	r1, r9
 8007ea8:	f7f8 f992 	bl	80001d0 <__aeabi_dsub>
 8007eac:	e9c4 0100 	strd	r0, r1, [r4]
 8007eb0:	e013      	b.n	8007eda <__ieee754_rem_pio2+0x1ba>
 8007eb2:	463b      	mov	r3, r7
 8007eb4:	4632      	mov	r2, r6
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	4649      	mov	r1, r9
 8007eba:	f7f8 f989 	bl	80001d0 <__aeabi_dsub>
 8007ebe:	ea4f 532a 	mov.w	r3, sl, asr #20
 8007ec2:	9305      	str	r3, [sp, #20]
 8007ec4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ec8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8007ecc:	f1ba 0f10 	cmp.w	sl, #16
 8007ed0:	dc1f      	bgt.n	8007f12 <__ieee754_rem_pio2+0x1f2>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	e9c4 2300 	strd	r2, r3, [r4]
 8007eda:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8007ede:	4640      	mov	r0, r8
 8007ee0:	4653      	mov	r3, sl
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	f7f8 f974 	bl	80001d0 <__aeabi_dsub>
 8007ee8:	4632      	mov	r2, r6
 8007eea:	463b      	mov	r3, r7
 8007eec:	f7f8 f970 	bl	80001d0 <__aeabi_dsub>
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ef6:	9904      	ldr	r1, [sp, #16]
 8007ef8:	4602      	mov	r2, r0
 8007efa:	2900      	cmp	r1, #0
 8007efc:	f6bf af47 	bge.w	8007d8e <__ieee754_rem_pio2+0x6e>
 8007f00:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8007f04:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007f08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007f0c:	60e3      	str	r3, [r4, #12]
 8007f0e:	426d      	negs	r5, r5
 8007f10:	e73d      	b.n	8007d8e <__ieee754_rem_pio2+0x6e>
 8007f12:	a33f      	add	r3, pc, #252	; (adr r3, 8008010 <__ieee754_rem_pio2+0x2f0>)
 8007f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f1c:	f7f8 fb10 	bl	8000540 <__aeabi_dmul>
 8007f20:	4606      	mov	r6, r0
 8007f22:	460f      	mov	r7, r1
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 f950 	bl	80001d0 <__aeabi_dsub>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4682      	mov	sl, r0
 8007f36:	468b      	mov	fp, r1
 8007f38:	4640      	mov	r0, r8
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	f7f8 f948 	bl	80001d0 <__aeabi_dsub>
 8007f40:	4632      	mov	r2, r6
 8007f42:	463b      	mov	r3, r7
 8007f44:	f7f8 f944 	bl	80001d0 <__aeabi_dsub>
 8007f48:	a333      	add	r3, pc, #204	; (adr r3, 8008018 <__ieee754_rem_pio2+0x2f8>)
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	4606      	mov	r6, r0
 8007f50:	460f      	mov	r7, r1
 8007f52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f56:	f7f8 faf3 	bl	8000540 <__aeabi_dmul>
 8007f5a:	4632      	mov	r2, r6
 8007f5c:	463b      	mov	r3, r7
 8007f5e:	f7f8 f937 	bl	80001d0 <__aeabi_dsub>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4606      	mov	r6, r0
 8007f68:	460f      	mov	r7, r1
 8007f6a:	4650      	mov	r0, sl
 8007f6c:	4659      	mov	r1, fp
 8007f6e:	f7f8 f92f 	bl	80001d0 <__aeabi_dsub>
 8007f72:	9a05      	ldr	r2, [sp, #20]
 8007f74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b31      	cmp	r3, #49	; 0x31
 8007f7c:	dc06      	bgt.n	8007f8c <__ieee754_rem_pio2+0x26c>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	46d0      	mov	r8, sl
 8007f84:	46d9      	mov	r9, fp
 8007f86:	e9c4 2300 	strd	r2, r3, [r4]
 8007f8a:	e7a6      	b.n	8007eda <__ieee754_rem_pio2+0x1ba>
 8007f8c:	a326      	add	r3, pc, #152	; (adr r3, 8008028 <__ieee754_rem_pio2+0x308>)
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f96:	f7f8 fad3 	bl	8000540 <__aeabi_dmul>
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	460f      	mov	r7, r1
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	4659      	mov	r1, fp
 8007fa6:	f7f8 f913 	bl	80001d0 <__aeabi_dsub>
 8007faa:	4602      	mov	r2, r0
 8007fac:	460b      	mov	r3, r1
 8007fae:	4680      	mov	r8, r0
 8007fb0:	4689      	mov	r9, r1
 8007fb2:	4650      	mov	r0, sl
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	f7f8 f90b 	bl	80001d0 <__aeabi_dsub>
 8007fba:	4632      	mov	r2, r6
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	f7f8 f907 	bl	80001d0 <__aeabi_dsub>
 8007fc2:	a31b      	add	r3, pc, #108	; (adr r3, 8008030 <__ieee754_rem_pio2+0x310>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	4606      	mov	r6, r0
 8007fca:	460f      	mov	r7, r1
 8007fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fd0:	f7f8 fab6 	bl	8000540 <__aeabi_dmul>
 8007fd4:	4632      	mov	r2, r6
 8007fd6:	463b      	mov	r3, r7
 8007fd8:	f7f8 f8fa 	bl	80001d0 <__aeabi_dsub>
 8007fdc:	4606      	mov	r6, r0
 8007fde:	460f      	mov	r7, r1
 8007fe0:	e75e      	b.n	8007ea0 <__ieee754_rem_pio2+0x180>
 8007fe2:	4a1b      	ldr	r2, [pc, #108]	; (8008050 <__ieee754_rem_pio2+0x330>)
 8007fe4:	4592      	cmp	sl, r2
 8007fe6:	dd35      	ble.n	8008054 <__ieee754_rem_pio2+0x334>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	f7f8 f8f0 	bl	80001d0 <__aeabi_dsub>
 8007ff0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ff4:	e9c4 0100 	strd	r0, r1, [r4]
 8007ff8:	e6a2      	b.n	8007d40 <__ieee754_rem_pio2+0x20>
 8007ffa:	bf00      	nop
 8007ffc:	f3af 8000 	nop.w
 8008000:	54400000 	.word	0x54400000
 8008004:	3ff921fb 	.word	0x3ff921fb
 8008008:	1a626331 	.word	0x1a626331
 800800c:	3dd0b461 	.word	0x3dd0b461
 8008010:	1a600000 	.word	0x1a600000
 8008014:	3dd0b461 	.word	0x3dd0b461
 8008018:	2e037073 	.word	0x2e037073
 800801c:	3ba3198a 	.word	0x3ba3198a
 8008020:	6dc9c883 	.word	0x6dc9c883
 8008024:	3fe45f30 	.word	0x3fe45f30
 8008028:	2e000000 	.word	0x2e000000
 800802c:	3ba3198a 	.word	0x3ba3198a
 8008030:	252049c1 	.word	0x252049c1
 8008034:	397b839a 	.word	0x397b839a
 8008038:	3fe921fb 	.word	0x3fe921fb
 800803c:	4002d97b 	.word	0x4002d97b
 8008040:	3ff921fb 	.word	0x3ff921fb
 8008044:	413921fb 	.word	0x413921fb
 8008048:	3fe00000 	.word	0x3fe00000
 800804c:	08008cd0 	.word	0x08008cd0
 8008050:	7fefffff 	.word	0x7fefffff
 8008054:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008058:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800805c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008060:	460f      	mov	r7, r1
 8008062:	4606      	mov	r6, r0
 8008064:	f7f8 fd06 	bl	8000a74 <__aeabi_d2iz>
 8008068:	f7f8 fa00 	bl	800046c <__aeabi_i2d>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4630      	mov	r0, r6
 8008072:	4639      	mov	r1, r7
 8008074:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008078:	f7f8 f8aa 	bl	80001d0 <__aeabi_dsub>
 800807c:	2200      	movs	r2, #0
 800807e:	4b1e      	ldr	r3, [pc, #120]	; (80080f8 <__ieee754_rem_pio2+0x3d8>)
 8008080:	f7f8 fa5e 	bl	8000540 <__aeabi_dmul>
 8008084:	460f      	mov	r7, r1
 8008086:	4606      	mov	r6, r0
 8008088:	f7f8 fcf4 	bl	8000a74 <__aeabi_d2iz>
 800808c:	f7f8 f9ee 	bl	800046c <__aeabi_i2d>
 8008090:	4602      	mov	r2, r0
 8008092:	460b      	mov	r3, r1
 8008094:	4630      	mov	r0, r6
 8008096:	4639      	mov	r1, r7
 8008098:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800809c:	f7f8 f898 	bl	80001d0 <__aeabi_dsub>
 80080a0:	2200      	movs	r2, #0
 80080a2:	4b15      	ldr	r3, [pc, #84]	; (80080f8 <__ieee754_rem_pio2+0x3d8>)
 80080a4:	f7f8 fa4c 	bl	8000540 <__aeabi_dmul>
 80080a8:	f04f 0803 	mov.w	r8, #3
 80080ac:	2600      	movs	r6, #0
 80080ae:	2700      	movs	r7, #0
 80080b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80080b4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80080b8:	4632      	mov	r2, r6
 80080ba:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80080be:	463b      	mov	r3, r7
 80080c0:	46c2      	mov	sl, r8
 80080c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80080c6:	f7f8 fca3 	bl	8000a10 <__aeabi_dcmpeq>
 80080ca:	2800      	cmp	r0, #0
 80080cc:	d1f4      	bne.n	80080b8 <__ieee754_rem_pio2+0x398>
 80080ce:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <__ieee754_rem_pio2+0x3dc>)
 80080d0:	462a      	mov	r2, r5
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	2302      	movs	r3, #2
 80080d6:	4621      	mov	r1, r4
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	a806      	add	r0, sp, #24
 80080dc:	4653      	mov	r3, sl
 80080de:	f000 f8cd 	bl	800827c <__kernel_rem_pio2>
 80080e2:	9b04      	ldr	r3, [sp, #16]
 80080e4:	4605      	mov	r5, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f6bf ae51 	bge.w	8007d8e <__ieee754_rem_pio2+0x6e>
 80080ec:	6863      	ldr	r3, [r4, #4]
 80080ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80080f2:	6063      	str	r3, [r4, #4]
 80080f4:	68e3      	ldr	r3, [r4, #12]
 80080f6:	e707      	b.n	8007f08 <__ieee754_rem_pio2+0x1e8>
 80080f8:	41700000 	.word	0x41700000
 80080fc:	08008d50 	.word	0x08008d50

08008100 <__kernel_cos>:
 8008100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008104:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008108:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800810c:	4680      	mov	r8, r0
 800810e:	460f      	mov	r7, r1
 8008110:	e9cd 2300 	strd	r2, r3, [sp]
 8008114:	da04      	bge.n	8008120 <__kernel_cos+0x20>
 8008116:	f7f8 fcad 	bl	8000a74 <__aeabi_d2iz>
 800811a:	2800      	cmp	r0, #0
 800811c:	f000 8086 	beq.w	800822c <__kernel_cos+0x12c>
 8008120:	4642      	mov	r2, r8
 8008122:	463b      	mov	r3, r7
 8008124:	4640      	mov	r0, r8
 8008126:	4639      	mov	r1, r7
 8008128:	f7f8 fa0a 	bl	8000540 <__aeabi_dmul>
 800812c:	2200      	movs	r2, #0
 800812e:	4b4e      	ldr	r3, [pc, #312]	; (8008268 <__kernel_cos+0x168>)
 8008130:	4604      	mov	r4, r0
 8008132:	460d      	mov	r5, r1
 8008134:	f7f8 fa04 	bl	8000540 <__aeabi_dmul>
 8008138:	a33f      	add	r3, pc, #252	; (adr r3, 8008238 <__kernel_cos+0x138>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	4682      	mov	sl, r0
 8008140:	468b      	mov	fp, r1
 8008142:	4620      	mov	r0, r4
 8008144:	4629      	mov	r1, r5
 8008146:	f7f8 f9fb 	bl	8000540 <__aeabi_dmul>
 800814a:	a33d      	add	r3, pc, #244	; (adr r3, 8008240 <__kernel_cos+0x140>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f7f8 f840 	bl	80001d4 <__adddf3>
 8008154:	4622      	mov	r2, r4
 8008156:	462b      	mov	r3, r5
 8008158:	f7f8 f9f2 	bl	8000540 <__aeabi_dmul>
 800815c:	a33a      	add	r3, pc, #232	; (adr r3, 8008248 <__kernel_cos+0x148>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f7f8 f835 	bl	80001d0 <__aeabi_dsub>
 8008166:	4622      	mov	r2, r4
 8008168:	462b      	mov	r3, r5
 800816a:	f7f8 f9e9 	bl	8000540 <__aeabi_dmul>
 800816e:	a338      	add	r3, pc, #224	; (adr r3, 8008250 <__kernel_cos+0x150>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	f7f8 f82e 	bl	80001d4 <__adddf3>
 8008178:	4622      	mov	r2, r4
 800817a:	462b      	mov	r3, r5
 800817c:	f7f8 f9e0 	bl	8000540 <__aeabi_dmul>
 8008180:	a335      	add	r3, pc, #212	; (adr r3, 8008258 <__kernel_cos+0x158>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 f823 	bl	80001d0 <__aeabi_dsub>
 800818a:	4622      	mov	r2, r4
 800818c:	462b      	mov	r3, r5
 800818e:	f7f8 f9d7 	bl	8000540 <__aeabi_dmul>
 8008192:	a333      	add	r3, pc, #204	; (adr r3, 8008260 <__kernel_cos+0x160>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	f7f8 f81c 	bl	80001d4 <__adddf3>
 800819c:	4622      	mov	r2, r4
 800819e:	462b      	mov	r3, r5
 80081a0:	f7f8 f9ce 	bl	8000540 <__aeabi_dmul>
 80081a4:	4622      	mov	r2, r4
 80081a6:	462b      	mov	r3, r5
 80081a8:	f7f8 f9ca 	bl	8000540 <__aeabi_dmul>
 80081ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	4640      	mov	r0, r8
 80081b6:	4639      	mov	r1, r7
 80081b8:	f7f8 f9c2 	bl	8000540 <__aeabi_dmul>
 80081bc:	460b      	mov	r3, r1
 80081be:	4602      	mov	r2, r0
 80081c0:	4629      	mov	r1, r5
 80081c2:	4620      	mov	r0, r4
 80081c4:	f7f8 f804 	bl	80001d0 <__aeabi_dsub>
 80081c8:	4b28      	ldr	r3, [pc, #160]	; (800826c <__kernel_cos+0x16c>)
 80081ca:	4680      	mov	r8, r0
 80081cc:	429e      	cmp	r6, r3
 80081ce:	4689      	mov	r9, r1
 80081d0:	dc0e      	bgt.n	80081f0 <__kernel_cos+0xf0>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4650      	mov	r0, sl
 80081d8:	4659      	mov	r1, fp
 80081da:	f7f7 fff9 	bl	80001d0 <__aeabi_dsub>
 80081de:	4602      	mov	r2, r0
 80081e0:	2000      	movs	r0, #0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4922      	ldr	r1, [pc, #136]	; (8008270 <__kernel_cos+0x170>)
 80081e6:	f7f7 fff3 	bl	80001d0 <__aeabi_dsub>
 80081ea:	b003      	add	sp, #12
 80081ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f0:	2400      	movs	r4, #0
 80081f2:	4b20      	ldr	r3, [pc, #128]	; (8008274 <__kernel_cos+0x174>)
 80081f4:	4622      	mov	r2, r4
 80081f6:	429e      	cmp	r6, r3
 80081f8:	bfcc      	ite	gt
 80081fa:	4d1f      	ldrgt	r5, [pc, #124]	; (8008278 <__kernel_cos+0x178>)
 80081fc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008200:	462b      	mov	r3, r5
 8008202:	2000      	movs	r0, #0
 8008204:	491a      	ldr	r1, [pc, #104]	; (8008270 <__kernel_cos+0x170>)
 8008206:	f7f7 ffe3 	bl	80001d0 <__aeabi_dsub>
 800820a:	4622      	mov	r2, r4
 800820c:	4606      	mov	r6, r0
 800820e:	460f      	mov	r7, r1
 8008210:	462b      	mov	r3, r5
 8008212:	4650      	mov	r0, sl
 8008214:	4659      	mov	r1, fp
 8008216:	f7f7 ffdb 	bl	80001d0 <__aeabi_dsub>
 800821a:	4642      	mov	r2, r8
 800821c:	464b      	mov	r3, r9
 800821e:	f7f7 ffd7 	bl	80001d0 <__aeabi_dsub>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	e7dc      	b.n	80081e6 <__kernel_cos+0xe6>
 800822c:	2000      	movs	r0, #0
 800822e:	4910      	ldr	r1, [pc, #64]	; (8008270 <__kernel_cos+0x170>)
 8008230:	e7db      	b.n	80081ea <__kernel_cos+0xea>
 8008232:	bf00      	nop
 8008234:	f3af 8000 	nop.w
 8008238:	be8838d4 	.word	0xbe8838d4
 800823c:	bda8fae9 	.word	0xbda8fae9
 8008240:	bdb4b1c4 	.word	0xbdb4b1c4
 8008244:	3e21ee9e 	.word	0x3e21ee9e
 8008248:	809c52ad 	.word	0x809c52ad
 800824c:	3e927e4f 	.word	0x3e927e4f
 8008250:	19cb1590 	.word	0x19cb1590
 8008254:	3efa01a0 	.word	0x3efa01a0
 8008258:	16c15177 	.word	0x16c15177
 800825c:	3f56c16c 	.word	0x3f56c16c
 8008260:	5555554c 	.word	0x5555554c
 8008264:	3fa55555 	.word	0x3fa55555
 8008268:	3fe00000 	.word	0x3fe00000
 800826c:	3fd33332 	.word	0x3fd33332
 8008270:	3ff00000 	.word	0x3ff00000
 8008274:	3fe90000 	.word	0x3fe90000
 8008278:	3fd20000 	.word	0x3fd20000

0800827c <__kernel_rem_pio2>:
 800827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008280:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008284:	9308      	str	r3, [sp, #32]
 8008286:	9101      	str	r1, [sp, #4]
 8008288:	4bc0      	ldr	r3, [pc, #768]	; (800858c <__kernel_rem_pio2+0x310>)
 800828a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800828c:	f112 0f14 	cmn.w	r2, #20
 8008290:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008294:	bfa8      	it	ge
 8008296:	1ed4      	subge	r4, r2, #3
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	bfb8      	it	lt
 800829e:	2400      	movlt	r4, #0
 80082a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80082a4:	9306      	str	r3, [sp, #24]
 80082a6:	bfa4      	itt	ge
 80082a8:	2318      	movge	r3, #24
 80082aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80082ae:	f06f 0317 	mvn.w	r3, #23
 80082b2:	fb04 3303 	mla	r3, r4, r3, r3
 80082b6:	eb03 0a02 	add.w	sl, r3, r2
 80082ba:	9a06      	ldr	r2, [sp, #24]
 80082bc:	9b04      	ldr	r3, [sp, #16]
 80082be:	1aa7      	subs	r7, r4, r2
 80082c0:	eb03 0802 	add.w	r8, r3, r2
 80082c4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80082c6:	2500      	movs	r5, #0
 80082c8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80082cc:	2200      	movs	r2, #0
 80082ce:	2300      	movs	r3, #0
 80082d0:	9009      	str	r0, [sp, #36]	; 0x24
 80082d2:	ae20      	add	r6, sp, #128	; 0x80
 80082d4:	4545      	cmp	r5, r8
 80082d6:	dd19      	ble.n	800830c <__kernel_rem_pio2+0x90>
 80082d8:	9b08      	ldr	r3, [sp, #32]
 80082da:	aa20      	add	r2, sp, #128	; 0x80
 80082dc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80082e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80082e4:	f1c3 0301 	rsb	r3, r3, #1
 80082e8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80082ec:	9307      	str	r3, [sp, #28]
 80082ee:	9b07      	ldr	r3, [sp, #28]
 80082f0:	9a04      	ldr	r2, [sp, #16]
 80082f2:	4443      	add	r3, r8
 80082f4:	429a      	cmp	r2, r3
 80082f6:	db35      	blt.n	8008364 <__kernel_rem_pio2+0xe8>
 80082f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fa:	2200      	movs	r2, #0
 80082fc:	f1a3 0908 	sub.w	r9, r3, #8
 8008300:	2300      	movs	r3, #0
 8008302:	462f      	mov	r7, r5
 8008304:	2600      	movs	r6, #0
 8008306:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800830a:	e01f      	b.n	800834c <__kernel_rem_pio2+0xd0>
 800830c:	42ef      	cmn	r7, r5
 800830e:	d40b      	bmi.n	8008328 <__kernel_rem_pio2+0xac>
 8008310:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008314:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008318:	f7f8 f8a8 	bl	800046c <__aeabi_i2d>
 800831c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008320:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008324:	3501      	adds	r5, #1
 8008326:	e7d5      	b.n	80082d4 <__kernel_rem_pio2+0x58>
 8008328:	4610      	mov	r0, r2
 800832a:	4619      	mov	r1, r3
 800832c:	e7f8      	b.n	8008320 <__kernel_rem_pio2+0xa4>
 800832e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008332:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008336:	f7f8 f903 	bl	8000540 <__aeabi_dmul>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008342:	f7f7 ff47 	bl	80001d4 <__adddf3>
 8008346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800834a:	3601      	adds	r6, #1
 800834c:	9b06      	ldr	r3, [sp, #24]
 800834e:	3f08      	subs	r7, #8
 8008350:	429e      	cmp	r6, r3
 8008352:	ddec      	ble.n	800832e <__kernel_rem_pio2+0xb2>
 8008354:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008358:	3508      	adds	r5, #8
 800835a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800835e:	f108 0801 	add.w	r8, r8, #1
 8008362:	e7c4      	b.n	80082ee <__kernel_rem_pio2+0x72>
 8008364:	9b04      	ldr	r3, [sp, #16]
 8008366:	aa0c      	add	r2, sp, #48	; 0x30
 8008368:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800836c:	930b      	str	r3, [sp, #44]	; 0x2c
 800836e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008370:	9f04      	ldr	r7, [sp, #16]
 8008372:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008376:	930a      	str	r3, [sp, #40]	; 0x28
 8008378:	463e      	mov	r6, r7
 800837a:	ab98      	add	r3, sp, #608	; 0x260
 800837c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008380:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008384:	f8cd b008 	str.w	fp, [sp, #8]
 8008388:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800838c:	2e00      	cmp	r6, #0
 800838e:	dc71      	bgt.n	8008474 <__kernel_rem_pio2+0x1f8>
 8008390:	4652      	mov	r2, sl
 8008392:	4620      	mov	r0, r4
 8008394:	4629      	mov	r1, r5
 8008396:	f000 fbf7 	bl	8008b88 <scalbn>
 800839a:	2200      	movs	r2, #0
 800839c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80083a0:	4604      	mov	r4, r0
 80083a2:	460d      	mov	r5, r1
 80083a4:	f7f8 f8cc 	bl	8000540 <__aeabi_dmul>
 80083a8:	f000 fb6e 	bl	8008a88 <floor>
 80083ac:	2200      	movs	r2, #0
 80083ae:	4b78      	ldr	r3, [pc, #480]	; (8008590 <__kernel_rem_pio2+0x314>)
 80083b0:	f7f8 f8c6 	bl	8000540 <__aeabi_dmul>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4620      	mov	r0, r4
 80083ba:	4629      	mov	r1, r5
 80083bc:	f7f7 ff08 	bl	80001d0 <__aeabi_dsub>
 80083c0:	460d      	mov	r5, r1
 80083c2:	4604      	mov	r4, r0
 80083c4:	f7f8 fb56 	bl	8000a74 <__aeabi_d2iz>
 80083c8:	9007      	str	r0, [sp, #28]
 80083ca:	f7f8 f84f 	bl	800046c <__aeabi_i2d>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4620      	mov	r0, r4
 80083d4:	4629      	mov	r1, r5
 80083d6:	f7f7 fefb 	bl	80001d0 <__aeabi_dsub>
 80083da:	f1ba 0f00 	cmp.w	sl, #0
 80083de:	4680      	mov	r8, r0
 80083e0:	4689      	mov	r9, r1
 80083e2:	dd70      	ble.n	80084c6 <__kernel_rem_pio2+0x24a>
 80083e4:	1e7a      	subs	r2, r7, #1
 80083e6:	ab0c      	add	r3, sp, #48	; 0x30
 80083e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80083ec:	9c07      	ldr	r4, [sp, #28]
 80083ee:	f1ca 0118 	rsb	r1, sl, #24
 80083f2:	fa40 f301 	asr.w	r3, r0, r1
 80083f6:	441c      	add	r4, r3
 80083f8:	408b      	lsls	r3, r1
 80083fa:	1ac0      	subs	r0, r0, r3
 80083fc:	ab0c      	add	r3, sp, #48	; 0x30
 80083fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008402:	f1ca 0317 	rsb	r3, sl, #23
 8008406:	9407      	str	r4, [sp, #28]
 8008408:	fa40 f303 	asr.w	r3, r0, r3
 800840c:	9302      	str	r3, [sp, #8]
 800840e:	9b02      	ldr	r3, [sp, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	dd66      	ble.n	80084e2 <__kernel_rem_pio2+0x266>
 8008414:	2200      	movs	r2, #0
 8008416:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800841a:	4614      	mov	r4, r2
 800841c:	9b07      	ldr	r3, [sp, #28]
 800841e:	3301      	adds	r3, #1
 8008420:	9307      	str	r3, [sp, #28]
 8008422:	4297      	cmp	r7, r2
 8008424:	f300 809f 	bgt.w	8008566 <__kernel_rem_pio2+0x2ea>
 8008428:	f1ba 0f00 	cmp.w	sl, #0
 800842c:	dd07      	ble.n	800843e <__kernel_rem_pio2+0x1c2>
 800842e:	f1ba 0f01 	cmp.w	sl, #1
 8008432:	f000 80b9 	beq.w	80085a8 <__kernel_rem_pio2+0x32c>
 8008436:	f1ba 0f02 	cmp.w	sl, #2
 800843a:	f000 80bf 	beq.w	80085bc <__kernel_rem_pio2+0x340>
 800843e:	9b02      	ldr	r3, [sp, #8]
 8008440:	2b02      	cmp	r3, #2
 8008442:	d14e      	bne.n	80084e2 <__kernel_rem_pio2+0x266>
 8008444:	4642      	mov	r2, r8
 8008446:	464b      	mov	r3, r9
 8008448:	2000      	movs	r0, #0
 800844a:	4952      	ldr	r1, [pc, #328]	; (8008594 <__kernel_rem_pio2+0x318>)
 800844c:	f7f7 fec0 	bl	80001d0 <__aeabi_dsub>
 8008450:	4680      	mov	r8, r0
 8008452:	4689      	mov	r9, r1
 8008454:	2c00      	cmp	r4, #0
 8008456:	d044      	beq.n	80084e2 <__kernel_rem_pio2+0x266>
 8008458:	4652      	mov	r2, sl
 800845a:	2000      	movs	r0, #0
 800845c:	494d      	ldr	r1, [pc, #308]	; (8008594 <__kernel_rem_pio2+0x318>)
 800845e:	f000 fb93 	bl	8008b88 <scalbn>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4640      	mov	r0, r8
 8008468:	4649      	mov	r1, r9
 800846a:	f7f7 feb1 	bl	80001d0 <__aeabi_dsub>
 800846e:	4680      	mov	r8, r0
 8008470:	4689      	mov	r9, r1
 8008472:	e036      	b.n	80084e2 <__kernel_rem_pio2+0x266>
 8008474:	2200      	movs	r2, #0
 8008476:	4b48      	ldr	r3, [pc, #288]	; (8008598 <__kernel_rem_pio2+0x31c>)
 8008478:	4620      	mov	r0, r4
 800847a:	4629      	mov	r1, r5
 800847c:	f7f8 f860 	bl	8000540 <__aeabi_dmul>
 8008480:	f7f8 faf8 	bl	8000a74 <__aeabi_d2iz>
 8008484:	f7f7 fff2 	bl	800046c <__aeabi_i2d>
 8008488:	2200      	movs	r2, #0
 800848a:	4b44      	ldr	r3, [pc, #272]	; (800859c <__kernel_rem_pio2+0x320>)
 800848c:	4680      	mov	r8, r0
 800848e:	4689      	mov	r9, r1
 8008490:	f7f8 f856 	bl	8000540 <__aeabi_dmul>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4620      	mov	r0, r4
 800849a:	4629      	mov	r1, r5
 800849c:	f7f7 fe98 	bl	80001d0 <__aeabi_dsub>
 80084a0:	f7f8 fae8 	bl	8000a74 <__aeabi_d2iz>
 80084a4:	9b02      	ldr	r3, [sp, #8]
 80084a6:	3e01      	subs	r6, #1
 80084a8:	f843 0b04 	str.w	r0, [r3], #4
 80084ac:	9302      	str	r3, [sp, #8]
 80084ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80084b0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084b4:	4640      	mov	r0, r8
 80084b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ba:	4649      	mov	r1, r9
 80084bc:	f7f7 fe8a 	bl	80001d4 <__adddf3>
 80084c0:	4604      	mov	r4, r0
 80084c2:	460d      	mov	r5, r1
 80084c4:	e762      	b.n	800838c <__kernel_rem_pio2+0x110>
 80084c6:	d105      	bne.n	80084d4 <__kernel_rem_pio2+0x258>
 80084c8:	1e7b      	subs	r3, r7, #1
 80084ca:	aa0c      	add	r2, sp, #48	; 0x30
 80084cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80084d0:	15c3      	asrs	r3, r0, #23
 80084d2:	e79b      	b.n	800840c <__kernel_rem_pio2+0x190>
 80084d4:	2200      	movs	r2, #0
 80084d6:	4b32      	ldr	r3, [pc, #200]	; (80085a0 <__kernel_rem_pio2+0x324>)
 80084d8:	f7f8 fab8 	bl	8000a4c <__aeabi_dcmpge>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d13f      	bne.n	8008560 <__kernel_rem_pio2+0x2e4>
 80084e0:	9002      	str	r0, [sp, #8]
 80084e2:	2200      	movs	r2, #0
 80084e4:	2300      	movs	r3, #0
 80084e6:	4640      	mov	r0, r8
 80084e8:	4649      	mov	r1, r9
 80084ea:	f7f8 fa91 	bl	8000a10 <__aeabi_dcmpeq>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	f000 80b5 	beq.w	800865e <__kernel_rem_pio2+0x3e2>
 80084f4:	1e7c      	subs	r4, r7, #1
 80084f6:	4623      	mov	r3, r4
 80084f8:	2200      	movs	r2, #0
 80084fa:	9904      	ldr	r1, [sp, #16]
 80084fc:	428b      	cmp	r3, r1
 80084fe:	da64      	bge.n	80085ca <__kernel_rem_pio2+0x34e>
 8008500:	2a00      	cmp	r2, #0
 8008502:	d078      	beq.n	80085f6 <__kernel_rem_pio2+0x37a>
 8008504:	ab0c      	add	r3, sp, #48	; 0x30
 8008506:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800850a:	f1aa 0a18 	sub.w	sl, sl, #24
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 80a3 	beq.w	800865a <__kernel_rem_pio2+0x3de>
 8008514:	4652      	mov	r2, sl
 8008516:	2000      	movs	r0, #0
 8008518:	491e      	ldr	r1, [pc, #120]	; (8008594 <__kernel_rem_pio2+0x318>)
 800851a:	f000 fb35 	bl	8008b88 <scalbn>
 800851e:	46a2      	mov	sl, r4
 8008520:	4606      	mov	r6, r0
 8008522:	460f      	mov	r7, r1
 8008524:	f04f 0800 	mov.w	r8, #0
 8008528:	00e3      	lsls	r3, r4, #3
 800852a:	9306      	str	r3, [sp, #24]
 800852c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8008598 <__kernel_rem_pio2+0x31c>
 8008530:	ab70      	add	r3, sp, #448	; 0x1c0
 8008532:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008536:	f1ba 0f00 	cmp.w	sl, #0
 800853a:	f280 80c6 	bge.w	80086ca <__kernel_rem_pio2+0x44e>
 800853e:	4627      	mov	r7, r4
 8008540:	f04f 0800 	mov.w	r8, #0
 8008544:	2f00      	cmp	r7, #0
 8008546:	f2c0 80f3 	blt.w	8008730 <__kernel_rem_pio2+0x4b4>
 800854a:	4b16      	ldr	r3, [pc, #88]	; (80085a4 <__kernel_rem_pio2+0x328>)
 800854c:	f04f 0a00 	mov.w	sl, #0
 8008550:	461d      	mov	r5, r3
 8008552:	ab70      	add	r3, sp, #448	; 0x1c0
 8008554:	f04f 0b00 	mov.w	fp, #0
 8008558:	2600      	movs	r6, #0
 800855a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800855e:	e0d9      	b.n	8008714 <__kernel_rem_pio2+0x498>
 8008560:	2302      	movs	r3, #2
 8008562:	9302      	str	r3, [sp, #8]
 8008564:	e756      	b.n	8008414 <__kernel_rem_pio2+0x198>
 8008566:	f8db 3000 	ldr.w	r3, [fp]
 800856a:	b954      	cbnz	r4, 8008582 <__kernel_rem_pio2+0x306>
 800856c:	b123      	cbz	r3, 8008578 <__kernel_rem_pio2+0x2fc>
 800856e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008572:	f8cb 3000 	str.w	r3, [fp]
 8008576:	2301      	movs	r3, #1
 8008578:	461c      	mov	r4, r3
 800857a:	3201      	adds	r2, #1
 800857c:	f10b 0b04 	add.w	fp, fp, #4
 8008580:	e74f      	b.n	8008422 <__kernel_rem_pio2+0x1a6>
 8008582:	1acb      	subs	r3, r1, r3
 8008584:	f8cb 3000 	str.w	r3, [fp]
 8008588:	4623      	mov	r3, r4
 800858a:	e7f5      	b.n	8008578 <__kernel_rem_pio2+0x2fc>
 800858c:	08008e98 	.word	0x08008e98
 8008590:	40200000 	.word	0x40200000
 8008594:	3ff00000 	.word	0x3ff00000
 8008598:	3e700000 	.word	0x3e700000
 800859c:	41700000 	.word	0x41700000
 80085a0:	3fe00000 	.word	0x3fe00000
 80085a4:	08008e58 	.word	0x08008e58
 80085a8:	1e7a      	subs	r2, r7, #1
 80085aa:	ab0c      	add	r3, sp, #48	; 0x30
 80085ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80085b4:	a90c      	add	r1, sp, #48	; 0x30
 80085b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80085ba:	e740      	b.n	800843e <__kernel_rem_pio2+0x1c2>
 80085bc:	1e7a      	subs	r2, r7, #1
 80085be:	ab0c      	add	r3, sp, #48	; 0x30
 80085c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80085c8:	e7f4      	b.n	80085b4 <__kernel_rem_pio2+0x338>
 80085ca:	a90c      	add	r1, sp, #48	; 0x30
 80085cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	430a      	orrs	r2, r1
 80085d4:	e791      	b.n	80084fa <__kernel_rem_pio2+0x27e>
 80085d6:	3401      	adds	r4, #1
 80085d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80085dc:	2a00      	cmp	r2, #0
 80085de:	d0fa      	beq.n	80085d6 <__kernel_rem_pio2+0x35a>
 80085e0:	9b08      	ldr	r3, [sp, #32]
 80085e2:	1c7e      	adds	r6, r7, #1
 80085e4:	18fd      	adds	r5, r7, r3
 80085e6:	ab20      	add	r3, sp, #128	; 0x80
 80085e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80085ec:	443c      	add	r4, r7
 80085ee:	42b4      	cmp	r4, r6
 80085f0:	da04      	bge.n	80085fc <__kernel_rem_pio2+0x380>
 80085f2:	4627      	mov	r7, r4
 80085f4:	e6c0      	b.n	8008378 <__kernel_rem_pio2+0xfc>
 80085f6:	2401      	movs	r4, #1
 80085f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085fa:	e7ed      	b.n	80085d8 <__kernel_rem_pio2+0x35c>
 80085fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085fe:	462f      	mov	r7, r5
 8008600:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008604:	f7f7 ff32 	bl	800046c <__aeabi_i2d>
 8008608:	f04f 0b00 	mov.w	fp, #0
 800860c:	f04f 0800 	mov.w	r8, #0
 8008610:	f04f 0900 	mov.w	r9, #0
 8008614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008616:	e8e7 0102 	strd	r0, r1, [r7], #8
 800861a:	3b08      	subs	r3, #8
 800861c:	9302      	str	r3, [sp, #8]
 800861e:	9b06      	ldr	r3, [sp, #24]
 8008620:	459b      	cmp	fp, r3
 8008622:	dd07      	ble.n	8008634 <__kernel_rem_pio2+0x3b8>
 8008624:	ab70      	add	r3, sp, #448	; 0x1c0
 8008626:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800862a:	463d      	mov	r5, r7
 800862c:	e9c3 8900 	strd	r8, r9, [r3]
 8008630:	3601      	adds	r6, #1
 8008632:	e7dc      	b.n	80085ee <__kernel_rem_pio2+0x372>
 8008634:	9902      	ldr	r1, [sp, #8]
 8008636:	f10b 0b01 	add.w	fp, fp, #1
 800863a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800863e:	9102      	str	r1, [sp, #8]
 8008640:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8008644:	f7f7 ff7c 	bl	8000540 <__aeabi_dmul>
 8008648:	4602      	mov	r2, r0
 800864a:	460b      	mov	r3, r1
 800864c:	4640      	mov	r0, r8
 800864e:	4649      	mov	r1, r9
 8008650:	f7f7 fdc0 	bl	80001d4 <__adddf3>
 8008654:	4680      	mov	r8, r0
 8008656:	4689      	mov	r9, r1
 8008658:	e7e1      	b.n	800861e <__kernel_rem_pio2+0x3a2>
 800865a:	3c01      	subs	r4, #1
 800865c:	e752      	b.n	8008504 <__kernel_rem_pio2+0x288>
 800865e:	f1ca 0200 	rsb	r2, sl, #0
 8008662:	4640      	mov	r0, r8
 8008664:	4649      	mov	r1, r9
 8008666:	f000 fa8f 	bl	8008b88 <scalbn>
 800866a:	2200      	movs	r2, #0
 800866c:	4ba5      	ldr	r3, [pc, #660]	; (8008904 <__kernel_rem_pio2+0x688>)
 800866e:	4604      	mov	r4, r0
 8008670:	460d      	mov	r5, r1
 8008672:	f7f8 f9eb 	bl	8000a4c <__aeabi_dcmpge>
 8008676:	b1f8      	cbz	r0, 80086b8 <__kernel_rem_pio2+0x43c>
 8008678:	2200      	movs	r2, #0
 800867a:	4ba3      	ldr	r3, [pc, #652]	; (8008908 <__kernel_rem_pio2+0x68c>)
 800867c:	4620      	mov	r0, r4
 800867e:	4629      	mov	r1, r5
 8008680:	f7f7 ff5e 	bl	8000540 <__aeabi_dmul>
 8008684:	f7f8 f9f6 	bl	8000a74 <__aeabi_d2iz>
 8008688:	4606      	mov	r6, r0
 800868a:	f7f7 feef 	bl	800046c <__aeabi_i2d>
 800868e:	2200      	movs	r2, #0
 8008690:	4b9c      	ldr	r3, [pc, #624]	; (8008904 <__kernel_rem_pio2+0x688>)
 8008692:	f7f7 ff55 	bl	8000540 <__aeabi_dmul>
 8008696:	460b      	mov	r3, r1
 8008698:	4602      	mov	r2, r0
 800869a:	4629      	mov	r1, r5
 800869c:	4620      	mov	r0, r4
 800869e:	f7f7 fd97 	bl	80001d0 <__aeabi_dsub>
 80086a2:	f7f8 f9e7 	bl	8000a74 <__aeabi_d2iz>
 80086a6:	1c7c      	adds	r4, r7, #1
 80086a8:	ab0c      	add	r3, sp, #48	; 0x30
 80086aa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80086ae:	f10a 0a18 	add.w	sl, sl, #24
 80086b2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80086b6:	e72d      	b.n	8008514 <__kernel_rem_pio2+0x298>
 80086b8:	4620      	mov	r0, r4
 80086ba:	4629      	mov	r1, r5
 80086bc:	f7f8 f9da 	bl	8000a74 <__aeabi_d2iz>
 80086c0:	ab0c      	add	r3, sp, #48	; 0x30
 80086c2:	463c      	mov	r4, r7
 80086c4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80086c8:	e724      	b.n	8008514 <__kernel_rem_pio2+0x298>
 80086ca:	ab0c      	add	r3, sp, #48	; 0x30
 80086cc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80086d0:	f7f7 fecc 	bl	800046c <__aeabi_i2d>
 80086d4:	4632      	mov	r2, r6
 80086d6:	463b      	mov	r3, r7
 80086d8:	f7f7 ff32 	bl	8000540 <__aeabi_dmul>
 80086dc:	4642      	mov	r2, r8
 80086de:	e86b 0102 	strd	r0, r1, [fp], #-8
 80086e2:	464b      	mov	r3, r9
 80086e4:	4630      	mov	r0, r6
 80086e6:	4639      	mov	r1, r7
 80086e8:	f7f7 ff2a 	bl	8000540 <__aeabi_dmul>
 80086ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086f0:	4606      	mov	r6, r0
 80086f2:	460f      	mov	r7, r1
 80086f4:	e71f      	b.n	8008536 <__kernel_rem_pio2+0x2ba>
 80086f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80086fa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80086fe:	f7f7 ff1f 	bl	8000540 <__aeabi_dmul>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4650      	mov	r0, sl
 8008708:	4659      	mov	r1, fp
 800870a:	f7f7 fd63 	bl	80001d4 <__adddf3>
 800870e:	4682      	mov	sl, r0
 8008710:	468b      	mov	fp, r1
 8008712:	3601      	adds	r6, #1
 8008714:	9b04      	ldr	r3, [sp, #16]
 8008716:	429e      	cmp	r6, r3
 8008718:	dc01      	bgt.n	800871e <__kernel_rem_pio2+0x4a2>
 800871a:	45b0      	cmp	r8, r6
 800871c:	daeb      	bge.n	80086f6 <__kernel_rem_pio2+0x47a>
 800871e:	ab48      	add	r3, sp, #288	; 0x120
 8008720:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008724:	e9c3 ab00 	strd	sl, fp, [r3]
 8008728:	3f01      	subs	r7, #1
 800872a:	f108 0801 	add.w	r8, r8, #1
 800872e:	e709      	b.n	8008544 <__kernel_rem_pio2+0x2c8>
 8008730:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008732:	2b02      	cmp	r3, #2
 8008734:	dc09      	bgt.n	800874a <__kernel_rem_pio2+0x4ce>
 8008736:	2b00      	cmp	r3, #0
 8008738:	dc34      	bgt.n	80087a4 <__kernel_rem_pio2+0x528>
 800873a:	d05e      	beq.n	80087fa <__kernel_rem_pio2+0x57e>
 800873c:	9b07      	ldr	r3, [sp, #28]
 800873e:	f003 0007 	and.w	r0, r3, #7
 8008742:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800874c:	2b03      	cmp	r3, #3
 800874e:	d1f5      	bne.n	800873c <__kernel_rem_pio2+0x4c0>
 8008750:	9a06      	ldr	r2, [sp, #24]
 8008752:	ab48      	add	r3, sp, #288	; 0x120
 8008754:	441a      	add	r2, r3
 8008756:	4615      	mov	r5, r2
 8008758:	4692      	mov	sl, r2
 800875a:	46a3      	mov	fp, r4
 800875c:	f1bb 0f00 	cmp.w	fp, #0
 8008760:	dc7a      	bgt.n	8008858 <__kernel_rem_pio2+0x5dc>
 8008762:	46aa      	mov	sl, r5
 8008764:	46a3      	mov	fp, r4
 8008766:	f1bb 0f01 	cmp.w	fp, #1
 800876a:	f300 8094 	bgt.w	8008896 <__kernel_rem_pio2+0x61a>
 800876e:	2700      	movs	r7, #0
 8008770:	463e      	mov	r6, r7
 8008772:	2c01      	cmp	r4, #1
 8008774:	f300 80ae 	bgt.w	80088d4 <__kernel_rem_pio2+0x658>
 8008778:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800877c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8008780:	9b02      	ldr	r3, [sp, #8]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f040 80b0 	bne.w	80088e8 <__kernel_rem_pio2+0x66c>
 8008788:	4603      	mov	r3, r0
 800878a:	462a      	mov	r2, r5
 800878c:	9801      	ldr	r0, [sp, #4]
 800878e:	e9c0 2300 	strd	r2, r3, [r0]
 8008792:	4622      	mov	r2, r4
 8008794:	460b      	mov	r3, r1
 8008796:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800879a:	463a      	mov	r2, r7
 800879c:	4633      	mov	r3, r6
 800879e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80087a2:	e7cb      	b.n	800873c <__kernel_rem_pio2+0x4c0>
 80087a4:	2000      	movs	r0, #0
 80087a6:	9a06      	ldr	r2, [sp, #24]
 80087a8:	ab48      	add	r3, sp, #288	; 0x120
 80087aa:	441a      	add	r2, r3
 80087ac:	4615      	mov	r5, r2
 80087ae:	46a0      	mov	r8, r4
 80087b0:	4601      	mov	r1, r0
 80087b2:	f1b8 0f00 	cmp.w	r8, #0
 80087b6:	da3c      	bge.n	8008832 <__kernel_rem_pio2+0x5b6>
 80087b8:	9b02      	ldr	r3, [sp, #8]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d040      	beq.n	8008840 <__kernel_rem_pio2+0x5c4>
 80087be:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80087c2:	4602      	mov	r2, r0
 80087c4:	462b      	mov	r3, r5
 80087c6:	9d01      	ldr	r5, [sp, #4]
 80087c8:	2601      	movs	r6, #1
 80087ca:	e9c5 2300 	strd	r2, r3, [r5]
 80087ce:	460b      	mov	r3, r1
 80087d0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80087d4:	f7f7 fcfc 	bl	80001d0 <__aeabi_dsub>
 80087d8:	4684      	mov	ip, r0
 80087da:	460f      	mov	r7, r1
 80087dc:	ad48      	add	r5, sp, #288	; 0x120
 80087de:	42b4      	cmp	r4, r6
 80087e0:	f105 0508 	add.w	r5, r5, #8
 80087e4:	da2e      	bge.n	8008844 <__kernel_rem_pio2+0x5c8>
 80087e6:	9b02      	ldr	r3, [sp, #8]
 80087e8:	b10b      	cbz	r3, 80087ee <__kernel_rem_pio2+0x572>
 80087ea:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80087ee:	4662      	mov	r2, ip
 80087f0:	463b      	mov	r3, r7
 80087f2:	9901      	ldr	r1, [sp, #4]
 80087f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80087f8:	e7a0      	b.n	800873c <__kernel_rem_pio2+0x4c0>
 80087fa:	9a06      	ldr	r2, [sp, #24]
 80087fc:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80087fe:	ab48      	add	r3, sp, #288	; 0x120
 8008800:	441a      	add	r2, r3
 8008802:	4615      	mov	r5, r2
 8008804:	4637      	mov	r7, r6
 8008806:	2c00      	cmp	r4, #0
 8008808:	da09      	bge.n	800881e <__kernel_rem_pio2+0x5a2>
 800880a:	9b02      	ldr	r3, [sp, #8]
 800880c:	b10b      	cbz	r3, 8008812 <__kernel_rem_pio2+0x596>
 800880e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008812:	4632      	mov	r2, r6
 8008814:	463b      	mov	r3, r7
 8008816:	9901      	ldr	r1, [sp, #4]
 8008818:	e9c1 2300 	strd	r2, r3, [r1]
 800881c:	e78e      	b.n	800873c <__kernel_rem_pio2+0x4c0>
 800881e:	4630      	mov	r0, r6
 8008820:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008824:	4639      	mov	r1, r7
 8008826:	f7f7 fcd5 	bl	80001d4 <__adddf3>
 800882a:	3c01      	subs	r4, #1
 800882c:	4606      	mov	r6, r0
 800882e:	460f      	mov	r7, r1
 8008830:	e7e9      	b.n	8008806 <__kernel_rem_pio2+0x58a>
 8008832:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008836:	f7f7 fccd 	bl	80001d4 <__adddf3>
 800883a:	f108 38ff 	add.w	r8, r8, #4294967295
 800883e:	e7b8      	b.n	80087b2 <__kernel_rem_pio2+0x536>
 8008840:	460d      	mov	r5, r1
 8008842:	e7be      	b.n	80087c2 <__kernel_rem_pio2+0x546>
 8008844:	4660      	mov	r0, ip
 8008846:	e9d5 2300 	ldrd	r2, r3, [r5]
 800884a:	4639      	mov	r1, r7
 800884c:	f7f7 fcc2 	bl	80001d4 <__adddf3>
 8008850:	3601      	adds	r6, #1
 8008852:	4684      	mov	ip, r0
 8008854:	460f      	mov	r7, r1
 8008856:	e7c2      	b.n	80087de <__kernel_rem_pio2+0x562>
 8008858:	e9da 6700 	ldrd	r6, r7, [sl]
 800885c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8008860:	4632      	mov	r2, r6
 8008862:	463b      	mov	r3, r7
 8008864:	4640      	mov	r0, r8
 8008866:	4649      	mov	r1, r9
 8008868:	f7f7 fcb4 	bl	80001d4 <__adddf3>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008874:	4640      	mov	r0, r8
 8008876:	4649      	mov	r1, r9
 8008878:	f7f7 fcaa 	bl	80001d0 <__aeabi_dsub>
 800887c:	4632      	mov	r2, r6
 800887e:	463b      	mov	r3, r7
 8008880:	f7f7 fca8 	bl	80001d4 <__adddf3>
 8008884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008888:	e86a 0102 	strd	r0, r1, [sl], #-8
 800888c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008890:	e9ca 2300 	strd	r2, r3, [sl]
 8008894:	e762      	b.n	800875c <__kernel_rem_pio2+0x4e0>
 8008896:	e9da 8900 	ldrd	r8, r9, [sl]
 800889a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800889e:	4642      	mov	r2, r8
 80088a0:	464b      	mov	r3, r9
 80088a2:	4630      	mov	r0, r6
 80088a4:	4639      	mov	r1, r7
 80088a6:	f7f7 fc95 	bl	80001d4 <__adddf3>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088b2:	4630      	mov	r0, r6
 80088b4:	4639      	mov	r1, r7
 80088b6:	f7f7 fc8b 	bl	80001d0 <__aeabi_dsub>
 80088ba:	4642      	mov	r2, r8
 80088bc:	464b      	mov	r3, r9
 80088be:	f7f7 fc89 	bl	80001d4 <__adddf3>
 80088c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088c6:	e86a 0102 	strd	r0, r1, [sl], #-8
 80088ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088ce:	e9ca 2300 	strd	r2, r3, [sl]
 80088d2:	e748      	b.n	8008766 <__kernel_rem_pio2+0x4ea>
 80088d4:	4638      	mov	r0, r7
 80088d6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80088da:	4631      	mov	r1, r6
 80088dc:	f7f7 fc7a 	bl	80001d4 <__adddf3>
 80088e0:	3c01      	subs	r4, #1
 80088e2:	4607      	mov	r7, r0
 80088e4:	460e      	mov	r6, r1
 80088e6:	e744      	b.n	8008772 <__kernel_rem_pio2+0x4f6>
 80088e8:	9b01      	ldr	r3, [sp, #4]
 80088ea:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80088ee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80088f2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80088f6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80088fa:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80088fe:	601d      	str	r5, [r3, #0]
 8008900:	615e      	str	r6, [r3, #20]
 8008902:	e71b      	b.n	800873c <__kernel_rem_pio2+0x4c0>
 8008904:	41700000 	.word	0x41700000
 8008908:	3e700000 	.word	0x3e700000
 800890c:	00000000 	.word	0x00000000

08008910 <__kernel_sin>:
 8008910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008914:	b086      	sub	sp, #24
 8008916:	e9cd 2300 	strd	r2, r3, [sp]
 800891a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800891e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008922:	4682      	mov	sl, r0
 8008924:	460c      	mov	r4, r1
 8008926:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008928:	da03      	bge.n	8008932 <__kernel_sin+0x22>
 800892a:	f7f8 f8a3 	bl	8000a74 <__aeabi_d2iz>
 800892e:	2800      	cmp	r0, #0
 8008930:	d050      	beq.n	80089d4 <__kernel_sin+0xc4>
 8008932:	4652      	mov	r2, sl
 8008934:	4623      	mov	r3, r4
 8008936:	4650      	mov	r0, sl
 8008938:	4621      	mov	r1, r4
 800893a:	f7f7 fe01 	bl	8000540 <__aeabi_dmul>
 800893e:	4606      	mov	r6, r0
 8008940:	460f      	mov	r7, r1
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4650      	mov	r0, sl
 8008948:	4621      	mov	r1, r4
 800894a:	f7f7 fdf9 	bl	8000540 <__aeabi_dmul>
 800894e:	a33e      	add	r3, pc, #248	; (adr r3, 8008a48 <__kernel_sin+0x138>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	4680      	mov	r8, r0
 8008956:	4689      	mov	r9, r1
 8008958:	4630      	mov	r0, r6
 800895a:	4639      	mov	r1, r7
 800895c:	f7f7 fdf0 	bl	8000540 <__aeabi_dmul>
 8008960:	a33b      	add	r3, pc, #236	; (adr r3, 8008a50 <__kernel_sin+0x140>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 fc33 	bl	80001d0 <__aeabi_dsub>
 800896a:	4632      	mov	r2, r6
 800896c:	463b      	mov	r3, r7
 800896e:	f7f7 fde7 	bl	8000540 <__aeabi_dmul>
 8008972:	a339      	add	r3, pc, #228	; (adr r3, 8008a58 <__kernel_sin+0x148>)
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f7f7 fc2c 	bl	80001d4 <__adddf3>
 800897c:	4632      	mov	r2, r6
 800897e:	463b      	mov	r3, r7
 8008980:	f7f7 fdde 	bl	8000540 <__aeabi_dmul>
 8008984:	a336      	add	r3, pc, #216	; (adr r3, 8008a60 <__kernel_sin+0x150>)
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f7f7 fc21 	bl	80001d0 <__aeabi_dsub>
 800898e:	4632      	mov	r2, r6
 8008990:	463b      	mov	r3, r7
 8008992:	f7f7 fdd5 	bl	8000540 <__aeabi_dmul>
 8008996:	a334      	add	r3, pc, #208	; (adr r3, 8008a68 <__kernel_sin+0x158>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f7f7 fc1a 	bl	80001d4 <__adddf3>
 80089a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089a4:	b9dd      	cbnz	r5, 80089de <__kernel_sin+0xce>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4630      	mov	r0, r6
 80089ac:	4639      	mov	r1, r7
 80089ae:	f7f7 fdc7 	bl	8000540 <__aeabi_dmul>
 80089b2:	a32f      	add	r3, pc, #188	; (adr r3, 8008a70 <__kernel_sin+0x160>)
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	f7f7 fc0a 	bl	80001d0 <__aeabi_dsub>
 80089bc:	4642      	mov	r2, r8
 80089be:	464b      	mov	r3, r9
 80089c0:	f7f7 fdbe 	bl	8000540 <__aeabi_dmul>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4650      	mov	r0, sl
 80089ca:	4621      	mov	r1, r4
 80089cc:	f7f7 fc02 	bl	80001d4 <__adddf3>
 80089d0:	4682      	mov	sl, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	4650      	mov	r0, sl
 80089d6:	4621      	mov	r1, r4
 80089d8:	b006      	add	sp, #24
 80089da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089de:	2200      	movs	r2, #0
 80089e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089e4:	4b24      	ldr	r3, [pc, #144]	; (8008a78 <__kernel_sin+0x168>)
 80089e6:	f7f7 fdab 	bl	8000540 <__aeabi_dmul>
 80089ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089f2:	4640      	mov	r0, r8
 80089f4:	4649      	mov	r1, r9
 80089f6:	f7f7 fda3 	bl	8000540 <__aeabi_dmul>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a02:	f7f7 fbe5 	bl	80001d0 <__aeabi_dsub>
 8008a06:	4632      	mov	r2, r6
 8008a08:	463b      	mov	r3, r7
 8008a0a:	f7f7 fd99 	bl	8000540 <__aeabi_dmul>
 8008a0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a12:	f7f7 fbdd 	bl	80001d0 <__aeabi_dsub>
 8008a16:	a316      	add	r3, pc, #88	; (adr r3, 8008a70 <__kernel_sin+0x160>)
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	460f      	mov	r7, r1
 8008a20:	4640      	mov	r0, r8
 8008a22:	4649      	mov	r1, r9
 8008a24:	f7f7 fd8c 	bl	8000540 <__aeabi_dmul>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	4639      	mov	r1, r7
 8008a30:	f7f7 fbd0 	bl	80001d4 <__adddf3>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	4650      	mov	r0, sl
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	f7f7 fbc8 	bl	80001d0 <__aeabi_dsub>
 8008a40:	e7c6      	b.n	80089d0 <__kernel_sin+0xc0>
 8008a42:	bf00      	nop
 8008a44:	f3af 8000 	nop.w
 8008a48:	5acfd57c 	.word	0x5acfd57c
 8008a4c:	3de5d93a 	.word	0x3de5d93a
 8008a50:	8a2b9ceb 	.word	0x8a2b9ceb
 8008a54:	3e5ae5e6 	.word	0x3e5ae5e6
 8008a58:	57b1fe7d 	.word	0x57b1fe7d
 8008a5c:	3ec71de3 	.word	0x3ec71de3
 8008a60:	19c161d5 	.word	0x19c161d5
 8008a64:	3f2a01a0 	.word	0x3f2a01a0
 8008a68:	1110f8a6 	.word	0x1110f8a6
 8008a6c:	3f811111 	.word	0x3f811111
 8008a70:	55555549 	.word	0x55555549
 8008a74:	3fc55555 	.word	0x3fc55555
 8008a78:	3fe00000 	.word	0x3fe00000

08008a7c <fabs>:
 8008a7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008a80:	4770      	bx	lr
 8008a82:	0000      	movs	r0, r0
 8008a84:	0000      	movs	r0, r0
	...

08008a88 <floor>:
 8008a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a8c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008a90:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008a94:	2e13      	cmp	r6, #19
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	4607      	mov	r7, r0
 8008a9c:	460c      	mov	r4, r1
 8008a9e:	4605      	mov	r5, r0
 8008aa0:	dc34      	bgt.n	8008b0c <floor+0x84>
 8008aa2:	2e00      	cmp	r6, #0
 8008aa4:	da15      	bge.n	8008ad2 <floor+0x4a>
 8008aa6:	a334      	add	r3, pc, #208	; (adr r3, 8008b78 <floor+0xf0>)
 8008aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aac:	f7f7 fb92 	bl	80001d4 <__adddf3>
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f7f7 ffd4 	bl	8000a60 <__aeabi_dcmpgt>
 8008ab8:	b140      	cbz	r0, 8008acc <floor+0x44>
 8008aba:	2c00      	cmp	r4, #0
 8008abc:	da59      	bge.n	8008b72 <floor+0xea>
 8008abe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008ac2:	ea57 0503 	orrs.w	r5, r7, r3
 8008ac6:	d001      	beq.n	8008acc <floor+0x44>
 8008ac8:	2500      	movs	r5, #0
 8008aca:	4c2d      	ldr	r4, [pc, #180]	; (8008b80 <floor+0xf8>)
 8008acc:	4623      	mov	r3, r4
 8008ace:	462f      	mov	r7, r5
 8008ad0:	e025      	b.n	8008b1e <floor+0x96>
 8008ad2:	4a2c      	ldr	r2, [pc, #176]	; (8008b84 <floor+0xfc>)
 8008ad4:	fa42 f806 	asr.w	r8, r2, r6
 8008ad8:	ea01 0208 	and.w	r2, r1, r8
 8008adc:	4302      	orrs	r2, r0
 8008ade:	d01e      	beq.n	8008b1e <floor+0x96>
 8008ae0:	a325      	add	r3, pc, #148	; (adr r3, 8008b78 <floor+0xf0>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f7f7 fb75 	bl	80001d4 <__adddf3>
 8008aea:	2200      	movs	r2, #0
 8008aec:	2300      	movs	r3, #0
 8008aee:	f7f7 ffb7 	bl	8000a60 <__aeabi_dcmpgt>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d0ea      	beq.n	8008acc <floor+0x44>
 8008af6:	2c00      	cmp	r4, #0
 8008af8:	bfbe      	ittt	lt
 8008afa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008afe:	fa43 f606 	asrlt.w	r6, r3, r6
 8008b02:	19a4      	addlt	r4, r4, r6
 8008b04:	2500      	movs	r5, #0
 8008b06:	ea24 0408 	bic.w	r4, r4, r8
 8008b0a:	e7df      	b.n	8008acc <floor+0x44>
 8008b0c:	2e33      	cmp	r6, #51	; 0x33
 8008b0e:	dd0a      	ble.n	8008b26 <floor+0x9e>
 8008b10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008b14:	d103      	bne.n	8008b1e <floor+0x96>
 8008b16:	f7f7 fb5d 	bl	80001d4 <__adddf3>
 8008b1a:	4607      	mov	r7, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4638      	mov	r0, r7
 8008b20:	4619      	mov	r1, r3
 8008b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b26:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008b2e:	fa22 f808 	lsr.w	r8, r2, r8
 8008b32:	ea18 0f00 	tst.w	r8, r0
 8008b36:	d0f2      	beq.n	8008b1e <floor+0x96>
 8008b38:	a30f      	add	r3, pc, #60	; (adr r3, 8008b78 <floor+0xf0>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f7f7 fb49 	bl	80001d4 <__adddf3>
 8008b42:	2200      	movs	r2, #0
 8008b44:	2300      	movs	r3, #0
 8008b46:	f7f7 ff8b 	bl	8000a60 <__aeabi_dcmpgt>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d0be      	beq.n	8008acc <floor+0x44>
 8008b4e:	2c00      	cmp	r4, #0
 8008b50:	da02      	bge.n	8008b58 <floor+0xd0>
 8008b52:	2e14      	cmp	r6, #20
 8008b54:	d103      	bne.n	8008b5e <floor+0xd6>
 8008b56:	3401      	adds	r4, #1
 8008b58:	ea25 0508 	bic.w	r5, r5, r8
 8008b5c:	e7b6      	b.n	8008acc <floor+0x44>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008b64:	fa03 f606 	lsl.w	r6, r3, r6
 8008b68:	4435      	add	r5, r6
 8008b6a:	42bd      	cmp	r5, r7
 8008b6c:	bf38      	it	cc
 8008b6e:	18e4      	addcc	r4, r4, r3
 8008b70:	e7f2      	b.n	8008b58 <floor+0xd0>
 8008b72:	2500      	movs	r5, #0
 8008b74:	462c      	mov	r4, r5
 8008b76:	e7a9      	b.n	8008acc <floor+0x44>
 8008b78:	8800759c 	.word	0x8800759c
 8008b7c:	7e37e43c 	.word	0x7e37e43c
 8008b80:	bff00000 	.word	0xbff00000
 8008b84:	000fffff 	.word	0x000fffff

08008b88 <scalbn>:
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008b8e:	4604      	mov	r4, r0
 8008b90:	460d      	mov	r5, r1
 8008b92:	4617      	mov	r7, r2
 8008b94:	460b      	mov	r3, r1
 8008b96:	b996      	cbnz	r6, 8008bbe <scalbn+0x36>
 8008b98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b9c:	4303      	orrs	r3, r0
 8008b9e:	d039      	beq.n	8008c14 <scalbn+0x8c>
 8008ba0:	4b35      	ldr	r3, [pc, #212]	; (8008c78 <scalbn+0xf0>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f7f7 fccc 	bl	8000540 <__aeabi_dmul>
 8008ba8:	4b34      	ldr	r3, [pc, #208]	; (8008c7c <scalbn+0xf4>)
 8008baa:	4604      	mov	r4, r0
 8008bac:	429f      	cmp	r7, r3
 8008bae:	460d      	mov	r5, r1
 8008bb0:	da0f      	bge.n	8008bd2 <scalbn+0x4a>
 8008bb2:	a32d      	add	r3, pc, #180	; (adr r3, 8008c68 <scalbn+0xe0>)
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	f7f7 fcc2 	bl	8000540 <__aeabi_dmul>
 8008bbc:	e006      	b.n	8008bcc <scalbn+0x44>
 8008bbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008bc2:	4296      	cmp	r6, r2
 8008bc4:	d10a      	bne.n	8008bdc <scalbn+0x54>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	f7f7 fb04 	bl	80001d4 <__adddf3>
 8008bcc:	4604      	mov	r4, r0
 8008bce:	460d      	mov	r5, r1
 8008bd0:	e020      	b.n	8008c14 <scalbn+0x8c>
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008bd8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008bdc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008be0:	19b9      	adds	r1, r7, r6
 8008be2:	4291      	cmp	r1, r2
 8008be4:	dd0e      	ble.n	8008c04 <scalbn+0x7c>
 8008be6:	a322      	add	r3, pc, #136	; (adr r3, 8008c70 <scalbn+0xe8>)
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008bf0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008bf4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008bf8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008bfc:	4820      	ldr	r0, [pc, #128]	; (8008c80 <scalbn+0xf8>)
 8008bfe:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008c02:	e7d9      	b.n	8008bb8 <scalbn+0x30>
 8008c04:	2900      	cmp	r1, #0
 8008c06:	dd08      	ble.n	8008c1a <scalbn+0x92>
 8008c08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c10:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008c14:	4620      	mov	r0, r4
 8008c16:	4629      	mov	r1, r5
 8008c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c1a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008c1e:	da16      	bge.n	8008c4e <scalbn+0xc6>
 8008c20:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008c24:	429f      	cmp	r7, r3
 8008c26:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008c2a:	dd08      	ble.n	8008c3e <scalbn+0xb6>
 8008c2c:	4c15      	ldr	r4, [pc, #84]	; (8008c84 <scalbn+0xfc>)
 8008c2e:	4814      	ldr	r0, [pc, #80]	; (8008c80 <scalbn+0xf8>)
 8008c30:	f363 74df 	bfi	r4, r3, #31, #1
 8008c34:	a30e      	add	r3, pc, #56	; (adr r3, 8008c70 <scalbn+0xe8>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	4621      	mov	r1, r4
 8008c3c:	e7bc      	b.n	8008bb8 <scalbn+0x30>
 8008c3e:	4c12      	ldr	r4, [pc, #72]	; (8008c88 <scalbn+0x100>)
 8008c40:	4812      	ldr	r0, [pc, #72]	; (8008c8c <scalbn+0x104>)
 8008c42:	f363 74df 	bfi	r4, r3, #31, #1
 8008c46:	a308      	add	r3, pc, #32	; (adr r3, 8008c68 <scalbn+0xe0>)
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	e7f5      	b.n	8008c3a <scalbn+0xb2>
 8008c4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008c52:	3136      	adds	r1, #54	; 0x36
 8008c54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008c58:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	4629      	mov	r1, r5
 8008c60:	2200      	movs	r2, #0
 8008c62:	4b0b      	ldr	r3, [pc, #44]	; (8008c90 <scalbn+0x108>)
 8008c64:	e7a8      	b.n	8008bb8 <scalbn+0x30>
 8008c66:	bf00      	nop
 8008c68:	c2f8f359 	.word	0xc2f8f359
 8008c6c:	01a56e1f 	.word	0x01a56e1f
 8008c70:	8800759c 	.word	0x8800759c
 8008c74:	7e37e43c 	.word	0x7e37e43c
 8008c78:	43500000 	.word	0x43500000
 8008c7c:	ffff3cb0 	.word	0xffff3cb0
 8008c80:	8800759c 	.word	0x8800759c
 8008c84:	7e37e43c 	.word	0x7e37e43c
 8008c88:	01a56e1f 	.word	0x01a56e1f
 8008c8c:	c2f8f359 	.word	0xc2f8f359
 8008c90:	3c900000 	.word	0x3c900000

08008c94 <_init>:
 8008c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c96:	bf00      	nop
 8008c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9a:	bc08      	pop	{r3}
 8008c9c:	469e      	mov	lr, r3
 8008c9e:	4770      	bx	lr

08008ca0 <_fini>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr
