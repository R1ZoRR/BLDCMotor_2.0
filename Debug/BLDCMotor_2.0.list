
BLDCMotor_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000965c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080097e8  080097e8  000197e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e0  080099e0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099e8  080099e8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099ec  080099ec  000199ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080099f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c44  2000001c  08009a0c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c60  08009a0c  00020c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bda  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c1  00000000  00000000  00032c1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000351e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  000362a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209ba  00000000  00000000  00037288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f7f  00000000  00000000  00057c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c846f  00000000  00000000  00069bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce0  00000000  00000000  00132084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080097cc 	.word	0x080097cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	080097cc 	.word	0x080097cc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <__aeabi_uldivmod>:
 800114c:	b953      	cbnz	r3, 8001164 <__aeabi_uldivmod+0x18>
 800114e:	b94a      	cbnz	r2, 8001164 <__aeabi_uldivmod+0x18>
 8001150:	2900      	cmp	r1, #0
 8001152:	bf08      	it	eq
 8001154:	2800      	cmpeq	r0, #0
 8001156:	bf1c      	itt	ne
 8001158:	f04f 31ff 	movne.w	r1, #4294967295
 800115c:	f04f 30ff 	movne.w	r0, #4294967295
 8001160:	f000 b96e 	b.w	8001440 <__aeabi_idiv0>
 8001164:	f1ad 0c08 	sub.w	ip, sp, #8
 8001168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800116c:	f000 f806 	bl	800117c <__udivmoddi4>
 8001170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr

0800117c <__udivmoddi4>:
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	9e08      	ldr	r6, [sp, #32]
 8001182:	460d      	mov	r5, r1
 8001184:	4604      	mov	r4, r0
 8001186:	468e      	mov	lr, r1
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 8083 	bne.w	8001294 <__udivmoddi4+0x118>
 800118e:	428a      	cmp	r2, r1
 8001190:	4617      	mov	r7, r2
 8001192:	d947      	bls.n	8001224 <__udivmoddi4+0xa8>
 8001194:	fab2 f382 	clz	r3, r2
 8001198:	b14b      	cbz	r3, 80011ae <__udivmoddi4+0x32>
 800119a:	f1c3 0120 	rsb	r1, r3, #32
 800119e:	fa05 fe03 	lsl.w	lr, r5, r3
 80011a2:	fa20 f101 	lsr.w	r1, r0, r1
 80011a6:	409f      	lsls	r7, r3
 80011a8:	ea41 0e0e 	orr.w	lr, r1, lr
 80011ac:	409c      	lsls	r4, r3
 80011ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011b2:	fbbe fcf8 	udiv	ip, lr, r8
 80011b6:	fa1f f987 	uxth.w	r9, r7
 80011ba:	fb08 e21c 	mls	r2, r8, ip, lr
 80011be:	fb0c f009 	mul.w	r0, ip, r9
 80011c2:	0c21      	lsrs	r1, r4, #16
 80011c4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d90a      	bls.n	80011e2 <__udivmoddi4+0x66>
 80011cc:	18ba      	adds	r2, r7, r2
 80011ce:	f10c 31ff 	add.w	r1, ip, #4294967295
 80011d2:	f080 8118 	bcs.w	8001406 <__udivmoddi4+0x28a>
 80011d6:	4290      	cmp	r0, r2
 80011d8:	f240 8115 	bls.w	8001406 <__udivmoddi4+0x28a>
 80011dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80011e0:	443a      	add	r2, r7
 80011e2:	1a12      	subs	r2, r2, r0
 80011e4:	fbb2 f0f8 	udiv	r0, r2, r8
 80011e8:	fb08 2210 	mls	r2, r8, r0, r2
 80011ec:	fb00 f109 	mul.w	r1, r0, r9
 80011f0:	b2a4      	uxth	r4, r4
 80011f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011f6:	42a1      	cmp	r1, r4
 80011f8:	d909      	bls.n	800120e <__udivmoddi4+0x92>
 80011fa:	193c      	adds	r4, r7, r4
 80011fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8001200:	f080 8103 	bcs.w	800140a <__udivmoddi4+0x28e>
 8001204:	42a1      	cmp	r1, r4
 8001206:	f240 8100 	bls.w	800140a <__udivmoddi4+0x28e>
 800120a:	3802      	subs	r0, #2
 800120c:	443c      	add	r4, r7
 800120e:	1a64      	subs	r4, r4, r1
 8001210:	2100      	movs	r1, #0
 8001212:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001216:	b11e      	cbz	r6, 8001220 <__udivmoddi4+0xa4>
 8001218:	2200      	movs	r2, #0
 800121a:	40dc      	lsrs	r4, r3
 800121c:	e9c6 4200 	strd	r4, r2, [r6]
 8001220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001224:	b902      	cbnz	r2, 8001228 <__udivmoddi4+0xac>
 8001226:	deff      	udf	#255	; 0xff
 8001228:	fab2 f382 	clz	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d14f      	bne.n	80012d0 <__udivmoddi4+0x154>
 8001230:	1a8d      	subs	r5, r1, r2
 8001232:	2101      	movs	r1, #1
 8001234:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001238:	fa1f f882 	uxth.w	r8, r2
 800123c:	fbb5 fcfe 	udiv	ip, r5, lr
 8001240:	fb0e 551c 	mls	r5, lr, ip, r5
 8001244:	fb08 f00c 	mul.w	r0, r8, ip
 8001248:	0c22      	lsrs	r2, r4, #16
 800124a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800124e:	42a8      	cmp	r0, r5
 8001250:	d907      	bls.n	8001262 <__udivmoddi4+0xe6>
 8001252:	197d      	adds	r5, r7, r5
 8001254:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001258:	d202      	bcs.n	8001260 <__udivmoddi4+0xe4>
 800125a:	42a8      	cmp	r0, r5
 800125c:	f200 80e9 	bhi.w	8001432 <__udivmoddi4+0x2b6>
 8001260:	4694      	mov	ip, r2
 8001262:	1a2d      	subs	r5, r5, r0
 8001264:	fbb5 f0fe 	udiv	r0, r5, lr
 8001268:	fb0e 5510 	mls	r5, lr, r0, r5
 800126c:	fb08 f800 	mul.w	r8, r8, r0
 8001270:	b2a4      	uxth	r4, r4
 8001272:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001276:	45a0      	cmp	r8, r4
 8001278:	d907      	bls.n	800128a <__udivmoddi4+0x10e>
 800127a:	193c      	adds	r4, r7, r4
 800127c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001280:	d202      	bcs.n	8001288 <__udivmoddi4+0x10c>
 8001282:	45a0      	cmp	r8, r4
 8001284:	f200 80d9 	bhi.w	800143a <__udivmoddi4+0x2be>
 8001288:	4610      	mov	r0, r2
 800128a:	eba4 0408 	sub.w	r4, r4, r8
 800128e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001292:	e7c0      	b.n	8001216 <__udivmoddi4+0x9a>
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x12e>
 8001298:	2e00      	cmp	r6, #0
 800129a:	f000 80b1 	beq.w	8001400 <__udivmoddi4+0x284>
 800129e:	2100      	movs	r1, #0
 80012a0:	e9c6 0500 	strd	r0, r5, [r6]
 80012a4:	4608      	mov	r0, r1
 80012a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012aa:	fab3 f183 	clz	r1, r3
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d14b      	bne.n	800134a <__udivmoddi4+0x1ce>
 80012b2:	42ab      	cmp	r3, r5
 80012b4:	d302      	bcc.n	80012bc <__udivmoddi4+0x140>
 80012b6:	4282      	cmp	r2, r0
 80012b8:	f200 80b9 	bhi.w	800142e <__udivmoddi4+0x2b2>
 80012bc:	1a84      	subs	r4, r0, r2
 80012be:	eb65 0303 	sbc.w	r3, r5, r3
 80012c2:	2001      	movs	r0, #1
 80012c4:	469e      	mov	lr, r3
 80012c6:	2e00      	cmp	r6, #0
 80012c8:	d0aa      	beq.n	8001220 <__udivmoddi4+0xa4>
 80012ca:	e9c6 4e00 	strd	r4, lr, [r6]
 80012ce:	e7a7      	b.n	8001220 <__udivmoddi4+0xa4>
 80012d0:	409f      	lsls	r7, r3
 80012d2:	f1c3 0220 	rsb	r2, r3, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80012e0:	fa1f f887 	uxth.w	r8, r7
 80012e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80012e8:	fa24 f202 	lsr.w	r2, r4, r2
 80012ec:	409d      	lsls	r5, r3
 80012ee:	fb00 fc08 	mul.w	ip, r0, r8
 80012f2:	432a      	orrs	r2, r5
 80012f4:	0c15      	lsrs	r5, r2, #16
 80012f6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012fa:	45ac      	cmp	ip, r5
 80012fc:	fa04 f403 	lsl.w	r4, r4, r3
 8001300:	d909      	bls.n	8001316 <__udivmoddi4+0x19a>
 8001302:	197d      	adds	r5, r7, r5
 8001304:	f100 31ff 	add.w	r1, r0, #4294967295
 8001308:	f080 808f 	bcs.w	800142a <__udivmoddi4+0x2ae>
 800130c:	45ac      	cmp	ip, r5
 800130e:	f240 808c 	bls.w	800142a <__udivmoddi4+0x2ae>
 8001312:	3802      	subs	r0, #2
 8001314:	443d      	add	r5, r7
 8001316:	eba5 050c 	sub.w	r5, r5, ip
 800131a:	fbb5 f1fe 	udiv	r1, r5, lr
 800131e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001322:	fb01 f908 	mul.w	r9, r1, r8
 8001326:	b295      	uxth	r5, r2
 8001328:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800132c:	45a9      	cmp	r9, r5
 800132e:	d907      	bls.n	8001340 <__udivmoddi4+0x1c4>
 8001330:	197d      	adds	r5, r7, r5
 8001332:	f101 32ff 	add.w	r2, r1, #4294967295
 8001336:	d274      	bcs.n	8001422 <__udivmoddi4+0x2a6>
 8001338:	45a9      	cmp	r9, r5
 800133a:	d972      	bls.n	8001422 <__udivmoddi4+0x2a6>
 800133c:	3902      	subs	r1, #2
 800133e:	443d      	add	r5, r7
 8001340:	eba5 0509 	sub.w	r5, r5, r9
 8001344:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001348:	e778      	b.n	800123c <__udivmoddi4+0xc0>
 800134a:	f1c1 0720 	rsb	r7, r1, #32
 800134e:	408b      	lsls	r3, r1
 8001350:	fa22 fc07 	lsr.w	ip, r2, r7
 8001354:	ea4c 0c03 	orr.w	ip, ip, r3
 8001358:	fa25 f407 	lsr.w	r4, r5, r7
 800135c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001360:	fbb4 f9fe 	udiv	r9, r4, lr
 8001364:	fa1f f88c 	uxth.w	r8, ip
 8001368:	fb0e 4419 	mls	r4, lr, r9, r4
 800136c:	fa20 f307 	lsr.w	r3, r0, r7
 8001370:	fb09 fa08 	mul.w	sl, r9, r8
 8001374:	408d      	lsls	r5, r1
 8001376:	431d      	orrs	r5, r3
 8001378:	0c2b      	lsrs	r3, r5, #16
 800137a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800137e:	45a2      	cmp	sl, r4
 8001380:	fa02 f201 	lsl.w	r2, r2, r1
 8001384:	fa00 f301 	lsl.w	r3, r0, r1
 8001388:	d909      	bls.n	800139e <__udivmoddi4+0x222>
 800138a:	eb1c 0404 	adds.w	r4, ip, r4
 800138e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001392:	d248      	bcs.n	8001426 <__udivmoddi4+0x2aa>
 8001394:	45a2      	cmp	sl, r4
 8001396:	d946      	bls.n	8001426 <__udivmoddi4+0x2aa>
 8001398:	f1a9 0902 	sub.w	r9, r9, #2
 800139c:	4464      	add	r4, ip
 800139e:	eba4 040a 	sub.w	r4, r4, sl
 80013a2:	fbb4 f0fe 	udiv	r0, r4, lr
 80013a6:	fb0e 4410 	mls	r4, lr, r0, r4
 80013aa:	fb00 fa08 	mul.w	sl, r0, r8
 80013ae:	b2ad      	uxth	r5, r5
 80013b0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013b4:	45a2      	cmp	sl, r4
 80013b6:	d908      	bls.n	80013ca <__udivmoddi4+0x24e>
 80013b8:	eb1c 0404 	adds.w	r4, ip, r4
 80013bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80013c0:	d22d      	bcs.n	800141e <__udivmoddi4+0x2a2>
 80013c2:	45a2      	cmp	sl, r4
 80013c4:	d92b      	bls.n	800141e <__udivmoddi4+0x2a2>
 80013c6:	3802      	subs	r0, #2
 80013c8:	4464      	add	r4, ip
 80013ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013ce:	fba0 8902 	umull	r8, r9, r0, r2
 80013d2:	eba4 040a 	sub.w	r4, r4, sl
 80013d6:	454c      	cmp	r4, r9
 80013d8:	46c6      	mov	lr, r8
 80013da:	464d      	mov	r5, r9
 80013dc:	d319      	bcc.n	8001412 <__udivmoddi4+0x296>
 80013de:	d016      	beq.n	800140e <__udivmoddi4+0x292>
 80013e0:	b15e      	cbz	r6, 80013fa <__udivmoddi4+0x27e>
 80013e2:	ebb3 020e 	subs.w	r2, r3, lr
 80013e6:	eb64 0405 	sbc.w	r4, r4, r5
 80013ea:	fa04 f707 	lsl.w	r7, r4, r7
 80013ee:	fa22 f301 	lsr.w	r3, r2, r1
 80013f2:	431f      	orrs	r7, r3
 80013f4:	40cc      	lsrs	r4, r1
 80013f6:	e9c6 7400 	strd	r7, r4, [r6]
 80013fa:	2100      	movs	r1, #0
 80013fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001400:	4631      	mov	r1, r6
 8001402:	4630      	mov	r0, r6
 8001404:	e70c      	b.n	8001220 <__udivmoddi4+0xa4>
 8001406:	468c      	mov	ip, r1
 8001408:	e6eb      	b.n	80011e2 <__udivmoddi4+0x66>
 800140a:	4610      	mov	r0, r2
 800140c:	e6ff      	b.n	800120e <__udivmoddi4+0x92>
 800140e:	4543      	cmp	r3, r8
 8001410:	d2e6      	bcs.n	80013e0 <__udivmoddi4+0x264>
 8001412:	ebb8 0e02 	subs.w	lr, r8, r2
 8001416:	eb69 050c 	sbc.w	r5, r9, ip
 800141a:	3801      	subs	r0, #1
 800141c:	e7e0      	b.n	80013e0 <__udivmoddi4+0x264>
 800141e:	4628      	mov	r0, r5
 8001420:	e7d3      	b.n	80013ca <__udivmoddi4+0x24e>
 8001422:	4611      	mov	r1, r2
 8001424:	e78c      	b.n	8001340 <__udivmoddi4+0x1c4>
 8001426:	4681      	mov	r9, r0
 8001428:	e7b9      	b.n	800139e <__udivmoddi4+0x222>
 800142a:	4608      	mov	r0, r1
 800142c:	e773      	b.n	8001316 <__udivmoddi4+0x19a>
 800142e:	4608      	mov	r0, r1
 8001430:	e749      	b.n	80012c6 <__udivmoddi4+0x14a>
 8001432:	f1ac 0c02 	sub.w	ip, ip, #2
 8001436:	443d      	add	r5, r7
 8001438:	e713      	b.n	8001262 <__udivmoddi4+0xe6>
 800143a:	3802      	subs	r0, #2
 800143c:	443c      	add	r4, r7
 800143e:	e724      	b.n	800128a <__udivmoddi4+0x10e>

08001440 <__aeabi_idiv0>:
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <initialize_PID_constants>:
float I_beta = 0;
float I_d = 0;
float I_q = 0;
float summ = 0;

void initialize_PID_constants() {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	Kp = 0.01;
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <initialize_PID_constants+0x24>)
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <initialize_PID_constants+0x28>)
 800144c:	601a      	str	r2, [r3, #0]
	Ki = 1;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <initialize_PID_constants+0x2c>)
 8001450:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001454:	601a      	str	r2, [r3, #0]
    Kd = 0.5;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <initialize_PID_constants+0x30>)
 8001458:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800145c:	601a      	str	r2, [r3, #0]
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000654 	.word	0x20000654
 800146c:	3c23d70a 	.word	0x3c23d70a
 8001470:	20000088 	.word	0x20000088
 8001474:	20000378 	.word	0x20000378

08001478 <move_rotor>:
uint16_t cnt_hall_last = 0;

/////////////////////////////////

// Функция изменяет ШИМ в соответсвии с указанным вектором тяги
void move_rotor(float to_angle) {
 8001478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
	// Расчет потенциалов и заполнения шима для фаз
	U_PWM = pwm*(sin((to_angle)     * M_PI/180) + sin((to_angle)     * M_PI/60)/4);
 8001482:	4bc3      	ldr	r3, [pc, #780]	; (8001790 <move_rotor+0x318>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe fff0 	bl	800046c <__aeabi_i2d>
 800148c:	4604      	mov	r4, r0
 800148e:	460d      	mov	r5, r1
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7fe fffd 	bl	8000490 <__aeabi_f2d>
 8001496:	a3bc      	add	r3, pc, #752	; (adr r3, 8001788 <move_rotor+0x310>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff f850 	bl	8000540 <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4bb9      	ldr	r3, [pc, #740]	; (8001794 <move_rotor+0x31c>)
 80014ae:	f7ff f971 	bl	8000794 <__aeabi_ddiv>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f007 f987 	bl	80087cc <sin>
 80014be:	4680      	mov	r8, r0
 80014c0:	4689      	mov	r9, r1
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7fe ffe4 	bl	8000490 <__aeabi_f2d>
 80014c8:	a3af      	add	r3, pc, #700	; (adr r3, 8001788 <move_rotor+0x310>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f837 	bl	8000540 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	4bae      	ldr	r3, [pc, #696]	; (8001798 <move_rotor+0x320>)
 80014e0:	f7ff f958 	bl	8000794 <__aeabi_ddiv>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f007 f96e 	bl	80087cc <sin>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4ba9      	ldr	r3, [pc, #676]	; (800179c <move_rotor+0x324>)
 80014f6:	f7ff f94d 	bl	8000794 <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4640      	mov	r0, r8
 8001500:	4649      	mov	r1, r9
 8001502:	f7fe fe67 	bl	80001d4 <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4620      	mov	r0, r4
 800150c:	4629      	mov	r1, r5
 800150e:	f7ff f817 	bl	8000540 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fad3 	bl	8000ac4 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	4a9f      	ldr	r2, [pc, #636]	; (80017a0 <move_rotor+0x328>)
 8001522:	6013      	str	r3, [r2, #0]
	V_PWM = pwm*(sin((to_angle+240) * M_PI/180) + sin((to_angle+240) * M_PI/60)/4);
 8001524:	4b9a      	ldr	r3, [pc, #616]	; (8001790 <move_rotor+0x318>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ff9f 	bl	800046c <__aeabi_i2d>
 800152e:	4604      	mov	r4, r0
 8001530:	460d      	mov	r5, r1
 8001532:	499c      	ldr	r1, [pc, #624]	; (80017a4 <move_rotor+0x32c>)
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fb1b 	bl	8000b70 <__addsf3>
 800153a:	4603      	mov	r3, r0
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ffa7 	bl	8000490 <__aeabi_f2d>
 8001542:	a391      	add	r3, pc, #580	; (adr r3, 8001788 <move_rotor+0x310>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe fffa 	bl	8000540 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b8e      	ldr	r3, [pc, #568]	; (8001794 <move_rotor+0x31c>)
 800155a:	f7ff f91b 	bl	8000794 <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f007 f931 	bl	80087cc <sin>
 800156a:	4680      	mov	r8, r0
 800156c:	4689      	mov	r9, r1
 800156e:	498d      	ldr	r1, [pc, #564]	; (80017a4 <move_rotor+0x32c>)
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fafd 	bl	8000b70 <__addsf3>
 8001576:	4603      	mov	r3, r0
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff89 	bl	8000490 <__aeabi_f2d>
 800157e:	a382      	add	r3, pc, #520	; (adr r3, 8001788 <move_rotor+0x310>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe ffdc 	bl	8000540 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b80      	ldr	r3, [pc, #512]	; (8001798 <move_rotor+0x320>)
 8001596:	f7ff f8fd 	bl	8000794 <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f007 f913 	bl	80087cc <sin>
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b7c      	ldr	r3, [pc, #496]	; (800179c <move_rotor+0x324>)
 80015ac:	f7ff f8f2 	bl	8000794 <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4640      	mov	r0, r8
 80015b6:	4649      	mov	r1, r9
 80015b8:	f7fe fe0c 	bl	80001d4 <__adddf3>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7fe ffbc 	bl	8000540 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fa78 	bl	8000ac4 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a74      	ldr	r2, [pc, #464]	; (80017a8 <move_rotor+0x330>)
 80015d8:	6013      	str	r3, [r2, #0]
	W_PWM = pwm*(sin((to_angle+120) * M_PI/180) + sin((to_angle+120) * M_PI/60)/4);
 80015da:	4b6d      	ldr	r3, [pc, #436]	; (8001790 <move_rotor+0x318>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ff44 	bl	800046c <__aeabi_i2d>
 80015e4:	4604      	mov	r4, r0
 80015e6:	460d      	mov	r5, r1
 80015e8:	4970      	ldr	r1, [pc, #448]	; (80017ac <move_rotor+0x334>)
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fac0 	bl	8000b70 <__addsf3>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff4c 	bl	8000490 <__aeabi_f2d>
 80015f8:	a363      	add	r3, pc, #396	; (adr r3, 8001788 <move_rotor+0x310>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe ff9f 	bl	8000540 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b61      	ldr	r3, [pc, #388]	; (8001794 <move_rotor+0x31c>)
 8001610:	f7ff f8c0 	bl	8000794 <__aeabi_ddiv>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f007 f8d6 	bl	80087cc <sin>
 8001620:	4680      	mov	r8, r0
 8001622:	4689      	mov	r9, r1
 8001624:	4961      	ldr	r1, [pc, #388]	; (80017ac <move_rotor+0x334>)
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff faa2 	bl	8000b70 <__addsf3>
 800162c:	4603      	mov	r3, r0
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff2e 	bl	8000490 <__aeabi_f2d>
 8001634:	a354      	add	r3, pc, #336	; (adr r3, 8001788 <move_rotor+0x310>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe ff81 	bl	8000540 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b53      	ldr	r3, [pc, #332]	; (8001798 <move_rotor+0x320>)
 800164c:	f7ff f8a2 	bl	8000794 <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f007 f8b8 	bl	80087cc <sin>
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b4e      	ldr	r3, [pc, #312]	; (800179c <move_rotor+0x324>)
 8001662:	f7ff f897 	bl	8000794 <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4640      	mov	r0, r8
 800166c:	4649      	mov	r1, r9
 800166e:	f7fe fdb1 	bl	80001d4 <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7fe ff61 	bl	8000540 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fa1d 	bl	8000ac4 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	4a48      	ldr	r2, [pc, #288]	; (80017b0 <move_rotor+0x338>)
 800168e:	6013      	str	r3, [r2, #0]
	/////////////////////////////////
	// Перенастройка шима на фазах

	if(U_PWM >= 0) { // if, т. к. позитивными и негативными ключами управляют разные каналы таймеров
 8001690:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <move_rotor+0x328>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fd23 	bl	80010e4 <__aeabi_fcmpge>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d011      	beq.n	80016c8 <move_rotor+0x250>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80016a4:	2100      	movs	r1, #0
 80016a6:	4843      	ldr	r0, [pc, #268]	; (80017b4 <move_rotor+0x33c>)
 80016a8:	f006 fb3c 	bl	8007d24 <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR1 = (uint16_t)(U_PWM);
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <move_rotor+0x328>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fd2b 	bl	800110c <__aeabi_f2uiz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <move_rotor+0x340>)
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016be:	2100      	movs	r1, #0
 80016c0:	483c      	ldr	r0, [pc, #240]	; (80017b4 <move_rotor+0x33c>)
 80016c2:	f005 fbc3 	bl	8006e4c <HAL_TIM_PWM_Start>
 80016c6:	e012      	b.n	80016ee <move_rotor+0x276>
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80016c8:	2100      	movs	r1, #0
 80016ca:	483a      	ldr	r0, [pc, #232]	; (80017b4 <move_rotor+0x33c>)
 80016cc:	f005 fbfc 	bl	8006ec8 <HAL_TIM_PWM_Stop>
		TIM1->CCR1 = (uint16_t)(-U_PWM);
 80016d0:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <move_rotor+0x328>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fd17 	bl	800110c <__aeabi_f2uiz>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <move_rotor+0x340>)
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80016e6:	2100      	movs	r1, #0
 80016e8:	4832      	ldr	r0, [pc, #200]	; (80017b4 <move_rotor+0x33c>)
 80016ea:	f006 faf1 	bl	8007cd0 <HAL_TIMEx_PWMN_Start>
	}

	if(W_PWM >= 0) {
 80016ee:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <move_rotor+0x338>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f04f 0100 	mov.w	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fcf4 	bl	80010e4 <__aeabi_fcmpge>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d011      	beq.n	8001726 <move_rotor+0x2ae>
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001702:	2100      	movs	r1, #0
 8001704:	482d      	ldr	r0, [pc, #180]	; (80017bc <move_rotor+0x344>)
 8001706:	f006 fb0d 	bl	8007d24 <HAL_TIMEx_PWMN_Stop>
		TIM8->CCR1 = (uint16_t)(V_PWM);
 800170a:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <move_rotor+0x330>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fcfc 	bl	800110c <__aeabi_f2uiz>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <move_rotor+0x348>)
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800171c:	2100      	movs	r1, #0
 800171e:	4827      	ldr	r0, [pc, #156]	; (80017bc <move_rotor+0x344>)
 8001720:	f005 fb94 	bl	8006e4c <HAL_TIM_PWM_Start>
 8001724:	e012      	b.n	800174c <move_rotor+0x2d4>
	}
	else {
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001726:	2100      	movs	r1, #0
 8001728:	4824      	ldr	r0, [pc, #144]	; (80017bc <move_rotor+0x344>)
 800172a:	f005 fbcd 	bl	8006ec8 <HAL_TIM_PWM_Stop>
		TIM8->CCR1 = (uint16_t)(-V_PWM);
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <move_rotor+0x330>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fce8 	bl	800110c <__aeabi_f2uiz>
 800173c:	4603      	mov	r3, r0
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <move_rotor+0x348>)
 8001742:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001744:	2100      	movs	r1, #0
 8001746:	481d      	ldr	r0, [pc, #116]	; (80017bc <move_rotor+0x344>)
 8001748:	f006 fac2 	bl	8007cd0 <HAL_TIMEx_PWMN_Start>
	}

	if(W_PWM >= 0) {
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <move_rotor+0x338>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f04f 0100 	mov.w	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fcc5 	bl	80010e4 <__aeabi_fcmpge>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d031      	beq.n	80017c4 <move_rotor+0x34c>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001760:	2104      	movs	r1, #4
 8001762:	4814      	ldr	r0, [pc, #80]	; (80017b4 <move_rotor+0x33c>)
 8001764:	f006 fade 	bl	8007d24 <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR2 = (uint16_t)(W_PWM);
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <move_rotor+0x338>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fccd 	bl	800110c <__aeabi_f2uiz>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <move_rotor+0x340>)
 8001778:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800177a:	2104      	movs	r1, #4
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <move_rotor+0x33c>)
 800177e:	f005 fb65 	bl	8006e4c <HAL_TIM_PWM_Start>
 8001782:	e032      	b.n	80017ea <move_rotor+0x372>
 8001784:	f3af 8000 	nop.w
 8001788:	54442d18 	.word	0x54442d18
 800178c:	400921fb 	.word	0x400921fb
 8001790:	2000003a 	.word	0x2000003a
 8001794:	40668000 	.word	0x40668000
 8001798:	404e0000 	.word	0x404e0000
 800179c:	40100000 	.word	0x40100000
 80017a0:	2000008c 	.word	0x2000008c
 80017a4:	43700000 	.word	0x43700000
 80017a8:	20000090 	.word	0x20000090
 80017ac:	42f00000 	.word	0x42f00000
 80017b0:	20000098 	.word	0x20000098
 80017b4:	20000bdc 	.word	0x20000bdc
 80017b8:	40010000 	.word	0x40010000
 80017bc:	200009e4 	.word	0x200009e4
 80017c0:	40010400 	.word	0x40010400
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80017c4:	2104      	movs	r1, #4
 80017c6:	480e      	ldr	r0, [pc, #56]	; (8001800 <move_rotor+0x388>)
 80017c8:	f005 fb7e 	bl	8006ec8 <HAL_TIM_PWM_Stop>
		TIM1->CCR2 = (uint16_t)(-W_PWM);
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <move_rotor+0x38c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fc99 	bl	800110c <__aeabi_f2uiz>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <move_rotor+0x390>)
 80017e0:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80017e2:	2104      	movs	r1, #4
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <move_rotor+0x388>)
 80017e6:	f006 fa73 	bl	8007cd0 <HAL_TIMEx_PWMN_Start>
	}

	// Сброс счетчиков таймеров для синхронизации
	TIM1->CNT = 0;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <move_rotor+0x390>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = 0;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <move_rotor+0x394>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
	return;
 80017f6:	bf00      	nop
}
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001800:	20000bdc 	.word	0x20000bdc
 8001804:	20000098 	.word	0x20000098
 8001808:	40010000 	.word	0x40010000
 800180c:	40010400 	.word	0x40010400

08001810 <motor_control>:

// Функция, управляющая последовательностью переключением обмоток двигателя
float offset = 30; // Датчики развернуты на +26.5 градусов отностительно статора; сдвиг в меньше 27- движение по часовой, в больше - против часовой
uint8_t next_step;
uint16_t error_hall;
void motor_control(uint8_t command, uint16_t pwm) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	460a      	mov	r2, r1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	4613      	mov	r3, r2
 800181e:	80bb      	strh	r3, [r7, #4]
	switch (command) {
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 80aa 	beq.w	800197c <motor_control+0x16c>
 8001828:	2b02      	cmp	r3, #2
 800182a:	f040 80c0 	bne.w	80019ae <motor_control+0x19e>
		case Eright:
			switch (step) {
 800182e:	4b62      	ldr	r3, [pc, #392]	; (80019b8 <motor_control+0x1a8>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3b01      	subs	r3, #1
 8001834:	2b05      	cmp	r3, #5
 8001836:	f200 809f 	bhi.w	8001978 <motor_control+0x168>
 800183a:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <motor_control+0x30>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	08001949 	.word	0x08001949
 8001844:	080018e9 	.word	0x080018e9
 8001848:	08001919 	.word	0x08001919
 800184c:	08001889 	.word	0x08001889
 8001850:	08001859 	.word	0x08001859
 8001854:	080018b9 	.word	0x080018b9
			case 0b101: // Состояние 5
				rotor_angle = 30;
 8001858:	4b58      	ldr	r3, [pc, #352]	; (80019bc <motor_control+0x1ac>)
 800185a:	4a59      	ldr	r2, [pc, #356]	; (80019c0 <motor_control+0x1b0>)
 800185c:	601a      	str	r2, [r3, #0]
				next_step = 0b001;
 800185e:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <motor_control+0x1b4>)
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 8001864:	4b55      	ldr	r3, [pc, #340]	; (80019bc <motor_control+0x1ac>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a57      	ldr	r2, [pc, #348]	; (80019c8 <motor_control+0x1b8>)
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff f97e 	bl	8000b70 <__addsf3>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	4b54      	ldr	r3, [pc, #336]	; (80019cc <motor_control+0x1bc>)
 800187a:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 800187c:	4b53      	ldr	r3, [pc, #332]	; (80019cc <motor_control+0x1bc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fdf9 	bl	8001478 <move_rotor>
				break;
 8001886:	e078      	b.n	800197a <motor_control+0x16a>
			case 0b100: // Состояние 4
				rotor_angle = 90;
 8001888:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <motor_control+0x1ac>)
 800188a:	4a51      	ldr	r2, [pc, #324]	; (80019d0 <motor_control+0x1c0>)
 800188c:	601a      	str	r2, [r3, #0]
				next_step = 0b101;
 800188e:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <motor_control+0x1b4>)
 8001890:	2205      	movs	r2, #5
 8001892:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 8001894:	4b49      	ldr	r3, [pc, #292]	; (80019bc <motor_control+0x1ac>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a4b      	ldr	r2, [pc, #300]	; (80019c8 <motor_control+0x1b8>)
 800189a:	6812      	ldr	r2, [r2, #0]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f966 	bl	8000b70 <__addsf3>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b48      	ldr	r3, [pc, #288]	; (80019cc <motor_control+0x1bc>)
 80018aa:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 80018ac:	4b47      	ldr	r3, [pc, #284]	; (80019cc <motor_control+0x1bc>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fde1 	bl	8001478 <move_rotor>
				break;
 80018b6:	e060      	b.n	800197a <motor_control+0x16a>
			case 0b110: // Состояние 6
				rotor_angle = 150;
 80018b8:	4b40      	ldr	r3, [pc, #256]	; (80019bc <motor_control+0x1ac>)
 80018ba:	4a46      	ldr	r2, [pc, #280]	; (80019d4 <motor_control+0x1c4>)
 80018bc:	601a      	str	r2, [r3, #0]
				next_step = 0b100;
 80018be:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <motor_control+0x1b4>)
 80018c0:	2204      	movs	r2, #4
 80018c2:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 80018c4:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <motor_control+0x1ac>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a3f      	ldr	r2, [pc, #252]	; (80019c8 <motor_control+0x1b8>)
 80018ca:	6812      	ldr	r2, [r2, #0]
 80018cc:	4611      	mov	r1, r2
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f94e 	bl	8000b70 <__addsf3>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b3c      	ldr	r3, [pc, #240]	; (80019cc <motor_control+0x1bc>)
 80018da:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 80018dc:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <motor_control+0x1bc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fdc9 	bl	8001478 <move_rotor>
				break;
 80018e6:	e048      	b.n	800197a <motor_control+0x16a>
			case 0b010: // Состояние 2
				rotor_angle = 210;
 80018e8:	4b34      	ldr	r3, [pc, #208]	; (80019bc <motor_control+0x1ac>)
 80018ea:	4a3b      	ldr	r2, [pc, #236]	; (80019d8 <motor_control+0x1c8>)
 80018ec:	601a      	str	r2, [r3, #0]
				next_step = 0b110;
 80018ee:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <motor_control+0x1b4>)
 80018f0:	2206      	movs	r2, #6
 80018f2:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <motor_control+0x1ac>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a33      	ldr	r2, [pc, #204]	; (80019c8 <motor_control+0x1b8>)
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f936 	bl	8000b70 <__addsf3>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	4b30      	ldr	r3, [pc, #192]	; (80019cc <motor_control+0x1bc>)
 800190a:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <motor_control+0x1bc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fdb1 	bl	8001478 <move_rotor>
				break;
 8001916:	e030      	b.n	800197a <motor_control+0x16a>
			case 0b011: // Состояние 3
				rotor_angle = 270;
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <motor_control+0x1ac>)
 800191a:	4a30      	ldr	r2, [pc, #192]	; (80019dc <motor_control+0x1cc>)
 800191c:	601a      	str	r2, [r3, #0]
				next_step = 0b010;
 800191e:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <motor_control+0x1b4>)
 8001920:	2202      	movs	r2, #2
 8001922:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <motor_control+0x1ac>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <motor_control+0x1b8>)
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff f91e 	bl	8000b70 <__addsf3>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <motor_control+0x1bc>)
 800193a:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 800193c:	4b23      	ldr	r3, [pc, #140]	; (80019cc <motor_control+0x1bc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fd99 	bl	8001478 <move_rotor>
				break;
 8001946:	e018      	b.n	800197a <motor_control+0x16a>
			case 0b001: // Состояние 1
				rotor_angle = 330;
 8001948:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <motor_control+0x1ac>)
 800194a:	4a25      	ldr	r2, [pc, #148]	; (80019e0 <motor_control+0x1d0>)
 800194c:	601a      	str	r2, [r3, #0]
				next_step = 0b011;
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <motor_control+0x1b4>)
 8001950:	2203      	movs	r2, #3
 8001952:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <motor_control+0x1ac>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <motor_control+0x1b8>)
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f906 	bl	8000b70 <__addsf3>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	4b18      	ldr	r3, [pc, #96]	; (80019cc <motor_control+0x1bc>)
 800196a:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <motor_control+0x1bc>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fd81 	bl	8001478 <move_rotor>
				break;
 8001976:	e000      	b.n	800197a <motor_control+0x16a>
			default:
				break;
 8001978:	bf00      	nop
			}
			break;
 800197a:	e019      	b.n	80019b0 <motor_control+0x1a0>

		case Estop:
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800197c:	2100      	movs	r1, #0
 800197e:	4819      	ldr	r0, [pc, #100]	; (80019e4 <motor_control+0x1d4>)
 8001980:	f005 faa2 	bl	8006ec8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001984:	2100      	movs	r1, #0
 8001986:	4817      	ldr	r0, [pc, #92]	; (80019e4 <motor_control+0x1d4>)
 8001988:	f006 f9cc 	bl	8007d24 <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800198c:	2104      	movs	r1, #4
 800198e:	4815      	ldr	r0, [pc, #84]	; (80019e4 <motor_control+0x1d4>)
 8001990:	f005 fa9a 	bl	8006ec8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001994:	2104      	movs	r1, #4
 8001996:	4813      	ldr	r0, [pc, #76]	; (80019e4 <motor_control+0x1d4>)
 8001998:	f006 f9c4 	bl	8007d24 <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800199c:	2100      	movs	r1, #0
 800199e:	4812      	ldr	r0, [pc, #72]	; (80019e8 <motor_control+0x1d8>)
 80019a0:	f005 fa92 	bl	8006ec8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 80019a4:	2100      	movs	r1, #0
 80019a6:	4810      	ldr	r0, [pc, #64]	; (80019e8 <motor_control+0x1d8>)
 80019a8:	f006 f9bc 	bl	8007d24 <HAL_TIMEx_PWMN_Stop>
			break;
 80019ac:	e000      	b.n	80019b0 <motor_control+0x1a0>
//			}
//
//			break;

		default:
			break;
 80019ae:	bf00      	nop
	}
}
 80019b0:	bf00      	nop
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000038 	.word	0x20000038
 80019bc:	20000040 	.word	0x20000040
 80019c0:	41f00000 	.word	0x41f00000
 80019c4:	2000007e 	.word	0x2000007e
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000044 	.word	0x20000044
 80019d0:	42b40000 	.word	0x42b40000
 80019d4:	43160000 	.word	0x43160000
 80019d8:	43520000 	.word	0x43520000
 80019dc:	43870000 	.word	0x43870000
 80019e0:	43a50000 	.word	0x43a50000
 80019e4:	20000bdc 	.word	0x20000bdc
 80019e8:	200009e4 	.word	0x200009e4

080019ec <cur_sector>:

// Чтение показателей датчиков Холла
void cur_sector() {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	hal_U = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 80019f0:	2120      	movs	r1, #32
 80019f2:	4815      	ldr	r0, [pc, #84]	; (8001a48 <cur_sector+0x5c>)
 80019f4:	f003 f892 	bl	8004b1c <HAL_GPIO_ReadPin>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <cur_sector+0x60>)
 80019fe:	701a      	strb	r2, [r3, #0]
	hal_V = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8001a00:	2101      	movs	r1, #1
 8001a02:	4811      	ldr	r0, [pc, #68]	; (8001a48 <cur_sector+0x5c>)
 8001a04:	f003 f88a 	bl	8004b1c <HAL_GPIO_ReadPin>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <cur_sector+0x64>)
 8001a0e:	701a      	strb	r2, [r3, #0]
	hal_W = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 8001a10:	2102      	movs	r1, #2
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <cur_sector+0x5c>)
 8001a14:	f003 f882 	bl	8004b1c <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <cur_sector+0x68>)
 8001a1e:	701a      	strb	r2, [r3, #0]
	step = (hal_W) | (hal_V << 1) | (hal_U << 2);
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <cur_sector+0x64>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	b25a      	sxtb	r2, r3
 8001a28:	4b0a      	ldr	r3, [pc, #40]	; (8001a54 <cur_sector+0x68>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b25b      	sxtb	r3, r3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b25a      	sxtb	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <cur_sector+0x60>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <cur_sector+0x6c>)
 8001a42:	701a      	strb	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	20000094 	.word	0x20000094
 8001a50:	2000009c 	.word	0x2000009c
 8001a54:	200000a4 	.word	0x200000a4
 8001a58:	20000038 	.word	0x20000038

08001a5c <calculateSpeed>:

#define PULSES_PER_REVOLUTION 	6
#define GEAR_RATIO 				28 // Передаточное число
#define STEPS_REDUCER 			2

void calculateSpeed(float count, float time) {
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
	currentSpeed = count * 60 / (336 * time / 1000); // Текущая скорость в об/мин. Расчет: cnt_hall * 3.571428 = 60 c * cnt_hall / 16.8 = , где  16.8 = 336 * 0.05 - кол-во прерываний датчика холла за 0.05 с, для вращения со скоростью 1 об/с
 8001a66:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <calculateSpeed+0x44>)
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff f989 	bl	8000d80 <__aeabi_fmul>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	461c      	mov	r4, r3
 8001a72:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <calculateSpeed+0x48>)
 8001a74:	6838      	ldr	r0, [r7, #0]
 8001a76:	f7ff f983 	bl	8000d80 <__aeabi_fmul>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	490a      	ldr	r1, [pc, #40]	; (8001aa8 <calculateSpeed+0x4c>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fa32 	bl	8000ee8 <__aeabi_fdiv>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4619      	mov	r1, r3
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f7ff fa2d 	bl	8000ee8 <__aeabi_fdiv>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <calculateSpeed+0x50>)
 8001a94:	601a      	str	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd90      	pop	{r4, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	42700000 	.word	0x42700000
 8001aa4:	43a80000 	.word	0x43a80000
 8001aa8:	447a0000 	.word	0x447a0000
 8001aac:	20000048 	.word	0x20000048

08001ab0 <calculatePID>:


float tmp_pwm;
void calculatePID(float time) {
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
    error = targetRPM - currentSpeed;
 8001ab8:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <calculatePID+0x11c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a44      	ldr	r2, [pc, #272]	; (8001bd0 <calculatePID+0x120>)
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f852 	bl	8000b6c <__aeabi_fsub>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <calculatePID+0x124>)
 8001ace:	601a      	str	r2, [r3, #0]
    integral += error * (time/1000);
 8001ad0:	4941      	ldr	r1, [pc, #260]	; (8001bd8 <calculatePID+0x128>)
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fa08 	bl	8000ee8 <__aeabi_fdiv>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <calculatePID+0x124>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	f7ff f94c 	bl	8000d80 <__aeabi_fmul>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <calculatePID+0x12c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f7ff f83c 	bl	8000b70 <__addsf3>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <calculatePID+0x12c>)
 8001afe:	601a      	str	r2, [r3, #0]
    derivative = (error - lastError) / (time/1000);
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <calculatePID+0x124>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a36      	ldr	r2, [pc, #216]	; (8001be0 <calculatePID+0x130>)
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f82e 	bl	8000b6c <__aeabi_fsub>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461c      	mov	r4, r3
 8001b14:	4930      	ldr	r1, [pc, #192]	; (8001bd8 <calculatePID+0x128>)
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff f9e6 	bl	8000ee8 <__aeabi_fdiv>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4620      	mov	r0, r4
 8001b22:	f7ff f9e1 	bl	8000ee8 <__aeabi_fdiv>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <calculatePID+0x134>)
 8001b2c:	601a      	str	r2, [r3, #0]

    tmp_pwm = Kp*error + Ki*integral + Kd*derivative;
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <calculatePID+0x138>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <calculatePID+0x124>)
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff f921 	bl	8000d80 <__aeabi_fmul>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461c      	mov	r4, r3
 8001b42:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <calculatePID+0x13c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a25      	ldr	r2, [pc, #148]	; (8001bdc <calculatePID+0x12c>)
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff f917 	bl	8000d80 <__aeabi_fmul>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4619      	mov	r1, r3
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff f80a 	bl	8000b70 <__addsf3>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461c      	mov	r4, r3
 8001b60:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <calculatePID+0x140>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <calculatePID+0x134>)
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f908 	bl	8000d80 <__aeabi_fmul>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4619      	mov	r1, r3
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7fe fffb 	bl	8000b70 <__addsf3>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <calculatePID+0x144>)
 8001b80:	601a      	str	r2, [r3, #0]
    pwm = tmp_pwm;
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <calculatePID+0x144>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fac0 	bl	800110c <__aeabi_f2uiz>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <calculatePID+0x148>)
 8001b92:	801a      	strh	r2, [r3, #0]
    if (pwm > 1499) pwm = 1499;
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <calculatePID+0x148>)
 8001b96:	881b      	ldrh	r3, [r3, #0]
 8001b98:	f240 52db 	movw	r2, #1499	; 0x5db
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d903      	bls.n	8001ba8 <calculatePID+0xf8>
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <calculatePID+0x148>)
 8001ba2:	f240 52db 	movw	r2, #1499	; 0x5db
 8001ba6:	801a      	strh	r2, [r3, #0]
    if (pwm < 500) pwm = 500;
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <calculatePID+0x148>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001bb0:	d203      	bcs.n	8001bba <calculatePID+0x10a>
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <calculatePID+0x148>)
 8001bb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bb8:	801a      	strh	r2, [r3, #0]
    lastError = error;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <calculatePID+0x124>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <calculatePID+0x130>)
 8001bc0:	6013      	str	r3, [r2, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000004 	.word	0x20000004
 8001bd0:	20000048 	.word	0x20000048
 8001bd4:	2000037c 	.word	0x2000037c
 8001bd8:	447a0000 	.word	0x447a0000
 8001bdc:	2000065c 	.word	0x2000065c
 8001be0:	200000a0 	.word	0x200000a0
 8001be4:	20000084 	.word	0x20000084
 8001be8:	20000654 	.word	0x20000654
 8001bec:	20000088 	.word	0x20000088
 8001bf0:	20000378 	.word	0x20000378
 8001bf4:	20000080 	.word	0x20000080
 8001bf8:	2000003a 	.word	0x2000003a

08001bfc <HAL_GPIO_EXTI_Callback>:
volatile uint32_t elapsed_time = 0;
volatile uint32_t overflow_count = 0;
volatile uint8_t flag = 0;
float time = 0.0;
// Обработчик прерываний датчиков Холла
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	dc02      	bgt.n	8001c12 <HAL_GPIO_EXTI_Callback+0x16>
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	dc02      	bgt.n	8001c16 <HAL_GPIO_EXTI_Callback+0x1a>
//			I_d = 2/3*(cos(currentAngle  * M_PI/180)+sin(currentAngle * M_PI/180));
//			I_q = 2/3*(-sin(currentAngle * M_PI/180)+cos(currentAngle * M_PI/180));
		}
		break;
	}
}
 8001c10:	e070      	b.n	8001cf4 <HAL_GPIO_EXTI_Callback+0xf8>
	switch(GPIO_Pin) {
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d16e      	bne.n	8001cf4 <HAL_GPIO_EXTI_Callback+0xf8>
		if (START_FLAG!=0){
 8001c16:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x100>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d069      	beq.n	8001cf2 <HAL_GPIO_EXTI_Callback+0xf6>
			cur_sector();
 8001c1e:	f7ff fee5 	bl	80019ec <cur_sector>
			if(step==next_step) cnt_hall++;
 8001c22:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x104>)
 8001c24:	781a      	ldrb	r2, [r3, #0]
 8001c26:	4b37      	ldr	r3, [pc, #220]	; (8001d04 <HAL_GPIO_EXTI_Callback+0x108>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d106      	bne.n	8001c3c <HAL_GPIO_EXTI_Callback+0x40>
 8001c2e:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001c38:	801a      	strh	r2, [r3, #0]
 8001c3a:	e005      	b.n	8001c48 <HAL_GPIO_EXTI_Callback+0x4c>
			else error_hall++;
 8001c3c:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <HAL_GPIO_EXTI_Callback+0x110>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <HAL_GPIO_EXTI_Callback+0x110>)
 8001c46:	801a      	strh	r2, [r3, #0]
			end_time = __HAL_TIM_GET_COUNTER(&htim14);    // Считываем конечное время
 8001c48:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x114>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x118>)
 8001c50:	6013      	str	r3, [r2, #0]
			if (end_time >= start_time) {
 8001c52:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x118>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d30e      	bcc.n	8001c7c <HAL_GPIO_EXTI_Callback+0x80>
				elapsed_time = end_time - start_time + (overflow_count * (499 + 1));  // Вычисляем прошедшее время
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x118>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	4b2d      	ldr	r3, [pc, #180]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	1ad2      	subs	r2, r2, r3
 8001c68:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x120>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c70:	fb01 f303 	mul.w	r3, r1, r3
 8001c74:	4413      	add	r3, r2
 8001c76:	4a2a      	ldr	r2, [pc, #168]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x124>)
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e00f      	b.n	8001c9c <HAL_GPIO_EXTI_Callback+0xa0>
				elapsed_time = ((499 + 1) - start_time + end_time) + (overflow_count * (499 + 1));  // Вычисляем прошедшее время с учетом переполнения
 8001c7c:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x118>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	1ad2      	subs	r2, r2, r3
 8001c86:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x120>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c98:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x124>)
 8001c9a:	6013      	str	r3, [r2, #0]
			start_time = end_time;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x118>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001ca2:	6013      	str	r3, [r2, #0]
			overflow_count = 0;
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_GPIO_EXTI_Callback+0x120>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
			time = 0.5*(elapsed_time/(499 + 1));
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_GPIO_EXTI_Callback+0x124>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <HAL_GPIO_EXTI_Callback+0x128>)
 8001cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb4:	095b      	lsrs	r3, r3, #5
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fbc8 	bl	800044c <__aeabi_ui2d>
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001cc2:	f7fe fc3d 	bl	8000540 <__aeabi_dmul>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7fe fef9 	bl	8000ac4 <__aeabi_d2f>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <HAL_GPIO_EXTI_Callback+0x130>)
 8001cd6:	6013      	str	r3, [r2, #0]
			calculateSpeed(1, time);
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_GPIO_EXTI_Callback+0x130>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001ce2:	f7ff febb 	bl	8001a5c <calculateSpeed>
			motor_control(Eright, pwm);
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_GPIO_EXTI_Callback+0x134>)
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	2002      	movs	r0, #2
 8001cee:	f7ff fd8f 	bl	8001810 <motor_control>
		break;
 8001cf2:	bf00      	nop
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	2000003c 	.word	0x2000003c
 8001d00:	20000038 	.word	0x20000038
 8001d04:	2000007e 	.word	0x2000007e
 8001d08:	20000060 	.word	0x20000060
 8001d0c:	20000380 	.word	0x20000380
 8001d10:	20000c1c 	.word	0x20000c1c
 8001d14:	20000068 	.word	0x20000068
 8001d18:	20000064 	.word	0x20000064
 8001d1c:	20000070 	.word	0x20000070
 8001d20:	2000006c 	.word	0x2000006c
 8001d24:	10624dd3 	.word	0x10624dd3
 8001d28:	3fe00000 	.word	0x3fe00000
 8001d2c:	20000074 	.word	0x20000074
 8001d30:	2000003a 	.word	0x2000003a

08001d34 <HAL_TIM_PeriodElapsedCallback>:



// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001d34:	b5b0      	push	{r4, r5, r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	if (htim == &htim14) {
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a51      	ldr	r2, [pc, #324]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	f040 809a 	bne.w	8001e7a <HAL_TIM_PeriodElapsedCallback+0x146>
		pid_time += 0.5; // 0.5S мс - период таймера 14. Расчет: (TIM_ARR * TIM_PSC) / TIM_FREQ / ) = ((499+1) * (59+1)) / 60 000 000 = 0,0005 с = 0.5 мс
 8001d46:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ff0e 	bl	8000b70 <__addsf3>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001d5a:	601a      	str	r2, [r3, #0]
		overflow_count++;
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	4a4a      	ldr	r2, [pc, #296]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001d64:	6013      	str	r3, [r2, #0]
		if (overflow_count>(1000/((targetRPM/60)*336)/0.5)){
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fb6e 	bl	800044c <__aeabi_ui2d>
 8001d70:	4604      	mov	r4, r0
 8001d72:	460d      	mov	r5, r1
 8001d74:	4b46      	ldr	r3, [pc, #280]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4946      	ldr	r1, [pc, #280]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f8b4 	bl	8000ee8 <__aeabi_fdiv>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4945      	ldr	r1, [pc, #276]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fffb 	bl	8000d80 <__aeabi_fmul>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4843      	ldr	r0, [pc, #268]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001d90:	f7ff f8aa 	bl	8000ee8 <__aeabi_fdiv>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fb7a 	bl	8000490 <__aeabi_f2d>
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001da2:	f7fe fcf7 	bl	8000794 <__aeabi_ddiv>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4620      	mov	r0, r4
 8001dac:	4629      	mov	r1, r5
 8001dae:	f7fe fe57 	bl	8000a60 <__aeabi_dcmpgt>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d026      	beq.n	8001e06 <HAL_TIM_PeriodElapsedCallback+0xd2>
			time = 0.5*(((499 + 1) - start_time + (overflow_count * (499 + 1)))/(499 + 1));
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001dc0:	fb02 f203 	mul.w	r2, r2, r3
 8001dc4:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001dce:	4a36      	ldr	r2, [pc, #216]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fb38 	bl	800044c <__aeabi_ui2d>
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001de2:	f7fe fbad 	bl	8000540 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	f7fe fe69 	bl	8000ac4 <__aeabi_d2f>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4a2d      	ldr	r2, [pc, #180]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001df6:	6013      	str	r3, [r2, #0]
			calculateSpeed(1, time);
 8001df8:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001e02:	f7ff fe2b 	bl	8001a5c <calculateSpeed>
		}
		if(pid_time >= TIME_INTERVAL_MS) { // (pid_time >= TIME_INTERVAL_MS)||(cnt_hall >= 500)
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a29      	ldr	r2, [pc, #164]	; (8001eb0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f967 	bl	80010e4 <__aeabi_fcmpge>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_TIM_PeriodElapsedCallback+0xfa>
			calculatePID(pid_time);
 8001e1c:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fe45 	bl	8001ab0 <calculatePID>
			pid_time = 0;
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
		}

		currentAngle += (((targetRPM*2)/60) * 360) / (2000);// targetRPM * 360 / (60 * 20)
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4619      	mov	r1, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fe9b 	bl	8000b70 <__addsf3>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4915      	ldr	r1, [pc, #84]	; (8001e94 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff f852 	bl	8000ee8 <__aeabi_fdiv>
 8001e44:	4603      	mov	r3, r0
 8001e46:	491b      	ldr	r1, [pc, #108]	; (8001eb4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe ff99 	bl	8000d80 <__aeabi_fmul>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	4919      	ldr	r1, [pc, #100]	; (8001eb8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f848 	bl	8000ee8 <__aeabi_fdiv>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4619      	mov	r1, r3
 8001e62:	4610      	mov	r0, r2
 8001e64:	f7fe fe84 	bl	8000b70 <__addsf3>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001e6e:	601a      	str	r2, [r3, #0]
		move_rotor(currentAngle);
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff faff 	bl	8001478 <move_rotor>
	}
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bdb0      	pop	{r4, r5, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000c1c 	.word	0x20000c1c
 8001e88:	2000004c 	.word	0x2000004c
 8001e8c:	20000070 	.word	0x20000070
 8001e90:	20000004 	.word	0x20000004
 8001e94:	42700000 	.word	0x42700000
 8001e98:	43a80000 	.word	0x43a80000
 8001e9c:	447a0000 	.word	0x447a0000
 8001ea0:	3fe00000 	.word	0x3fe00000
 8001ea4:	20000064 	.word	0x20000064
 8001ea8:	10624dd3 	.word	0x10624dd3
 8001eac:	20000074 	.word	0x20000074
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	43b40000 	.word	0x43b40000
 8001eb8:	44fa0000 	.word	0x44fa0000
 8001ebc:	20000044 	.word	0x20000044

08001ec0 <HAL_ADC_ConvCpltCallback>:

// Обработчик прерываний АЦП
float Sensitivity_I = 0.0066; // Чувствительность датчика тока в мВ/мА

// Обработка показаний АЦП по готовности всех 3-х каналов
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	// где rawValues - показания АЦП; 3.3 В - питание АПЦ; 4096 - количество уровней квантования при 12 разрядах; ((5.62+10)/10)) - компенсация нормирующего делителя напряжения; 2.5 В - компинсация кривой датчика тока (точка отсчета 0 мА);
	// Расчет: (((2000*3.3)/4096)*(5.62+10)/10-2.5)/0.0066 = 2,56 мА; (((2000*3.3)/4096)*(5.62+10)/10-2.5)/0.0066-6,9739139441
	I_a = ((rawValues[0] * 3.3 / 4096) * (5.62+10) / 10 - 2.5) / Sensitivity_I;
 8001ec8:	4b79      	ldr	r3, [pc, #484]	; (80020b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe facd 	bl	800046c <__aeabi_i2d>
 8001ed2:	a373      	add	r3, pc, #460	; (adr r3, 80020a0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f7fe fb32 	bl	8000540 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	4b72      	ldr	r3, [pc, #456]	; (80020b4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001eea:	f7fe fc53 	bl	8000794 <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	a36c      	add	r3, pc, #432	; (adr r3, 80020a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fb20 	bl	8000540 <__aeabi_dmul>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001f0e:	f7fe fc41 	bl	8000794 <__aeabi_ddiv>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001f20:	f7fe f956 	bl	80001d0 <__aeabi_dsub>
 8001f24:	4602      	mov	r2, r0
 8001f26:	460b      	mov	r3, r1
 8001f28:	4614      	mov	r4, r2
 8001f2a:	461d      	mov	r5, r3
 8001f2c:	4b64      	ldr	r3, [pc, #400]	; (80020c0 <HAL_ADC_ConvCpltCallback+0x200>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe faad 	bl	8000490 <__aeabi_f2d>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	f7fe fc29 	bl	8000794 <__aeabi_ddiv>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f7fe fdbb 	bl	8000ac4 <__aeabi_d2f>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4a5c      	ldr	r2, [pc, #368]	; (80020c4 <HAL_ADC_ConvCpltCallback+0x204>)
 8001f52:	6013      	str	r3, [r2, #0]
	I_b = ((rawValues[1] * 3.3 / 4096) * (5.62+10) / 10 - 2.5) / Sensitivity_I;
 8001f54:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001f56:	885b      	ldrh	r3, [r3, #2]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fa87 	bl	800046c <__aeabi_i2d>
 8001f5e:	a350      	add	r3, pc, #320	; (adr r3, 80020a0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	f7fe faec 	bl	8000540 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	4b4f      	ldr	r3, [pc, #316]	; (80020b4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001f76:	f7fe fc0d 	bl	8000794 <__aeabi_ddiv>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	a349      	add	r3, pc, #292	; (adr r3, 80020a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fada 	bl	8000540 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001f9a:	f7fe fbfb 	bl	8000794 <__aeabi_ddiv>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	4b44      	ldr	r3, [pc, #272]	; (80020bc <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001fac:	f7fe f910 	bl	80001d0 <__aeabi_dsub>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	4b41      	ldr	r3, [pc, #260]	; (80020c0 <HAL_ADC_ConvCpltCallback+0x200>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fa67 	bl	8000490 <__aeabi_f2d>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	4629      	mov	r1, r5
 8001fca:	f7fe fbe3 	bl	8000794 <__aeabi_ddiv>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fd75 	bl	8000ac4 <__aeabi_d2f>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a3a      	ldr	r2, [pc, #232]	; (80020c8 <HAL_ADC_ConvCpltCallback+0x208>)
 8001fde:	6013      	str	r3, [r2, #0]
	I_c = ((rawValues[2] * 3.3 / 4096) * (5.62+10) / 10 - 2.5) / Sensitivity_I;
 8001fe0:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001fe2:	889b      	ldrh	r3, [r3, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe fa41 	bl	800046c <__aeabi_i2d>
 8001fea:	a32d      	add	r3, pc, #180	; (adr r3, 80020a0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	f7fe faa6 	bl	8000540 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002002:	f7fe fbc7 	bl	8000794 <__aeabi_ddiv>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	a326      	add	r3, pc, #152	; (adr r3, 80020a8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	f7fe fa94 	bl	8000540 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002026:	f7fe fbb5 	bl	8000794 <__aeabi_ddiv>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002038:	f7fe f8ca 	bl	80001d0 <__aeabi_dsub>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4614      	mov	r4, r2
 8002042:	461d      	mov	r5, r3
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <HAL_ADC_ConvCpltCallback+0x200>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe fa21 	bl	8000490 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4620      	mov	r0, r4
 8002054:	4629      	mov	r1, r5
 8002056:	f7fe fb9d 	bl	8000794 <__aeabi_ddiv>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f7fe fd2f 	bl	8000ac4 <__aeabi_d2f>
 8002066:	4603      	mov	r3, r0
 8002068:	4a18      	ldr	r2, [pc, #96]	; (80020cc <HAL_ADC_ConvCpltCallback+0x20c>)
 800206a:	6013      	str	r3, [r2, #0]
	summ = I_a + I_b + I_c;
 800206c:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_ADC_ConvCpltCallback+0x204>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a15      	ldr	r2, [pc, #84]	; (80020c8 <HAL_ADC_ConvCpltCallback+0x208>)
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	4611      	mov	r1, r2
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fd7a 	bl	8000b70 <__addsf3>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <HAL_ADC_ConvCpltCallback+0x20c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f7fe fd72 	bl	8000b70 <__addsf3>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_ADC_ConvCpltCallback+0x210>)
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bdb0      	pop	{r4, r5, r7, pc}
 800209c:	f3af 8000 	nop.w
 80020a0:	66666666 	.word	0x66666666
 80020a4:	400a6666 	.word	0x400a6666
 80020a8:	a3d70a3e 	.word	0xa3d70a3e
 80020ac:	402f3d70 	.word	0x402f3d70
 80020b0:	20000078 	.word	0x20000078
 80020b4:	40b00000 	.word	0x40b00000
 80020b8:	40240000 	.word	0x40240000
 80020bc:	40040000 	.word	0x40040000
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	20000050 	.word	0x20000050
 80020c8:	20000054 	.word	0x20000054
 80020cc:	20000058 	.word	0x20000058
 80020d0:	2000005c 	.word	0x2000005c

080020d4 <start>:
uint16_t VU[360];
uint16_t VV[360];
uint16_t VW[360];

// функция - инициализация
void start(){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
	initialize_PID_constants();
 80020d8:	f7ff f9b4 	bl	8001444 <initialize_PID_constants>
	START_FLAG=1;
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <start+0x28>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim14);
 80020e2:	4807      	ldr	r0, [pc, #28]	; (8002100 <start+0x2c>)
 80020e4:	f004 fe27 	bl	8006d36 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawValues, 3);
 80020e8:	2203      	movs	r2, #3
 80020ea:	4906      	ldr	r1, [pc, #24]	; (8002104 <start+0x30>)
 80020ec:	4806      	ldr	r0, [pc, #24]	; (8002108 <start+0x34>)
 80020ee:	f001 faed 	bl	80036cc <HAL_ADC_Start_DMA>
	cur_sector();
 80020f2:	f7ff fc7b 	bl	80019ec <cur_sector>
//	move_rotor(0);
//	motor_control(Eright, pwm);
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000003c 	.word	0x2000003c
 8002100:	20000c1c 	.word	0x20000c1c
 8002104:	20000078 	.word	0x20000078
 8002108:	20000aec 	.word	0x20000aec

0800210c <loop>:

// Бесконечный цикл
void loop(){
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800211c:	f001 f8e4 	bl	80032e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002120:	f000 f81b 	bl	800215a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002124:	f000 fbd0 	bl	80028c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002128:	f000 fb98 	bl	800285c <MX_DMA_Init>
  MX_ADC1_Init();
 800212c:	f000 f85c 	bl	80021e8 <MX_ADC1_Init>
  MX_I2C3_Init();
 8002130:	f000 f952 	bl	80023d8 <MX_I2C3_Init>
  MX_TIM1_Init();
 8002134:	f000 f97e 	bl	8002434 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002138:	f000 fa7c 	bl	8002634 <MX_TIM8_Init>
  MX_TIM14_Init();
 800213c:	f000 fb1a 	bl	8002774 <MX_TIM14_Init>
  MX_USART3_UART_Init();
 8002140:	f000 fb62 	bl	8002808 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8002144:	f000 fa22 	bl	800258c <MX_TIM4_Init>
  MX_ADC2_Init();
 8002148:	f000 f8b6 	bl	80022b8 <MX_ADC2_Init>
  MX_ADC3_Init();
 800214c:	f000 f8fc 	bl	8002348 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  start();
 8002150:	f7ff ffc0 	bl	80020d4 <start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8002154:	f7ff ffda 	bl	800210c <loop>
 8002158:	e7fc      	b.n	8002154 <main+0x3c>

0800215a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b092      	sub	sp, #72	; 0x48
 800215e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002160:	f107 0318 	add.w	r3, r7, #24
 8002164:	2230      	movs	r2, #48	; 0x30
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f006 fb27 	bl	80087bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800217c:	2301      	movs	r3, #1
 800217e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002180:	2301      	movs	r3, #1
 8002182:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002184:	2302      	movs	r3, #2
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002188:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800218c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 800218e:	2308      	movs	r3, #8
 8002190:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8002192:	23f0      	movs	r3, #240	; 0xf0
 8002194:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002196:	2302      	movs	r3, #2
 8002198:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800219a:	2304      	movs	r3, #4
 800219c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800219e:	f107 0318 	add.w	r3, r7, #24
 80021a2:	4618      	mov	r0, r3
 80021a4:	f004 f916 	bl	80063d4 <HAL_RCC_OscConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80021ae:	f000 fc27 	bl	8002a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b2:	230f      	movs	r3, #15
 80021b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b6:	2302      	movs	r3, #2
 80021b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	2103      	movs	r1, #3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 fb6a 	bl	80068a8 <HAL_RCC_ClockConfig>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <SystemClock_Config+0x84>
  {
    Error_Handler();
 80021da:	f000 fc11 	bl	8002a00 <Error_Handler>
  }
}
 80021de:	bf00      	nop
 80021e0:	3748      	adds	r7, #72	; 0x48
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80021fa:	1d3b      	adds	r3, r7, #4
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002206:	4b29      	ldr	r3, [pc, #164]	; (80022ac <MX_ADC1_Init+0xc4>)
 8002208:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <MX_ADC1_Init+0xc8>)
 800220a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <MX_ADC1_Init+0xc4>)
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <MX_ADC1_Init+0xc4>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002218:	4b24      	ldr	r3, [pc, #144]	; (80022ac <MX_ADC1_Init+0xc4>)
 800221a:	2200      	movs	r2, #0
 800221c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <MX_ADC1_Init+0xc4>)
 8002220:	2201      	movs	r2, #1
 8002222:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <MX_ADC1_Init+0xc4>)
 8002226:	2200      	movs	r2, #0
 8002228:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <MX_ADC1_Init+0xc4>)
 800222c:	2200      	movs	r2, #0
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002230:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <MX_ADC1_Init+0xc4>)
 8002232:	4a20      	ldr	r2, [pc, #128]	; (80022b4 <MX_ADC1_Init+0xcc>)
 8002234:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002236:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <MX_ADC1_Init+0xc4>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800223c:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <MX_ADC1_Init+0xc4>)
 800223e:	2201      	movs	r2, #1
 8002240:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <MX_ADC1_Init+0xc4>)
 8002244:	2201      	movs	r2, #1
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002248:	4b18      	ldr	r3, [pc, #96]	; (80022ac <MX_ADC1_Init+0xc4>)
 800224a:	2200      	movs	r2, #0
 800224c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800224e:	4817      	ldr	r0, [pc, #92]	; (80022ac <MX_ADC1_Init+0xc4>)
 8002250:	f001 f8b8 	bl	80033c4 <HAL_ADC_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800225a:	f000 fbd1 	bl	8002a00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 800225e:	2316      	movs	r3, #22
 8002260:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8002262:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002266:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4619      	mov	r1, r3
 8002272:	480e      	ldr	r0, [pc, #56]	; (80022ac <MX_ADC1_Init+0xc4>)
 8002274:	f001 fdc8 	bl	8003e08 <HAL_ADCEx_MultiModeConfigChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800227e:	f000 fbbf 	bl	8002a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002282:	2304      	movs	r3, #4
 8002284:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8002286:	2301      	movs	r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800228a:	2307      	movs	r3, #7
 800228c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	4619      	mov	r1, r3
 8002292:	4806      	ldr	r0, [pc, #24]	; (80022ac <MX_ADC1_Init+0xc4>)
 8002294:	f001 fb08 	bl	80038a8 <HAL_ADC_ConfigChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800229e:	f000 fbaf 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022a2:	bf00      	nop
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000aec 	.word	0x20000aec
 80022b0:	40012000 	.word	0x40012000
 80022b4:	0f000001 	.word	0x0f000001

080022b8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022be:	463b      	mov	r3, r7
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80022ca:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <MX_ADC2_Init+0x88>)
 80022cc:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <MX_ADC2_Init+0x8c>)
 80022ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <MX_ADC2_Init+0x88>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <MX_ADC2_Init+0x88>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <MX_ADC2_Init+0x88>)
 80022de:	2200      	movs	r2, #0
 80022e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <MX_ADC2_Init+0x88>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <MX_ADC2_Init+0x88>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	621a      	str	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <MX_ADC2_Init+0x88>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <MX_ADC2_Init+0x88>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80022fa:	4b11      	ldr	r3, [pc, #68]	; (8002340 <MX_ADC2_Init+0x88>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002300:	4b0f      	ldr	r3, [pc, #60]	; (8002340 <MX_ADC2_Init+0x88>)
 8002302:	2201      	movs	r2, #1
 8002304:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002306:	480e      	ldr	r0, [pc, #56]	; (8002340 <MX_ADC2_Init+0x88>)
 8002308:	f001 f85c 	bl	80033c4 <HAL_ADC_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_ADC2_Init+0x5e>
  {
    Error_Handler();
 8002312:	f000 fb75 	bl	8002a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002316:	230f      	movs	r3, #15
 8002318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800231a:	2301      	movs	r3, #1
 800231c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002322:	463b      	mov	r3, r7
 8002324:	4619      	mov	r1, r3
 8002326:	4806      	ldr	r0, [pc, #24]	; (8002340 <MX_ADC2_Init+0x88>)
 8002328:	f001 fabe 	bl	80038a8 <HAL_ADC_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8002332:	f000 fb65 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000aa4 	.word	0x20000aa4
 8002344:	40012100 	.word	0x40012100

08002348 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800234e:	463b      	mov	r3, r7
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800235a:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <MX_ADC3_Init+0x88>)
 800235c:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <MX_ADC3_Init+0x8c>)
 800235e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002360:	4b1b      	ldr	r3, [pc, #108]	; (80023d0 <MX_ADC3_Init+0x88>)
 8002362:	2200      	movs	r2, #0
 8002364:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002366:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <MX_ADC3_Init+0x88>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <MX_ADC3_Init+0x88>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002372:	4b17      	ldr	r3, [pc, #92]	; (80023d0 <MX_ADC3_Init+0x88>)
 8002374:	2201      	movs	r2, #1
 8002376:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <MX_ADC3_Init+0x88>)
 800237a:	2200      	movs	r2, #0
 800237c:	621a      	str	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800237e:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <MX_ADC3_Init+0x88>)
 8002380:	2200      	movs	r2, #0
 8002382:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002384:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <MX_ADC3_Init+0x88>)
 8002386:	2201      	movs	r2, #1
 8002388:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800238a:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <MX_ADC3_Init+0x88>)
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <MX_ADC3_Init+0x88>)
 8002392:	2201      	movs	r2, #1
 8002394:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002396:	480e      	ldr	r0, [pc, #56]	; (80023d0 <MX_ADC3_Init+0x88>)
 8002398:	f001 f814 	bl	80033c4 <HAL_ADC_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_ADC3_Init+0x5e>
  {
    Error_Handler();
 80023a2:	f000 fb2d 	bl	8002a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80023a6:	230d      	movs	r3, #13
 80023a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80023aa:	2301      	movs	r3, #1
 80023ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023ae:	2300      	movs	r3, #0
 80023b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80023b2:	463b      	mov	r3, r7
 80023b4:	4619      	mov	r1, r3
 80023b6:	4806      	ldr	r0, [pc, #24]	; (80023d0 <MX_ADC3_Init+0x88>)
 80023b8:	f001 fa76 	bl	80038a8 <HAL_ADC_ConfigChannel>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80023c2:	f000 fb1d 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000b34 	.word	0x20000b34
 80023d4:	40012200 	.word	0x40012200

080023d8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <MX_I2C3_Init+0x50>)
 80023de:	4a13      	ldr	r2, [pc, #76]	; (800242c <MX_I2C3_Init+0x54>)
 80023e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_I2C3_Init+0x50>)
 80023e4:	4a12      	ldr	r2, [pc, #72]	; (8002430 <MX_I2C3_Init+0x58>)
 80023e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <MX_I2C3_Init+0x50>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_I2C3_Init+0x50>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_I2C3_Init+0x50>)
 80023f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023fa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <MX_I2C3_Init+0x50>)
 80023fe:	2200      	movs	r2, #0
 8002400:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_I2C3_Init+0x50>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <MX_I2C3_Init+0x50>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_I2C3_Init+0x50>)
 8002410:	2200      	movs	r2, #0
 8002412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002414:	4804      	ldr	r0, [pc, #16]	; (8002428 <MX_I2C3_Init+0x50>)
 8002416:	f002 fbb1 	bl	8004b7c <HAL_I2C_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002420:	f000 faee 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000990 	.word	0x20000990
 800242c:	40005c00 	.word	0x40005c00
 8002430:	000186a0 	.word	0x000186a0

08002434 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b096      	sub	sp, #88	; 0x58
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800243a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	605a      	str	r2, [r3, #4]
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002448:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	605a      	str	r2, [r3, #4]
 800245c:	609a      	str	r2, [r3, #8]
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	611a      	str	r2, [r3, #16]
 8002462:	615a      	str	r2, [r3, #20]
 8002464:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	2220      	movs	r2, #32
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f006 f9a5 	bl	80087bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002472:	4b44      	ldr	r3, [pc, #272]	; (8002584 <MX_TIM1_Init+0x150>)
 8002474:	4a44      	ldr	r2, [pc, #272]	; (8002588 <MX_TIM1_Init+0x154>)
 8002476:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002478:	4b42      	ldr	r3, [pc, #264]	; (8002584 <MX_TIM1_Init+0x150>)
 800247a:	2200      	movs	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <MX_TIM1_Init+0x150>)
 8002480:	2220      	movs	r2, #32
 8002482:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <MX_TIM1_Init+0x150>)
 8002486:	f240 52db 	movw	r2, #1499	; 0x5db
 800248a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248c:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <MX_TIM1_Init+0x150>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002492:	4b3c      	ldr	r3, [pc, #240]	; (8002584 <MX_TIM1_Init+0x150>)
 8002494:	2200      	movs	r2, #0
 8002496:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002498:	4b3a      	ldr	r3, [pc, #232]	; (8002584 <MX_TIM1_Init+0x150>)
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800249e:	4839      	ldr	r0, [pc, #228]	; (8002584 <MX_TIM1_Init+0x150>)
 80024a0:	f004 fc1e 	bl	8006ce0 <HAL_TIM_Base_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80024aa:	f000 faa9 	bl	8002a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024b8:	4619      	mov	r1, r3
 80024ba:	4832      	ldr	r0, [pc, #200]	; (8002584 <MX_TIM1_Init+0x150>)
 80024bc:	f005 f81c 	bl	80074f8 <HAL_TIM_ConfigClockSource>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80024c6:	f000 fa9b 	bl	8002a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80024ca:	482e      	ldr	r0, [pc, #184]	; (8002584 <MX_TIM1_Init+0x150>)
 80024cc:	f004 fc8a 	bl	8006de4 <HAL_TIM_PWM_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80024d6:	f000 fa93 	bl	8002a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024da:	2300      	movs	r3, #0
 80024dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024e6:	4619      	mov	r1, r3
 80024e8:	4826      	ldr	r0, [pc, #152]	; (8002584 <MX_TIM1_Init+0x150>)
 80024ea:	f005 fc5c 	bl	8007da6 <HAL_TIMEx_MasterConfigSynchronization>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80024f4:	f000 fa84 	bl	8002a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024f8:	2360      	movs	r3, #96	; 0x60
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002504:	2300      	movs	r3, #0
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002510:	2300      	movs	r3, #0
 8002512:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002518:	2200      	movs	r2, #0
 800251a:	4619      	mov	r1, r3
 800251c:	4819      	ldr	r0, [pc, #100]	; (8002584 <MX_TIM1_Init+0x150>)
 800251e:	f004 ff25 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002528:	f000 fa6a 	bl	8002a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800252c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002530:	2204      	movs	r2, #4
 8002532:	4619      	mov	r1, r3
 8002534:	4813      	ldr	r0, [pc, #76]	; (8002584 <MX_TIM1_Init+0x150>)
 8002536:	f004 ff19 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002540:	f000 fa5e 	bl	8002a00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4807      	ldr	r0, [pc, #28]	; (8002584 <MX_TIM1_Init+0x150>)
 8002568:	f005 fc61 	bl	8007e2e <HAL_TIMEx_ConfigBreakDeadTime>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002572:	f000 fa45 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002576:	4803      	ldr	r0, [pc, #12]	; (8002584 <MX_TIM1_Init+0x150>)
 8002578:	f000 fcee 	bl	8002f58 <HAL_TIM_MspPostInit>

}
 800257c:	bf00      	nop
 800257e:	3758      	adds	r7, #88	; 0x58
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20000bdc 	.word	0x20000bdc
 8002588:	40010000 	.word	0x40010000

0800258c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	; 0x30
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	2224      	movs	r2, #36	; 0x24
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f006 f90e 	bl	80087bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025a8:	4b20      	ldr	r3, [pc, #128]	; (800262c <MX_TIM4_Init+0xa0>)
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <MX_TIM4_Init+0xa4>)
 80025ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025ae:	4b1f      	ldr	r3, [pc, #124]	; (800262c <MX_TIM4_Init+0xa0>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b4:	4b1d      	ldr	r3, [pc, #116]	; (800262c <MX_TIM4_Init+0xa0>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <MX_TIM4_Init+0xa0>)
 80025bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <MX_TIM4_Init+0xa0>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025c8:	4b18      	ldr	r3, [pc, #96]	; (800262c <MX_TIM4_Init+0xa0>)
 80025ca:	2280      	movs	r2, #128	; 0x80
 80025cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80025ce:	2303      	movs	r3, #3
 80025d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80025d6:	2301      	movs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80025de:	230a      	movs	r3, #10
 80025e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80025e6:	2301      	movs	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025ea:	2300      	movs	r3, #0
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80025ee:	230a      	movs	r3, #10
 80025f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	4619      	mov	r1, r3
 80025f8:	480c      	ldr	r0, [pc, #48]	; (800262c <MX_TIM4_Init+0xa0>)
 80025fa:	f004 fcbd 	bl	8006f78 <HAL_TIM_Encoder_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002604:	f000 f9fc 	bl	8002a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002608:	2300      	movs	r3, #0
 800260a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	4619      	mov	r1, r3
 8002614:	4805      	ldr	r0, [pc, #20]	; (800262c <MX_TIM4_Init+0xa0>)
 8002616:	f005 fbc6 	bl	8007da6 <HAL_TIMEx_MasterConfigSynchronization>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002620:	f000 f9ee 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	3730      	adds	r7, #48	; 0x30
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000a24 	.word	0x20000a24
 8002630:	40000800 	.word	0x40000800

08002634 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b096      	sub	sp, #88	; 0x58
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800263a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002648:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]
 8002662:	615a      	str	r2, [r3, #20]
 8002664:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002666:	1d3b      	adds	r3, r7, #4
 8002668:	2220      	movs	r2, #32
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f006 f8a5 	bl	80087bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002672:	4b3e      	ldr	r3, [pc, #248]	; (800276c <MX_TIM8_Init+0x138>)
 8002674:	4a3e      	ldr	r2, [pc, #248]	; (8002770 <MX_TIM8_Init+0x13c>)
 8002676:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002678:	4b3c      	ldr	r3, [pc, #240]	; (800276c <MX_TIM8_Init+0x138>)
 800267a:	2200      	movs	r2, #0
 800267c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800267e:	4b3b      	ldr	r3, [pc, #236]	; (800276c <MX_TIM8_Init+0x138>)
 8002680:	2220      	movs	r2, #32
 8002682:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1499;
 8002684:	4b39      	ldr	r3, [pc, #228]	; (800276c <MX_TIM8_Init+0x138>)
 8002686:	f240 52db 	movw	r2, #1499	; 0x5db
 800268a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268c:	4b37      	ldr	r3, [pc, #220]	; (800276c <MX_TIM8_Init+0x138>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002692:	4b36      	ldr	r3, [pc, #216]	; (800276c <MX_TIM8_Init+0x138>)
 8002694:	2200      	movs	r2, #0
 8002696:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002698:	4b34      	ldr	r3, [pc, #208]	; (800276c <MX_TIM8_Init+0x138>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800269e:	4833      	ldr	r0, [pc, #204]	; (800276c <MX_TIM8_Init+0x138>)
 80026a0:	f004 fb1e 	bl	8006ce0 <HAL_TIM_Base_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80026aa:	f000 f9a9 	bl	8002a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026b8:	4619      	mov	r1, r3
 80026ba:	482c      	ldr	r0, [pc, #176]	; (800276c <MX_TIM8_Init+0x138>)
 80026bc:	f004 ff1c 	bl	80074f8 <HAL_TIM_ConfigClockSource>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80026c6:	f000 f99b 	bl	8002a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026ca:	4828      	ldr	r0, [pc, #160]	; (800276c <MX_TIM8_Init+0x138>)
 80026cc:	f004 fb8a 	bl	8006de4 <HAL_TIM_PWM_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80026d6:	f000 f993 	bl	8002a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026de:	2300      	movs	r3, #0
 80026e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026e6:	4619      	mov	r1, r3
 80026e8:	4820      	ldr	r0, [pc, #128]	; (800276c <MX_TIM8_Init+0x138>)
 80026ea:	f005 fb5c 	bl	8007da6 <HAL_TIMEx_MasterConfigSynchronization>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80026f4:	f000 f984 	bl	8002a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026f8:	2360      	movs	r3, #96	; 0x60
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002704:	2300      	movs	r3, #0
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800270c:	2300      	movs	r3, #0
 800270e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002710:	2300      	movs	r3, #0
 8002712:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002718:	2200      	movs	r2, #0
 800271a:	4619      	mov	r1, r3
 800271c:	4813      	ldr	r0, [pc, #76]	; (800276c <MX_TIM8_Init+0x138>)
 800271e:	f004 fe25 	bl	800736c <HAL_TIM_PWM_ConfigChannel>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002728:	f000 f96a 	bl	8002a00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002744:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	4619      	mov	r1, r3
 800274e:	4807      	ldr	r0, [pc, #28]	; (800276c <MX_TIM8_Init+0x138>)
 8002750:	f005 fb6d 	bl	8007e2e <HAL_TIMEx_ConfigBreakDeadTime>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800275a:	f000 f951 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800275e:	4803      	ldr	r0, [pc, #12]	; (800276c <MX_TIM8_Init+0x138>)
 8002760:	f000 fbfa 	bl	8002f58 <HAL_TIM_MspPostInit>

}
 8002764:	bf00      	nop
 8002766:	3758      	adds	r7, #88	; 0x58
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	200009e4 	.word	0x200009e4
 8002770:	40010400 	.word	0x40010400

08002774 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
 8002788:	615a      	str	r2, [r3, #20]
 800278a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800278c:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <MX_TIM14_Init+0x8c>)
 800278e:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <MX_TIM14_Init+0x90>)
 8002790:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 59;
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <MX_TIM14_Init+0x8c>)
 8002794:	223b      	movs	r2, #59	; 0x3b
 8002796:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <MX_TIM14_Init+0x8c>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <MX_TIM14_Init+0x8c>)
 80027a0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80027a4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <MX_TIM14_Init+0x8c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <MX_TIM14_Init+0x8c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80027b2:	4813      	ldr	r0, [pc, #76]	; (8002800 <MX_TIM14_Init+0x8c>)
 80027b4:	f004 fa94 	bl	8006ce0 <HAL_TIM_Base_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80027be:	f000 f91f 	bl	8002a00 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80027c2:	480f      	ldr	r0, [pc, #60]	; (8002800 <MX_TIM14_Init+0x8c>)
 80027c4:	f004 fada 	bl	8006d7c <HAL_TIM_OC_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80027ce:	f000 f917 	bl	8002a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	2200      	movs	r2, #0
 80027e6:	4619      	mov	r1, r3
 80027e8:	4805      	ldr	r0, [pc, #20]	; (8002800 <MX_TIM14_Init+0x8c>)
 80027ea:	f004 fd5f 	bl	80072ac <HAL_TIM_OC_ConfigChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80027f4:	f000 f904 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80027f8:	bf00      	nop
 80027fa:	3720      	adds	r7, #32
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000c1c 	.word	0x20000c1c
 8002804:	40002000 	.word	0x40002000

08002808 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_USART3_UART_Init+0x4c>)
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <MX_USART3_UART_Init+0x50>)
 8002810:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <MX_USART3_UART_Init+0x4c>)
 8002814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002818:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_USART3_UART_Init+0x4c>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_USART3_UART_Init+0x4c>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <MX_USART3_UART_Init+0x4c>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_USART3_UART_Init+0x4c>)
 800282e:	220c      	movs	r2, #12
 8002830:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <MX_USART3_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_USART3_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800283e:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_USART3_UART_Init+0x4c>)
 8002840:	f005 fb7c 	bl	8007f3c <HAL_UART_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800284a:	f000 f8d9 	bl	8002a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000a64 	.word	0x20000a64
 8002858:	40004800 	.word	0x40004800

0800285c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <MX_DMA_Init+0x68>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a16      	ldr	r2, [pc, #88]	; (80028c4 <MX_DMA_Init+0x68>)
 800286c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <MX_DMA_Init+0x68>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <MX_DMA_Init+0x68>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <MX_DMA_Init+0x68>)
 8002888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <MX_DMA_Init+0x68>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	200f      	movs	r0, #15
 80028a0:	f001 fbcd 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80028a4:	200f      	movs	r0, #15
 80028a6:	f001 fbe6 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2100      	movs	r1, #0
 80028ae:	2038      	movs	r0, #56	; 0x38
 80028b0:	f001 fbc5 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80028b4:	2038      	movs	r0, #56	; 0x38
 80028b6:	f001 fbde 	bl	8004076 <HAL_NVIC_EnableIRQ>

}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800

080028c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ce:	f107 031c 	add.w	r3, r7, #28
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	605a      	str	r2, [r3, #4]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	60da      	str	r2, [r3, #12]
 80028dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <MX_GPIO_Init+0x128>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <MX_GPIO_Init+0x128>)
 80028e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ec:	6313      	str	r3, [r2, #48]	; 0x30
 80028ee:	4b40      	ldr	r3, [pc, #256]	; (80029f0 <MX_GPIO_Init+0x128>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	4b3c      	ldr	r3, [pc, #240]	; (80029f0 <MX_GPIO_Init+0x128>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a3b      	ldr	r2, [pc, #236]	; (80029f0 <MX_GPIO_Init+0x128>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <MX_GPIO_Init+0x128>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	617b      	str	r3, [r7, #20]
 8002914:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <MX_GPIO_Init+0x128>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a34      	ldr	r2, [pc, #208]	; (80029f0 <MX_GPIO_Init+0x128>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <MX_GPIO_Init+0x128>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b2e      	ldr	r3, [pc, #184]	; (80029f0 <MX_GPIO_Init+0x128>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a2d      	ldr	r2, [pc, #180]	; (80029f0 <MX_GPIO_Init+0x128>)
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <MX_GPIO_Init+0x128>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <MX_GPIO_Init+0x128>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a26      	ldr	r2, [pc, #152]	; (80029f0 <MX_GPIO_Init+0x128>)
 8002958:	f043 0310 	orr.w	r3, r3, #16
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b24      	ldr	r3, [pc, #144]	; (80029f0 <MX_GPIO_Init+0x128>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <MX_GPIO_Init+0x128>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <MX_GPIO_Init+0x128>)
 8002974:	f043 0308 	orr.w	r3, r3, #8
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <MX_GPIO_Init+0x128>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8002986:	2323      	movs	r3, #35	; 0x23
 8002988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800298a:	4b1a      	ldr	r3, [pc, #104]	; (80029f4 <MX_GPIO_Init+0x12c>)
 800298c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002992:	f107 031c 	add.w	r3, r7, #28
 8002996:	4619      	mov	r1, r3
 8002998:	4817      	ldr	r0, [pc, #92]	; (80029f8 <MX_GPIO_Init+0x130>)
 800299a:	f001 ff21 	bl	80047e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <MX_GPIO_Init+0x12c>)
 80029a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	f107 031c 	add.w	r3, r7, #28
 80029ae:	4619      	mov	r1, r3
 80029b0:	4812      	ldr	r0, [pc, #72]	; (80029fc <MX_GPIO_Init+0x134>)
 80029b2:	f001 ff15 	bl	80047e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2006      	movs	r0, #6
 80029bc:	f001 fb3f 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80029c0:	2006      	movs	r0, #6
 80029c2:	f001 fb58 	bl	8004076 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	2007      	movs	r0, #7
 80029cc:	f001 fb37 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80029d0:	2007      	movs	r0, #7
 80029d2:	f001 fb50 	bl	8004076 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2100      	movs	r1, #0
 80029da:	2017      	movs	r0, #23
 80029dc:	f001 fb2f 	bl	800403e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80029e0:	2017      	movs	r0, #23
 80029e2:	f001 fb48 	bl	8004076 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029e6:	bf00      	nop
 80029e8:	3730      	adds	r7, #48	; 0x30
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	10310000 	.word	0x10310000
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020800 	.word	0x40020800

08002a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a04:	b672      	cpsid	i
}
 8002a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <Error_Handler+0x8>
	...

08002a0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <HAL_MspInit+0x48>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <HAL_MspInit+0x48>)
 8002a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a20:	6453      	str	r3, [r2, #68]	; 0x44
 8002a22:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <HAL_MspInit+0x48>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a2a:	607b      	str	r3, [r7, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_MspInit+0x48>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a07      	ldr	r2, [pc, #28]	; (8002a54 <HAL_MspInit+0x48>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_MspInit+0x48>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	603b      	str	r3, [r7, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40023800 	.word	0x40023800

08002a58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b090      	sub	sp, #64	; 0x40
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a83      	ldr	r2, [pc, #524]	; (8002c84 <HAL_ADC_MspInit+0x22c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	f040 8095 	bne.w	8002ba6 <HAL_ADC_MspInit+0x14e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a80:	4b81      	ldr	r3, [pc, #516]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	4a80      	ldr	r2, [pc, #512]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8c:	4b7e      	ldr	r3, [pc, #504]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9c:	4b7a      	ldr	r3, [pc, #488]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	4a79      	ldr	r2, [pc, #484]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa8:	4b77      	ldr	r3, [pc, #476]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	623b      	str	r3, [r7, #32]
 8002ab8:	4b73      	ldr	r3, [pc, #460]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	4a72      	ldr	r2, [pc, #456]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac4:	4b70      	ldr	r3, [pc, #448]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	623b      	str	r3, [r7, #32]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61fb      	str	r3, [r7, #28]
 8002ad4:	4b6c      	ldr	r3, [pc, #432]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	4a6b      	ldr	r2, [pc, #428]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae0:	4b69      	ldr	r3, [pc, #420]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002aec:	2338      	movs	r3, #56	; 0x38
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002af0:	2303      	movs	r3, #3
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002afc:	4619      	mov	r1, r3
 8002afe:	4863      	ldr	r0, [pc, #396]	; (8002c8c <HAL_ADC_MspInit+0x234>)
 8002b00:	f001 fe6e 	bl	80047e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002b04:	2318      	movs	r3, #24
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b14:	4619      	mov	r1, r3
 8002b16:	485e      	ldr	r0, [pc, #376]	; (8002c90 <HAL_ADC_MspInit+0x238>)
 8002b18:	f001 fe62 	bl	80047e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b20:	2303      	movs	r3, #3
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4859      	ldr	r0, [pc, #356]	; (8002c94 <HAL_ADC_MspInit+0x23c>)
 8002b30:	f001 fe56 	bl	80047e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b34:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b36:	4a59      	ldr	r2, [pc, #356]	; (8002c9c <HAL_ADC_MspInit+0x244>)
 8002b38:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b3a:	4b57      	ldr	r3, [pc, #348]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b40:	4b55      	ldr	r3, [pc, #340]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b46:	4b54      	ldr	r3, [pc, #336]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b4c:	4b52      	ldr	r3, [pc, #328]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b52:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b54:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b5a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b5c:	4b4e      	ldr	r3, [pc, #312]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b62:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b64:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b6a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b6c:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b72:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b78:	4847      	ldr	r0, [pc, #284]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b7a:	f001 fa97 	bl	80040ac <HAL_DMA_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002b84:	f7ff ff3c 	bl	8002a00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a43      	ldr	r2, [pc, #268]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b8e:	4a42      	ldr	r2, [pc, #264]	; (8002c98 <HAL_ADC_MspInit+0x240>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002b94:	2200      	movs	r2, #0
 8002b96:	2101      	movs	r1, #1
 8002b98:	2012      	movs	r0, #18
 8002b9a:	f001 fa50 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002b9e:	2012      	movs	r0, #18
 8002ba0:	f001 fa69 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ba4:	e06a      	b.n	8002c7c <HAL_ADC_MspInit+0x224>
  else if(hadc->Instance==ADC2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a3d      	ldr	r2, [pc, #244]	; (8002ca0 <HAL_ADC_MspInit+0x248>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d130      	bne.n	8002c12 <HAL_ADC_MspInit+0x1ba>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
 8002bb4:	4b34      	ldr	r3, [pc, #208]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	4a33      	ldr	r2, [pc, #204]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bbe:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc0:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002bd6:	f043 0304 	orr.w	r3, r3, #4
 8002bda:	6313      	str	r3, [r2, #48]	; 0x30
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002be8:	2328      	movs	r3, #40	; 0x28
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bec:	2303      	movs	r3, #3
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4824      	ldr	r0, [pc, #144]	; (8002c8c <HAL_ADC_MspInit+0x234>)
 8002bfc:	f001 fdf0 	bl	80047e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002c00:	2200      	movs	r2, #0
 8002c02:	2101      	movs	r1, #1
 8002c04:	2012      	movs	r0, #18
 8002c06:	f001 fa1a 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002c0a:	2012      	movs	r0, #18
 8002c0c:	f001 fa33 	bl	8004076 <HAL_NVIC_EnableIRQ>
}
 8002c10:	e034      	b.n	8002c7c <HAL_ADC_MspInit+0x224>
  else if(hadc->Instance==ADC3)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <HAL_ADC_MspInit+0x24c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d12f      	bne.n	8002c7c <HAL_ADC_MspInit+0x224>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c2a:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002c42:	f043 0304 	orr.w	r3, r3, #4
 8002c46:	6313      	str	r3, [r2, #48]	; 0x30
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_ADC_MspInit+0x230>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c54:	2308      	movs	r3, #8
 8002c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c64:	4619      	mov	r1, r3
 8002c66:	4809      	ldr	r0, [pc, #36]	; (8002c8c <HAL_ADC_MspInit+0x234>)
 8002c68:	f001 fdba 	bl	80047e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2101      	movs	r1, #1
 8002c70:	2012      	movs	r0, #18
 8002c72:	f001 f9e4 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002c76:	2012      	movs	r0, #18
 8002c78:	f001 f9fd 	bl	8004076 <HAL_NVIC_EnableIRQ>
}
 8002c7c:	bf00      	nop
 8002c7e:	3740      	adds	r7, #64	; 0x40
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40012000 	.word	0x40012000
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020000 	.word	0x40020000
 8002c94:	40020400 	.word	0x40020400
 8002c98:	20000b7c 	.word	0x20000b7c
 8002c9c:	40026410 	.word	0x40026410
 8002ca0:	40012100 	.word	0x40012100
 8002ca4:	40012200 	.word	0x40012200

08002ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0314 	add.w	r3, r7, #20
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a44      	ldr	r2, [pc, #272]	; (8002dd8 <HAL_I2C_MspInit+0x130>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	f040 8082 	bne.w	8002dd0 <HAL_I2C_MspInit+0x128>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	4b42      	ldr	r3, [pc, #264]	; (8002ddc <HAL_I2C_MspInit+0x134>)
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	4a41      	ldr	r2, [pc, #260]	; (8002ddc <HAL_I2C_MspInit+0x134>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	6313      	str	r3, [r2, #48]	; 0x30
 8002cdc:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <HAL_I2C_MspInit+0x134>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <HAL_I2C_MspInit+0x134>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	4a3a      	ldr	r2, [pc, #232]	; (8002ddc <HAL_I2C_MspInit+0x134>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf8:	4b38      	ldr	r3, [pc, #224]	; (8002ddc <HAL_I2C_MspInit+0x134>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d0a:	2312      	movs	r3, #18
 8002d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d12:	2303      	movs	r3, #3
 8002d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d16:	2304      	movs	r3, #4
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d1a:	f107 0314 	add.w	r3, r7, #20
 8002d1e:	4619      	mov	r1, r3
 8002d20:	482f      	ldr	r0, [pc, #188]	; (8002de0 <HAL_I2C_MspInit+0x138>)
 8002d22:	f001 fd5d 	bl	80047e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d2c:	2312      	movs	r3, #18
 8002d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d38:	2304      	movs	r3, #4
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3c:	f107 0314 	add.w	r3, r7, #20
 8002d40:	4619      	mov	r1, r3
 8002d42:	4828      	ldr	r0, [pc, #160]	; (8002de4 <HAL_I2C_MspInit+0x13c>)
 8002d44:	f001 fd4c 	bl	80047e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_I2C_MspInit+0x134>)
 8002d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d50:	4a22      	ldr	r2, [pc, #136]	; (8002ddc <HAL_I2C_MspInit+0x134>)
 8002d52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d56:	6413      	str	r3, [r2, #64]	; 0x40
 8002d58:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_I2C_MspInit+0x134>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8002d64:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002d66:	4a21      	ldr	r2, [pc, #132]	; (8002dec <HAL_I2C_MspInit+0x144>)
 8002d68:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002d6c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002d70:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002d74:	2240      	movs	r2, #64	; 0x40
 8002d76:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d7e:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d84:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8002da4:	4810      	ldr	r0, [pc, #64]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002da6:	f001 f981 	bl	80040ac <HAL_DMA_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 8002db0:	f7ff fe26 	bl	8002a00 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002db8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <HAL_I2C_MspInit+0x140>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2048      	movs	r0, #72	; 0x48
 8002dc6:	f001 f93a 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002dca:	2048      	movs	r0, #72	; 0x48
 8002dcc:	f001 f953 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002dd0:	bf00      	nop
 8002dd2:	3728      	adds	r7, #40	; 0x28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40005c00 	.word	0x40005c00
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	20000930 	.word	0x20000930
 8002dec:	40026070 	.word	0x40026070

08002df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ea8 <HAL_TIM_Base_MspInit+0xb8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d116      	bne.n	8002e30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	4b29      	ldr	r3, [pc, #164]	; (8002eac <HAL_TIM_Base_MspInit+0xbc>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a28      	ldr	r2, [pc, #160]	; (8002eac <HAL_TIM_Base_MspInit+0xbc>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b26      	ldr	r3, [pc, #152]	; (8002eac <HAL_TIM_Base_MspInit+0xbc>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2100      	movs	r1, #0
 8002e22:	2019      	movs	r0, #25
 8002e24:	f001 f90b 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e28:	2019      	movs	r0, #25
 8002e2a:	f001 f924 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002e2e:	e036      	b.n	8002e9e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <HAL_TIM_Base_MspInit+0xc0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d116      	bne.n	8002e68 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <HAL_TIM_Base_MspInit+0xbc>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	4a1a      	ldr	r2, [pc, #104]	; (8002eac <HAL_TIM_Base_MspInit+0xbc>)
 8002e44:	f043 0302 	orr.w	r3, r3, #2
 8002e48:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4a:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_TIM_Base_MspInit+0xbc>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002e56:	2200      	movs	r2, #0
 8002e58:	2100      	movs	r1, #0
 8002e5a:	202d      	movs	r0, #45	; 0x2d
 8002e5c:	f001 f8ef 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e60:	202d      	movs	r0, #45	; 0x2d
 8002e62:	f001 f908 	bl	8004076 <HAL_NVIC_EnableIRQ>
}
 8002e66:	e01a      	b.n	8002e9e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM14)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a11      	ldr	r2, [pc, #68]	; (8002eb4 <HAL_TIM_Base_MspInit+0xc4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d115      	bne.n	8002e9e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HAL_TIM_Base_MspInit+0xbc>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <HAL_TIM_Base_MspInit+0xbc>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_TIM_Base_MspInit+0xbc>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2100      	movs	r1, #0
 8002e92:	202d      	movs	r0, #45	; 0x2d
 8002e94:	f001 f8d3 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e98:	202d      	movs	r0, #45	; 0x2d
 8002e9a:	f001 f8ec 	bl	8004076 <HAL_NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40010400 	.word	0x40010400
 8002eb4:	40002000 	.word	0x40002000

08002eb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <HAL_TIM_Encoder_MspInit+0x94>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d134      	bne.n	8002f44 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <HAL_TIM_Encoder_MspInit+0x98>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <HAL_TIM_Encoder_MspInit+0x98>)
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_TIM_Encoder_MspInit+0x98>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f003 0304 	and.w	r3, r3, #4
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <HAL_TIM_Encoder_MspInit+0x98>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a14      	ldr	r2, [pc, #80]	; (8002f50 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f00:	f043 0308 	orr.w	r3, r3, #8
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002f12:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	2300      	movs	r3, #0
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f24:	2302      	movs	r3, #2
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4809      	ldr	r0, [pc, #36]	; (8002f54 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002f30:	f001 fc56 	bl	80047e0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f34:	2200      	movs	r2, #0
 8002f36:	2100      	movs	r1, #0
 8002f38:	201e      	movs	r0, #30
 8002f3a:	f001 f880 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f3e:	201e      	movs	r0, #30
 8002f40:	f001 f899 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f44:	bf00      	nop
 8002f46:	3728      	adds	r7, #40	; 0x28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40000800 	.word	0x40000800
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40020c00 	.word	0x40020c00

08002f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	; 0x28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a33      	ldr	r2, [pc, #204]	; (8003044 <HAL_TIM_MspPostInit+0xec>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d11f      	bne.n	8002fba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_TIM_MspPostInit+0xf0>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a31      	ldr	r2, [pc, #196]	; (8003048 <HAL_TIM_MspPostInit+0xf0>)
 8002f84:	f043 0310 	orr.w	r3, r3, #16
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <HAL_TIM_MspPostInit+0xf0>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0310 	and.w	r3, r3, #16
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002f96:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4826      	ldr	r0, [pc, #152]	; (800304c <HAL_TIM_MspPostInit+0xf4>)
 8002fb4:	f001 fc14 	bl	80047e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002fb8:	e040      	b.n	800303c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a24      	ldr	r2, [pc, #144]	; (8003050 <HAL_TIM_MspPostInit+0xf8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d13b      	bne.n	800303c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <HAL_TIM_MspPostInit+0xf0>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	4a1e      	ldr	r2, [pc, #120]	; (8003048 <HAL_TIM_MspPostInit+0xf0>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd4:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <HAL_TIM_MspPostInit+0xf0>)
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <HAL_TIM_MspPostInit+0xf0>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	4a17      	ldr	r2, [pc, #92]	; (8003048 <HAL_TIM_MspPostInit+0xf0>)
 8002fea:	f043 0304 	orr.w	r3, r3, #4
 8002fee:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <HAL_TIM_MspPostInit+0xf0>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003008:	2300      	movs	r3, #0
 800300a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800300c:	2303      	movs	r3, #3
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	4619      	mov	r1, r3
 8003016:	480f      	ldr	r0, [pc, #60]	; (8003054 <HAL_TIM_MspPostInit+0xfc>)
 8003018:	f001 fbe2 	bl	80047e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800301c:	2340      	movs	r3, #64	; 0x40
 800301e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003020:	2302      	movs	r3, #2
 8003022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003028:	2300      	movs	r3, #0
 800302a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800302c:	2303      	movs	r3, #3
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003030:	f107 0314 	add.w	r3, r7, #20
 8003034:	4619      	mov	r1, r3
 8003036:	4808      	ldr	r0, [pc, #32]	; (8003058 <HAL_TIM_MspPostInit+0x100>)
 8003038:	f001 fbd2 	bl	80047e0 <HAL_GPIO_Init>
}
 800303c:	bf00      	nop
 800303e:	3728      	adds	r7, #40	; 0x28
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40010000 	.word	0x40010000
 8003048:	40023800 	.word	0x40023800
 800304c:	40021000 	.word	0x40021000
 8003050:	40010400 	.word	0x40010400
 8003054:	40020000 	.word	0x40020000
 8003058:	40020800 	.word	0x40020800

0800305c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1d      	ldr	r2, [pc, #116]	; (80030f0 <HAL_UART_MspInit+0x94>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d134      	bne.n	80030e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	4b1c      	ldr	r3, [pc, #112]	; (80030f4 <HAL_UART_MspInit+0x98>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_UART_MspInit+0x98>)
 8003088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <HAL_UART_MspInit+0x98>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_UART_MspInit+0x98>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <HAL_UART_MspInit+0x98>)
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	6313      	str	r3, [r2, #48]	; 0x30
 80030aa:	4b12      	ldr	r3, [pc, #72]	; (80030f4 <HAL_UART_MspInit+0x98>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c4:	2303      	movs	r3, #3
 80030c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030c8:	2307      	movs	r3, #7
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4619      	mov	r1, r3
 80030d2:	4809      	ldr	r0, [pc, #36]	; (80030f8 <HAL_UART_MspInit+0x9c>)
 80030d4:	f001 fb84 	bl	80047e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80030d8:	2200      	movs	r2, #0
 80030da:	2100      	movs	r1, #0
 80030dc:	2027      	movs	r0, #39	; 0x27
 80030de:	f000 ffae 	bl	800403e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80030e2:	2027      	movs	r0, #39	; 0x27
 80030e4:	f000 ffc7 	bl	8004076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80030e8:	bf00      	nop
 80030ea:	3728      	adds	r7, #40	; 0x28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40004800 	.word	0x40004800
 80030f4:	40023800 	.word	0x40023800
 80030f8:	40020c00 	.word	0x40020c00

080030fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003100:	e7fe      	b.n	8003100 <NMI_Handler+0x4>

08003102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003106:	e7fe      	b.n	8003106 <HardFault_Handler+0x4>

08003108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800310c:	e7fe      	b.n	800310c <MemManage_Handler+0x4>

0800310e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800310e:	b480      	push	{r7}
 8003110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003112:	e7fe      	b.n	8003112 <BusFault_Handler+0x4>

08003114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003118:	e7fe      	b.n	8003118 <UsageFault_Handler+0x4>

0800311a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800311e:	bf00      	nop
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr

08003132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003142:	f000 f923 	bl	800338c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}

0800314a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800314e:	2001      	movs	r0, #1
 8003150:	f001 fcfc 	bl	8004b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003154:	bf00      	nop
 8003156:	bd80      	pop	{r7, pc}

08003158 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800315c:	2002      	movs	r0, #2
 800315e:	f001 fcf5 	bl	8004b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800316c:	4802      	ldr	r0, [pc, #8]	; (8003178 <DMA1_Stream4_IRQHandler+0x10>)
 800316e:	f001 f8c5 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000930 	.word	0x20000930

0800317c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003180:	4805      	ldr	r0, [pc, #20]	; (8003198 <ADC_IRQHandler+0x1c>)
 8003182:	f000 f962 	bl	800344a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003186:	4805      	ldr	r0, [pc, #20]	; (800319c <ADC_IRQHandler+0x20>)
 8003188:	f000 f95f 	bl	800344a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800318c:	4804      	ldr	r0, [pc, #16]	; (80031a0 <ADC_IRQHandler+0x24>)
 800318e:	f000 f95c 	bl	800344a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000aec 	.word	0x20000aec
 800319c:	20000aa4 	.word	0x20000aa4
 80031a0:	20000b34 	.word	0x20000b34

080031a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80031a8:	2020      	movs	r0, #32
 80031aa:	f001 fccf 	bl	8004b4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80031ae:	2080      	movs	r0, #128	; 0x80
 80031b0:	f001 fccc 	bl	8004b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031bc:	4802      	ldr	r0, [pc, #8]	; (80031c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80031be:	f003 ff6d 	bl	800709c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000bdc 	.word	0x20000bdc

080031cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031d0:	4802      	ldr	r0, [pc, #8]	; (80031dc <TIM4_IRQHandler+0x10>)
 80031d2:	f003 ff63 	bl	800709c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000a24 	.word	0x20000a24

080031e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80031e4:	4802      	ldr	r0, [pc, #8]	; (80031f0 <USART3_IRQHandler+0x10>)
 80031e6:	f004 fef7 	bl	8007fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000a64 	.word	0x20000a64

080031f4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80031f8:	4803      	ldr	r0, [pc, #12]	; (8003208 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 80031fa:	f003 ff4f 	bl	800709c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80031fe:	4803      	ldr	r0, [pc, #12]	; (800320c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8003200:	f003 ff4c 	bl	800709c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}
 8003208:	200009e4 	.word	0x200009e4
 800320c:	20000c1c 	.word	0x20000c1c

08003210 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003214:	4802      	ldr	r0, [pc, #8]	; (8003220 <DMA2_Stream0_IRQHandler+0x10>)
 8003216:	f001 f871 	bl	80042fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000b7c 	.word	0x20000b7c

08003224 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <I2C3_EV_IRQHandler+0x10>)
 800322a:	f001 fdeb 	bl	8004e04 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000990 	.word	0x20000990

08003238 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800323c:	4b12      	ldr	r3, [pc, #72]	; (8003288 <SystemInit+0x50>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a11      	ldr	r2, [pc, #68]	; (8003288 <SystemInit+0x50>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003248:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <SystemInit+0x50>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <SystemInit+0x50>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a0d      	ldr	r2, [pc, #52]	; (8003288 <SystemInit+0x50>)
 8003254:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <SystemInit+0x50>)
 8003260:	4a0a      	ldr	r2, [pc, #40]	; (800328c <SystemInit+0x54>)
 8003262:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <SystemInit+0x50>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a07      	ldr	r2, [pc, #28]	; (8003288 <SystemInit+0x50>)
 800326a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <SystemInit+0x50>)
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <SystemInit+0x58>)
 8003278:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800327c:	609a      	str	r2, [r3, #8]
#endif
}
 800327e:	bf00      	nop
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40023800 	.word	0x40023800
 800328c:	24003010 	.word	0x24003010
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003298:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800329a:	e003      	b.n	80032a4 <LoopCopyDataInit>

0800329c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800329e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032a2:	3104      	adds	r1, #4

080032a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80032a4:	480b      	ldr	r0, [pc, #44]	; (80032d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032a6:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032ac:	d3f6      	bcc.n	800329c <CopyDataInit>
  ldr  r2, =_sbss
 80032ae:	4a0b      	ldr	r2, [pc, #44]	; (80032dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032b0:	e002      	b.n	80032b8 <LoopFillZerobss>

080032b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80032b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032b4:	f842 3b04 	str.w	r3, [r2], #4

080032b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032bc:	d3f9      	bcc.n	80032b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80032be:	f7ff ffbb 	bl	8003238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032c2:	f005 fa57 	bl	8008774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032c6:	f7fe ff27 	bl	8002118 <main>
  bx  lr
 80032ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80032d0:	080099f0 	.word	0x080099f0
  ldr  r0, =_sdata
 80032d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80032d8:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80032dc:	2000001c 	.word	0x2000001c
  ldr  r3, = _ebss
 80032e0:	20000c60 	.word	0x20000c60

080032e4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032e4:	e7fe      	b.n	80032e4 <CAN1_RX0_IRQHandler>
	...

080032e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032ec:	4b0e      	ldr	r3, [pc, #56]	; (8003328 <HAL_Init+0x40>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a0d      	ldr	r2, [pc, #52]	; (8003328 <HAL_Init+0x40>)
 80032f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80032f8:	4b0b      	ldr	r3, [pc, #44]	; (8003328 <HAL_Init+0x40>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <HAL_Init+0x40>)
 80032fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003302:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <HAL_Init+0x40>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a07      	ldr	r2, [pc, #28]	; (8003328 <HAL_Init+0x40>)
 800330a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003310:	2003      	movs	r0, #3
 8003312:	f000 fe89 	bl	8004028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003316:	200f      	movs	r0, #15
 8003318:	f000 f808 	bl	800332c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800331c:	f7ff fb76 	bl	8002a0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40023c00 	.word	0x40023c00

0800332c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <HAL_InitTick+0x54>)
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_InitTick+0x58>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	4619      	mov	r1, r3
 800333e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003342:	fbb3 f3f1 	udiv	r3, r3, r1
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fea1 	bl	8004092 <HAL_SYSTICK_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e00e      	b.n	8003378 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b0f      	cmp	r3, #15
 800335e:	d80a      	bhi.n	8003376 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003360:	2200      	movs	r2, #0
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	f000 fe69 	bl	800403e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800336c:	4a06      	ldr	r2, [pc, #24]	; (8003388 <HAL_InitTick+0x5c>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000010 	.word	0x20000010
 8003384:	20000018 	.word	0x20000018
 8003388:	20000014 	.word	0x20000014

0800338c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <HAL_IncTick+0x1c>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_IncTick+0x20>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4413      	add	r3, r2
 800339c:	4a03      	ldr	r2, [pc, #12]	; (80033ac <HAL_IncTick+0x20>)
 800339e:	6013      	str	r3, [r2, #0]
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr
 80033a8:	20000018 	.word	0x20000018
 80033ac:	20000c5c 	.word	0x20000c5c

080033b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return uwTick;
 80033b4:	4b02      	ldr	r3, [pc, #8]	; (80033c0 <HAL_GetTick+0x10>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr
 80033c0:	20000c5c 	.word	0x20000c5c

080033c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e033      	b.n	8003442 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff fb38 	bl	8002a58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d118      	bne.n	8003434 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800340a:	f023 0302 	bic.w	r3, r3, #2
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fb66 	bl	8003ae8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
 8003432:	e001      	b.n	8003438 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	2b02      	cmp	r3, #2
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b20      	cmp	r3, #32
 800347c:	bf0c      	ite	eq
 800347e:	2301      	moveq	r3, #1
 8003480:	2300      	movne	r3, #0
 8003482:	b2db      	uxtb	r3, r3
 8003484:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d049      	beq.n	8003520 <HAL_ADC_IRQHandler+0xd6>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d046      	beq.n	8003520 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	d105      	bne.n	80034aa <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d12b      	bne.n	8003510 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d127      	bne.n	8003510 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d006      	beq.n	80034dc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d119      	bne.n	8003510 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0220 	bic.w	r2, r2, #32
 80034ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d105      	bne.n	8003510 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f043 0201 	orr.w	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fe fcd5 	bl	8001ec0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f06f 0212 	mvn.w	r2, #18
 800351e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b04      	cmp	r3, #4
 800352c:	bf0c      	ite	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	2300      	movne	r3, #0
 8003532:	b2db      	uxtb	r3, r3
 8003534:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003540:	2b80      	cmp	r3, #128	; 0x80
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d057      	beq.n	8003602 <HAL_ADC_IRQHandler+0x1b8>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d054      	beq.n	8003602 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d105      	bne.n	8003570 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d139      	bne.n	80035f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003588:	2b00      	cmp	r3, #0
 800358a:	d006      	beq.n	800359a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003596:	2b00      	cmp	r3, #0
 8003598:	d12b      	bne.n	80035f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d124      	bne.n	80035f2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d11d      	bne.n	80035f2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d119      	bne.n	80035f2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035cc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f043 0201 	orr.w	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fbfe 	bl	8003df4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 020c 	mvn.w	r2, #12
 8003600:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d017      	beq.n	8003664 <HAL_ADC_IRQHandler+0x21a>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d014      	beq.n	8003664 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	d10d      	bne.n	8003664 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f914 	bl	8003882 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f06f 0201 	mvn.w	r2, #1
 8003662:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b20      	cmp	r3, #32
 8003670:	bf0c      	ite	eq
 8003672:	2301      	moveq	r3, #1
 8003674:	2300      	movne	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003688:	bf0c      	ite	eq
 800368a:	2301      	moveq	r3, #1
 800368c:	2300      	movne	r3, #0
 800368e:	b2db      	uxtb	r3, r3
 8003690:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d015      	beq.n	80036c4 <HAL_ADC_IRQHandler+0x27a>
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d012      	beq.n	80036c4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a2:	f043 0202 	orr.w	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f06f 0220 	mvn.w	r2, #32
 80036b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f8ed 	bl	8003894 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f06f 0220 	mvn.w	r2, #32
 80036c2:	601a      	str	r2, [r3, #0]
  }
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_Start_DMA+0x1e>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e0af      	b.n	800384a <HAL_ADC_Start_DMA+0x17e>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d018      	beq.n	8003732 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003710:	4b50      	ldr	r3, [pc, #320]	; (8003854 <HAL_ADC_Start_DMA+0x188>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a50      	ldr	r2, [pc, #320]	; (8003858 <HAL_ADC_Start_DMA+0x18c>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0c9a      	lsrs	r2, r3, #18
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003724:	e002      	b.n	800372c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	3b01      	subs	r3, #1
 800372a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f9      	bne.n	8003726 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	f040 8083 	bne.w	8003848 <HAL_ADC_Start_DMA+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800376c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003780:	d106      	bne.n	8003790 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f023 0206 	bic.w	r2, r3, #6
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
 800378e:	e002      	b.n	8003796 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	4a2e      	ldr	r2, [pc, #184]	; (800385c <HAL_ADC_Start_DMA+0x190>)
 80037a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	4a2d      	ldr	r2, [pc, #180]	; (8003860 <HAL_ADC_Start_DMA+0x194>)
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	4a2c      	ldr	r2, [pc, #176]	; (8003864 <HAL_ADC_Start_DMA+0x198>)
 80037b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	334c      	adds	r3, #76	; 0x4c
 80037ea:	4619      	mov	r1, r3
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f000 fd0a 	bl	8004208 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80037f4:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <HAL_ADC_Start_DMA+0x19c>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 031f 	and.w	r3, r3, #31
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10f      	bne.n	8003820 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d11c      	bne.n	8003848 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800381c:	609a      	str	r2, [r3, #8]
 800381e:	e013      	b.n	8003848 <HAL_ADC_Start_DMA+0x17c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a11      	ldr	r2, [pc, #68]	; (800386c <HAL_ADC_Start_DMA+0x1a0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10e      	bne.n	8003848 <HAL_ADC_Start_DMA+0x17c>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d107      	bne.n	8003848 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003846:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000010 	.word	0x20000010
 8003858:	431bde83 	.word	0x431bde83
 800385c:	08003cf1 	.word	0x08003cf1
 8003860:	08003dab 	.word	0x08003dab
 8003864:	08003dc7 	.word	0x08003dc7
 8003868:	40012300 	.word	0x40012300
 800386c:	40012000 	.word	0x40012000

08003870 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr

08003894 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x1c>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e103      	b.n	8003acc <HAL_ADC_ConfigChannel+0x224>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b09      	cmp	r3, #9
 80038d2:	d925      	bls.n	8003920 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68d9      	ldr	r1, [r3, #12]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	3b1e      	subs	r3, #30
 80038ea:	2207      	movs	r2, #7
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43da      	mvns	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	400a      	ands	r2, r1
 80038f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68d9      	ldr	r1, [r3, #12]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	b29b      	uxth	r3, r3
 800390a:	4618      	mov	r0, r3
 800390c:	4603      	mov	r3, r0
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4403      	add	r3, r0
 8003912:	3b1e      	subs	r3, #30
 8003914:	409a      	lsls	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	e022      	b.n	8003966 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6919      	ldr	r1, [r3, #16]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	4613      	mov	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	4413      	add	r3, r2
 8003934:	2207      	movs	r2, #7
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43da      	mvns	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	400a      	ands	r2, r1
 8003942:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6919      	ldr	r1, [r3, #16]
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	4618      	mov	r0, r3
 8003956:	4603      	mov	r3, r0
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4403      	add	r3, r0
 800395c:	409a      	lsls	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b06      	cmp	r3, #6
 800396c:	d824      	bhi.n	80039b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	3b05      	subs	r3, #5
 8003980:	221f      	movs	r2, #31
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43da      	mvns	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	400a      	ands	r2, r1
 800398e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	4618      	mov	r0, r3
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	3b05      	subs	r3, #5
 80039aa:	fa00 f203 	lsl.w	r2, r0, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	635a      	str	r2, [r3, #52]	; 0x34
 80039b6:	e04c      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b0c      	cmp	r3, #12
 80039be:	d824      	bhi.n	8003a0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	3b23      	subs	r3, #35	; 0x23
 80039d2:	221f      	movs	r2, #31
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43da      	mvns	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	400a      	ands	r2, r1
 80039e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	4618      	mov	r0, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	3b23      	subs	r3, #35	; 0x23
 80039fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
 8003a08:	e023      	b.n	8003a52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	3b41      	subs	r3, #65	; 0x41
 8003a1c:	221f      	movs	r2, #31
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43da      	mvns	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	400a      	ands	r2, r1
 8003a2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	4618      	mov	r0, r3
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	3b41      	subs	r3, #65	; 0x41
 8003a46:	fa00 f203 	lsl.w	r2, r0, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <HAL_ADC_ConfigChannel+0x230>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d109      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x1c8>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b12      	cmp	r3, #18
 8003a62:	d105      	bne.n	8003a70 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003a64:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <HAL_ADC_ConfigChannel+0x234>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_ADC_ConfigChannel+0x234>)
 8003a6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a6e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <HAL_ADC_ConfigChannel+0x230>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d123      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x21a>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	d003      	beq.n	8003a8a <HAL_ADC_ConfigChannel+0x1e2>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b11      	cmp	r3, #17
 8003a88:	d11b      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_ADC_ConfigChannel+0x234>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4a13      	ldr	r2, [pc, #76]	; (8003adc <HAL_ADC_ConfigChannel+0x234>)
 8003a90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a94:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b10      	cmp	r3, #16
 8003a9c:	d111      	bne.n	8003ac2 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a9e:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <HAL_ADC_ConfigChannel+0x238>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a10      	ldr	r2, [pc, #64]	; (8003ae4 <HAL_ADC_ConfigChannel+0x23c>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	0c9a      	lsrs	r2, r3, #18
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003ab4:	e002      	b.n	8003abc <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f9      	bne.n	8003ab6 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc80      	pop	{r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40012000 	.word	0x40012000
 8003adc:	40012300 	.word	0x40012300
 8003ae0:	20000010 	.word	0x20000010
 8003ae4:	431bde83 	.word	0x431bde83

08003ae8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003af0:	4b7d      	ldr	r3, [pc, #500]	; (8003ce8 <ADC_Init+0x200>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4a7c      	ldr	r2, [pc, #496]	; (8003ce8 <ADC_Init+0x200>)
 8003af6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003afa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003afc:	4b7a      	ldr	r3, [pc, #488]	; (8003ce8 <ADC_Init+0x200>)
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	4978      	ldr	r1, [pc, #480]	; (8003ce8 <ADC_Init+0x200>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	021a      	lsls	r2, r3, #8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6899      	ldr	r1, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b76:	4a5d      	ldr	r2, [pc, #372]	; (8003cec <ADC_Init+0x204>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d022      	beq.n	8003bc2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6899      	ldr	r1, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003bac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6899      	ldr	r1, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	e00f      	b.n	8003be2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003bd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003be0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0202 	bic.w	r2, r2, #2
 8003bf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6899      	ldr	r1, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	005a      	lsls	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d027      	beq.n	8003c5e <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c1c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c2c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	3b01      	subs	r3, #1
 8003c34:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003c38:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	fa92 f2a2 	rbit	r2, r2
 8003c40:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	fab2 f282 	clz	r2, r2
 8003c48:	b2d2      	uxtb	r2, r2
 8003c4a:	fa03 f102 	lsl.w	r1, r3, r2
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	e007      	b.n	8003c6e <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	051a      	lsls	r2, r3, #20
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ca2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6899      	ldr	r1, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	025a      	lsls	r2, r3, #9
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6899      	ldr	r1, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	029a      	lsls	r2, r3, #10
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	609a      	str	r2, [r3, #8]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40012300 	.word	0x40012300
 8003cec:	0f000001 	.word	0x0f000001

08003cf0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d13c      	bne.n	8003d84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d12b      	bne.n	8003d7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d127      	bne.n	8003d7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d119      	bne.n	8003d7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0220 	bic.w	r2, r2, #32
 8003d56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f043 0201 	orr.w	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f7fe f89f 	bl	8001ec0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d82:	e00e      	b.n	8003da2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f7ff fd7f 	bl	8003894 <HAL_ADC_ErrorCallback>
}
 8003d96:	e004      	b.n	8003da2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff fd59 	bl	8003870 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2240      	movs	r2, #64	; 0x40
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f043 0204 	orr.w	r2, r3, #4
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f7ff fd54 	bl	8003894 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
	...

08003e08 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	e02f      	b.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8003e28:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e2e:	f023 031f 	bic.w	r3, r3, #31
 8003e32:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->Mode;
 8003e34:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4913      	ldr	r1, [pc, #76]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	604b      	str	r3, [r1, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4a11      	ldr	r2, [pc, #68]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e4c:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	490d      	ldr	r1, [pc, #52]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]
  
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e66:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4906      	ldr	r1, [pc, #24]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bc80      	pop	{r7}
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40012300 	.word	0x40012300

08003e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eac:	4013      	ands	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec2:	4a04      	ldr	r2, [pc, #16]	; (8003ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	60d3      	str	r3, [r2, #12]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	0a1b      	lsrs	r3, r3, #8
 8003ee2:	f003 0307 	and.w	r3, r3, #7
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	db0b      	blt.n	8003f1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	f003 021f 	and.w	r2, r3, #31
 8003f0c:	4906      	ldr	r1, [pc, #24]	; (8003f28 <__NVIC_EnableIRQ+0x34>)
 8003f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	2001      	movs	r0, #1
 8003f16:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	e000e100 	.word	0xe000e100

08003f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	6039      	str	r1, [r7, #0]
 8003f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	db0a      	blt.n	8003f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	490c      	ldr	r1, [pc, #48]	; (8003f78 <__NVIC_SetPriority+0x4c>)
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	0112      	lsls	r2, r2, #4
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	440b      	add	r3, r1
 8003f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f54:	e00a      	b.n	8003f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4908      	ldr	r1, [pc, #32]	; (8003f7c <__NVIC_SetPriority+0x50>)
 8003f5c:	79fb      	ldrb	r3, [r7, #7]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	3b04      	subs	r3, #4
 8003f64:	0112      	lsls	r2, r2, #4
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	440b      	add	r3, r1
 8003f6a:	761a      	strb	r2, [r3, #24]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	e000e100 	.word	0xe000e100
 8003f7c:	e000ed00 	.word	0xe000ed00

08003f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b089      	sub	sp, #36	; 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f1c3 0307 	rsb	r3, r3, #7
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	bf28      	it	cs
 8003f9e:	2304      	movcs	r3, #4
 8003fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	2b06      	cmp	r3, #6
 8003fa8:	d902      	bls.n	8003fb0 <NVIC_EncodePriority+0x30>
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	3b03      	subs	r3, #3
 8003fae:	e000      	b.n	8003fb2 <NVIC_EncodePriority+0x32>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd2:	43d9      	mvns	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd8:	4313      	orrs	r3, r2
         );
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3724      	adds	r7, #36	; 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr

08003fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff4:	d301      	bcc.n	8003ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e00f      	b.n	800401a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	; (8004024 <SysTick_Config+0x40>)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004002:	210f      	movs	r1, #15
 8004004:	f04f 30ff 	mov.w	r0, #4294967295
 8004008:	f7ff ff90 	bl	8003f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <SysTick_Config+0x40>)
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <SysTick_Config+0x40>)
 8004014:	2207      	movs	r2, #7
 8004016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	e000e010 	.word	0xe000e010

08004028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff ff2d 	bl	8003e90 <__NVIC_SetPriorityGrouping>
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	4603      	mov	r3, r0
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
 800404a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004050:	f7ff ff42 	bl	8003ed8 <__NVIC_GetPriorityGrouping>
 8004054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	6978      	ldr	r0, [r7, #20]
 800405c:	f7ff ff90 	bl	8003f80 <NVIC_EncodePriority>
 8004060:	4602      	mov	r2, r0
 8004062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004066:	4611      	mov	r1, r2
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff5f 	bl	8003f2c <__NVIC_SetPriority>
}
 800406e:	bf00      	nop
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b082      	sub	sp, #8
 800407a:	af00      	add	r7, sp, #0
 800407c:	4603      	mov	r3, r0
 800407e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff35 	bl	8003ef4 <__NVIC_EnableIRQ>
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff ffa2 	bl	8003fe4 <SysTick_Config>
 80040a0:	4603      	mov	r3, r0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040b8:	f7ff f97a 	bl	80033b0 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e099      	b.n	80041fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e8:	e00f      	b.n	800410a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040ea:	f7ff f961 	bl	80033b0 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	d908      	bls.n	800410a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2203      	movs	r2, #3
 8004102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e078      	b.n	80041fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e8      	bne.n	80040ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4b38      	ldr	r3, [pc, #224]	; (8004204 <HAL_DMA_Init+0x158>)
 8004124:	4013      	ands	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004136:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004142:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	2b04      	cmp	r3, #4
 8004162:	d107      	bne.n	8004174 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	4313      	orrs	r3, r2
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 0307 	bic.w	r3, r3, #7
 800418a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2b04      	cmp	r3, #4
 800419c:	d117      	bne.n	80041ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fa9b 	bl	80046ec <DMA_CheckFifoParam>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2240      	movs	r2, #64	; 0x40
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041ca:	2301      	movs	r3, #1
 80041cc:	e016      	b.n	80041fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fa54 	bl	8004684 <DMA_CalcBaseAndBitshift>
 80041dc:	4603      	mov	r3, r0
 80041de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	223f      	movs	r2, #63	; 0x3f
 80041e6:	409a      	lsls	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	f010803f 	.word	0xf010803f

08004208 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_DMA_Start_IT+0x26>
 800422a:	2302      	movs	r3, #2
 800422c:	e040      	b.n	80042b0 <HAL_DMA_Start_IT+0xa8>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d12f      	bne.n	80042a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2202      	movs	r2, #2
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 f9e7 	bl	800462a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	223f      	movs	r2, #63	; 0x3f
 8004262:	409a      	lsls	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0216 	orr.w	r2, r2, #22
 8004276:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0208 	orr.w	r2, r2, #8
 800428e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e005      	b.n	80042ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
 80042ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d004      	beq.n	80042d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2280      	movs	r2, #128	; 0x80
 80042d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e00c      	b.n	80042f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2205      	movs	r2, #5
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0201 	bic.w	r2, r2, #1
 80042ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004308:	4b92      	ldr	r3, [pc, #584]	; (8004554 <HAL_DMA_IRQHandler+0x258>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a92      	ldr	r2, [pc, #584]	; (8004558 <HAL_DMA_IRQHandler+0x25c>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a9b      	lsrs	r3, r3, #10
 8004314:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004326:	2208      	movs	r2, #8
 8004328:	409a      	lsls	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d01a      	beq.n	8004368 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0204 	bic.w	r2, r2, #4
 800434e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004354:	2208      	movs	r2, #8
 8004356:	409a      	lsls	r2, r3
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004360:	f043 0201 	orr.w	r2, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	2201      	movs	r2, #1
 800436e:	409a      	lsls	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d012      	beq.n	800439e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438a:	2201      	movs	r2, #1
 800438c:	409a      	lsls	r2, r3
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f043 0202 	orr.w	r2, r3, #2
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a2:	2204      	movs	r2, #4
 80043a4:	409a      	lsls	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d012      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	2204      	movs	r2, #4
 80043c2:	409a      	lsls	r2, r3
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	f043 0204 	orr.w	r2, r3, #4
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d8:	2210      	movs	r2, #16
 80043da:	409a      	lsls	r2, r3
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d043      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d03c      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f6:	2210      	movs	r2, #16
 80043f8:	409a      	lsls	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d018      	beq.n	800443e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d108      	bne.n	800442c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d024      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
 800442a:	e01f      	b.n	800446c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01b      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3
 800443c:	e016      	b.n	800446c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d107      	bne.n	800445c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0208 	bic.w	r2, r2, #8
 800445a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004470:	2220      	movs	r2, #32
 8004472:	409a      	lsls	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 808e 	beq.w	800459a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8086 	beq.w	800459a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004492:	2220      	movs	r2, #32
 8004494:	409a      	lsls	r2, r3
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b05      	cmp	r3, #5
 80044a4:	d136      	bne.n	8004514 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0216 	bic.w	r2, r2, #22
 80044b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <HAL_DMA_IRQHandler+0x1da>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d007      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0208 	bic.w	r2, r2, #8
 80044e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ea:	223f      	movs	r2, #63	; 0x3f
 80044ec:	409a      	lsls	r2, r3
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d07d      	beq.n	8004606 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
        }
        return;
 8004512:	e078      	b.n	8004606 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d01c      	beq.n	800455c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d108      	bne.n	8004542 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	2b00      	cmp	r3, #0
 8004536:	d030      	beq.n	800459a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	4798      	blx	r3
 8004540:	e02b      	b.n	800459a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d027      	beq.n	800459a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
 8004552:	e022      	b.n	800459a <HAL_DMA_IRQHandler+0x29e>
 8004554:	20000010 	.word	0x20000010
 8004558:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10f      	bne.n	800458a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0210 	bic.w	r2, r2, #16
 8004578:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	2b00      	cmp	r3, #0
 8004590:	d003      	beq.n	800459a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d032      	beq.n	8004608 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d022      	beq.n	80045f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2205      	movs	r2, #5
 80045b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 0201 	bic.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3301      	adds	r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d307      	bcc.n	80045e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f2      	bne.n	80045c6 <HAL_DMA_IRQHandler+0x2ca>
 80045e0:	e000      	b.n	80045e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80045e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
 8004604:	e000      	b.n	8004608 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004606:	bf00      	nop
    }
  }
}
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop

08004610 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800461e:	b2db      	uxtb	r3, r3
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr

0800462a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004646:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d108      	bne.n	800466a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004668:	e007      	b.n	800467a <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	60da      	str	r2, [r3, #12]
}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	3b10      	subs	r3, #16
 8004694:	4a13      	ldr	r2, [pc, #76]	; (80046e4 <DMA_CalcBaseAndBitshift+0x60>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800469e:	4a12      	ldr	r2, [pc, #72]	; (80046e8 <DMA_CalcBaseAndBitshift+0x64>)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b03      	cmp	r3, #3
 80046b0:	d909      	bls.n	80046c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ba:	f023 0303 	bic.w	r3, r3, #3
 80046be:	1d1a      	adds	r2, r3, #4
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	659a      	str	r2, [r3, #88]	; 0x58
 80046c4:	e007      	b.n	80046d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046ce:	f023 0303 	bic.w	r3, r3, #3
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	bc80      	pop	{r7}
 80046e2:	4770      	bx	lr
 80046e4:	aaaaaaab 	.word	0xaaaaaaab
 80046e8:	08009800 	.word	0x08009800

080046ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11f      	bne.n	8004746 <DMA_CheckFifoParam+0x5a>
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2b03      	cmp	r3, #3
 800470a:	d856      	bhi.n	80047ba <DMA_CheckFifoParam+0xce>
 800470c:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <DMA_CheckFifoParam+0x28>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004725 	.word	0x08004725
 8004718:	08004737 	.word	0x08004737
 800471c:	08004725 	.word	0x08004725
 8004720:	080047bb 	.word	0x080047bb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d046      	beq.n	80047be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004734:	e043      	b.n	80047be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800473e:	d140      	bne.n	80047c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004744:	e03d      	b.n	80047c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474e:	d121      	bne.n	8004794 <DMA_CheckFifoParam+0xa8>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d837      	bhi.n	80047c6 <DMA_CheckFifoParam+0xda>
 8004756:	a201      	add	r2, pc, #4	; (adr r2, 800475c <DMA_CheckFifoParam+0x70>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	0800476d 	.word	0x0800476d
 8004760:	08004773 	.word	0x08004773
 8004764:	0800476d 	.word	0x0800476d
 8004768:	08004785 	.word	0x08004785
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      break;
 8004770:	e030      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d025      	beq.n	80047ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004782:	e022      	b.n	80047ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800478c:	d11f      	bne.n	80047ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004792:	e01c      	b.n	80047ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b02      	cmp	r3, #2
 8004798:	d903      	bls.n	80047a2 <DMA_CheckFifoParam+0xb6>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b03      	cmp	r3, #3
 800479e:	d003      	beq.n	80047a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047a0:	e018      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
      break;
 80047a6:	e015      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00e      	beq.n	80047d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
      break;
 80047b8:	e00b      	b.n	80047d2 <DMA_CheckFifoParam+0xe6>
      break;
 80047ba:	bf00      	nop
 80047bc:	e00a      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047be:	bf00      	nop
 80047c0:	e008      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047c2:	bf00      	nop
 80047c4:	e006      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047c6:	bf00      	nop
 80047c8:	e004      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047ca:	bf00      	nop
 80047cc:	e002      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80047ce:	bf00      	nop
 80047d0:	e000      	b.n	80047d4 <DMA_CheckFifoParam+0xe8>
      break;
 80047d2:	bf00      	nop
    }
  } 
  
  return status; 
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047ea:	2300      	movs	r3, #0
 80047ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047ee:	e16f      	b.n	8004ad0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	2101      	movs	r1, #1
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	fa01 f303 	lsl.w	r3, r1, r3
 80047fc:	4013      	ands	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 8161 	beq.w	8004aca <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d00b      	beq.n	8004828 <HAL_GPIO_Init+0x48>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2b02      	cmp	r3, #2
 8004816:	d007      	beq.n	8004828 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800481c:	2b11      	cmp	r3, #17
 800481e:	d003      	beq.n	8004828 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2b12      	cmp	r3, #18
 8004826:	d130      	bne.n	800488a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2203      	movs	r2, #3
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800485e:	2201      	movs	r2, #1
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4013      	ands	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	091b      	lsrs	r3, r3, #4
 8004874:	f003 0201 	and.w	r2, r3, #1
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	2203      	movs	r2, #3
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4013      	ands	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	fa02 f303 	lsl.w	r3, r2, r3
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d003      	beq.n	80048ca <HAL_GPIO_Init+0xea>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b12      	cmp	r3, #18
 80048c8:	d123      	bne.n	8004912 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	08da      	lsrs	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3208      	adds	r2, #8
 80048d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	220f      	movs	r2, #15
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	691a      	ldr	r2, [r3, #16]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	08da      	lsrs	r2, r3, #3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	3208      	adds	r2, #8
 800490c:	6939      	ldr	r1, [r7, #16]
 800490e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	2203      	movs	r2, #3
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4013      	ands	r3, r2
 8004928:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f003 0203 	and.w	r2, r3, #3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	f000 80bb 	beq.w	8004aca <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	4b64      	ldr	r3, [pc, #400]	; (8004aec <HAL_GPIO_Init+0x30c>)
 800495a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495c:	4a63      	ldr	r2, [pc, #396]	; (8004aec <HAL_GPIO_Init+0x30c>)
 800495e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004962:	6453      	str	r3, [r2, #68]	; 0x44
 8004964:	4b61      	ldr	r3, [pc, #388]	; (8004aec <HAL_GPIO_Init+0x30c>)
 8004966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004968:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004970:	4a5f      	ldr	r2, [pc, #380]	; (8004af0 <HAL_GPIO_Init+0x310>)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	089b      	lsrs	r3, r3, #2
 8004976:	3302      	adds	r3, #2
 8004978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	220f      	movs	r2, #15
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4013      	ands	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a57      	ldr	r2, [pc, #348]	; (8004af4 <HAL_GPIO_Init+0x314>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d031      	beq.n	8004a00 <HAL_GPIO_Init+0x220>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a56      	ldr	r2, [pc, #344]	; (8004af8 <HAL_GPIO_Init+0x318>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d02b      	beq.n	80049fc <HAL_GPIO_Init+0x21c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a55      	ldr	r2, [pc, #340]	; (8004afc <HAL_GPIO_Init+0x31c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d025      	beq.n	80049f8 <HAL_GPIO_Init+0x218>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a54      	ldr	r2, [pc, #336]	; (8004b00 <HAL_GPIO_Init+0x320>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d01f      	beq.n	80049f4 <HAL_GPIO_Init+0x214>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a53      	ldr	r2, [pc, #332]	; (8004b04 <HAL_GPIO_Init+0x324>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d019      	beq.n	80049f0 <HAL_GPIO_Init+0x210>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a52      	ldr	r2, [pc, #328]	; (8004b08 <HAL_GPIO_Init+0x328>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d013      	beq.n	80049ec <HAL_GPIO_Init+0x20c>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a51      	ldr	r2, [pc, #324]	; (8004b0c <HAL_GPIO_Init+0x32c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00d      	beq.n	80049e8 <HAL_GPIO_Init+0x208>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a50      	ldr	r2, [pc, #320]	; (8004b10 <HAL_GPIO_Init+0x330>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d007      	beq.n	80049e4 <HAL_GPIO_Init+0x204>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a4f      	ldr	r2, [pc, #316]	; (8004b14 <HAL_GPIO_Init+0x334>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d101      	bne.n	80049e0 <HAL_GPIO_Init+0x200>
 80049dc:	2308      	movs	r3, #8
 80049de:	e010      	b.n	8004a02 <HAL_GPIO_Init+0x222>
 80049e0:	2309      	movs	r3, #9
 80049e2:	e00e      	b.n	8004a02 <HAL_GPIO_Init+0x222>
 80049e4:	2307      	movs	r3, #7
 80049e6:	e00c      	b.n	8004a02 <HAL_GPIO_Init+0x222>
 80049e8:	2306      	movs	r3, #6
 80049ea:	e00a      	b.n	8004a02 <HAL_GPIO_Init+0x222>
 80049ec:	2305      	movs	r3, #5
 80049ee:	e008      	b.n	8004a02 <HAL_GPIO_Init+0x222>
 80049f0:	2304      	movs	r3, #4
 80049f2:	e006      	b.n	8004a02 <HAL_GPIO_Init+0x222>
 80049f4:	2303      	movs	r3, #3
 80049f6:	e004      	b.n	8004a02 <HAL_GPIO_Init+0x222>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e002      	b.n	8004a02 <HAL_GPIO_Init+0x222>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <HAL_GPIO_Init+0x222>
 8004a00:	2300      	movs	r3, #0
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	f002 0203 	and.w	r2, r2, #3
 8004a08:	0092      	lsls	r2, r2, #2
 8004a0a:	4093      	lsls	r3, r2
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a14:	4936      	ldr	r1, [pc, #216]	; (8004af0 <HAL_GPIO_Init+0x310>)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	089b      	lsrs	r3, r3, #2
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a22:	4b3d      	ldr	r3, [pc, #244]	; (8004b18 <HAL_GPIO_Init+0x338>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004a46:	4a34      	ldr	r2, [pc, #208]	; (8004b18 <HAL_GPIO_Init+0x338>)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a4c:	4b32      	ldr	r3, [pc, #200]	; (8004b18 <HAL_GPIO_Init+0x338>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	43db      	mvns	r3, r3
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a70:	4a29      	ldr	r2, [pc, #164]	; (8004b18 <HAL_GPIO_Init+0x338>)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a76:	4b28      	ldr	r3, [pc, #160]	; (8004b18 <HAL_GPIO_Init+0x338>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4013      	ands	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a9a:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <HAL_GPIO_Init+0x338>)
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004aa0:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <HAL_GPIO_Init+0x338>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4013      	ands	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ac4:	4a14      	ldr	r2, [pc, #80]	; (8004b18 <HAL_GPIO_Init+0x338>)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	3301      	adds	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f47f ae88 	bne.w	80047f0 <HAL_GPIO_Init+0x10>
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	40023800 	.word	0x40023800
 8004af0:	40013800 	.word	0x40013800
 8004af4:	40020000 	.word	0x40020000
 8004af8:	40020400 	.word	0x40020400
 8004afc:	40020800 	.word	0x40020800
 8004b00:	40020c00 	.word	0x40020c00
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40021400 	.word	0x40021400
 8004b0c:	40021800 	.word	0x40021800
 8004b10:	40021c00 	.word	0x40021c00
 8004b14:	40022000 	.word	0x40022000
 8004b18:	40013c00 	.word	0x40013c00

08004b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	887b      	ldrh	r3, [r7, #2]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
 8004b38:	e001      	b.n	8004b3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bc80      	pop	{r7}
 8004b48:	4770      	bx	lr
	...

08004b4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b56:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b62:	4a05      	ldr	r2, [pc, #20]	; (8004b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b64:	88fb      	ldrh	r3, [r7, #6]
 8004b66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fd f846 	bl	8001bfc <HAL_GPIO_EXTI_Callback>
  }
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40013c00 	.word	0x40013c00

08004b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e12b      	b.n	8004de6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fe f880 	bl	8002ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2224      	movs	r2, #36	; 0x24
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0201 	bic.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004be0:	f002 f83a 	bl	8006c58 <HAL_RCC_GetPCLK1Freq>
 8004be4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	4a81      	ldr	r2, [pc, #516]	; (8004df0 <HAL_I2C_Init+0x274>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d807      	bhi.n	8004c00 <HAL_I2C_Init+0x84>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4a80      	ldr	r2, [pc, #512]	; (8004df4 <HAL_I2C_Init+0x278>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	bf94      	ite	ls
 8004bf8:	2301      	movls	r3, #1
 8004bfa:	2300      	movhi	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e006      	b.n	8004c0e <HAL_I2C_Init+0x92>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a7d      	ldr	r2, [pc, #500]	; (8004df8 <HAL_I2C_Init+0x27c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	bf94      	ite	ls
 8004c08:	2301      	movls	r3, #1
 8004c0a:	2300      	movhi	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e0e7      	b.n	8004de6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a78      	ldr	r2, [pc, #480]	; (8004dfc <HAL_I2C_Init+0x280>)
 8004c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1e:	0c9b      	lsrs	r3, r3, #18
 8004c20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4a6a      	ldr	r2, [pc, #424]	; (8004df0 <HAL_I2C_Init+0x274>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d802      	bhi.n	8004c50 <HAL_I2C_Init+0xd4>
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	e009      	b.n	8004c64 <HAL_I2C_Init+0xe8>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	4a69      	ldr	r2, [pc, #420]	; (8004e00 <HAL_I2C_Init+0x284>)
 8004c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c60:	099b      	lsrs	r3, r3, #6
 8004c62:	3301      	adds	r3, #1
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6812      	ldr	r2, [r2, #0]
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	495c      	ldr	r1, [pc, #368]	; (8004df0 <HAL_I2C_Init+0x274>)
 8004c80:	428b      	cmp	r3, r1
 8004c82:	d819      	bhi.n	8004cb8 <HAL_I2C_Init+0x13c>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1e59      	subs	r1, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c92:	1c59      	adds	r1, r3, #1
 8004c94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c98:	400b      	ands	r3, r1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_I2C_Init+0x138>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1e59      	subs	r1, r3, #1
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cac:	3301      	adds	r3, #1
 8004cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb2:	e051      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	e04f      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d111      	bne.n	8004ce4 <HAL_I2C_Init+0x168>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1e58      	subs	r0, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	440b      	add	r3, r1
 8004cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e012      	b.n	8004d0a <HAL_I2C_Init+0x18e>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1e58      	subs	r0, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	0099      	lsls	r1, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_I2C_Init+0x196>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e022      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10e      	bne.n	8004d38 <HAL_I2C_Init+0x1bc>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1e58      	subs	r0, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	440b      	add	r3, r1
 8004d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d36:	e00f      	b.n	8004d58 <HAL_I2C_Init+0x1dc>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1e58      	subs	r0, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	0099      	lsls	r1, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	6809      	ldr	r1, [r1, #0]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6911      	ldr	r1, [r2, #16]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68d2      	ldr	r2, [r2, #12]
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	000186a0 	.word	0x000186a0
 8004df4:	001e847f 	.word	0x001e847f
 8004df8:	003d08ff 	.word	0x003d08ff
 8004dfc:	431bde83 	.word	0x431bde83
 8004e00:	10624dd3 	.word	0x10624dd3

08004e04 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e24:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d003      	beq.n	8004e3c <HAL_I2C_EV_IRQHandler+0x38>
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	f040 80b6 	bne.w	8004fa8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10d      	bne.n	8004e72 <HAL_I2C_EV_IRQHandler+0x6e>
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e5c:	d003      	beq.n	8004e66 <HAL_I2C_EV_IRQHandler+0x62>
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e64:	d101      	bne.n	8004e6a <HAL_I2C_EV_IRQHandler+0x66>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <HAL_I2C_EV_IRQHandler+0x68>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	f000 8127 	beq.w	80050c0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00c      	beq.n	8004e96 <HAL_I2C_EV_IRQHandler+0x92>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	0a5b      	lsrs	r3, r3, #9
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d006      	beq.n	8004e96 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f001 fa88 	bl	800639e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fc6a 	bl	8005768 <I2C_Master_SB>
 8004e94:	e087      	b.n	8004fa6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	08db      	lsrs	r3, r3, #3
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <HAL_I2C_EV_IRQHandler+0xb2>
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	0a5b      	lsrs	r3, r3, #9
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fcdf 	bl	8005872 <I2C_Master_ADD10>
 8004eb4:	e077      	b.n	8004fa6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d009      	beq.n	8004ed6 <HAL_I2C_EV_IRQHandler+0xd2>
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	0a5b      	lsrs	r3, r3, #9
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fcf8 	bl	80058c4 <I2C_Master_ADDR>
 8004ed4:	e067      	b.n	8004fa6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d030      	beq.n	8004f44 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef0:	f000 80e8 	beq.w	80050c4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	09db      	lsrs	r3, r3, #7
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00f      	beq.n	8004f20 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	0a9b      	lsrs	r3, r3, #10
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d009      	beq.n	8004f20 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	089b      	lsrs	r3, r3, #2
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f937 	bl	800518c <I2C_MasterTransmit_TXE>
 8004f1e:	e042      	b.n	8004fa6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	089b      	lsrs	r3, r3, #2
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 80cb 	beq.w	80050c4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	0a5b      	lsrs	r3, r3, #9
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 80c4 	beq.w	80050c4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f9c1 	bl	80052c4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f42:	e0bf      	b.n	80050c4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f52:	f000 80b7 	beq.w	80050c4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	099b      	lsrs	r3, r3, #6
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00f      	beq.n	8004f82 <HAL_I2C_EV_IRQHandler+0x17e>
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	0a9b      	lsrs	r3, r3, #10
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <HAL_I2C_EV_IRQHandler+0x17e>
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	089b      	lsrs	r3, r3, #2
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d103      	bne.n	8004f82 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa88 	bl	8005490 <I2C_MasterReceive_RXNE>
 8004f80:	e011      	b.n	8004fa6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	089b      	lsrs	r3, r3, #2
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 809a 	beq.w	80050c4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	0a5b      	lsrs	r3, r3, #9
 8004f94:	f003 0301 	and.w	r3, r3, #1
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 8093 	beq.w	80050c4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 faf8 	bl	8005594 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fa4:	e08e      	b.n	80050c4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004fa6:	e08d      	b.n	80050c4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	61fb      	str	r3, [r7, #28]
 8004fb8:	e007      	b.n	8004fca <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	085b      	lsrs	r3, r3, #1
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d012      	beq.n	8004ffc <HAL_I2C_EV_IRQHandler+0x1f8>
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	0a5b      	lsrs	r3, r3, #9
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00c      	beq.n	8004ffc <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004ff2:	69b9      	ldr	r1, [r7, #24]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 feb1 	bl	8005d5c <I2C_Slave_ADDR>
 8004ffa:	e066      	b.n	80050ca <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d009      	beq.n	800501c <HAL_I2C_EV_IRQHandler+0x218>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	0a5b      	lsrs	r3, r3, #9
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 fee5 	bl	8005de4 <I2C_Slave_STOPF>
 800501a:	e056      	b.n	80050ca <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800501c:	7bbb      	ldrb	r3, [r7, #14]
 800501e:	2b21      	cmp	r3, #33	; 0x21
 8005020:	d002      	beq.n	8005028 <HAL_I2C_EV_IRQHandler+0x224>
 8005022:	7bbb      	ldrb	r3, [r7, #14]
 8005024:	2b29      	cmp	r3, #41	; 0x29
 8005026:	d125      	bne.n	8005074 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	09db      	lsrs	r3, r3, #7
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00f      	beq.n	8005054 <HAL_I2C_EV_IRQHandler+0x250>
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	0a9b      	lsrs	r3, r3, #10
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d009      	beq.n	8005054 <HAL_I2C_EV_IRQHandler+0x250>
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	089b      	lsrs	r3, r3, #2
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fdc9 	bl	8005be4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005052:	e039      	b.n	80050c8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	089b      	lsrs	r3, r3, #2
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d033      	beq.n	80050c8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	0a5b      	lsrs	r3, r3, #9
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d02d      	beq.n	80050c8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fdf6 	bl	8005c5e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005072:	e029      	b.n	80050c8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	099b      	lsrs	r3, r3, #6
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00f      	beq.n	80050a0 <HAL_I2C_EV_IRQHandler+0x29c>
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	0a9b      	lsrs	r3, r3, #10
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <HAL_I2C_EV_IRQHandler+0x29c>
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	089b      	lsrs	r3, r3, #2
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d103      	bne.n	80050a0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fe00 	bl	8005c9e <I2C_SlaveReceive_RXNE>
 800509e:	e014      	b.n	80050ca <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	089b      	lsrs	r3, r3, #2
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00e      	beq.n	80050ca <HAL_I2C_EV_IRQHandler+0x2c6>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	0a5b      	lsrs	r3, r3, #9
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fe2e 	bl	8005d1a <I2C_SlaveReceive_BTF>
 80050be:	e004      	b.n	80050ca <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80050c0:	bf00      	nop
 80050c2:	e002      	b.n	80050ca <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050c4:	bf00      	nop
 80050c6:	e000      	b.n	80050ca <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050c8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005106:	b480      	push	{r7}
 8005108:	b083      	sub	sp, #12
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800510e:	bf00      	nop
 8005110:	370c      	adds	r7, #12
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
 8005124:	4613      	mov	r3, r2
 8005126:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr

08005132 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	bc80      	pop	{r7}
 8005154:	4770      	bx	lr

08005156 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr

0800518c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d150      	bne.n	8005254 <I2C_MasterTransmit_TXE+0xc8>
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
 80051b4:	2b21      	cmp	r3, #33	; 0x21
 80051b6:	d14d      	bne.n	8005254 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d01d      	beq.n	80051fa <I2C_MasterTransmit_TXE+0x6e>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d01a      	beq.n	80051fa <I2C_MasterTransmit_TXE+0x6e>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051ca:	d016      	beq.n	80051fa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685a      	ldr	r2, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051da:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2211      	movs	r2, #17
 80051e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7ff ff6c 	bl	80050d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80051f8:	e060      	b.n	80052bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005208:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005218:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b40      	cmp	r3, #64	; 0x40
 8005232:	d107      	bne.n	8005244 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff ff81 	bl	8005144 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005242:	e03b      	b.n	80052bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ff3f 	bl	80050d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005252:	e033      	b.n	80052bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	2b21      	cmp	r3, #33	; 0x21
 8005258:	d005      	beq.n	8005266 <I2C_MasterTransmit_TXE+0xda>
 800525a:	7bbb      	ldrb	r3, [r7, #14]
 800525c:	2b40      	cmp	r3, #64	; 0x40
 800525e:	d12d      	bne.n	80052bc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b22      	cmp	r3, #34	; 0x22
 8005264:	d12a      	bne.n	80052bc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d108      	bne.n	8005282 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005280:	e01c      	b.n	80052bc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b40      	cmp	r3, #64	; 0x40
 800528c:	d103      	bne.n	8005296 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f898 	bl	80053c4 <I2C_MemoryTransmit_TXE_BTF>
}
 8005294:	e012      	b.n	80052bc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	781a      	ldrb	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052ba:	e7ff      	b.n	80052bc <I2C_MasterTransmit_TXE+0x130>
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b21      	cmp	r3, #33	; 0x21
 80052dc:	d165      	bne.n	80053aa <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d012      	beq.n	800530e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	781a      	ldrb	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800530c:	e056      	b.n	80053bc <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b08      	cmp	r3, #8
 8005312:	d01d      	beq.n	8005350 <I2C_MasterTransmit_BTF+0x8c>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b20      	cmp	r3, #32
 8005318:	d01a      	beq.n	8005350 <I2C_MasterTransmit_BTF+0x8c>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005320:	d016      	beq.n	8005350 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005330:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2211      	movs	r2, #17
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff fec1 	bl	80050d0 <HAL_I2C_MasterTxCpltCallback>
}
 800534e:	e035      	b.n	80053bc <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800535e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b40      	cmp	r3, #64	; 0x40
 8005388:	d107      	bne.n	800539a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff fed6 	bl	8005144 <HAL_I2C_MemTxCpltCallback>
}
 8005398:	e010      	b.n	80053bc <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff fe94 	bl	80050d0 <HAL_I2C_MasterTxCpltCallback>
}
 80053a8:	e008      	b.n	80053bc <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b40      	cmp	r3, #64	; 0x40
 80053b4:	d102      	bne.n	80053bc <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f804 	bl	80053c4 <I2C_MemoryTransmit_TXE_BTF>
}
 80053bc:	bf00      	nop
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d11d      	bne.n	8005410 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d10b      	bne.n	80053f4 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ec:	1c9a      	adds	r2, r3, #2
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80053f2:	e048      	b.n	8005486 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	121b      	asrs	r3, r3, #8
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800540e:	e03a      	b.n	8005486 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005414:	2b01      	cmp	r3, #1
 8005416:	d10b      	bne.n	8005430 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800541c:	b2da      	uxtb	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800542e:	e02a      	b.n	8005486 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005434:	2b02      	cmp	r3, #2
 8005436:	d126      	bne.n	8005486 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b22      	cmp	r3, #34	; 0x22
 8005442:	d108      	bne.n	8005456 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005452:	601a      	str	r2, [r3, #0]
}
 8005454:	e017      	b.n	8005486 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b21      	cmp	r3, #33	; 0x21
 8005460:	d111      	bne.n	8005486 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	781a      	ldrb	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	3b01      	subs	r3, #1
 8005480:	b29a      	uxth	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr

08005490 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b22      	cmp	r3, #34	; 0x22
 80054a2:	d173      	bne.n	800558c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b03      	cmp	r3, #3
 80054b0:	d920      	bls.n	80054f4 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	3b01      	subs	r3, #1
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d154      	bne.n	800558c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80054f2:	e04b      	b.n	800558c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d047      	beq.n	800558c <I2C_MasterReceive_RXNE+0xfc>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d002      	beq.n	8005508 <I2C_MasterReceive_RXNE+0x78>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d141      	bne.n	800558c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005516:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005526:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691a      	ldr	r2, [r3, #16]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b40      	cmp	r3, #64	; 0x40
 8005560:	d10a      	bne.n	8005578 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff fdf0 	bl	8005156 <HAL_I2C_MemRxCpltCallback>
}
 8005576:	e009      	b.n	800558c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2212      	movs	r2, #18
 8005584:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff fdab 	bl	80050e2 <HAL_I2C_MasterRxCpltCallback>
}
 800558c:	bf00      	nop
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d11b      	bne.n	80055e4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ba:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80055e2:	e0bd      	b.n	8005760 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b03      	cmp	r3, #3
 80055ec:	d129      	bne.n	8005642 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b04      	cmp	r3, #4
 8005602:	d00a      	beq.n	800561a <I2C_MasterReceive_BTF+0x86>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d007      	beq.n	800561a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005618:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691a      	ldr	r2, [r3, #16]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	1c5a      	adds	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005640:	e08e      	b.n	8005760 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b02      	cmp	r3, #2
 800564a:	d176      	bne.n	800573a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d002      	beq.n	8005658 <I2C_MasterReceive_BTF+0xc4>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b10      	cmp	r3, #16
 8005656:	d108      	bne.n	800566a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e019      	b.n	800569e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d002      	beq.n	8005676 <I2C_MasterReceive_BTF+0xe2>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d108      	bne.n	8005688 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e00a      	b.n	800569e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2b10      	cmp	r3, #16
 800568c:	d007      	beq.n	800569e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691a      	ldr	r2, [r3, #16]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	1c5a      	adds	r2, r3, #1
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	3b01      	subs	r3, #1
 80056be:	b29a      	uxth	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056f8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d10a      	bne.n	8005724 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fd1a 	bl	8005156 <HAL_I2C_MemRxCpltCallback>
}
 8005722:	e01d      	b.n	8005760 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2212      	movs	r2, #18
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f7ff fcd5 	bl	80050e2 <HAL_I2C_MasterRxCpltCallback>
}
 8005738:	e012      	b.n	8005760 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	d117      	bne.n	80057ac <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005780:	2b00      	cmp	r3, #0
 8005782:	d109      	bne.n	8005798 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005788:	b2db      	uxtb	r3, r3
 800578a:	461a      	mov	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005794:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005796:	e067      	b.n	8005868 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579c:	b2db      	uxtb	r3, r3
 800579e:	f043 0301 	orr.w	r3, r3, #1
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	611a      	str	r2, [r3, #16]
}
 80057aa:	e05d      	b.n	8005868 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057b4:	d133      	bne.n	800581e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b21      	cmp	r3, #33	; 0x21
 80057c0:	d109      	bne.n	80057d6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	461a      	mov	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057d2:	611a      	str	r2, [r3, #16]
 80057d4:	e008      	b.n	80057e8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	f043 0301 	orr.w	r3, r3, #1
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d004      	beq.n	80057fa <I2C_Master_SB+0x92>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d108      	bne.n	800580c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d032      	beq.n	8005868 <I2C_Master_SB+0x100>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	2b00      	cmp	r3, #0
 800580a:	d02d      	beq.n	8005868 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581a:	605a      	str	r2, [r3, #4]
}
 800581c:	e024      	b.n	8005868 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10e      	bne.n	8005844 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	b29b      	uxth	r3, r3
 800582c:	11db      	asrs	r3, r3, #7
 800582e:	b2db      	uxtb	r3, r3
 8005830:	f003 0306 	and.w	r3, r3, #6
 8005834:	b2db      	uxtb	r3, r3
 8005836:	f063 030f 	orn	r3, r3, #15
 800583a:	b2da      	uxtb	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	611a      	str	r2, [r3, #16]
}
 8005842:	e011      	b.n	8005868 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005848:	2b01      	cmp	r3, #1
 800584a:	d10d      	bne.n	8005868 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005850:	b29b      	uxth	r3, r3
 8005852:	11db      	asrs	r3, r3, #7
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 0306 	and.w	r3, r3, #6
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f063 030e 	orn	r3, r3, #14
 8005860:	b2da      	uxtb	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	611a      	str	r2, [r3, #16]
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	bc80      	pop	{r7}
 8005870:	4770      	bx	lr

08005872 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587e:	b2da      	uxtb	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <I2C_Master_ADD10+0x24>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	2b00      	cmp	r3, #0
 8005894:	d011      	beq.n	80058ba <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <I2C_Master_ADD10+0x38>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	bc80      	pop	{r7}
 80058c2:	4770      	bx	lr

080058c4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b091      	sub	sp, #68	; 0x44
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b22      	cmp	r3, #34	; 0x22
 80058ec:	f040 8169 	bne.w	8005bc2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10f      	bne.n	8005918 <I2C_Master_ADDR+0x54>
 80058f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058fc:	2b40      	cmp	r3, #64	; 0x40
 80058fe:	d10b      	bne.n	8005918 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005900:	2300      	movs	r3, #0
 8005902:	633b      	str	r3, [r7, #48]	; 0x30
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	633b      	str	r3, [r7, #48]	; 0x30
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	633b      	str	r3, [r7, #48]	; 0x30
 8005914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005916:	e160      	b.n	8005bda <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591c:	2b00      	cmp	r3, #0
 800591e:	d11d      	bne.n	800595c <I2C_Master_ADDR+0x98>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005928:	d118      	bne.n	800595c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592a:	2300      	movs	r3, #0
 800592c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800594e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	651a      	str	r2, [r3, #80]	; 0x50
 800595a:	e13e      	b.n	8005bda <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d113      	bne.n	800598e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005966:	2300      	movs	r3, #0
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	e115      	b.n	8005bba <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	f040 808a 	bne.w	8005aae <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059a0:	d137      	bne.n	8005a12 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c0:	d113      	bne.n	80059ea <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d2:	2300      	movs	r3, #0
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	627b      	str	r3, [r7, #36]	; 0x24
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	e0e7      	b.n	8005bba <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ea:	2300      	movs	r3, #0
 80059ec:	623b      	str	r3, [r7, #32]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	623b      	str	r3, [r7, #32]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	e0d3      	b.n	8005bba <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d02e      	beq.n	8005a76 <I2C_Master_ADDR+0x1b2>
 8005a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d02b      	beq.n	8005a76 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	2b12      	cmp	r3, #18
 8005a22:	d102      	bne.n	8005a2a <I2C_Master_ADDR+0x166>
 8005a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d125      	bne.n	8005a76 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d00e      	beq.n	8005a4e <I2C_Master_ADDR+0x18a>
 8005a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d00b      	beq.n	8005a4e <I2C_Master_ADDR+0x18a>
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d008      	beq.n	8005a4e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	e007      	b.n	8005a5e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a5c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	61fb      	str	r3, [r7, #28]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	61fb      	str	r3, [r7, #28]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	e0a1      	b.n	8005bba <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a84:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a86:	2300      	movs	r3, #0
 8005a88:	61bb      	str	r3, [r7, #24]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	e085      	b.n	8005bba <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d14d      	bne.n	8005b54 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	d016      	beq.n	8005aec <I2C_Master_ADDR+0x228>
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d013      	beq.n	8005aec <I2C_Master_ADDR+0x228>
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d010      	beq.n	8005aec <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ad8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e007      	b.n	8005afc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005afa:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0a:	d117      	bne.n	8005b3c <I2C_Master_ADDR+0x278>
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b12:	d00b      	beq.n	8005b2c <I2C_Master_ADDR+0x268>
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d008      	beq.n	8005b2c <I2C_Master_ADDR+0x268>
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d005      	beq.n	8005b2c <I2C_Master_ADDR+0x268>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	2b10      	cmp	r3, #16
 8005b24:	d002      	beq.n	8005b2c <I2C_Master_ADDR+0x268>
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d107      	bne.n	8005b3c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b3a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	e032      	b.n	8005bba <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b62:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b72:	d117      	bne.n	8005ba4 <I2C_Master_ADDR+0x2e0>
 8005b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b76:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b7a:	d00b      	beq.n	8005b94 <I2C_Master_ADDR+0x2d0>
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d008      	beq.n	8005b94 <I2C_Master_ADDR+0x2d0>
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d005      	beq.n	8005b94 <I2C_Master_ADDR+0x2d0>
 8005b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d002      	beq.n	8005b94 <I2C_Master_ADDR+0x2d0>
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	2b20      	cmp	r3, #32
 8005b92:	d107      	bne.n	8005ba4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ba2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	613b      	str	r3, [r7, #16]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005bc0:	e00b      	b.n	8005bda <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
}
 8005bd8:	e7ff      	b.n	8005bda <I2C_Master_ADDR+0x316>
 8005bda:	bf00      	nop
 8005bdc:	3744      	adds	r7, #68	; 0x44
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr

08005be4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d02b      	beq.n	8005c56 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	781a      	ldrb	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d114      	bne.n	8005c56 <I2C_SlaveTransmit_TXE+0x72>
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
 8005c2e:	2b29      	cmp	r3, #41	; 0x29
 8005c30:	d111      	bne.n	8005c56 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c40:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2221      	movs	r2, #33	; 0x21
 8005c46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2228      	movs	r2, #40	; 0x28
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f7ff fa4f 	bl	80050f4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d011      	beq.n	8005c94 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d02c      	beq.n	8005d12 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d114      	bne.n	8005d12 <I2C_SlaveReceive_RXNE+0x74>
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b2a      	cmp	r3, #42	; 0x2a
 8005cec:	d111      	bne.n	8005d12 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2222      	movs	r2, #34	; 0x22
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2228      	movs	r2, #40	; 0x28
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7ff f9fa 	bl	8005106 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d012      	beq.n	8005d52 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	1c5a      	adds	r2, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d76:	2b28      	cmp	r3, #40	; 0x28
 8005d78:	d127      	bne.n	8005dca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d88:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	089b      	lsrs	r3, r3, #2
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005d96:	2301      	movs	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	09db      	lsrs	r3, r3, #7
 8005d9e:	f003 0301 	and.w	r3, r3, #1
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d103      	bne.n	8005dae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	81bb      	strh	r3, [r7, #12]
 8005dac:	e002      	b.n	8005db4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005dbc:	89ba      	ldrh	r2, [r7, #12]
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff f9a8 	bl	8005118 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005dc8:	e008      	b.n	8005ddc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f06f 0202 	mvn.w	r2, #2
 8005dd2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e02:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005e04:	2300      	movs	r3, #0
 8005e06:	60bb      	str	r3, [r7, #8]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	60bb      	str	r3, [r7, #8]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f042 0201 	orr.w	r2, r2, #1
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e30:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e40:	d172      	bne.n	8005f28 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	2b22      	cmp	r3, #34	; 0x22
 8005e46:	d002      	beq.n	8005e4e <I2C_Slave_STOPF+0x6a>
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e4c:	d135      	bne.n	8005eba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6a:	f043 0204 	orr.w	r2, r3, #4
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e80:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fbc2 	bl	8004610 <HAL_DMA_GetState>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d049      	beq.n	8005f26 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e96:	4a69      	ldr	r2, [pc, #420]	; (800603c <I2C_Slave_STOPF+0x258>)
 8005e98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7fe fa0a 	bl	80042b8 <HAL_DMA_Abort_IT>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d03d      	beq.n	8005f26 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005eb8:	e035      	b.n	8005f26 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d005      	beq.n	8005ede <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f043 0204 	orr.w	r2, r3, #4
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe fb8c 	bl	8004610 <HAL_DMA_GetState>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d014      	beq.n	8005f28 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f02:	4a4e      	ldr	r2, [pc, #312]	; (800603c <I2C_Slave_STOPF+0x258>)
 8005f04:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fe f9d4 	bl	80042b8 <HAL_DMA_Abort_IT>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d008      	beq.n	8005f28 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f20:	4610      	mov	r0, r2
 8005f22:	4798      	blx	r3
 8005f24:	e000      	b.n	8005f28 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005f26:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d03e      	beq.n	8005fb0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	f003 0304 	and.w	r3, r3, #4
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d112      	bne.n	8005f66 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f70:	2b40      	cmp	r3, #64	; 0x40
 8005f72:	d112      	bne.n	8005f9a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691a      	ldr	r2, [r3, #16]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	f043 0204 	orr.w	r2, r3, #4
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f843 	bl	8006044 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005fbe:	e039      	b.n	8006034 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005fc4:	d109      	bne.n	8005fda <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2228      	movs	r2, #40	; 0x28
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff f896 	bl	8005106 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b28      	cmp	r3, #40	; 0x28
 8005fe4:	d111      	bne.n	800600a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a15      	ldr	r2, [pc, #84]	; (8006040 <I2C_Slave_STOPF+0x25c>)
 8005fea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff f895 	bl	8005132 <HAL_I2C_ListenCpltCallback>
}
 8006008:	e014      	b.n	8006034 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	2b22      	cmp	r3, #34	; 0x22
 8006010:	d002      	beq.n	8006018 <I2C_Slave_STOPF+0x234>
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	2b22      	cmp	r3, #34	; 0x22
 8006016:	d10d      	bne.n	8006034 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff f869 	bl	8005106 <HAL_I2C_SlaveRxCpltCallback>
}
 8006034:	bf00      	nop
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	080062a1 	.word	0x080062a1
 8006040:	ffff0000 	.word	0xffff0000

08006044 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b10      	cmp	r3, #16
 800605e:	d10a      	bne.n	8006076 <I2C_ITError+0x32>
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	2b22      	cmp	r3, #34	; 0x22
 8006064:	d107      	bne.n	8006076 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006074:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800607c:	2b28      	cmp	r3, #40	; 0x28
 800607e:	d107      	bne.n	8006090 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2228      	movs	r2, #40	; 0x28
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800608e:	e015      	b.n	80060bc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800609a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800609e:	d006      	beq.n	80060ae <I2C_ITError+0x6a>
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	2b60      	cmp	r3, #96	; 0x60
 80060a4:	d003      	beq.n	80060ae <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ca:	d162      	bne.n	8006192 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d020      	beq.n	800612c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ee:	4a6a      	ldr	r2, [pc, #424]	; (8006298 <I2C_ITError+0x254>)
 80060f0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fe f8de 	bl	80042b8 <HAL_DMA_Abort_IT>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 8089 	beq.w	8006216 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0201 	bic.w	r2, r2, #1
 8006112:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006126:	4610      	mov	r0, r2
 8006128:	4798      	blx	r3
 800612a:	e074      	b.n	8006216 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006130:	4a59      	ldr	r2, [pc, #356]	; (8006298 <I2C_ITError+0x254>)
 8006132:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	4618      	mov	r0, r3
 800613a:	f7fe f8bd 	bl	80042b8 <HAL_DMA_Abort_IT>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d068      	beq.n	8006216 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d10b      	bne.n	800616a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691a      	ldr	r2, [r3, #16]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	1c5a      	adds	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0201 	bic.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800618c:	4610      	mov	r0, r2
 800618e:	4798      	blx	r3
 8006190:	e041      	b.n	8006216 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b60      	cmp	r3, #96	; 0x60
 800619c:	d125      	bne.n	80061ea <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	d10b      	bne.n	80061d2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	691a      	ldr	r2, [r3, #16]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0201 	bic.w	r2, r2, #1
 80061e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fe ffc9 	bl	800517a <HAL_I2C_AbortCpltCallback>
 80061e8:	e015      	b.n	8006216 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b40      	cmp	r3, #64	; 0x40
 80061f6:	d10b      	bne.n	8006210 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7fe ffa9 	bl	8005168 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10e      	bne.n	8006244 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800622c:	2b00      	cmp	r3, #0
 800622e:	d109      	bne.n	8006244 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006236:	2b00      	cmp	r3, #0
 8006238:	d104      	bne.n	8006244 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006252:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b04      	cmp	r3, #4
 8006266:	d113      	bne.n	8006290 <I2C_ITError+0x24c>
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	2b28      	cmp	r3, #40	; 0x28
 800626c:	d110      	bne.n	8006290 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a0a      	ldr	r2, [pc, #40]	; (800629c <I2C_ITError+0x258>)
 8006272:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f7fe ff51 	bl	8005132 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	080062a1 	.word	0x080062a1
 800629c:	ffff0000 	.word	0xffff0000

080062a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c2:	2200      	movs	r2, #0
 80062c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	2200      	movs	r2, #0
 80062d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f8:	2200      	movs	r2, #0
 80062fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	2200      	movs	r2, #0
 800630a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b60      	cmp	r3, #96	; 0x60
 8006326:	d10e      	bne.n	8006346 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7fe ff1b 	bl	800517a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006344:	e027      	b.n	8006396 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006346:	7afb      	ldrb	r3, [r7, #11]
 8006348:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800634c:	2b28      	cmp	r3, #40	; 0x28
 800634e:	d117      	bne.n	8006380 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800636e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2228      	movs	r2, #40	; 0x28
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800637e:	e007      	b.n	8006390 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2220      	movs	r2, #32
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7fe fee9 	bl	8005168 <HAL_I2C_ErrorCallback>
}
 8006396:	bf00      	nop
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80063ae:	d103      	bne.n	80063b8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80063b6:	e007      	b.n	80063c8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80063c0:	d102      	bne.n	80063c8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2208      	movs	r2, #8
 80063c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr
	...

080063d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b090      	sub	sp, #64	; 0x40
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e253      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d050      	beq.n	8006494 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063f2:	4ba3      	ldr	r3, [pc, #652]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 030c 	and.w	r3, r3, #12
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d00c      	beq.n	8006418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063fe:	4ba0      	ldr	r3, [pc, #640]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006406:	2b08      	cmp	r3, #8
 8006408:	d112      	bne.n	8006430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800640a:	4b9d      	ldr	r3, [pc, #628]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006416:	d10b      	bne.n	8006430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006418:	4b99      	ldr	r3, [pc, #612]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d036      	beq.n	8006492 <HAL_RCC_OscConfig+0xbe>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d132      	bne.n	8006492 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e22e      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	4b93      	ldr	r3, [pc, #588]	; (8006684 <HAL_RCC_OscConfig+0x2b0>)
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d013      	beq.n	800646a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006442:	f7fc ffb5 	bl	80033b0 <HAL_GetTick>
 8006446:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800644a:	f7fc ffb1 	bl	80033b0 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b64      	cmp	r3, #100	; 0x64
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e218      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800645c:	4b88      	ldr	r3, [pc, #544]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0f0      	beq.n	800644a <HAL_RCC_OscConfig+0x76>
 8006468:	e014      	b.n	8006494 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800646a:	f7fc ffa1 	bl	80033b0 <HAL_GetTick>
 800646e:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006472:	f7fc ff9d 	bl	80033b0 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b64      	cmp	r3, #100	; 0x64
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e204      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006484:	4b7e      	ldr	r3, [pc, #504]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1f0      	bne.n	8006472 <HAL_RCC_OscConfig+0x9e>
 8006490:	e000      	b.n	8006494 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006492:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d077      	beq.n	8006590 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064a0:	4b77      	ldr	r3, [pc, #476]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 030c 	and.w	r3, r3, #12
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00b      	beq.n	80064c4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064ac:	4b74      	ldr	r3, [pc, #464]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d126      	bne.n	8006506 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064b8:	4b71      	ldr	r3, [pc, #452]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d120      	bne.n	8006506 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064c4:	4b6e      	ldr	r3, [pc, #440]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d005      	beq.n	80064dc <HAL_RCC_OscConfig+0x108>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d001      	beq.n	80064dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	e1d8      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064dc:	4b68      	ldr	r3, [pc, #416]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	21f8      	movs	r1, #248	; 0xf8
 80064ea:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064ee:	fa91 f1a1 	rbit	r1, r1
 80064f2:	62f9      	str	r1, [r7, #44]	; 0x2c
  return result;
 80064f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064f6:	fab1 f181 	clz	r1, r1
 80064fa:	b2c9      	uxtb	r1, r1
 80064fc:	408b      	lsls	r3, r1
 80064fe:	4960      	ldr	r1, [pc, #384]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006500:	4313      	orrs	r3, r2
 8006502:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006504:	e044      	b.n	8006590 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d02a      	beq.n	8006564 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800650e:	4b5e      	ldr	r3, [pc, #376]	; (8006688 <HAL_RCC_OscConfig+0x2b4>)
 8006510:	2201      	movs	r2, #1
 8006512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006514:	f7fc ff4c 	bl	80033b0 <HAL_GetTick>
 8006518:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800651c:	f7fc ff48 	bl	80033b0 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e1af      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800652e:	4b54      	ldr	r3, [pc, #336]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0f0      	beq.n	800651c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800653a:	4b51      	ldr	r3, [pc, #324]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	21f8      	movs	r1, #248	; 0xf8
 8006548:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800654a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800654c:	fa91 f1a1 	rbit	r1, r1
 8006550:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8006552:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006554:	fab1 f181 	clz	r1, r1
 8006558:	b2c9      	uxtb	r1, r1
 800655a:	408b      	lsls	r3, r1
 800655c:	4948      	ldr	r1, [pc, #288]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 800655e:	4313      	orrs	r3, r2
 8006560:	600b      	str	r3, [r1, #0]
 8006562:	e015      	b.n	8006590 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006564:	4b48      	ldr	r3, [pc, #288]	; (8006688 <HAL_RCC_OscConfig+0x2b4>)
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800656a:	f7fc ff21 	bl	80033b0 <HAL_GetTick>
 800656e:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006570:	e008      	b.n	8006584 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006572:	f7fc ff1d 	bl	80033b0 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d901      	bls.n	8006584 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e184      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006584:	4b3e      	ldr	r3, [pc, #248]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1f0      	bne.n	8006572 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d030      	beq.n	80065fe <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d016      	beq.n	80065d2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065a4:	4b39      	ldr	r3, [pc, #228]	; (800668c <HAL_RCC_OscConfig+0x2b8>)
 80065a6:	2201      	movs	r2, #1
 80065a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065aa:	f7fc ff01 	bl	80033b0 <HAL_GetTick>
 80065ae:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065b2:	f7fc fefd 	bl	80033b0 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e164      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065c4:	4b2e      	ldr	r3, [pc, #184]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80065c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d0f0      	beq.n	80065b2 <HAL_RCC_OscConfig+0x1de>
 80065d0:	e015      	b.n	80065fe <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065d2:	4b2e      	ldr	r3, [pc, #184]	; (800668c <HAL_RCC_OscConfig+0x2b8>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d8:	f7fc feea 	bl	80033b0 <HAL_GetTick>
 80065dc:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e0:	f7fc fee6 	bl	80033b0 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e14d      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f2:	4b23      	ldr	r3, [pc, #140]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 80065f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f0      	bne.n	80065e0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 8088 	beq.w	800671c <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 800660c:	2300      	movs	r3, #0
 800660e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006612:	4b1b      	ldr	r3, [pc, #108]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d110      	bne.n	8006640 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800661e:	2300      	movs	r3, #0
 8006620:	60bb      	str	r3, [r7, #8]
 8006622:	4b17      	ldr	r3, [pc, #92]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	4a16      	ldr	r2, [pc, #88]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800662c:	6413      	str	r3, [r2, #64]	; 0x40
 800662e:	4b14      	ldr	r3, [pc, #80]	; (8006680 <HAL_RCC_OscConfig+0x2ac>)
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006636:	60bb      	str	r3, [r7, #8]
 8006638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800663a:	2301      	movs	r3, #1
 800663c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006640:	4b13      	ldr	r3, [pc, #76]	; (8006690 <HAL_RCC_OscConfig+0x2bc>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a12      	ldr	r2, [pc, #72]	; (8006690 <HAL_RCC_OscConfig+0x2bc>)
 8006646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800664c:	4b10      	ldr	r3, [pc, #64]	; (8006690 <HAL_RCC_OscConfig+0x2bc>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006654:	2b00      	cmp	r3, #0
 8006656:	d123      	bne.n	80066a0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006658:	4b0d      	ldr	r3, [pc, #52]	; (8006690 <HAL_RCC_OscConfig+0x2bc>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a0c      	ldr	r2, [pc, #48]	; (8006690 <HAL_RCC_OscConfig+0x2bc>)
 800665e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006662:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006664:	f7fc fea4 	bl	80033b0 <HAL_GetTick>
 8006668:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666a:	e013      	b.n	8006694 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800666c:	f7fc fea0 	bl	80033b0 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d90c      	bls.n	8006694 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e107      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
 800667e:	bf00      	nop
 8006680:	40023800 	.word	0x40023800
 8006684:	40023802 	.word	0x40023802
 8006688:	42470000 	.word	0x42470000
 800668c:	42470e80 	.word	0x42470e80
 8006690:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006694:	4b80      	ldr	r3, [pc, #512]	; (8006898 <HAL_RCC_OscConfig+0x4c4>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0e5      	beq.n	800666c <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	4b7d      	ldr	r3, [pc, #500]	; (800689c <HAL_RCC_OscConfig+0x4c8>)
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d015      	beq.n	80066de <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066b2:	f7fc fe7d 	bl	80033b0 <HAL_GetTick>
 80066b6:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b8:	e00a      	b.n	80066d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ba:	f7fc fe79 	bl	80033b0 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e0de      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d0:	4b73      	ldr	r3, [pc, #460]	; (80068a0 <HAL_RCC_OscConfig+0x4cc>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0ee      	beq.n	80066ba <HAL_RCC_OscConfig+0x2e6>
 80066dc:	e014      	b.n	8006708 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066de:	f7fc fe67 	bl	80033b0 <HAL_GetTick>
 80066e2:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066e4:	e00a      	b.n	80066fc <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066e6:	f7fc fe63 	bl	80033b0 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e0c8      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066fc:	4b68      	ldr	r3, [pc, #416]	; (80068a0 <HAL_RCC_OscConfig+0x4cc>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1ee      	bne.n	80066e6 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006708:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800670c:	2b01      	cmp	r3, #1
 800670e:	d105      	bne.n	800671c <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006710:	4b63      	ldr	r3, [pc, #396]	; (80068a0 <HAL_RCC_OscConfig+0x4cc>)
 8006712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006714:	4a62      	ldr	r2, [pc, #392]	; (80068a0 <HAL_RCC_OscConfig+0x4cc>)
 8006716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800671a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	2b00      	cmp	r3, #0
 8006722:	f000 80b3 	beq.w	800688c <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006726:	4b5e      	ldr	r3, [pc, #376]	; (80068a0 <HAL_RCC_OscConfig+0x4cc>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 030c 	and.w	r3, r3, #12
 800672e:	2b08      	cmp	r3, #8
 8006730:	d07d      	beq.n	800682e <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	2b02      	cmp	r3, #2
 8006738:	d162      	bne.n	8006800 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800673a:	4b5a      	ldr	r3, [pc, #360]	; (80068a4 <HAL_RCC_OscConfig+0x4d0>)
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006740:	f7fc fe36 	bl	80033b0 <HAL_GetTick>
 8006744:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006748:	f7fc fe32 	bl	80033b0 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b64      	cmp	r3, #100	; 0x64
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e099      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800675a:	4b51      	ldr	r3, [pc, #324]	; (80068a0 <HAL_RCC_OscConfig+0x4cc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f0      	bne.n	8006748 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69da      	ldr	r2, [r3, #28]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8006778:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800677a:	6939      	ldr	r1, [r7, #16]
 800677c:	fa91 f1a1 	rbit	r1, r1
 8006780:	60f9      	str	r1, [r7, #12]
  return result;
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	fab1 f181 	clz	r1, r1
 8006788:	b2c9      	uxtb	r1, r1
 800678a:	408b      	lsls	r3, r1
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006792:	085b      	lsrs	r3, r3, #1
 8006794:	3b01      	subs	r3, #1
 8006796:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800679a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679c:	69b9      	ldr	r1, [r7, #24]
 800679e:	fa91 f1a1 	rbit	r1, r1
 80067a2:	6179      	str	r1, [r7, #20]
  return result;
 80067a4:	6979      	ldr	r1, [r7, #20]
 80067a6:	fab1 f181 	clz	r1, r1
 80067aa:	b2c9      	uxtb	r1, r1
 80067ac:	408b      	lsls	r3, r1
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80067b8:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ba:	6a39      	ldr	r1, [r7, #32]
 80067bc:	fa91 f1a1 	rbit	r1, r1
 80067c0:	61f9      	str	r1, [r7, #28]
  return result;
 80067c2:	69f9      	ldr	r1, [r7, #28]
 80067c4:	fab1 f181 	clz	r1, r1
 80067c8:	b2c9      	uxtb	r1, r1
 80067ca:	408b      	lsls	r3, r1
 80067cc:	4934      	ldr	r1, [pc, #208]	; (80068a0 <HAL_RCC_OscConfig+0x4cc>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d2:	4b34      	ldr	r3, [pc, #208]	; (80068a4 <HAL_RCC_OscConfig+0x4d0>)
 80067d4:	2201      	movs	r2, #1
 80067d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fc fdea 	bl	80033b0 <HAL_GetTick>
 80067dc:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067e0:	f7fc fde6 	bl	80033b0 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b64      	cmp	r3, #100	; 0x64
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e04d      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f2:	4b2b      	ldr	r3, [pc, #172]	; (80068a0 <HAL_RCC_OscConfig+0x4cc>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCC_OscConfig+0x40c>
 80067fe:	e045      	b.n	800688c <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006800:	4b28      	ldr	r3, [pc, #160]	; (80068a4 <HAL_RCC_OscConfig+0x4d0>)
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006806:	f7fc fdd3 	bl	80033b0 <HAL_GetTick>
 800680a:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800680c:	e008      	b.n	8006820 <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800680e:	f7fc fdcf 	bl	80033b0 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	2b64      	cmp	r3, #100	; 0x64
 800681a:	d901      	bls.n	8006820 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e036      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006820:	4b1f      	ldr	r3, [pc, #124]	; (80068a0 <HAL_RCC_OscConfig+0x4cc>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1f0      	bne.n	800680e <HAL_RCC_OscConfig+0x43a>
 800682c:	e02e      	b.n	800688c <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d101      	bne.n	800683a <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e029      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800683a:	4b19      	ldr	r3, [pc, #100]	; (80068a0 <HAL_RCC_OscConfig+0x4cc>)
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	429a      	cmp	r2, r3
 800684c:	d11c      	bne.n	8006888 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006850:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006858:	429a      	cmp	r2, r3
 800685a:	d115      	bne.n	8006888 <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800685c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685e:	099b      	lsrs	r3, r3, #6
 8006860:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006868:	429a      	cmp	r2, r3
 800686a:	d10d      	bne.n	8006888 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800686c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006876:	429a      	cmp	r2, r3
 8006878:	d106      	bne.n	8006888 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800687a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006884:	429a      	cmp	r2, r3
 8006886:	d001      	beq.n	800688c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e000      	b.n	800688e <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3740      	adds	r7, #64	; 0x40
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40007000 	.word	0x40007000
 800689c:	40023870 	.word	0x40023870
 80068a0:	40023800 	.word	0x40023800
 80068a4:	42470060 	.word	0x42470060

080068a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0d2      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068bc:	4b6b      	ldr	r3, [pc, #428]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 030f 	and.w	r3, r3, #15
 80068c4:	683a      	ldr	r2, [r7, #0]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d90c      	bls.n	80068e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ca:	4b68      	ldr	r3, [pc, #416]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068d2:	4b66      	ldr	r3, [pc, #408]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d001      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e0be      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d020      	beq.n	8006932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068fc:	4b5c      	ldr	r3, [pc, #368]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	4a5b      	ldr	r2, [pc, #364]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8006914:	4b56      	ldr	r3, [pc, #344]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	4a55      	ldr	r2, [pc, #340]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 800691a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800691e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006920:	4b53      	ldr	r3, [pc, #332]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	4950      	ldr	r1, [pc, #320]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 800692e:	4313      	orrs	r3, r2
 8006930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d040      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d107      	bne.n	8006956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006946:	4b4a      	ldr	r3, [pc, #296]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d115      	bne.n	800697e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e085      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	2b02      	cmp	r3, #2
 800695c:	d107      	bne.n	800696e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800695e:	4b44      	ldr	r3, [pc, #272]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d109      	bne.n	800697e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e079      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800696e:	4b40      	ldr	r3, [pc, #256]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e071      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800697e:	4b3c      	ldr	r3, [pc, #240]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f023 0203 	bic.w	r2, r3, #3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	4939      	ldr	r1, [pc, #228]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 800698c:	4313      	orrs	r3, r2
 800698e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006990:	f7fc fd0e 	bl	80033b0 <HAL_GetTick>
 8006994:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006996:	e00a      	b.n	80069ae <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006998:	f7fc fd0a 	bl	80033b0 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e059      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ae:	4b30      	ldr	r3, [pc, #192]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 020c 	and.w	r2, r3, #12
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	429a      	cmp	r2, r3
 80069be:	d1eb      	bne.n	8006998 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069c0:	4b2a      	ldr	r3, [pc, #168]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d20c      	bcs.n	80069e8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ce:	4b27      	ldr	r3, [pc, #156]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d6:	4b25      	ldr	r3, [pc, #148]	; (8006a6c <HAL_RCC_ClockConfig+0x1c4>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d001      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e03c      	b.n	8006a62 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d008      	beq.n	8006a06 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069f4:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	491b      	ldr	r1, [pc, #108]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0308 	and.w	r3, r3, #8
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a12:	4b17      	ldr	r3, [pc, #92]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4913      	ldr	r1, [pc, #76]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8006a26:	f000 f82b 	bl	8006a80 <HAL_RCC_GetSysClockFreq>
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	4b10      	ldr	r3, [pc, #64]	; (8006a70 <HAL_RCC_ClockConfig+0x1c8>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a34:	22f0      	movs	r2, #240	; 0xf0
 8006a36:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	fa92 f2a2 	rbit	r2, r2
 8006a3e:	60fa      	str	r2, [r7, #12]
  return result;
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	fab2 f282 	clz	r2, r2
 8006a46:	b2d2      	uxtb	r2, r2
 8006a48:	40d3      	lsrs	r3, r2
 8006a4a:	4a0a      	ldr	r2, [pc, #40]	; (8006a74 <HAL_RCC_ClockConfig+0x1cc>)
 8006a4c:	5cd3      	ldrb	r3, [r2, r3]
 8006a4e:	fa21 f303 	lsr.w	r3, r1, r3
 8006a52:	4a09      	ldr	r2, [pc, #36]	; (8006a78 <HAL_RCC_ClockConfig+0x1d0>)
 8006a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a56:	4b09      	ldr	r3, [pc, #36]	; (8006a7c <HAL_RCC_ClockConfig+0x1d4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fc fc66 	bl	800332c <HAL_InitTick>

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	40023c00 	.word	0x40023c00
 8006a70:	40023800 	.word	0x40023800
 8006a74:	080097e8 	.word	0x080097e8
 8006a78:	20000010 	.word	0x20000010
 8006a7c:	20000014 	.word	0x20000014

08006a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	607b      	str	r3, [r7, #4]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	2300      	movs	r3, #0
 8006a92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a98:	4b67      	ldr	r3, [pc, #412]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 030c 	and.w	r3, r3, #12
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d00d      	beq.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	f200 80bd 	bhi.w	8006c24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <HAL_RCC_GetSysClockFreq+0x34>
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d003      	beq.n	8006aba <HAL_RCC_GetSysClockFreq+0x3a>
 8006ab2:	e0b7      	b.n	8006c24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ab4:	4b61      	ldr	r3, [pc, #388]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ab6:	60bb      	str	r3, [r7, #8]
       break;
 8006ab8:	e0b7      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006aba:	4b61      	ldr	r3, [pc, #388]	; (8006c40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006abc:	60bb      	str	r3, [r7, #8]
      break;
 8006abe:	e0b4      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ac0:	4b5d      	ldr	r3, [pc, #372]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ac8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006aca:	4b5b      	ldr	r3, [pc, #364]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d04d      	beq.n	8006b72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ad6:	4b58      	ldr	r3, [pc, #352]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	099b      	lsrs	r3, r3, #6
 8006adc:	461a      	mov	r2, r3
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006ae6:	f04f 0100 	mov.w	r1, #0
 8006aea:	ea02 0800 	and.w	r8, r2, r0
 8006aee:	ea03 0901 	and.w	r9, r3, r1
 8006af2:	4640      	mov	r0, r8
 8006af4:	4649      	mov	r1, r9
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	014b      	lsls	r3, r1, #5
 8006b00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006b04:	0142      	lsls	r2, r0, #5
 8006b06:	4610      	mov	r0, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	ebb0 0008 	subs.w	r0, r0, r8
 8006b0e:	eb61 0109 	sbc.w	r1, r1, r9
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	018b      	lsls	r3, r1, #6
 8006b1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006b20:	0182      	lsls	r2, r0, #6
 8006b22:	1a12      	subs	r2, r2, r0
 8006b24:	eb63 0301 	sbc.w	r3, r3, r1
 8006b28:	f04f 0000 	mov.w	r0, #0
 8006b2c:	f04f 0100 	mov.w	r1, #0
 8006b30:	00d9      	lsls	r1, r3, #3
 8006b32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b36:	00d0      	lsls	r0, r2, #3
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	eb12 0208 	adds.w	r2, r2, r8
 8006b40:	eb43 0309 	adc.w	r3, r3, r9
 8006b44:	f04f 0000 	mov.w	r0, #0
 8006b48:	f04f 0100 	mov.w	r1, #0
 8006b4c:	0259      	lsls	r1, r3, #9
 8006b4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006b52:	0250      	lsls	r0, r2, #9
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	f7fa faf2 	bl	800114c <__aeabi_uldivmod>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e04a      	b.n	8006c08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b72:	4b31      	ldr	r3, [pc, #196]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	099b      	lsrs	r3, r3, #6
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f04f 0300 	mov.w	r3, #0
 8006b7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006b82:	f04f 0100 	mov.w	r1, #0
 8006b86:	ea02 0400 	and.w	r4, r2, r0
 8006b8a:	ea03 0501 	and.w	r5, r3, r1
 8006b8e:	4620      	mov	r0, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	f04f 0300 	mov.w	r3, #0
 8006b9a:	014b      	lsls	r3, r1, #5
 8006b9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ba0:	0142      	lsls	r2, r0, #5
 8006ba2:	4610      	mov	r0, r2
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	1b00      	subs	r0, r0, r4
 8006ba8:	eb61 0105 	sbc.w	r1, r1, r5
 8006bac:	f04f 0200 	mov.w	r2, #0
 8006bb0:	f04f 0300 	mov.w	r3, #0
 8006bb4:	018b      	lsls	r3, r1, #6
 8006bb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006bba:	0182      	lsls	r2, r0, #6
 8006bbc:	1a12      	subs	r2, r2, r0
 8006bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8006bc2:	f04f 0000 	mov.w	r0, #0
 8006bc6:	f04f 0100 	mov.w	r1, #0
 8006bca:	00d9      	lsls	r1, r3, #3
 8006bcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bd0:	00d0      	lsls	r0, r2, #3
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	1912      	adds	r2, r2, r4
 8006bd8:	eb45 0303 	adc.w	r3, r5, r3
 8006bdc:	f04f 0000 	mov.w	r0, #0
 8006be0:	f04f 0100 	mov.w	r1, #0
 8006be4:	0299      	lsls	r1, r3, #10
 8006be6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006bea:	0290      	lsls	r0, r2, #10
 8006bec:	4602      	mov	r2, r0
 8006bee:	460b      	mov	r3, r1
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	f7fa faa6 	bl	800114c <__aeabi_uldivmod>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4613      	mov	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c08:	4b0b      	ldr	r3, [pc, #44]	; (8006c38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	0c1b      	lsrs	r3, r3, #16
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	3301      	adds	r3, #1
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c20:	60bb      	str	r3, [r7, #8]
      break;
 8006c22:	e002      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c24:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006c26:	60bb      	str	r3, [r7, #8]
      break;
 8006c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006c36:	bf00      	nop
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	00f42400 	.word	0x00f42400
 8006c40:	007a1200 	.word	0x007a1200

08006c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c48:	4b02      	ldr	r3, [pc, #8]	; (8006c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr
 8006c54:	20000010 	.word	0x20000010

08006c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006c5e:	f7ff fff1 	bl	8006c44 <HAL_RCC_GetHCLKFreq>
 8006c62:	4601      	mov	r1, r0
 8006c64:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006c6c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006c70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	fa92 f2a2 	rbit	r2, r2
 8006c78:	603a      	str	r2, [r7, #0]
  return result;
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	fab2 f282 	clz	r2, r2
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	40d3      	lsrs	r3, r2
 8006c84:	4a04      	ldr	r2, [pc, #16]	; (8006c98 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006c86:	5cd3      	ldrb	r3, [r2, r3]
 8006c88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40023800 	.word	0x40023800
 8006c98:	080097f8 	.word	0x080097f8

08006c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8006ca2:	f7ff ffcf 	bl	8006c44 <HAL_RCC_GetHCLKFreq>
 8006ca6:	4601      	mov	r1, r0
 8006ca8:	4b0b      	ldr	r3, [pc, #44]	; (8006cd8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006cb0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8006cb4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	fa92 f2a2 	rbit	r2, r2
 8006cbc:	603a      	str	r2, [r7, #0]
  return result;
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	fab2 f282 	clz	r2, r2
 8006cc4:	b2d2      	uxtb	r2, r2
 8006cc6:	40d3      	lsrs	r3, r2
 8006cc8:	4a04      	ldr	r2, [pc, #16]	; (8006cdc <HAL_RCC_GetPCLK2Freq+0x40>)
 8006cca:	5cd3      	ldrb	r3, [r2, r3]
 8006ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	080097f8 	.word	0x080097f8

08006ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e01d      	b.n	8006d2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fc f872 	bl	8002df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4610      	mov	r0, r2
 8006d20:	f000 fcd2 	bl	80076c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b085      	sub	sp, #20
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0201 	orr.w	r2, r2, #1
 8006d4c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b06      	cmp	r3, #6
 8006d5e:	d007      	beq.n	8006d70 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 0201 	orr.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3714      	adds	r7, #20
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bc80      	pop	{r7}
 8006d7a:	4770      	bx	lr

08006d7c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e01d      	b.n	8006dca <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f815 	bl	8006dd2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3304      	adds	r3, #4
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f000 fc84 	bl	80076c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr

08006de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e01d      	b.n	8006e32 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d106      	bne.n	8006e10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f815 	bl	8006e3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	4619      	mov	r1, r3
 8006e22:	4610      	mov	r0, r2
 8006e24:	f000 fc50 	bl	80076c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b083      	sub	sp, #12
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr

08006e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 ff12 	bl	8007c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a15      	ldr	r2, [pc, #84]	; (8006ec0 <HAL_TIM_PWM_Start+0x74>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d004      	beq.n	8006e78 <HAL_TIM_PWM_Start+0x2c>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a14      	ldr	r2, [pc, #80]	; (8006ec4 <HAL_TIM_PWM_Start+0x78>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d101      	bne.n	8006e7c <HAL_TIM_PWM_Start+0x30>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <HAL_TIM_PWM_Start+0x32>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b06      	cmp	r3, #6
 8006ea2:	d007      	beq.n	8006eb4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0201 	orr.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40010000 	.word	0x40010000
 8006ec4:	40010400 	.word	0x40010400

08006ec8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fed4 	bl	8007c88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a22      	ldr	r2, [pc, #136]	; (8006f70 <HAL_TIM_PWM_Stop+0xa8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <HAL_TIM_PWM_Stop+0x2c>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a21      	ldr	r2, [pc, #132]	; (8006f74 <HAL_TIM_PWM_Stop+0xac>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d101      	bne.n	8006ef8 <HAL_TIM_PWM_Stop+0x30>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <HAL_TIM_PWM_Stop+0x32>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d017      	beq.n	8006f2e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6a1a      	ldr	r2, [r3, #32]
 8006f04:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f08:	4013      	ands	r3, r2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d10f      	bne.n	8006f2e <HAL_TIM_PWM_Stop+0x66>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6a1a      	ldr	r2, [r3, #32]
 8006f14:	f240 4344 	movw	r3, #1092	; 0x444
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d107      	bne.n	8006f2e <HAL_TIM_PWM_Stop+0x66>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6a1a      	ldr	r2, [r3, #32]
 8006f34:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f38:	4013      	ands	r3, r2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10f      	bne.n	8006f5e <HAL_TIM_PWM_Stop+0x96>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6a1a      	ldr	r2, [r3, #32]
 8006f44:	f240 4344 	movw	r3, #1092	; 0x444
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d107      	bne.n	8006f5e <HAL_TIM_PWM_Stop+0x96>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0201 	bic.w	r2, r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	40010000 	.word	0x40010000
 8006f74:	40010400 	.word	0x40010400

08006f78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e083      	b.n	8007094 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7fb ff89 	bl	8002eb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2202      	movs	r2, #2
 8006faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6812      	ldr	r2, [r2, #0]
 8006fb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fbc:	f023 0307 	bic.w	r3, r3, #7
 8006fc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f000 fb7b 	bl	80076c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffa:	f023 0303 	bic.w	r3, r3, #3
 8006ffe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	4313      	orrs	r3, r2
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	4313      	orrs	r3, r2
 8007010:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007018:	f023 030c 	bic.w	r3, r3, #12
 800701c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007024:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	4313      	orrs	r3, r2
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	4313      	orrs	r3, r2
 800703a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	011a      	lsls	r2, r3, #4
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	031b      	lsls	r3, r3, #12
 8007048:	4313      	orrs	r3, r2
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007056:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800705e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	695b      	ldr	r3, [r3, #20]
 8007068:	011b      	lsls	r3, r3, #4
 800706a:	4313      	orrs	r3, r2
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b02      	cmp	r3, #2
 80070b0:	d122      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d11b      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f06f 0202 	mvn.w	r2, #2
 80070c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d003      	beq.n	80070e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fad7 	bl	8007692 <HAL_TIM_IC_CaptureCallback>
 80070e4:	e005      	b.n	80070f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 faca 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fad9 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	2b04      	cmp	r3, #4
 8007104:	d122      	bne.n	800714c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b04      	cmp	r3, #4
 8007112:	d11b      	bne.n	800714c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f06f 0204 	mvn.w	r2, #4
 800711c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2202      	movs	r2, #2
 8007122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 faad 	bl	8007692 <HAL_TIM_IC_CaptureCallback>
 8007138:	e005      	b.n	8007146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 faa0 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 faaf 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b08      	cmp	r3, #8
 8007158:	d122      	bne.n	80071a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b08      	cmp	r3, #8
 8007166:	d11b      	bne.n	80071a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f06f 0208 	mvn.w	r2, #8
 8007170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2204      	movs	r2, #4
 8007176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa83 	bl	8007692 <HAL_TIM_IC_CaptureCallback>
 800718c:	e005      	b.n	800719a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fa76 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 fa85 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f003 0310 	and.w	r3, r3, #16
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	d122      	bne.n	80071f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f003 0310 	and.w	r3, r3, #16
 80071b8:	2b10      	cmp	r3, #16
 80071ba:	d11b      	bne.n	80071f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f06f 0210 	mvn.w	r2, #16
 80071c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2208      	movs	r2, #8
 80071ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fa59 	bl	8007692 <HAL_TIM_IC_CaptureCallback>
 80071e0:	e005      	b.n	80071ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa4c 	bl	8007680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fa5b 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d10e      	bne.n	8007220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b01      	cmp	r3, #1
 800720e:	d107      	bne.n	8007220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f06f 0201 	mvn.w	r2, #1
 8007218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7fa fd8a 	bl	8001d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800722a:	2b80      	cmp	r3, #128	; 0x80
 800722c:	d10e      	bne.n	800724c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007238:	2b80      	cmp	r3, #128	; 0x80
 800723a:	d107      	bne.n	800724c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fe4b 	bl	8007ee2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d10e      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007264:	2b40      	cmp	r3, #64	; 0x40
 8007266:	d107      	bne.n	8007278 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa1f 	bl	80076b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b20      	cmp	r3, #32
 8007284:	d10e      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b20      	cmp	r3, #32
 8007292:	d107      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0220 	mvn.w	r2, #32
 800729c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fe16 	bl	8007ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e04e      	b.n	8007364 <HAL_TIM_OC_ConfigChannel+0xb8>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2202      	movs	r2, #2
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b0c      	cmp	r3, #12
 80072da:	d839      	bhi.n	8007350 <HAL_TIM_OC_ConfigChannel+0xa4>
 80072dc:	a201      	add	r2, pc, #4	; (adr r2, 80072e4 <HAL_TIM_OC_ConfigChannel+0x38>)
 80072de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e2:	bf00      	nop
 80072e4:	08007319 	.word	0x08007319
 80072e8:	08007351 	.word	0x08007351
 80072ec:	08007351 	.word	0x08007351
 80072f0:	08007351 	.word	0x08007351
 80072f4:	08007327 	.word	0x08007327
 80072f8:	08007351 	.word	0x08007351
 80072fc:	08007351 	.word	0x08007351
 8007300:	08007351 	.word	0x08007351
 8007304:	08007335 	.word	0x08007335
 8007308:	08007351 	.word	0x08007351
 800730c:	08007351 	.word	0x08007351
 8007310:	08007351 	.word	0x08007351
 8007314:	08007343 	.word	0x08007343
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68b9      	ldr	r1, [r7, #8]
 800731e:	4618      	mov	r0, r3
 8007320:	f000 fa70 	bl	8007804 <TIM_OC1_SetConfig>
      break;
 8007324:	e015      	b.n	8007352 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	4618      	mov	r0, r3
 800732e:	f000 fad9 	bl	80078e4 <TIM_OC2_SetConfig>
      break;
 8007332:	e00e      	b.n	8007352 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fb46 	bl	80079cc <TIM_OC3_SetConfig>
      break;
 8007340:	e007      	b.n	8007352 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68b9      	ldr	r1, [r7, #8]
 8007348:	4618      	mov	r0, r3
 800734a:	f000 fbb3 	bl	8007ab4 <TIM_OC4_SetConfig>
      break;
 800734e:	e000      	b.n	8007352 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8007350:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007382:	2302      	movs	r3, #2
 8007384:	e0b4      	b.n	80074f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2202      	movs	r2, #2
 8007392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b0c      	cmp	r3, #12
 800739a:	f200 809f 	bhi.w	80074dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800739e:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	080073d9 	.word	0x080073d9
 80073a8:	080074dd 	.word	0x080074dd
 80073ac:	080074dd 	.word	0x080074dd
 80073b0:	080074dd 	.word	0x080074dd
 80073b4:	08007419 	.word	0x08007419
 80073b8:	080074dd 	.word	0x080074dd
 80073bc:	080074dd 	.word	0x080074dd
 80073c0:	080074dd 	.word	0x080074dd
 80073c4:	0800745b 	.word	0x0800745b
 80073c8:	080074dd 	.word	0x080074dd
 80073cc:	080074dd 	.word	0x080074dd
 80073d0:	080074dd 	.word	0x080074dd
 80073d4:	0800749b 	.word	0x0800749b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 fa10 	bl	8007804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0208 	orr.w	r2, r2, #8
 80073f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0204 	bic.w	r2, r2, #4
 8007402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6999      	ldr	r1, [r3, #24]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	691a      	ldr	r2, [r3, #16]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	619a      	str	r2, [r3, #24]
      break;
 8007416:	e062      	b.n	80074de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68b9      	ldr	r1, [r7, #8]
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fa60 	bl	80078e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	699a      	ldr	r2, [r3, #24]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6999      	ldr	r1, [r3, #24]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	021a      	lsls	r2, r3, #8
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	430a      	orrs	r2, r1
 8007456:	619a      	str	r2, [r3, #24]
      break;
 8007458:	e041      	b.n	80074de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68b9      	ldr	r1, [r7, #8]
 8007460:	4618      	mov	r0, r3
 8007462:	f000 fab3 	bl	80079cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69da      	ldr	r2, [r3, #28]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f042 0208 	orr.w	r2, r2, #8
 8007474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0204 	bic.w	r2, r2, #4
 8007484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69d9      	ldr	r1, [r3, #28]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	61da      	str	r2, [r3, #28]
      break;
 8007498:	e021      	b.n	80074de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68b9      	ldr	r1, [r7, #8]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 fb07 	bl	8007ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69da      	ldr	r2, [r3, #28]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69da      	ldr	r2, [r3, #28]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69d9      	ldr	r1, [r3, #28]
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	021a      	lsls	r2, r3, #8
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	61da      	str	r2, [r3, #28]
      break;
 80074da:	e000      	b.n	80074de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80074dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_TIM_ConfigClockSource+0x18>
 800750c:	2302      	movs	r3, #2
 800750e:	e0b3      	b.n	8007678 <HAL_TIM_ConfigClockSource+0x180>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800752e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007536:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007548:	d03e      	beq.n	80075c8 <HAL_TIM_ConfigClockSource+0xd0>
 800754a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800754e:	f200 8087 	bhi.w	8007660 <HAL_TIM_ConfigClockSource+0x168>
 8007552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007556:	f000 8085 	beq.w	8007664 <HAL_TIM_ConfigClockSource+0x16c>
 800755a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755e:	d87f      	bhi.n	8007660 <HAL_TIM_ConfigClockSource+0x168>
 8007560:	2b70      	cmp	r3, #112	; 0x70
 8007562:	d01a      	beq.n	800759a <HAL_TIM_ConfigClockSource+0xa2>
 8007564:	2b70      	cmp	r3, #112	; 0x70
 8007566:	d87b      	bhi.n	8007660 <HAL_TIM_ConfigClockSource+0x168>
 8007568:	2b60      	cmp	r3, #96	; 0x60
 800756a:	d050      	beq.n	800760e <HAL_TIM_ConfigClockSource+0x116>
 800756c:	2b60      	cmp	r3, #96	; 0x60
 800756e:	d877      	bhi.n	8007660 <HAL_TIM_ConfigClockSource+0x168>
 8007570:	2b50      	cmp	r3, #80	; 0x50
 8007572:	d03c      	beq.n	80075ee <HAL_TIM_ConfigClockSource+0xf6>
 8007574:	2b50      	cmp	r3, #80	; 0x50
 8007576:	d873      	bhi.n	8007660 <HAL_TIM_ConfigClockSource+0x168>
 8007578:	2b40      	cmp	r3, #64	; 0x40
 800757a:	d058      	beq.n	800762e <HAL_TIM_ConfigClockSource+0x136>
 800757c:	2b40      	cmp	r3, #64	; 0x40
 800757e:	d86f      	bhi.n	8007660 <HAL_TIM_ConfigClockSource+0x168>
 8007580:	2b30      	cmp	r3, #48	; 0x30
 8007582:	d064      	beq.n	800764e <HAL_TIM_ConfigClockSource+0x156>
 8007584:	2b30      	cmp	r3, #48	; 0x30
 8007586:	d86b      	bhi.n	8007660 <HAL_TIM_ConfigClockSource+0x168>
 8007588:	2b20      	cmp	r3, #32
 800758a:	d060      	beq.n	800764e <HAL_TIM_ConfigClockSource+0x156>
 800758c:	2b20      	cmp	r3, #32
 800758e:	d867      	bhi.n	8007660 <HAL_TIM_ConfigClockSource+0x168>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d05c      	beq.n	800764e <HAL_TIM_ConfigClockSource+0x156>
 8007594:	2b10      	cmp	r3, #16
 8007596:	d05a      	beq.n	800764e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007598:	e062      	b.n	8007660 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	6899      	ldr	r1, [r3, #8]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685a      	ldr	r2, [r3, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f000 fb4e 	bl	8007c4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	609a      	str	r2, [r3, #8]
      break;
 80075c6:	e04e      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6818      	ldr	r0, [r3, #0]
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	6899      	ldr	r1, [r3, #8]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685a      	ldr	r2, [r3, #4]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f000 fb37 	bl	8007c4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075ea:	609a      	str	r2, [r3, #8]
      break;
 80075ec:	e03b      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	6859      	ldr	r1, [r3, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f000 faae 	bl	8007b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2150      	movs	r1, #80	; 0x50
 8007606:	4618      	mov	r0, r3
 8007608:	f000 fb05 	bl	8007c16 <TIM_ITRx_SetConfig>
      break;
 800760c:	e02b      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6818      	ldr	r0, [r3, #0]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	6859      	ldr	r1, [r3, #4]
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	461a      	mov	r2, r3
 800761c:	f000 facc 	bl	8007bb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2160      	movs	r1, #96	; 0x60
 8007626:	4618      	mov	r0, r3
 8007628:	f000 faf5 	bl	8007c16 <TIM_ITRx_SetConfig>
      break;
 800762c:	e01b      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6818      	ldr	r0, [r3, #0]
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	6859      	ldr	r1, [r3, #4]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	461a      	mov	r2, r3
 800763c:	f000 fa8e 	bl	8007b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2140      	movs	r1, #64	; 0x40
 8007646:	4618      	mov	r0, r3
 8007648:	f000 fae5 	bl	8007c16 <TIM_ITRx_SetConfig>
      break;
 800764c:	e00b      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f000 fadc 	bl	8007c16 <TIM_ITRx_SetConfig>
      break;
 800765e:	e002      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007660:	bf00      	nop
 8007662:	e000      	b.n	8007666 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007664:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr

08007692 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800769a:	bf00      	nop
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr

080076a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bc80      	pop	{r7}
 80076b4:	4770      	bx	lr

080076b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076b6:	b480      	push	{r7}
 80076b8:	b083      	sub	sp, #12
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076be:	bf00      	nop
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bc80      	pop	{r7}
 80076c6:	4770      	bx	lr

080076c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a3f      	ldr	r2, [pc, #252]	; (80077d8 <TIM_Base_SetConfig+0x110>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d013      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e6:	d00f      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a3c      	ldr	r2, [pc, #240]	; (80077dc <TIM_Base_SetConfig+0x114>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00b      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a3b      	ldr	r2, [pc, #236]	; (80077e0 <TIM_Base_SetConfig+0x118>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a3a      	ldr	r2, [pc, #232]	; (80077e4 <TIM_Base_SetConfig+0x11c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a39      	ldr	r2, [pc, #228]	; (80077e8 <TIM_Base_SetConfig+0x120>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d108      	bne.n	800771a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a2e      	ldr	r2, [pc, #184]	; (80077d8 <TIM_Base_SetConfig+0x110>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d02b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007728:	d027      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a2b      	ldr	r2, [pc, #172]	; (80077dc <TIM_Base_SetConfig+0x114>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d023      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a2a      	ldr	r2, [pc, #168]	; (80077e0 <TIM_Base_SetConfig+0x118>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d01f      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a29      	ldr	r2, [pc, #164]	; (80077e4 <TIM_Base_SetConfig+0x11c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a28      	ldr	r2, [pc, #160]	; (80077e8 <TIM_Base_SetConfig+0x120>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d017      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a27      	ldr	r2, [pc, #156]	; (80077ec <TIM_Base_SetConfig+0x124>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a26      	ldr	r2, [pc, #152]	; (80077f0 <TIM_Base_SetConfig+0x128>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00f      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a25      	ldr	r2, [pc, #148]	; (80077f4 <TIM_Base_SetConfig+0x12c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a24      	ldr	r2, [pc, #144]	; (80077f8 <TIM_Base_SetConfig+0x130>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d007      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a23      	ldr	r2, [pc, #140]	; (80077fc <TIM_Base_SetConfig+0x134>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a22      	ldr	r2, [pc, #136]	; (8007800 <TIM_Base_SetConfig+0x138>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d108      	bne.n	800778c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a09      	ldr	r2, [pc, #36]	; (80077d8 <TIM_Base_SetConfig+0x110>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_Base_SetConfig+0xf8>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a0b      	ldr	r2, [pc, #44]	; (80077e8 <TIM_Base_SetConfig+0x120>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d103      	bne.n	80077c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	615a      	str	r2, [r3, #20]
}
 80077ce:	bf00      	nop
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bc80      	pop	{r7}
 80077d6:	4770      	bx	lr
 80077d8:	40010000 	.word	0x40010000
 80077dc:	40000400 	.word	0x40000400
 80077e0:	40000800 	.word	0x40000800
 80077e4:	40000c00 	.word	0x40000c00
 80077e8:	40010400 	.word	0x40010400
 80077ec:	40014000 	.word	0x40014000
 80077f0:	40014400 	.word	0x40014400
 80077f4:	40014800 	.word	0x40014800
 80077f8:	40001800 	.word	0x40001800
 80077fc:	40001c00 	.word	0x40001c00
 8007800:	40002000 	.word	0x40002000

08007804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007804:	b480      	push	{r7}
 8007806:	b087      	sub	sp, #28
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f023 0201 	bic.w	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f023 0302 	bic.w	r3, r3, #2
 800784c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	4313      	orrs	r3, r2
 8007856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a20      	ldr	r2, [pc, #128]	; (80078dc <TIM_OC1_SetConfig+0xd8>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d003      	beq.n	8007868 <TIM_OC1_SetConfig+0x64>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a1f      	ldr	r2, [pc, #124]	; (80078e0 <TIM_OC1_SetConfig+0xdc>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d10c      	bne.n	8007882 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f023 0308 	bic.w	r3, r3, #8
 800786e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f023 0304 	bic.w	r3, r3, #4
 8007880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a15      	ldr	r2, [pc, #84]	; (80078dc <TIM_OC1_SetConfig+0xd8>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d003      	beq.n	8007892 <TIM_OC1_SetConfig+0x8e>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a14      	ldr	r2, [pc, #80]	; (80078e0 <TIM_OC1_SetConfig+0xdc>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d111      	bne.n	80078b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	695b      	ldr	r3, [r3, #20]
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	621a      	str	r2, [r3, #32]
}
 80078d0:	bf00      	nop
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bc80      	pop	{r7}
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	40010000 	.word	0x40010000
 80078e0:	40010400 	.word	0x40010400

080078e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	f023 0210 	bic.w	r2, r3, #16
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800791a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	021b      	lsls	r3, r3, #8
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	4313      	orrs	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f023 0320 	bic.w	r3, r3, #32
 800792e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4313      	orrs	r3, r2
 800793a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a21      	ldr	r2, [pc, #132]	; (80079c4 <TIM_OC2_SetConfig+0xe0>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_OC2_SetConfig+0x68>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a20      	ldr	r2, [pc, #128]	; (80079c8 <TIM_OC2_SetConfig+0xe4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d10d      	bne.n	8007968 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007966:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a16      	ldr	r2, [pc, #88]	; (80079c4 <TIM_OC2_SetConfig+0xe0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d003      	beq.n	8007978 <TIM_OC2_SetConfig+0x94>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a15      	ldr	r2, [pc, #84]	; (80079c8 <TIM_OC2_SetConfig+0xe4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d113      	bne.n	80079a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800797e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007986:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	4313      	orrs	r3, r2
 8007992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	4313      	orrs	r3, r2
 800799e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	621a      	str	r2, [r3, #32]
}
 80079ba:	bf00      	nop
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	bc80      	pop	{r7}
 80079c2:	4770      	bx	lr
 80079c4:	40010000 	.word	0x40010000
 80079c8:	40010400 	.word	0x40010400

080079cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	69db      	ldr	r3, [r3, #28]
 80079f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	021b      	lsls	r3, r3, #8
 8007a1c:	697a      	ldr	r2, [r7, #20]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a21      	ldr	r2, [pc, #132]	; (8007aac <TIM_OC3_SetConfig+0xe0>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d003      	beq.n	8007a32 <TIM_OC3_SetConfig+0x66>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <TIM_OC3_SetConfig+0xe4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d10d      	bne.n	8007a4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	021b      	lsls	r3, r3, #8
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a16      	ldr	r2, [pc, #88]	; (8007aac <TIM_OC3_SetConfig+0xe0>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d003      	beq.n	8007a5e <TIM_OC3_SetConfig+0x92>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a15      	ldr	r2, [pc, #84]	; (8007ab0 <TIM_OC3_SetConfig+0xe4>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d113      	bne.n	8007a86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	011b      	lsls	r3, r3, #4
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	011b      	lsls	r3, r3, #4
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	697a      	ldr	r2, [r7, #20]
 8007a9e:	621a      	str	r2, [r3, #32]
}
 8007aa0:	bf00      	nop
 8007aa2:	371c      	adds	r7, #28
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000
 8007ab0:	40010400 	.word	0x40010400

08007ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b087      	sub	sp, #28
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	021b      	lsls	r3, r3, #8
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	031b      	lsls	r3, r3, #12
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a11      	ldr	r2, [pc, #68]	; (8007b54 <TIM_OC4_SetConfig+0xa0>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_OC4_SetConfig+0x68>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a10      	ldr	r2, [pc, #64]	; (8007b58 <TIM_OC4_SetConfig+0xa4>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d109      	bne.n	8007b30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	019b      	lsls	r3, r3, #6
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	685a      	ldr	r2, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	621a      	str	r2, [r3, #32]
}
 8007b4a:	bf00      	nop
 8007b4c:	371c      	adds	r7, #28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr
 8007b54:	40010000 	.word	0x40010000
 8007b58:	40010400 	.word	0x40010400

08007b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	f023 0201 	bic.w	r2, r3, #1
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	011b      	lsls	r3, r3, #4
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f023 030a 	bic.w	r3, r3, #10
 8007b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	697a      	ldr	r2, [r7, #20]
 8007bac:	621a      	str	r2, [r3, #32]
}
 8007bae:	bf00      	nop
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr

08007bb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	f023 0210 	bic.w	r2, r3, #16
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007be2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	031b      	lsls	r3, r3, #12
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	621a      	str	r2, [r3, #32]
}
 8007c0c:	bf00      	nop
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr

08007c16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b085      	sub	sp, #20
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f043 0307 	orr.w	r3, r3, #7
 8007c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	609a      	str	r2, [r3, #8]
}
 8007c40:	bf00      	nop
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr

08007c4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b087      	sub	sp, #28
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	607a      	str	r2, [r7, #4]
 8007c56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	021a      	lsls	r2, r3, #8
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	609a      	str	r2, [r3, #8]
}
 8007c7e:	bf00      	nop
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bc80      	pop	{r7}
 8007c86:	4770      	bx	lr

08007c88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f003 031f 	and.w	r3, r3, #31
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a1a      	ldr	r2, [r3, #32]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	43db      	mvns	r3, r3
 8007caa:	401a      	ands	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6a1a      	ldr	r2, [r3, #32]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f003 031f 	and.w	r3, r3, #31
 8007cba:	6879      	ldr	r1, [r7, #4]
 8007cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	621a      	str	r2, [r3, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bc80      	pop	{r7}
 8007cce:	4770      	bx	lr

08007cd0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2204      	movs	r2, #4
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f906 	bl	8007ef4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cf6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2b06      	cmp	r3, #6
 8007d08:	d007      	beq.n	8007d1a <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0201 	orr.w	r2, r2, #1
 8007d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2200      	movs	r2, #0
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 f8dc 	bl	8007ef4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6a1a      	ldr	r2, [r3, #32]
 8007d42:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d46:	4013      	ands	r3, r2
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10f      	bne.n	8007d6c <HAL_TIMEx_PWMN_Stop+0x48>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6a1a      	ldr	r2, [r3, #32]
 8007d52:	f240 4344 	movw	r3, #1092	; 0x444
 8007d56:	4013      	ands	r3, r2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d107      	bne.n	8007d6c <HAL_TIMEx_PWMN_Stop+0x48>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6a1a      	ldr	r2, [r3, #32]
 8007d72:	f241 1311 	movw	r3, #4369	; 0x1111
 8007d76:	4013      	ands	r3, r2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10f      	bne.n	8007d9c <HAL_TIMEx_PWMN_Stop+0x78>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6a1a      	ldr	r2, [r3, #32]
 8007d82:	f240 4344 	movw	r3, #1092	; 0x444
 8007d86:	4013      	ands	r3, r2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d107      	bne.n	8007d9c <HAL_TIMEx_PWMN_Stop+0x78>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0201 	bic.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d101      	bne.n	8007dbe <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dba:	2302      	movs	r3, #2
 8007dbc:	e032      	b.n	8007e24 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr

08007e2e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e2e:	b480      	push	{r7}
 8007e30:	b085      	sub	sp, #20
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d101      	bne.n	8007e4a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e46:	2302      	movs	r3, #2
 8007e48:	e03d      	b.n	8007ec6 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr

08007ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bc80      	pop	{r7}
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bc80      	pop	{r7}
 8007ef2:	4770      	bx	lr

08007ef4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f003 031f 	and.w	r3, r3, #31
 8007f06:	2204      	movs	r2, #4
 8007f08:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a1a      	ldr	r2, [r3, #32]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	43db      	mvns	r3, r3
 8007f16:	401a      	ands	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1a      	ldr	r2, [r3, #32]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	621a      	str	r2, [r3, #32]
}
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr

08007f3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e03f      	b.n	8007fce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d106      	bne.n	8007f68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f7fb f87a 	bl	800305c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2224      	movs	r2, #36	; 0x24
 8007f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 fa63 	bl	800844c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	695a      	ldr	r2, [r3, #20]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2220      	movs	r2, #32
 8007fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
	...

08007fd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10d      	bne.n	800802a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	f003 0320 	and.w	r3, r3, #32
 8008014:	2b00      	cmp	r3, #0
 8008016:	d008      	beq.n	800802a <HAL_UART_IRQHandler+0x52>
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f991 	bl	800834a <UART_Receive_IT>
      return;
 8008028:	e0d0      	b.n	80081cc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 80b0 	beq.w	8008192 <HAL_UART_IRQHandler+0x1ba>
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d105      	bne.n	8008048 <HAL_UART_IRQHandler+0x70>
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 80a5 	beq.w	8008192 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <HAL_UART_IRQHandler+0x90>
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008058:	2b00      	cmp	r3, #0
 800805a:	d005      	beq.n	8008068 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008060:	f043 0201 	orr.w	r2, r3, #1
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	f003 0304 	and.w	r3, r3, #4
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <HAL_UART_IRQHandler+0xb0>
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d005      	beq.n	8008088 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008080:	f043 0202 	orr.w	r2, r3, #2
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00a      	beq.n	80080a8 <HAL_UART_IRQHandler+0xd0>
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	d005      	beq.n	80080a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a0:	f043 0204 	orr.w	r2, r3, #4
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	f003 0308 	and.w	r3, r3, #8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00f      	beq.n	80080d2 <HAL_UART_IRQHandler+0xfa>
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d104      	bne.n	80080c6 <HAL_UART_IRQHandler+0xee>
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f003 0301 	and.w	r3, r3, #1
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d005      	beq.n	80080d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ca:	f043 0208 	orr.w	r2, r3, #8
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d077      	beq.n	80081ca <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d007      	beq.n	80080f4 <HAL_UART_IRQHandler+0x11c>
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	f003 0320 	and.w	r3, r3, #32
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f92b 	bl	800834a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fe:	2b40      	cmp	r3, #64	; 0x40
 8008100:	bf0c      	ite	eq
 8008102:	2301      	moveq	r3, #1
 8008104:	2300      	movne	r3, #0
 8008106:	b2db      	uxtb	r3, r3
 8008108:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	f003 0308 	and.w	r3, r3, #8
 8008112:	2b00      	cmp	r3, #0
 8008114:	d102      	bne.n	800811c <HAL_UART_IRQHandler+0x144>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d031      	beq.n	8008180 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f876 	bl	800820e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800812c:	2b40      	cmp	r3, #64	; 0x40
 800812e:	d123      	bne.n	8008178 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695a      	ldr	r2, [r3, #20]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800813e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008144:	2b00      	cmp	r3, #0
 8008146:	d013      	beq.n	8008170 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814c:	4a21      	ldr	r2, [pc, #132]	; (80081d4 <HAL_UART_IRQHandler+0x1fc>)
 800814e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008154:	4618      	mov	r0, r3
 8008156:	f7fc f8af 	bl	80042b8 <HAL_DMA_Abort_IT>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d016      	beq.n	800818e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800816a:	4610      	mov	r0, r2
 800816c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816e:	e00e      	b.n	800818e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f843 	bl	80081fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008176:	e00a      	b.n	800818e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f83f 	bl	80081fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800817e:	e006      	b.n	800818e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f83b 	bl	80081fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800818c:	e01d      	b.n	80081ca <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800818e:	bf00      	nop
    return;
 8008190:	e01b      	b.n	80081ca <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008198:	2b00      	cmp	r3, #0
 800819a:	d008      	beq.n	80081ae <HAL_UART_IRQHandler+0x1d6>
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f862 	bl	8008270 <UART_Transmit_IT>
    return;
 80081ac:	e00e      	b.n	80081cc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d009      	beq.n	80081cc <HAL_UART_IRQHandler+0x1f4>
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d004      	beq.n	80081cc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f8a9 	bl	800831a <UART_EndTransmit_IT>
    return;
 80081c8:	e000      	b.n	80081cc <HAL_UART_IRQHandler+0x1f4>
    return;
 80081ca:	bf00      	nop
  }
}
 80081cc:	3720      	adds	r7, #32
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	08008249 	.word	0x08008249

080081d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bc80      	pop	{r7}
 80081e8:	4770      	bx	lr

080081ea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bc80      	pop	{r7}
 80081fa:	4770      	bx	lr

080081fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	bc80      	pop	{r7}
 800820c:	4770      	bx	lr

0800820e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008224:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	695a      	ldr	r2, [r3, #20]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 0201 	bic.w	r2, r2, #1
 8008234:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2220      	movs	r2, #32
 800823a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800823e:	bf00      	nop
 8008240:	370c      	adds	r7, #12
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr

08008248 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008254:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f7ff ffca 	bl	80081fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008268:	bf00      	nop
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b21      	cmp	r3, #33	; 0x21
 8008282:	d144      	bne.n	800830e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828c:	d11a      	bne.n	80082c4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	461a      	mov	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082a2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d105      	bne.n	80082b8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	1c9a      	adds	r2, r3, #2
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	621a      	str	r2, [r3, #32]
 80082b6:	e00e      	b.n	80082d6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	1c5a      	adds	r2, r3, #1
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	621a      	str	r2, [r3, #32]
 80082c2:	e008      	b.n	80082d6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	1c59      	adds	r1, r3, #1
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	6211      	str	r1, [r2, #32]
 80082ce:	781a      	ldrb	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082da:	b29b      	uxth	r3, r3
 80082dc:	3b01      	subs	r3, #1
 80082de:	b29b      	uxth	r3, r3
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	4619      	mov	r1, r3
 80082e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10f      	bne.n	800830a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68da      	ldr	r2, [r3, #12]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68da      	ldr	r2, [r3, #12]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008308:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	e000      	b.n	8008310 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800830e:	2302      	movs	r3, #2
  }
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	bc80      	pop	{r7}
 8008318:	4770      	bx	lr

0800831a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008330:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2220      	movs	r2, #32
 8008336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff ff4c 	bl	80081d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b22      	cmp	r3, #34	; 0x22
 800835c:	d171      	bne.n	8008442 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008366:	d123      	bne.n	80083b0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10e      	bne.n	8008394 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	b29b      	uxth	r3, r3
 800837e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008382:	b29a      	uxth	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838c:	1c9a      	adds	r2, r3, #2
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	629a      	str	r2, [r3, #40]	; 0x28
 8008392:	e029      	b.n	80083e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	b29b      	uxth	r3, r3
 800839c:	b2db      	uxtb	r3, r3
 800839e:	b29a      	uxth	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	629a      	str	r2, [r3, #40]	; 0x28
 80083ae:	e01b      	b.n	80083e8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10a      	bne.n	80083ce <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6858      	ldr	r0, [r3, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	1c59      	adds	r1, r3, #1
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6291      	str	r1, [r2, #40]	; 0x28
 80083c8:	b2c2      	uxtb	r2, r0
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	e00c      	b.n	80083e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	b2da      	uxtb	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	1c58      	adds	r0, r3, #1
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	6288      	str	r0, [r1, #40]	; 0x28
 80083e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80083e4:	b2d2      	uxtb	r2, r2
 80083e6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	3b01      	subs	r3, #1
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	4619      	mov	r1, r3
 80083f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d120      	bne.n	800843e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68da      	ldr	r2, [r3, #12]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 0220 	bic.w	r2, r2, #32
 800840a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68da      	ldr	r2, [r3, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800841a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	695a      	ldr	r2, [r3, #20]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 0201 	bic.w	r2, r2, #1
 800842a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff fed8 	bl	80081ea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800843a:	2300      	movs	r3, #0
 800843c:	e002      	b.n	8008444 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	e000      	b.n	8008444 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008442:	2302      	movs	r3, #2
  }
}
 8008444:	4618      	mov	r0, r3
 8008446:	3710      	adds	r7, #16
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68da      	ldr	r2, [r3, #12]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	430a      	orrs	r2, r1
 8008468:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	689a      	ldr	r2, [r3, #8]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	4313      	orrs	r3, r2
 8008480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800848c:	f023 030c 	bic.w	r3, r3, #12
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	6812      	ldr	r2, [r2, #0]
 8008494:	68f9      	ldr	r1, [r7, #12]
 8008496:	430b      	orrs	r3, r1
 8008498:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	699a      	ldr	r2, [r3, #24]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	430a      	orrs	r2, r1
 80084ae:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b8:	f040 80aa 	bne.w	8008610 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4aa9      	ldr	r2, [pc, #676]	; (8008768 <UART_SetConfig+0x31c>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d004      	beq.n	80084d0 <UART_SetConfig+0x84>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4aa8      	ldr	r2, [pc, #672]	; (800876c <UART_SetConfig+0x320>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d14f      	bne.n	8008570 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80084d0:	f7fe fbe4 	bl	8006c9c <HAL_RCC_GetPCLK2Freq>
 80084d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	4613      	mov	r3, r2
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	4413      	add	r3, r2
 80084de:	009a      	lsls	r2, r3, #2
 80084e0:	441a      	add	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ec:	4aa0      	ldr	r2, [pc, #640]	; (8008770 <UART_SetConfig+0x324>)
 80084ee:	fba2 2303 	umull	r2, r3, r2, r3
 80084f2:	095b      	lsrs	r3, r3, #5
 80084f4:	0119      	lsls	r1, r3, #4
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009a      	lsls	r2, r3, #2
 8008500:	441a      	add	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	fbb2 f2f3 	udiv	r2, r2, r3
 800850c:	4b98      	ldr	r3, [pc, #608]	; (8008770 <UART_SetConfig+0x324>)
 800850e:	fba3 0302 	umull	r0, r3, r3, r2
 8008512:	095b      	lsrs	r3, r3, #5
 8008514:	2064      	movs	r0, #100	; 0x64
 8008516:	fb00 f303 	mul.w	r3, r0, r3
 800851a:	1ad3      	subs	r3, r2, r3
 800851c:	00db      	lsls	r3, r3, #3
 800851e:	3332      	adds	r3, #50	; 0x32
 8008520:	4a93      	ldr	r2, [pc, #588]	; (8008770 <UART_SetConfig+0x324>)
 8008522:	fba2 2303 	umull	r2, r3, r2, r3
 8008526:	095b      	lsrs	r3, r3, #5
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800852e:	4419      	add	r1, r3
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	4613      	mov	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	009a      	lsls	r2, r3, #2
 800853a:	441a      	add	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	005b      	lsls	r3, r3, #1
 8008542:	fbb2 f2f3 	udiv	r2, r2, r3
 8008546:	4b8a      	ldr	r3, [pc, #552]	; (8008770 <UART_SetConfig+0x324>)
 8008548:	fba3 0302 	umull	r0, r3, r3, r2
 800854c:	095b      	lsrs	r3, r3, #5
 800854e:	2064      	movs	r0, #100	; 0x64
 8008550:	fb00 f303 	mul.w	r3, r0, r3
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	3332      	adds	r3, #50	; 0x32
 800855a:	4a85      	ldr	r2, [pc, #532]	; (8008770 <UART_SetConfig+0x324>)
 800855c:	fba2 2303 	umull	r2, r3, r2, r3
 8008560:	095b      	lsrs	r3, r3, #5
 8008562:	f003 0207 	and.w	r2, r3, #7
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	440a      	add	r2, r1
 800856c:	609a      	str	r2, [r3, #8]
 800856e:	e0f7      	b.n	8008760 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008570:	f7fe fb72 	bl	8006c58 <HAL_RCC_GetPCLK1Freq>
 8008574:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	4613      	mov	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	4413      	add	r3, r2
 800857e:	009a      	lsls	r2, r3, #2
 8008580:	441a      	add	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	fbb2 f3f3 	udiv	r3, r2, r3
 800858c:	4a78      	ldr	r2, [pc, #480]	; (8008770 <UART_SetConfig+0x324>)
 800858e:	fba2 2303 	umull	r2, r3, r2, r3
 8008592:	095b      	lsrs	r3, r3, #5
 8008594:	0119      	lsls	r1, r3, #4
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	4613      	mov	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	009a      	lsls	r2, r3, #2
 80085a0:	441a      	add	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80085ac:	4b70      	ldr	r3, [pc, #448]	; (8008770 <UART_SetConfig+0x324>)
 80085ae:	fba3 0302 	umull	r0, r3, r3, r2
 80085b2:	095b      	lsrs	r3, r3, #5
 80085b4:	2064      	movs	r0, #100	; 0x64
 80085b6:	fb00 f303 	mul.w	r3, r0, r3
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	3332      	adds	r3, #50	; 0x32
 80085c0:	4a6b      	ldr	r2, [pc, #428]	; (8008770 <UART_SetConfig+0x324>)
 80085c2:	fba2 2303 	umull	r2, r3, r2, r3
 80085c6:	095b      	lsrs	r3, r3, #5
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085ce:	4419      	add	r1, r3
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	009a      	lsls	r2, r3, #2
 80085da:	441a      	add	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80085e6:	4b62      	ldr	r3, [pc, #392]	; (8008770 <UART_SetConfig+0x324>)
 80085e8:	fba3 0302 	umull	r0, r3, r3, r2
 80085ec:	095b      	lsrs	r3, r3, #5
 80085ee:	2064      	movs	r0, #100	; 0x64
 80085f0:	fb00 f303 	mul.w	r3, r0, r3
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	3332      	adds	r3, #50	; 0x32
 80085fa:	4a5d      	ldr	r2, [pc, #372]	; (8008770 <UART_SetConfig+0x324>)
 80085fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008600:	095b      	lsrs	r3, r3, #5
 8008602:	f003 0207 	and.w	r2, r3, #7
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	440a      	add	r2, r1
 800860c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800860e:	e0a7      	b.n	8008760 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a54      	ldr	r2, [pc, #336]	; (8008768 <UART_SetConfig+0x31c>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d004      	beq.n	8008624 <UART_SetConfig+0x1d8>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a53      	ldr	r2, [pc, #332]	; (800876c <UART_SetConfig+0x320>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d14e      	bne.n	80086c2 <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008624:	f7fe fb3a 	bl	8006c9c <HAL_RCC_GetPCLK2Freq>
 8008628:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009a      	lsls	r2, r3, #2
 8008634:	441a      	add	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008640:	4a4b      	ldr	r2, [pc, #300]	; (8008770 <UART_SetConfig+0x324>)
 8008642:	fba2 2303 	umull	r2, r3, r2, r3
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	0119      	lsls	r1, r3, #4
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	4613      	mov	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	009a      	lsls	r2, r3, #2
 8008654:	441a      	add	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008660:	4b43      	ldr	r3, [pc, #268]	; (8008770 <UART_SetConfig+0x324>)
 8008662:	fba3 0302 	umull	r0, r3, r3, r2
 8008666:	095b      	lsrs	r3, r3, #5
 8008668:	2064      	movs	r0, #100	; 0x64
 800866a:	fb00 f303 	mul.w	r3, r0, r3
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	011b      	lsls	r3, r3, #4
 8008672:	3332      	adds	r3, #50	; 0x32
 8008674:	4a3e      	ldr	r2, [pc, #248]	; (8008770 <UART_SetConfig+0x324>)
 8008676:	fba2 2303 	umull	r2, r3, r2, r3
 800867a:	095b      	lsrs	r3, r3, #5
 800867c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008680:	4419      	add	r1, r3
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	4613      	mov	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	009a      	lsls	r2, r3, #2
 800868c:	441a      	add	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	fbb2 f2f3 	udiv	r2, r2, r3
 8008698:	4b35      	ldr	r3, [pc, #212]	; (8008770 <UART_SetConfig+0x324>)
 800869a:	fba3 0302 	umull	r0, r3, r3, r2
 800869e:	095b      	lsrs	r3, r3, #5
 80086a0:	2064      	movs	r0, #100	; 0x64
 80086a2:	fb00 f303 	mul.w	r3, r0, r3
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	3332      	adds	r3, #50	; 0x32
 80086ac:	4a30      	ldr	r2, [pc, #192]	; (8008770 <UART_SetConfig+0x324>)
 80086ae:	fba2 2303 	umull	r2, r3, r2, r3
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	f003 020f 	and.w	r2, r3, #15
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	440a      	add	r2, r1
 80086be:	609a      	str	r2, [r3, #8]
 80086c0:	e04e      	b.n	8008760 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 80086c2:	f7fe fac9 	bl	8006c58 <HAL_RCC_GetPCLK1Freq>
 80086c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009a      	lsls	r2, r3, #2
 80086d2:	441a      	add	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	fbb2 f3f3 	udiv	r3, r2, r3
 80086de:	4a24      	ldr	r2, [pc, #144]	; (8008770 <UART_SetConfig+0x324>)
 80086e0:	fba2 2303 	umull	r2, r3, r2, r3
 80086e4:	095b      	lsrs	r3, r3, #5
 80086e6:	0119      	lsls	r1, r3, #4
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	4613      	mov	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4413      	add	r3, r2
 80086f0:	009a      	lsls	r2, r3, #2
 80086f2:	441a      	add	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80086fe:	4b1c      	ldr	r3, [pc, #112]	; (8008770 <UART_SetConfig+0x324>)
 8008700:	fba3 0302 	umull	r0, r3, r3, r2
 8008704:	095b      	lsrs	r3, r3, #5
 8008706:	2064      	movs	r0, #100	; 0x64
 8008708:	fb00 f303 	mul.w	r3, r0, r3
 800870c:	1ad3      	subs	r3, r2, r3
 800870e:	011b      	lsls	r3, r3, #4
 8008710:	3332      	adds	r3, #50	; 0x32
 8008712:	4a17      	ldr	r2, [pc, #92]	; (8008770 <UART_SetConfig+0x324>)
 8008714:	fba2 2303 	umull	r2, r3, r2, r3
 8008718:	095b      	lsrs	r3, r3, #5
 800871a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800871e:	4419      	add	r1, r3
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	4413      	add	r3, r2
 8008728:	009a      	lsls	r2, r3, #2
 800872a:	441a      	add	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	fbb2 f2f3 	udiv	r2, r2, r3
 8008736:	4b0e      	ldr	r3, [pc, #56]	; (8008770 <UART_SetConfig+0x324>)
 8008738:	fba3 0302 	umull	r0, r3, r3, r2
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	2064      	movs	r0, #100	; 0x64
 8008740:	fb00 f303 	mul.w	r3, r0, r3
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	011b      	lsls	r3, r3, #4
 8008748:	3332      	adds	r3, #50	; 0x32
 800874a:	4a09      	ldr	r2, [pc, #36]	; (8008770 <UART_SetConfig+0x324>)
 800874c:	fba2 2303 	umull	r2, r3, r2, r3
 8008750:	095b      	lsrs	r3, r3, #5
 8008752:	f003 020f 	and.w	r2, r3, #15
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	440a      	add	r2, r1
 800875c:	609a      	str	r2, [r3, #8]
}
 800875e:	e7ff      	b.n	8008760 <UART_SetConfig+0x314>
 8008760:	bf00      	nop
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	40011000 	.word	0x40011000
 800876c:	40011400 	.word	0x40011400
 8008770:	51eb851f 	.word	0x51eb851f

08008774 <__libc_init_array>:
 8008774:	b570      	push	{r4, r5, r6, lr}
 8008776:	2600      	movs	r6, #0
 8008778:	4d0c      	ldr	r5, [pc, #48]	; (80087ac <__libc_init_array+0x38>)
 800877a:	4c0d      	ldr	r4, [pc, #52]	; (80087b0 <__libc_init_array+0x3c>)
 800877c:	1b64      	subs	r4, r4, r5
 800877e:	10a4      	asrs	r4, r4, #2
 8008780:	42a6      	cmp	r6, r4
 8008782:	d109      	bne.n	8008798 <__libc_init_array+0x24>
 8008784:	f001 f822 	bl	80097cc <_init>
 8008788:	2600      	movs	r6, #0
 800878a:	4d0a      	ldr	r5, [pc, #40]	; (80087b4 <__libc_init_array+0x40>)
 800878c:	4c0a      	ldr	r4, [pc, #40]	; (80087b8 <__libc_init_array+0x44>)
 800878e:	1b64      	subs	r4, r4, r5
 8008790:	10a4      	asrs	r4, r4, #2
 8008792:	42a6      	cmp	r6, r4
 8008794:	d105      	bne.n	80087a2 <__libc_init_array+0x2e>
 8008796:	bd70      	pop	{r4, r5, r6, pc}
 8008798:	f855 3b04 	ldr.w	r3, [r5], #4
 800879c:	4798      	blx	r3
 800879e:	3601      	adds	r6, #1
 80087a0:	e7ee      	b.n	8008780 <__libc_init_array+0xc>
 80087a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a6:	4798      	blx	r3
 80087a8:	3601      	adds	r6, #1
 80087aa:	e7f2      	b.n	8008792 <__libc_init_array+0x1e>
 80087ac:	080099e8 	.word	0x080099e8
 80087b0:	080099e8 	.word	0x080099e8
 80087b4:	080099e8 	.word	0x080099e8
 80087b8:	080099ec 	.word	0x080099ec

080087bc <memset>:
 80087bc:	4603      	mov	r3, r0
 80087be:	4402      	add	r2, r0
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d100      	bne.n	80087c6 <memset+0xa>
 80087c4:	4770      	bx	lr
 80087c6:	f803 1b01 	strb.w	r1, [r3], #1
 80087ca:	e7f9      	b.n	80087c0 <memset+0x4>

080087cc <sin>:
 80087cc:	b530      	push	{r4, r5, lr}
 80087ce:	4a20      	ldr	r2, [pc, #128]	; (8008850 <sin+0x84>)
 80087d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80087d4:	4293      	cmp	r3, r2
 80087d6:	b087      	sub	sp, #28
 80087d8:	dc06      	bgt.n	80087e8 <sin+0x1c>
 80087da:	2300      	movs	r3, #0
 80087dc:	2200      	movs	r2, #0
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	2300      	movs	r3, #0
 80087e2:	f000 fe31 	bl	8009448 <__kernel_sin>
 80087e6:	e006      	b.n	80087f6 <sin+0x2a>
 80087e8:	4a1a      	ldr	r2, [pc, #104]	; (8008854 <sin+0x88>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	dd05      	ble.n	80087fa <sin+0x2e>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	f7f7 fced 	bl	80001d0 <__aeabi_dsub>
 80087f6:	b007      	add	sp, #28
 80087f8:	bd30      	pop	{r4, r5, pc}
 80087fa:	aa02      	add	r2, sp, #8
 80087fc:	f000 f82c 	bl	8008858 <__ieee754_rem_pio2>
 8008800:	f000 0003 	and.w	r0, r0, #3
 8008804:	2801      	cmp	r0, #1
 8008806:	d009      	beq.n	800881c <sin+0x50>
 8008808:	2802      	cmp	r0, #2
 800880a:	d00e      	beq.n	800882a <sin+0x5e>
 800880c:	b9c0      	cbnz	r0, 8008840 <sin+0x74>
 800880e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008812:	2301      	movs	r3, #1
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800881a:	e7e2      	b.n	80087e2 <sin+0x16>
 800881c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008820:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008824:	f000 fa08 	bl	8008c38 <__kernel_cos>
 8008828:	e7e5      	b.n	80087f6 <sin+0x2a>
 800882a:	2301      	movs	r3, #1
 800882c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008836:	f000 fe07 	bl	8009448 <__kernel_sin>
 800883a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800883e:	e7da      	b.n	80087f6 <sin+0x2a>
 8008840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008848:	f000 f9f6 	bl	8008c38 <__kernel_cos>
 800884c:	e7f5      	b.n	800883a <sin+0x6e>
 800884e:	bf00      	nop
 8008850:	3fe921fb 	.word	0x3fe921fb
 8008854:	7fefffff 	.word	0x7fefffff

08008858 <__ieee754_rem_pio2>:
 8008858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885c:	4614      	mov	r4, r2
 800885e:	4ac4      	ldr	r2, [pc, #784]	; (8008b70 <__ieee754_rem_pio2+0x318>)
 8008860:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008864:	b08d      	sub	sp, #52	; 0x34
 8008866:	4592      	cmp	sl, r2
 8008868:	9104      	str	r1, [sp, #16]
 800886a:	dc07      	bgt.n	800887c <__ieee754_rem_pio2+0x24>
 800886c:	2200      	movs	r2, #0
 800886e:	2300      	movs	r3, #0
 8008870:	e9c4 0100 	strd	r0, r1, [r4]
 8008874:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008878:	2500      	movs	r5, #0
 800887a:	e024      	b.n	80088c6 <__ieee754_rem_pio2+0x6e>
 800887c:	4abd      	ldr	r2, [pc, #756]	; (8008b74 <__ieee754_rem_pio2+0x31c>)
 800887e:	4592      	cmp	sl, r2
 8008880:	dc72      	bgt.n	8008968 <__ieee754_rem_pio2+0x110>
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	4dbc      	ldr	r5, [pc, #752]	; (8008b78 <__ieee754_rem_pio2+0x320>)
 8008886:	2b00      	cmp	r3, #0
 8008888:	a3ab      	add	r3, pc, #684	; (adr r3, 8008b38 <__ieee754_rem_pio2+0x2e0>)
 800888a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888e:	dd36      	ble.n	80088fe <__ieee754_rem_pio2+0xa6>
 8008890:	f7f7 fc9e 	bl	80001d0 <__aeabi_dsub>
 8008894:	45aa      	cmp	sl, r5
 8008896:	4606      	mov	r6, r0
 8008898:	460f      	mov	r7, r1
 800889a:	d018      	beq.n	80088ce <__ieee754_rem_pio2+0x76>
 800889c:	a3a8      	add	r3, pc, #672	; (adr r3, 8008b40 <__ieee754_rem_pio2+0x2e8>)
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	f7f7 fc95 	bl	80001d0 <__aeabi_dsub>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4630      	mov	r0, r6
 80088ac:	e9c4 2300 	strd	r2, r3, [r4]
 80088b0:	4639      	mov	r1, r7
 80088b2:	f7f7 fc8d 	bl	80001d0 <__aeabi_dsub>
 80088b6:	a3a2      	add	r3, pc, #648	; (adr r3, 8008b40 <__ieee754_rem_pio2+0x2e8>)
 80088b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088bc:	f7f7 fc88 	bl	80001d0 <__aeabi_dsub>
 80088c0:	2501      	movs	r5, #1
 80088c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80088c6:	4628      	mov	r0, r5
 80088c8:	b00d      	add	sp, #52	; 0x34
 80088ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ce:	a39e      	add	r3, pc, #632	; (adr r3, 8008b48 <__ieee754_rem_pio2+0x2f0>)
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	f7f7 fc7c 	bl	80001d0 <__aeabi_dsub>
 80088d8:	a39d      	add	r3, pc, #628	; (adr r3, 8008b50 <__ieee754_rem_pio2+0x2f8>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	4606      	mov	r6, r0
 80088e0:	460f      	mov	r7, r1
 80088e2:	f7f7 fc75 	bl	80001d0 <__aeabi_dsub>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	4630      	mov	r0, r6
 80088ec:	e9c4 2300 	strd	r2, r3, [r4]
 80088f0:	4639      	mov	r1, r7
 80088f2:	f7f7 fc6d 	bl	80001d0 <__aeabi_dsub>
 80088f6:	a396      	add	r3, pc, #600	; (adr r3, 8008b50 <__ieee754_rem_pio2+0x2f8>)
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	e7de      	b.n	80088bc <__ieee754_rem_pio2+0x64>
 80088fe:	f7f7 fc69 	bl	80001d4 <__adddf3>
 8008902:	45aa      	cmp	sl, r5
 8008904:	4606      	mov	r6, r0
 8008906:	460f      	mov	r7, r1
 8008908:	d016      	beq.n	8008938 <__ieee754_rem_pio2+0xe0>
 800890a:	a38d      	add	r3, pc, #564	; (adr r3, 8008b40 <__ieee754_rem_pio2+0x2e8>)
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	f7f7 fc60 	bl	80001d4 <__adddf3>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4630      	mov	r0, r6
 800891a:	e9c4 2300 	strd	r2, r3, [r4]
 800891e:	4639      	mov	r1, r7
 8008920:	f7f7 fc56 	bl	80001d0 <__aeabi_dsub>
 8008924:	a386      	add	r3, pc, #536	; (adr r3, 8008b40 <__ieee754_rem_pio2+0x2e8>)
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	f7f7 fc53 	bl	80001d4 <__adddf3>
 800892e:	f04f 35ff 	mov.w	r5, #4294967295
 8008932:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008936:	e7c6      	b.n	80088c6 <__ieee754_rem_pio2+0x6e>
 8008938:	a383      	add	r3, pc, #524	; (adr r3, 8008b48 <__ieee754_rem_pio2+0x2f0>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 fc49 	bl	80001d4 <__adddf3>
 8008942:	a383      	add	r3, pc, #524	; (adr r3, 8008b50 <__ieee754_rem_pio2+0x2f8>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	4606      	mov	r6, r0
 800894a:	460f      	mov	r7, r1
 800894c:	f7f7 fc42 	bl	80001d4 <__adddf3>
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	4630      	mov	r0, r6
 8008956:	e9c4 2300 	strd	r2, r3, [r4]
 800895a:	4639      	mov	r1, r7
 800895c:	f7f7 fc38 	bl	80001d0 <__aeabi_dsub>
 8008960:	a37b      	add	r3, pc, #492	; (adr r3, 8008b50 <__ieee754_rem_pio2+0x2f8>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	e7e0      	b.n	800892a <__ieee754_rem_pio2+0xd2>
 8008968:	4a84      	ldr	r2, [pc, #528]	; (8008b7c <__ieee754_rem_pio2+0x324>)
 800896a:	4592      	cmp	sl, r2
 800896c:	f300 80d5 	bgt.w	8008b1a <__ieee754_rem_pio2+0x2c2>
 8008970:	f000 fe20 	bl	80095b4 <fabs>
 8008974:	a378      	add	r3, pc, #480	; (adr r3, 8008b58 <__ieee754_rem_pio2+0x300>)
 8008976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897a:	4606      	mov	r6, r0
 800897c:	460f      	mov	r7, r1
 800897e:	f7f7 fddf 	bl	8000540 <__aeabi_dmul>
 8008982:	2200      	movs	r2, #0
 8008984:	4b7e      	ldr	r3, [pc, #504]	; (8008b80 <__ieee754_rem_pio2+0x328>)
 8008986:	f7f7 fc25 	bl	80001d4 <__adddf3>
 800898a:	f7f8 f873 	bl	8000a74 <__aeabi_d2iz>
 800898e:	4605      	mov	r5, r0
 8008990:	f7f7 fd6c 	bl	800046c <__aeabi_i2d>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800899c:	a366      	add	r3, pc, #408	; (adr r3, 8008b38 <__ieee754_rem_pio2+0x2e0>)
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	f7f7 fdcd 	bl	8000540 <__aeabi_dmul>
 80089a6:	4602      	mov	r2, r0
 80089a8:	460b      	mov	r3, r1
 80089aa:	4630      	mov	r0, r6
 80089ac:	4639      	mov	r1, r7
 80089ae:	f7f7 fc0f 	bl	80001d0 <__aeabi_dsub>
 80089b2:	a363      	add	r3, pc, #396	; (adr r3, 8008b40 <__ieee754_rem_pio2+0x2e8>)
 80089b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b8:	4680      	mov	r8, r0
 80089ba:	4689      	mov	r9, r1
 80089bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089c0:	f7f7 fdbe 	bl	8000540 <__aeabi_dmul>
 80089c4:	2d1f      	cmp	r5, #31
 80089c6:	4606      	mov	r6, r0
 80089c8:	460f      	mov	r7, r1
 80089ca:	dc0e      	bgt.n	80089ea <__ieee754_rem_pio2+0x192>
 80089cc:	4b6d      	ldr	r3, [pc, #436]	; (8008b84 <__ieee754_rem_pio2+0x32c>)
 80089ce:	1e6a      	subs	r2, r5, #1
 80089d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d4:	4553      	cmp	r3, sl
 80089d6:	d008      	beq.n	80089ea <__ieee754_rem_pio2+0x192>
 80089d8:	4632      	mov	r2, r6
 80089da:	463b      	mov	r3, r7
 80089dc:	4640      	mov	r0, r8
 80089de:	4649      	mov	r1, r9
 80089e0:	f7f7 fbf6 	bl	80001d0 <__aeabi_dsub>
 80089e4:	e9c4 0100 	strd	r0, r1, [r4]
 80089e8:	e013      	b.n	8008a12 <__ieee754_rem_pio2+0x1ba>
 80089ea:	463b      	mov	r3, r7
 80089ec:	4632      	mov	r2, r6
 80089ee:	4640      	mov	r0, r8
 80089f0:	4649      	mov	r1, r9
 80089f2:	f7f7 fbed 	bl	80001d0 <__aeabi_dsub>
 80089f6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80089fa:	9305      	str	r3, [sp, #20]
 80089fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a00:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008a04:	f1ba 0f10 	cmp.w	sl, #16
 8008a08:	dc1f      	bgt.n	8008a4a <__ieee754_rem_pio2+0x1f2>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	e9c4 2300 	strd	r2, r3, [r4]
 8008a12:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008a16:	4640      	mov	r0, r8
 8008a18:	4653      	mov	r3, sl
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	f7f7 fbd8 	bl	80001d0 <__aeabi_dsub>
 8008a20:	4632      	mov	r2, r6
 8008a22:	463b      	mov	r3, r7
 8008a24:	f7f7 fbd4 	bl	80001d0 <__aeabi_dsub>
 8008a28:	460b      	mov	r3, r1
 8008a2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a2e:	9904      	ldr	r1, [sp, #16]
 8008a30:	4602      	mov	r2, r0
 8008a32:	2900      	cmp	r1, #0
 8008a34:	f6bf af47 	bge.w	80088c6 <__ieee754_rem_pio2+0x6e>
 8008a38:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008a3c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008a40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a44:	60e3      	str	r3, [r4, #12]
 8008a46:	426d      	negs	r5, r5
 8008a48:	e73d      	b.n	80088c6 <__ieee754_rem_pio2+0x6e>
 8008a4a:	a33f      	add	r3, pc, #252	; (adr r3, 8008b48 <__ieee754_rem_pio2+0x2f0>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a54:	f7f7 fd74 	bl	8000540 <__aeabi_dmul>
 8008a58:	4606      	mov	r6, r0
 8008a5a:	460f      	mov	r7, r1
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f7 fbb4 	bl	80001d0 <__aeabi_dsub>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	4682      	mov	sl, r0
 8008a6e:	468b      	mov	fp, r1
 8008a70:	4640      	mov	r0, r8
 8008a72:	4649      	mov	r1, r9
 8008a74:	f7f7 fbac 	bl	80001d0 <__aeabi_dsub>
 8008a78:	4632      	mov	r2, r6
 8008a7a:	463b      	mov	r3, r7
 8008a7c:	f7f7 fba8 	bl	80001d0 <__aeabi_dsub>
 8008a80:	a333      	add	r3, pc, #204	; (adr r3, 8008b50 <__ieee754_rem_pio2+0x2f8>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	4606      	mov	r6, r0
 8008a88:	460f      	mov	r7, r1
 8008a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a8e:	f7f7 fd57 	bl	8000540 <__aeabi_dmul>
 8008a92:	4632      	mov	r2, r6
 8008a94:	463b      	mov	r3, r7
 8008a96:	f7f7 fb9b 	bl	80001d0 <__aeabi_dsub>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	4606      	mov	r6, r0
 8008aa0:	460f      	mov	r7, r1
 8008aa2:	4650      	mov	r0, sl
 8008aa4:	4659      	mov	r1, fp
 8008aa6:	f7f7 fb93 	bl	80001d0 <__aeabi_dsub>
 8008aaa:	9a05      	ldr	r2, [sp, #20]
 8008aac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	2b31      	cmp	r3, #49	; 0x31
 8008ab4:	dc06      	bgt.n	8008ac4 <__ieee754_rem_pio2+0x26c>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	460b      	mov	r3, r1
 8008aba:	46d0      	mov	r8, sl
 8008abc:	46d9      	mov	r9, fp
 8008abe:	e9c4 2300 	strd	r2, r3, [r4]
 8008ac2:	e7a6      	b.n	8008a12 <__ieee754_rem_pio2+0x1ba>
 8008ac4:	a326      	add	r3, pc, #152	; (adr r3, 8008b60 <__ieee754_rem_pio2+0x308>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ace:	f7f7 fd37 	bl	8000540 <__aeabi_dmul>
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460f      	mov	r7, r1
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4650      	mov	r0, sl
 8008adc:	4659      	mov	r1, fp
 8008ade:	f7f7 fb77 	bl	80001d0 <__aeabi_dsub>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4680      	mov	r8, r0
 8008ae8:	4689      	mov	r9, r1
 8008aea:	4650      	mov	r0, sl
 8008aec:	4659      	mov	r1, fp
 8008aee:	f7f7 fb6f 	bl	80001d0 <__aeabi_dsub>
 8008af2:	4632      	mov	r2, r6
 8008af4:	463b      	mov	r3, r7
 8008af6:	f7f7 fb6b 	bl	80001d0 <__aeabi_dsub>
 8008afa:	a31b      	add	r3, pc, #108	; (adr r3, 8008b68 <__ieee754_rem_pio2+0x310>)
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	4606      	mov	r6, r0
 8008b02:	460f      	mov	r7, r1
 8008b04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b08:	f7f7 fd1a 	bl	8000540 <__aeabi_dmul>
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	463b      	mov	r3, r7
 8008b10:	f7f7 fb5e 	bl	80001d0 <__aeabi_dsub>
 8008b14:	4606      	mov	r6, r0
 8008b16:	460f      	mov	r7, r1
 8008b18:	e75e      	b.n	80089d8 <__ieee754_rem_pio2+0x180>
 8008b1a:	4a1b      	ldr	r2, [pc, #108]	; (8008b88 <__ieee754_rem_pio2+0x330>)
 8008b1c:	4592      	cmp	sl, r2
 8008b1e:	dd35      	ble.n	8008b8c <__ieee754_rem_pio2+0x334>
 8008b20:	4602      	mov	r2, r0
 8008b22:	460b      	mov	r3, r1
 8008b24:	f7f7 fb54 	bl	80001d0 <__aeabi_dsub>
 8008b28:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b2c:	e9c4 0100 	strd	r0, r1, [r4]
 8008b30:	e6a2      	b.n	8008878 <__ieee754_rem_pio2+0x20>
 8008b32:	bf00      	nop
 8008b34:	f3af 8000 	nop.w
 8008b38:	54400000 	.word	0x54400000
 8008b3c:	3ff921fb 	.word	0x3ff921fb
 8008b40:	1a626331 	.word	0x1a626331
 8008b44:	3dd0b461 	.word	0x3dd0b461
 8008b48:	1a600000 	.word	0x1a600000
 8008b4c:	3dd0b461 	.word	0x3dd0b461
 8008b50:	2e037073 	.word	0x2e037073
 8008b54:	3ba3198a 	.word	0x3ba3198a
 8008b58:	6dc9c883 	.word	0x6dc9c883
 8008b5c:	3fe45f30 	.word	0x3fe45f30
 8008b60:	2e000000 	.word	0x2e000000
 8008b64:	3ba3198a 	.word	0x3ba3198a
 8008b68:	252049c1 	.word	0x252049c1
 8008b6c:	397b839a 	.word	0x397b839a
 8008b70:	3fe921fb 	.word	0x3fe921fb
 8008b74:	4002d97b 	.word	0x4002d97b
 8008b78:	3ff921fb 	.word	0x3ff921fb
 8008b7c:	413921fb 	.word	0x413921fb
 8008b80:	3fe00000 	.word	0x3fe00000
 8008b84:	08009808 	.word	0x08009808
 8008b88:	7fefffff 	.word	0x7fefffff
 8008b8c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008b90:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008b94:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008b98:	460f      	mov	r7, r1
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	f7f7 ff6a 	bl	8000a74 <__aeabi_d2iz>
 8008ba0:	f7f7 fc64 	bl	800046c <__aeabi_i2d>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4630      	mov	r0, r6
 8008baa:	4639      	mov	r1, r7
 8008bac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008bb0:	f7f7 fb0e 	bl	80001d0 <__aeabi_dsub>
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	4b1e      	ldr	r3, [pc, #120]	; (8008c30 <__ieee754_rem_pio2+0x3d8>)
 8008bb8:	f7f7 fcc2 	bl	8000540 <__aeabi_dmul>
 8008bbc:	460f      	mov	r7, r1
 8008bbe:	4606      	mov	r6, r0
 8008bc0:	f7f7 ff58 	bl	8000a74 <__aeabi_d2iz>
 8008bc4:	f7f7 fc52 	bl	800046c <__aeabi_i2d>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008bd4:	f7f7 fafc 	bl	80001d0 <__aeabi_dsub>
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <__ieee754_rem_pio2+0x3d8>)
 8008bdc:	f7f7 fcb0 	bl	8000540 <__aeabi_dmul>
 8008be0:	f04f 0803 	mov.w	r8, #3
 8008be4:	2600      	movs	r6, #0
 8008be6:	2700      	movs	r7, #0
 8008be8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008bec:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	46c2      	mov	sl, r8
 8008bfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bfe:	f7f7 ff07 	bl	8000a10 <__aeabi_dcmpeq>
 8008c02:	2800      	cmp	r0, #0
 8008c04:	d1f4      	bne.n	8008bf0 <__ieee754_rem_pio2+0x398>
 8008c06:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <__ieee754_rem_pio2+0x3dc>)
 8008c08:	462a      	mov	r2, r5
 8008c0a:	9301      	str	r3, [sp, #4]
 8008c0c:	2302      	movs	r3, #2
 8008c0e:	4621      	mov	r1, r4
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	a806      	add	r0, sp, #24
 8008c14:	4653      	mov	r3, sl
 8008c16:	f000 f8cd 	bl	8008db4 <__kernel_rem_pio2>
 8008c1a:	9b04      	ldr	r3, [sp, #16]
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f6bf ae51 	bge.w	80088c6 <__ieee754_rem_pio2+0x6e>
 8008c24:	6863      	ldr	r3, [r4, #4]
 8008c26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008c2a:	6063      	str	r3, [r4, #4]
 8008c2c:	68e3      	ldr	r3, [r4, #12]
 8008c2e:	e707      	b.n	8008a40 <__ieee754_rem_pio2+0x1e8>
 8008c30:	41700000 	.word	0x41700000
 8008c34:	08009888 	.word	0x08009888

08008c38 <__kernel_cos>:
 8008c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008c40:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008c44:	4680      	mov	r8, r0
 8008c46:	460f      	mov	r7, r1
 8008c48:	e9cd 2300 	strd	r2, r3, [sp]
 8008c4c:	da04      	bge.n	8008c58 <__kernel_cos+0x20>
 8008c4e:	f7f7 ff11 	bl	8000a74 <__aeabi_d2iz>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	f000 8086 	beq.w	8008d64 <__kernel_cos+0x12c>
 8008c58:	4642      	mov	r2, r8
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	4640      	mov	r0, r8
 8008c5e:	4639      	mov	r1, r7
 8008c60:	f7f7 fc6e 	bl	8000540 <__aeabi_dmul>
 8008c64:	2200      	movs	r2, #0
 8008c66:	4b4e      	ldr	r3, [pc, #312]	; (8008da0 <__kernel_cos+0x168>)
 8008c68:	4604      	mov	r4, r0
 8008c6a:	460d      	mov	r5, r1
 8008c6c:	f7f7 fc68 	bl	8000540 <__aeabi_dmul>
 8008c70:	a33f      	add	r3, pc, #252	; (adr r3, 8008d70 <__kernel_cos+0x138>)
 8008c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c76:	4682      	mov	sl, r0
 8008c78:	468b      	mov	fp, r1
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	f7f7 fc5f 	bl	8000540 <__aeabi_dmul>
 8008c82:	a33d      	add	r3, pc, #244	; (adr r3, 8008d78 <__kernel_cos+0x140>)
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f7f7 faa4 	bl	80001d4 <__adddf3>
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	462b      	mov	r3, r5
 8008c90:	f7f7 fc56 	bl	8000540 <__aeabi_dmul>
 8008c94:	a33a      	add	r3, pc, #232	; (adr r3, 8008d80 <__kernel_cos+0x148>)
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f7f7 fa99 	bl	80001d0 <__aeabi_dsub>
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	462b      	mov	r3, r5
 8008ca2:	f7f7 fc4d 	bl	8000540 <__aeabi_dmul>
 8008ca6:	a338      	add	r3, pc, #224	; (adr r3, 8008d88 <__kernel_cos+0x150>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 fa92 	bl	80001d4 <__adddf3>
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	462b      	mov	r3, r5
 8008cb4:	f7f7 fc44 	bl	8000540 <__aeabi_dmul>
 8008cb8:	a335      	add	r3, pc, #212	; (adr r3, 8008d90 <__kernel_cos+0x158>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 fa87 	bl	80001d0 <__aeabi_dsub>
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	f7f7 fc3b 	bl	8000540 <__aeabi_dmul>
 8008cca:	a333      	add	r3, pc, #204	; (adr r3, 8008d98 <__kernel_cos+0x160>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	f7f7 fa80 	bl	80001d4 <__adddf3>
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	462b      	mov	r3, r5
 8008cd8:	f7f7 fc32 	bl	8000540 <__aeabi_dmul>
 8008cdc:	4622      	mov	r2, r4
 8008cde:	462b      	mov	r3, r5
 8008ce0:	f7f7 fc2e 	bl	8000540 <__aeabi_dmul>
 8008ce4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ce8:	4604      	mov	r4, r0
 8008cea:	460d      	mov	r5, r1
 8008cec:	4640      	mov	r0, r8
 8008cee:	4639      	mov	r1, r7
 8008cf0:	f7f7 fc26 	bl	8000540 <__aeabi_dmul>
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f7f7 fa68 	bl	80001d0 <__aeabi_dsub>
 8008d00:	4b28      	ldr	r3, [pc, #160]	; (8008da4 <__kernel_cos+0x16c>)
 8008d02:	4680      	mov	r8, r0
 8008d04:	429e      	cmp	r6, r3
 8008d06:	4689      	mov	r9, r1
 8008d08:	dc0e      	bgt.n	8008d28 <__kernel_cos+0xf0>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4650      	mov	r0, sl
 8008d10:	4659      	mov	r1, fp
 8008d12:	f7f7 fa5d 	bl	80001d0 <__aeabi_dsub>
 8008d16:	4602      	mov	r2, r0
 8008d18:	2000      	movs	r0, #0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4922      	ldr	r1, [pc, #136]	; (8008da8 <__kernel_cos+0x170>)
 8008d1e:	f7f7 fa57 	bl	80001d0 <__aeabi_dsub>
 8008d22:	b003      	add	sp, #12
 8008d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d28:	2400      	movs	r4, #0
 8008d2a:	4b20      	ldr	r3, [pc, #128]	; (8008dac <__kernel_cos+0x174>)
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	429e      	cmp	r6, r3
 8008d30:	bfcc      	ite	gt
 8008d32:	4d1f      	ldrgt	r5, [pc, #124]	; (8008db0 <__kernel_cos+0x178>)
 8008d34:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008d38:	462b      	mov	r3, r5
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	491a      	ldr	r1, [pc, #104]	; (8008da8 <__kernel_cos+0x170>)
 8008d3e:	f7f7 fa47 	bl	80001d0 <__aeabi_dsub>
 8008d42:	4622      	mov	r2, r4
 8008d44:	4606      	mov	r6, r0
 8008d46:	460f      	mov	r7, r1
 8008d48:	462b      	mov	r3, r5
 8008d4a:	4650      	mov	r0, sl
 8008d4c:	4659      	mov	r1, fp
 8008d4e:	f7f7 fa3f 	bl	80001d0 <__aeabi_dsub>
 8008d52:	4642      	mov	r2, r8
 8008d54:	464b      	mov	r3, r9
 8008d56:	f7f7 fa3b 	bl	80001d0 <__aeabi_dsub>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4630      	mov	r0, r6
 8008d60:	4639      	mov	r1, r7
 8008d62:	e7dc      	b.n	8008d1e <__kernel_cos+0xe6>
 8008d64:	2000      	movs	r0, #0
 8008d66:	4910      	ldr	r1, [pc, #64]	; (8008da8 <__kernel_cos+0x170>)
 8008d68:	e7db      	b.n	8008d22 <__kernel_cos+0xea>
 8008d6a:	bf00      	nop
 8008d6c:	f3af 8000 	nop.w
 8008d70:	be8838d4 	.word	0xbe8838d4
 8008d74:	bda8fae9 	.word	0xbda8fae9
 8008d78:	bdb4b1c4 	.word	0xbdb4b1c4
 8008d7c:	3e21ee9e 	.word	0x3e21ee9e
 8008d80:	809c52ad 	.word	0x809c52ad
 8008d84:	3e927e4f 	.word	0x3e927e4f
 8008d88:	19cb1590 	.word	0x19cb1590
 8008d8c:	3efa01a0 	.word	0x3efa01a0
 8008d90:	16c15177 	.word	0x16c15177
 8008d94:	3f56c16c 	.word	0x3f56c16c
 8008d98:	5555554c 	.word	0x5555554c
 8008d9c:	3fa55555 	.word	0x3fa55555
 8008da0:	3fe00000 	.word	0x3fe00000
 8008da4:	3fd33332 	.word	0x3fd33332
 8008da8:	3ff00000 	.word	0x3ff00000
 8008dac:	3fe90000 	.word	0x3fe90000
 8008db0:	3fd20000 	.word	0x3fd20000

08008db4 <__kernel_rem_pio2>:
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008dbc:	9308      	str	r3, [sp, #32]
 8008dbe:	9101      	str	r1, [sp, #4]
 8008dc0:	4bc0      	ldr	r3, [pc, #768]	; (80090c4 <__kernel_rem_pio2+0x310>)
 8008dc2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008dc4:	f112 0f14 	cmn.w	r2, #20
 8008dc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dcc:	bfa8      	it	ge
 8008dce:	1ed4      	subge	r4, r2, #3
 8008dd0:	9304      	str	r3, [sp, #16]
 8008dd2:	9b08      	ldr	r3, [sp, #32]
 8008dd4:	bfb8      	it	lt
 8008dd6:	2400      	movlt	r4, #0
 8008dd8:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ddc:	9306      	str	r3, [sp, #24]
 8008dde:	bfa4      	itt	ge
 8008de0:	2318      	movge	r3, #24
 8008de2:	fb94 f4f3 	sdivge	r4, r4, r3
 8008de6:	f06f 0317 	mvn.w	r3, #23
 8008dea:	fb04 3303 	mla	r3, r4, r3, r3
 8008dee:	eb03 0a02 	add.w	sl, r3, r2
 8008df2:	9a06      	ldr	r2, [sp, #24]
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	1aa7      	subs	r7, r4, r2
 8008df8:	eb03 0802 	add.w	r8, r3, r2
 8008dfc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008dfe:	2500      	movs	r5, #0
 8008e00:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008e04:	2200      	movs	r2, #0
 8008e06:	2300      	movs	r3, #0
 8008e08:	9009      	str	r0, [sp, #36]	; 0x24
 8008e0a:	ae20      	add	r6, sp, #128	; 0x80
 8008e0c:	4545      	cmp	r5, r8
 8008e0e:	dd19      	ble.n	8008e44 <__kernel_rem_pio2+0x90>
 8008e10:	9b08      	ldr	r3, [sp, #32]
 8008e12:	aa20      	add	r2, sp, #128	; 0x80
 8008e14:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008e18:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008e1c:	f1c3 0301 	rsb	r3, r3, #1
 8008e20:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008e24:	9307      	str	r3, [sp, #28]
 8008e26:	9b07      	ldr	r3, [sp, #28]
 8008e28:	9a04      	ldr	r2, [sp, #16]
 8008e2a:	4443      	add	r3, r8
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	db35      	blt.n	8008e9c <__kernel_rem_pio2+0xe8>
 8008e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e32:	2200      	movs	r2, #0
 8008e34:	f1a3 0908 	sub.w	r9, r3, #8
 8008e38:	2300      	movs	r3, #0
 8008e3a:	462f      	mov	r7, r5
 8008e3c:	2600      	movs	r6, #0
 8008e3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e42:	e01f      	b.n	8008e84 <__kernel_rem_pio2+0xd0>
 8008e44:	42ef      	cmn	r7, r5
 8008e46:	d40b      	bmi.n	8008e60 <__kernel_rem_pio2+0xac>
 8008e48:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008e4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e50:	f7f7 fb0c 	bl	800046c <__aeabi_i2d>
 8008e54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e58:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008e5c:	3501      	adds	r5, #1
 8008e5e:	e7d5      	b.n	8008e0c <__kernel_rem_pio2+0x58>
 8008e60:	4610      	mov	r0, r2
 8008e62:	4619      	mov	r1, r3
 8008e64:	e7f8      	b.n	8008e58 <__kernel_rem_pio2+0xa4>
 8008e66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e6a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008e6e:	f7f7 fb67 	bl	8000540 <__aeabi_dmul>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e7a:	f7f7 f9ab 	bl	80001d4 <__adddf3>
 8008e7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e82:	3601      	adds	r6, #1
 8008e84:	9b06      	ldr	r3, [sp, #24]
 8008e86:	3f08      	subs	r7, #8
 8008e88:	429e      	cmp	r6, r3
 8008e8a:	ddec      	ble.n	8008e66 <__kernel_rem_pio2+0xb2>
 8008e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e90:	3508      	adds	r5, #8
 8008e92:	e8eb 2302 	strd	r2, r3, [fp], #8
 8008e96:	f108 0801 	add.w	r8, r8, #1
 8008e9a:	e7c4      	b.n	8008e26 <__kernel_rem_pio2+0x72>
 8008e9c:	9b04      	ldr	r3, [sp, #16]
 8008e9e:	aa0c      	add	r2, sp, #48	; 0x30
 8008ea0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ea4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ea6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008ea8:	9f04      	ldr	r7, [sp, #16]
 8008eaa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008eae:	930a      	str	r3, [sp, #40]	; 0x28
 8008eb0:	463e      	mov	r6, r7
 8008eb2:	ab98      	add	r3, sp, #608	; 0x260
 8008eb4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008eb8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ebc:	f8cd b008 	str.w	fp, [sp, #8]
 8008ec0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008ec4:	2e00      	cmp	r6, #0
 8008ec6:	dc71      	bgt.n	8008fac <__kernel_rem_pio2+0x1f8>
 8008ec8:	4652      	mov	r2, sl
 8008eca:	4620      	mov	r0, r4
 8008ecc:	4629      	mov	r1, r5
 8008ece:	f000 fbf7 	bl	80096c0 <scalbn>
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008ed8:	4604      	mov	r4, r0
 8008eda:	460d      	mov	r5, r1
 8008edc:	f7f7 fb30 	bl	8000540 <__aeabi_dmul>
 8008ee0:	f000 fb6e 	bl	80095c0 <floor>
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4b78      	ldr	r3, [pc, #480]	; (80090c8 <__kernel_rem_pio2+0x314>)
 8008ee8:	f7f7 fb2a 	bl	8000540 <__aeabi_dmul>
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	f7f7 f96c 	bl	80001d0 <__aeabi_dsub>
 8008ef8:	460d      	mov	r5, r1
 8008efa:	4604      	mov	r4, r0
 8008efc:	f7f7 fdba 	bl	8000a74 <__aeabi_d2iz>
 8008f00:	9007      	str	r0, [sp, #28]
 8008f02:	f7f7 fab3 	bl	800046c <__aeabi_i2d>
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	f7f7 f95f 	bl	80001d0 <__aeabi_dsub>
 8008f12:	f1ba 0f00 	cmp.w	sl, #0
 8008f16:	4680      	mov	r8, r0
 8008f18:	4689      	mov	r9, r1
 8008f1a:	dd70      	ble.n	8008ffe <__kernel_rem_pio2+0x24a>
 8008f1c:	1e7a      	subs	r2, r7, #1
 8008f1e:	ab0c      	add	r3, sp, #48	; 0x30
 8008f20:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008f24:	9c07      	ldr	r4, [sp, #28]
 8008f26:	f1ca 0118 	rsb	r1, sl, #24
 8008f2a:	fa40 f301 	asr.w	r3, r0, r1
 8008f2e:	441c      	add	r4, r3
 8008f30:	408b      	lsls	r3, r1
 8008f32:	1ac0      	subs	r0, r0, r3
 8008f34:	ab0c      	add	r3, sp, #48	; 0x30
 8008f36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008f3a:	f1ca 0317 	rsb	r3, sl, #23
 8008f3e:	9407      	str	r4, [sp, #28]
 8008f40:	fa40 f303 	asr.w	r3, r0, r3
 8008f44:	9302      	str	r3, [sp, #8]
 8008f46:	9b02      	ldr	r3, [sp, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dd66      	ble.n	800901a <__kernel_rem_pio2+0x266>
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008f52:	4614      	mov	r4, r2
 8008f54:	9b07      	ldr	r3, [sp, #28]
 8008f56:	3301      	adds	r3, #1
 8008f58:	9307      	str	r3, [sp, #28]
 8008f5a:	4297      	cmp	r7, r2
 8008f5c:	f300 809f 	bgt.w	800909e <__kernel_rem_pio2+0x2ea>
 8008f60:	f1ba 0f00 	cmp.w	sl, #0
 8008f64:	dd07      	ble.n	8008f76 <__kernel_rem_pio2+0x1c2>
 8008f66:	f1ba 0f01 	cmp.w	sl, #1
 8008f6a:	f000 80b9 	beq.w	80090e0 <__kernel_rem_pio2+0x32c>
 8008f6e:	f1ba 0f02 	cmp.w	sl, #2
 8008f72:	f000 80bf 	beq.w	80090f4 <__kernel_rem_pio2+0x340>
 8008f76:	9b02      	ldr	r3, [sp, #8]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d14e      	bne.n	800901a <__kernel_rem_pio2+0x266>
 8008f7c:	4642      	mov	r2, r8
 8008f7e:	464b      	mov	r3, r9
 8008f80:	2000      	movs	r0, #0
 8008f82:	4952      	ldr	r1, [pc, #328]	; (80090cc <__kernel_rem_pio2+0x318>)
 8008f84:	f7f7 f924 	bl	80001d0 <__aeabi_dsub>
 8008f88:	4680      	mov	r8, r0
 8008f8a:	4689      	mov	r9, r1
 8008f8c:	2c00      	cmp	r4, #0
 8008f8e:	d044      	beq.n	800901a <__kernel_rem_pio2+0x266>
 8008f90:	4652      	mov	r2, sl
 8008f92:	2000      	movs	r0, #0
 8008f94:	494d      	ldr	r1, [pc, #308]	; (80090cc <__kernel_rem_pio2+0x318>)
 8008f96:	f000 fb93 	bl	80096c0 <scalbn>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	f7f7 f915 	bl	80001d0 <__aeabi_dsub>
 8008fa6:	4680      	mov	r8, r0
 8008fa8:	4689      	mov	r9, r1
 8008faa:	e036      	b.n	800901a <__kernel_rem_pio2+0x266>
 8008fac:	2200      	movs	r2, #0
 8008fae:	4b48      	ldr	r3, [pc, #288]	; (80090d0 <__kernel_rem_pio2+0x31c>)
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	f7f7 fac4 	bl	8000540 <__aeabi_dmul>
 8008fb8:	f7f7 fd5c 	bl	8000a74 <__aeabi_d2iz>
 8008fbc:	f7f7 fa56 	bl	800046c <__aeabi_i2d>
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4b44      	ldr	r3, [pc, #272]	; (80090d4 <__kernel_rem_pio2+0x320>)
 8008fc4:	4680      	mov	r8, r0
 8008fc6:	4689      	mov	r9, r1
 8008fc8:	f7f7 faba 	bl	8000540 <__aeabi_dmul>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	460b      	mov	r3, r1
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	4629      	mov	r1, r5
 8008fd4:	f7f7 f8fc 	bl	80001d0 <__aeabi_dsub>
 8008fd8:	f7f7 fd4c 	bl	8000a74 <__aeabi_d2iz>
 8008fdc:	9b02      	ldr	r3, [sp, #8]
 8008fde:	3e01      	subs	r6, #1
 8008fe0:	f843 0b04 	str.w	r0, [r3], #4
 8008fe4:	9302      	str	r3, [sp, #8]
 8008fe6:	ab70      	add	r3, sp, #448	; 0x1c0
 8008fe8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008fec:	4640      	mov	r0, r8
 8008fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	f7f7 f8ee 	bl	80001d4 <__adddf3>
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	460d      	mov	r5, r1
 8008ffc:	e762      	b.n	8008ec4 <__kernel_rem_pio2+0x110>
 8008ffe:	d105      	bne.n	800900c <__kernel_rem_pio2+0x258>
 8009000:	1e7b      	subs	r3, r7, #1
 8009002:	aa0c      	add	r2, sp, #48	; 0x30
 8009004:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009008:	15c3      	asrs	r3, r0, #23
 800900a:	e79b      	b.n	8008f44 <__kernel_rem_pio2+0x190>
 800900c:	2200      	movs	r2, #0
 800900e:	4b32      	ldr	r3, [pc, #200]	; (80090d8 <__kernel_rem_pio2+0x324>)
 8009010:	f7f7 fd1c 	bl	8000a4c <__aeabi_dcmpge>
 8009014:	2800      	cmp	r0, #0
 8009016:	d13f      	bne.n	8009098 <__kernel_rem_pio2+0x2e4>
 8009018:	9002      	str	r0, [sp, #8]
 800901a:	2200      	movs	r2, #0
 800901c:	2300      	movs	r3, #0
 800901e:	4640      	mov	r0, r8
 8009020:	4649      	mov	r1, r9
 8009022:	f7f7 fcf5 	bl	8000a10 <__aeabi_dcmpeq>
 8009026:	2800      	cmp	r0, #0
 8009028:	f000 80b5 	beq.w	8009196 <__kernel_rem_pio2+0x3e2>
 800902c:	1e7c      	subs	r4, r7, #1
 800902e:	4623      	mov	r3, r4
 8009030:	2200      	movs	r2, #0
 8009032:	9904      	ldr	r1, [sp, #16]
 8009034:	428b      	cmp	r3, r1
 8009036:	da64      	bge.n	8009102 <__kernel_rem_pio2+0x34e>
 8009038:	2a00      	cmp	r2, #0
 800903a:	d078      	beq.n	800912e <__kernel_rem_pio2+0x37a>
 800903c:	ab0c      	add	r3, sp, #48	; 0x30
 800903e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009042:	f1aa 0a18 	sub.w	sl, sl, #24
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 80a3 	beq.w	8009192 <__kernel_rem_pio2+0x3de>
 800904c:	4652      	mov	r2, sl
 800904e:	2000      	movs	r0, #0
 8009050:	491e      	ldr	r1, [pc, #120]	; (80090cc <__kernel_rem_pio2+0x318>)
 8009052:	f000 fb35 	bl	80096c0 <scalbn>
 8009056:	46a2      	mov	sl, r4
 8009058:	4606      	mov	r6, r0
 800905a:	460f      	mov	r7, r1
 800905c:	f04f 0800 	mov.w	r8, #0
 8009060:	00e3      	lsls	r3, r4, #3
 8009062:	9306      	str	r3, [sp, #24]
 8009064:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80090d0 <__kernel_rem_pio2+0x31c>
 8009068:	ab70      	add	r3, sp, #448	; 0x1c0
 800906a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800906e:	f1ba 0f00 	cmp.w	sl, #0
 8009072:	f280 80c6 	bge.w	8009202 <__kernel_rem_pio2+0x44e>
 8009076:	4627      	mov	r7, r4
 8009078:	f04f 0800 	mov.w	r8, #0
 800907c:	2f00      	cmp	r7, #0
 800907e:	f2c0 80f3 	blt.w	8009268 <__kernel_rem_pio2+0x4b4>
 8009082:	4b16      	ldr	r3, [pc, #88]	; (80090dc <__kernel_rem_pio2+0x328>)
 8009084:	f04f 0a00 	mov.w	sl, #0
 8009088:	461d      	mov	r5, r3
 800908a:	ab70      	add	r3, sp, #448	; 0x1c0
 800908c:	f04f 0b00 	mov.w	fp, #0
 8009090:	2600      	movs	r6, #0
 8009092:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8009096:	e0d9      	b.n	800924c <__kernel_rem_pio2+0x498>
 8009098:	2302      	movs	r3, #2
 800909a:	9302      	str	r3, [sp, #8]
 800909c:	e756      	b.n	8008f4c <__kernel_rem_pio2+0x198>
 800909e:	f8db 3000 	ldr.w	r3, [fp]
 80090a2:	b954      	cbnz	r4, 80090ba <__kernel_rem_pio2+0x306>
 80090a4:	b123      	cbz	r3, 80090b0 <__kernel_rem_pio2+0x2fc>
 80090a6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80090aa:	f8cb 3000 	str.w	r3, [fp]
 80090ae:	2301      	movs	r3, #1
 80090b0:	461c      	mov	r4, r3
 80090b2:	3201      	adds	r2, #1
 80090b4:	f10b 0b04 	add.w	fp, fp, #4
 80090b8:	e74f      	b.n	8008f5a <__kernel_rem_pio2+0x1a6>
 80090ba:	1acb      	subs	r3, r1, r3
 80090bc:	f8cb 3000 	str.w	r3, [fp]
 80090c0:	4623      	mov	r3, r4
 80090c2:	e7f5      	b.n	80090b0 <__kernel_rem_pio2+0x2fc>
 80090c4:	080099d0 	.word	0x080099d0
 80090c8:	40200000 	.word	0x40200000
 80090cc:	3ff00000 	.word	0x3ff00000
 80090d0:	3e700000 	.word	0x3e700000
 80090d4:	41700000 	.word	0x41700000
 80090d8:	3fe00000 	.word	0x3fe00000
 80090dc:	08009990 	.word	0x08009990
 80090e0:	1e7a      	subs	r2, r7, #1
 80090e2:	ab0c      	add	r3, sp, #48	; 0x30
 80090e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80090ec:	a90c      	add	r1, sp, #48	; 0x30
 80090ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80090f2:	e740      	b.n	8008f76 <__kernel_rem_pio2+0x1c2>
 80090f4:	1e7a      	subs	r2, r7, #1
 80090f6:	ab0c      	add	r3, sp, #48	; 0x30
 80090f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009100:	e7f4      	b.n	80090ec <__kernel_rem_pio2+0x338>
 8009102:	a90c      	add	r1, sp, #48	; 0x30
 8009104:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009108:	3b01      	subs	r3, #1
 800910a:	430a      	orrs	r2, r1
 800910c:	e791      	b.n	8009032 <__kernel_rem_pio2+0x27e>
 800910e:	3401      	adds	r4, #1
 8009110:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009114:	2a00      	cmp	r2, #0
 8009116:	d0fa      	beq.n	800910e <__kernel_rem_pio2+0x35a>
 8009118:	9b08      	ldr	r3, [sp, #32]
 800911a:	1c7e      	adds	r6, r7, #1
 800911c:	18fd      	adds	r5, r7, r3
 800911e:	ab20      	add	r3, sp, #128	; 0x80
 8009120:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009124:	443c      	add	r4, r7
 8009126:	42b4      	cmp	r4, r6
 8009128:	da04      	bge.n	8009134 <__kernel_rem_pio2+0x380>
 800912a:	4627      	mov	r7, r4
 800912c:	e6c0      	b.n	8008eb0 <__kernel_rem_pio2+0xfc>
 800912e:	2401      	movs	r4, #1
 8009130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009132:	e7ed      	b.n	8009110 <__kernel_rem_pio2+0x35c>
 8009134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009136:	462f      	mov	r7, r5
 8009138:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800913c:	f7f7 f996 	bl	800046c <__aeabi_i2d>
 8009140:	f04f 0b00 	mov.w	fp, #0
 8009144:	f04f 0800 	mov.w	r8, #0
 8009148:	f04f 0900 	mov.w	r9, #0
 800914c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914e:	e8e7 0102 	strd	r0, r1, [r7], #8
 8009152:	3b08      	subs	r3, #8
 8009154:	9302      	str	r3, [sp, #8]
 8009156:	9b06      	ldr	r3, [sp, #24]
 8009158:	459b      	cmp	fp, r3
 800915a:	dd07      	ble.n	800916c <__kernel_rem_pio2+0x3b8>
 800915c:	ab70      	add	r3, sp, #448	; 0x1c0
 800915e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009162:	463d      	mov	r5, r7
 8009164:	e9c3 8900 	strd	r8, r9, [r3]
 8009168:	3601      	adds	r6, #1
 800916a:	e7dc      	b.n	8009126 <__kernel_rem_pio2+0x372>
 800916c:	9902      	ldr	r1, [sp, #8]
 800916e:	f10b 0b01 	add.w	fp, fp, #1
 8009172:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8009176:	9102      	str	r1, [sp, #8]
 8009178:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800917c:	f7f7 f9e0 	bl	8000540 <__aeabi_dmul>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4640      	mov	r0, r8
 8009186:	4649      	mov	r1, r9
 8009188:	f7f7 f824 	bl	80001d4 <__adddf3>
 800918c:	4680      	mov	r8, r0
 800918e:	4689      	mov	r9, r1
 8009190:	e7e1      	b.n	8009156 <__kernel_rem_pio2+0x3a2>
 8009192:	3c01      	subs	r4, #1
 8009194:	e752      	b.n	800903c <__kernel_rem_pio2+0x288>
 8009196:	f1ca 0200 	rsb	r2, sl, #0
 800919a:	4640      	mov	r0, r8
 800919c:	4649      	mov	r1, r9
 800919e:	f000 fa8f 	bl	80096c0 <scalbn>
 80091a2:	2200      	movs	r2, #0
 80091a4:	4ba5      	ldr	r3, [pc, #660]	; (800943c <__kernel_rem_pio2+0x688>)
 80091a6:	4604      	mov	r4, r0
 80091a8:	460d      	mov	r5, r1
 80091aa:	f7f7 fc4f 	bl	8000a4c <__aeabi_dcmpge>
 80091ae:	b1f8      	cbz	r0, 80091f0 <__kernel_rem_pio2+0x43c>
 80091b0:	2200      	movs	r2, #0
 80091b2:	4ba3      	ldr	r3, [pc, #652]	; (8009440 <__kernel_rem_pio2+0x68c>)
 80091b4:	4620      	mov	r0, r4
 80091b6:	4629      	mov	r1, r5
 80091b8:	f7f7 f9c2 	bl	8000540 <__aeabi_dmul>
 80091bc:	f7f7 fc5a 	bl	8000a74 <__aeabi_d2iz>
 80091c0:	4606      	mov	r6, r0
 80091c2:	f7f7 f953 	bl	800046c <__aeabi_i2d>
 80091c6:	2200      	movs	r2, #0
 80091c8:	4b9c      	ldr	r3, [pc, #624]	; (800943c <__kernel_rem_pio2+0x688>)
 80091ca:	f7f7 f9b9 	bl	8000540 <__aeabi_dmul>
 80091ce:	460b      	mov	r3, r1
 80091d0:	4602      	mov	r2, r0
 80091d2:	4629      	mov	r1, r5
 80091d4:	4620      	mov	r0, r4
 80091d6:	f7f6 fffb 	bl	80001d0 <__aeabi_dsub>
 80091da:	f7f7 fc4b 	bl	8000a74 <__aeabi_d2iz>
 80091de:	1c7c      	adds	r4, r7, #1
 80091e0:	ab0c      	add	r3, sp, #48	; 0x30
 80091e2:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80091e6:	f10a 0a18 	add.w	sl, sl, #24
 80091ea:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80091ee:	e72d      	b.n	800904c <__kernel_rem_pio2+0x298>
 80091f0:	4620      	mov	r0, r4
 80091f2:	4629      	mov	r1, r5
 80091f4:	f7f7 fc3e 	bl	8000a74 <__aeabi_d2iz>
 80091f8:	ab0c      	add	r3, sp, #48	; 0x30
 80091fa:	463c      	mov	r4, r7
 80091fc:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009200:	e724      	b.n	800904c <__kernel_rem_pio2+0x298>
 8009202:	ab0c      	add	r3, sp, #48	; 0x30
 8009204:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009208:	f7f7 f930 	bl	800046c <__aeabi_i2d>
 800920c:	4632      	mov	r2, r6
 800920e:	463b      	mov	r3, r7
 8009210:	f7f7 f996 	bl	8000540 <__aeabi_dmul>
 8009214:	4642      	mov	r2, r8
 8009216:	e86b 0102 	strd	r0, r1, [fp], #-8
 800921a:	464b      	mov	r3, r9
 800921c:	4630      	mov	r0, r6
 800921e:	4639      	mov	r1, r7
 8009220:	f7f7 f98e 	bl	8000540 <__aeabi_dmul>
 8009224:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009228:	4606      	mov	r6, r0
 800922a:	460f      	mov	r7, r1
 800922c:	e71f      	b.n	800906e <__kernel_rem_pio2+0x2ba>
 800922e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009232:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009236:	f7f7 f983 	bl	8000540 <__aeabi_dmul>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4650      	mov	r0, sl
 8009240:	4659      	mov	r1, fp
 8009242:	f7f6 ffc7 	bl	80001d4 <__adddf3>
 8009246:	4682      	mov	sl, r0
 8009248:	468b      	mov	fp, r1
 800924a:	3601      	adds	r6, #1
 800924c:	9b04      	ldr	r3, [sp, #16]
 800924e:	429e      	cmp	r6, r3
 8009250:	dc01      	bgt.n	8009256 <__kernel_rem_pio2+0x4a2>
 8009252:	45b0      	cmp	r8, r6
 8009254:	daeb      	bge.n	800922e <__kernel_rem_pio2+0x47a>
 8009256:	ab48      	add	r3, sp, #288	; 0x120
 8009258:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800925c:	e9c3 ab00 	strd	sl, fp, [r3]
 8009260:	3f01      	subs	r7, #1
 8009262:	f108 0801 	add.w	r8, r8, #1
 8009266:	e709      	b.n	800907c <__kernel_rem_pio2+0x2c8>
 8009268:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800926a:	2b02      	cmp	r3, #2
 800926c:	dc09      	bgt.n	8009282 <__kernel_rem_pio2+0x4ce>
 800926e:	2b00      	cmp	r3, #0
 8009270:	dc34      	bgt.n	80092dc <__kernel_rem_pio2+0x528>
 8009272:	d05e      	beq.n	8009332 <__kernel_rem_pio2+0x57e>
 8009274:	9b07      	ldr	r3, [sp, #28]
 8009276:	f003 0007 	and.w	r0, r3, #7
 800927a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800927e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009282:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8009284:	2b03      	cmp	r3, #3
 8009286:	d1f5      	bne.n	8009274 <__kernel_rem_pio2+0x4c0>
 8009288:	9a06      	ldr	r2, [sp, #24]
 800928a:	ab48      	add	r3, sp, #288	; 0x120
 800928c:	441a      	add	r2, r3
 800928e:	4615      	mov	r5, r2
 8009290:	4692      	mov	sl, r2
 8009292:	46a3      	mov	fp, r4
 8009294:	f1bb 0f00 	cmp.w	fp, #0
 8009298:	dc7a      	bgt.n	8009390 <__kernel_rem_pio2+0x5dc>
 800929a:	46aa      	mov	sl, r5
 800929c:	46a3      	mov	fp, r4
 800929e:	f1bb 0f01 	cmp.w	fp, #1
 80092a2:	f300 8094 	bgt.w	80093ce <__kernel_rem_pio2+0x61a>
 80092a6:	2700      	movs	r7, #0
 80092a8:	463e      	mov	r6, r7
 80092aa:	2c01      	cmp	r4, #1
 80092ac:	f300 80ae 	bgt.w	800940c <__kernel_rem_pio2+0x658>
 80092b0:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80092b4:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80092b8:	9b02      	ldr	r3, [sp, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f040 80b0 	bne.w	8009420 <__kernel_rem_pio2+0x66c>
 80092c0:	4603      	mov	r3, r0
 80092c2:	462a      	mov	r2, r5
 80092c4:	9801      	ldr	r0, [sp, #4]
 80092c6:	e9c0 2300 	strd	r2, r3, [r0]
 80092ca:	4622      	mov	r2, r4
 80092cc:	460b      	mov	r3, r1
 80092ce:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80092d2:	463a      	mov	r2, r7
 80092d4:	4633      	mov	r3, r6
 80092d6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80092da:	e7cb      	b.n	8009274 <__kernel_rem_pio2+0x4c0>
 80092dc:	2000      	movs	r0, #0
 80092de:	9a06      	ldr	r2, [sp, #24]
 80092e0:	ab48      	add	r3, sp, #288	; 0x120
 80092e2:	441a      	add	r2, r3
 80092e4:	4615      	mov	r5, r2
 80092e6:	46a0      	mov	r8, r4
 80092e8:	4601      	mov	r1, r0
 80092ea:	f1b8 0f00 	cmp.w	r8, #0
 80092ee:	da3c      	bge.n	800936a <__kernel_rem_pio2+0x5b6>
 80092f0:	9b02      	ldr	r3, [sp, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d040      	beq.n	8009378 <__kernel_rem_pio2+0x5c4>
 80092f6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80092fa:	4602      	mov	r2, r0
 80092fc:	462b      	mov	r3, r5
 80092fe:	9d01      	ldr	r5, [sp, #4]
 8009300:	2601      	movs	r6, #1
 8009302:	e9c5 2300 	strd	r2, r3, [r5]
 8009306:	460b      	mov	r3, r1
 8009308:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800930c:	f7f6 ff60 	bl	80001d0 <__aeabi_dsub>
 8009310:	4684      	mov	ip, r0
 8009312:	460f      	mov	r7, r1
 8009314:	ad48      	add	r5, sp, #288	; 0x120
 8009316:	42b4      	cmp	r4, r6
 8009318:	f105 0508 	add.w	r5, r5, #8
 800931c:	da2e      	bge.n	800937c <__kernel_rem_pio2+0x5c8>
 800931e:	9b02      	ldr	r3, [sp, #8]
 8009320:	b10b      	cbz	r3, 8009326 <__kernel_rem_pio2+0x572>
 8009322:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009326:	4662      	mov	r2, ip
 8009328:	463b      	mov	r3, r7
 800932a:	9901      	ldr	r1, [sp, #4]
 800932c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009330:	e7a0      	b.n	8009274 <__kernel_rem_pio2+0x4c0>
 8009332:	9a06      	ldr	r2, [sp, #24]
 8009334:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8009336:	ab48      	add	r3, sp, #288	; 0x120
 8009338:	441a      	add	r2, r3
 800933a:	4615      	mov	r5, r2
 800933c:	4637      	mov	r7, r6
 800933e:	2c00      	cmp	r4, #0
 8009340:	da09      	bge.n	8009356 <__kernel_rem_pio2+0x5a2>
 8009342:	9b02      	ldr	r3, [sp, #8]
 8009344:	b10b      	cbz	r3, 800934a <__kernel_rem_pio2+0x596>
 8009346:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800934a:	4632      	mov	r2, r6
 800934c:	463b      	mov	r3, r7
 800934e:	9901      	ldr	r1, [sp, #4]
 8009350:	e9c1 2300 	strd	r2, r3, [r1]
 8009354:	e78e      	b.n	8009274 <__kernel_rem_pio2+0x4c0>
 8009356:	4630      	mov	r0, r6
 8009358:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800935c:	4639      	mov	r1, r7
 800935e:	f7f6 ff39 	bl	80001d4 <__adddf3>
 8009362:	3c01      	subs	r4, #1
 8009364:	4606      	mov	r6, r0
 8009366:	460f      	mov	r7, r1
 8009368:	e7e9      	b.n	800933e <__kernel_rem_pio2+0x58a>
 800936a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800936e:	f7f6 ff31 	bl	80001d4 <__adddf3>
 8009372:	f108 38ff 	add.w	r8, r8, #4294967295
 8009376:	e7b8      	b.n	80092ea <__kernel_rem_pio2+0x536>
 8009378:	460d      	mov	r5, r1
 800937a:	e7be      	b.n	80092fa <__kernel_rem_pio2+0x546>
 800937c:	4660      	mov	r0, ip
 800937e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009382:	4639      	mov	r1, r7
 8009384:	f7f6 ff26 	bl	80001d4 <__adddf3>
 8009388:	3601      	adds	r6, #1
 800938a:	4684      	mov	ip, r0
 800938c:	460f      	mov	r7, r1
 800938e:	e7c2      	b.n	8009316 <__kernel_rem_pio2+0x562>
 8009390:	e9da 6700 	ldrd	r6, r7, [sl]
 8009394:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009398:	4632      	mov	r2, r6
 800939a:	463b      	mov	r3, r7
 800939c:	4640      	mov	r0, r8
 800939e:	4649      	mov	r1, r9
 80093a0:	f7f6 ff18 	bl	80001d4 <__adddf3>
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093ac:	4640      	mov	r0, r8
 80093ae:	4649      	mov	r1, r9
 80093b0:	f7f6 ff0e 	bl	80001d0 <__aeabi_dsub>
 80093b4:	4632      	mov	r2, r6
 80093b6:	463b      	mov	r3, r7
 80093b8:	f7f6 ff0c 	bl	80001d4 <__adddf3>
 80093bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093c0:	e86a 0102 	strd	r0, r1, [sl], #-8
 80093c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093c8:	e9ca 2300 	strd	r2, r3, [sl]
 80093cc:	e762      	b.n	8009294 <__kernel_rem_pio2+0x4e0>
 80093ce:	e9da 8900 	ldrd	r8, r9, [sl]
 80093d2:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80093d6:	4642      	mov	r2, r8
 80093d8:	464b      	mov	r3, r9
 80093da:	4630      	mov	r0, r6
 80093dc:	4639      	mov	r1, r7
 80093de:	f7f6 fef9 	bl	80001d4 <__adddf3>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093ea:	4630      	mov	r0, r6
 80093ec:	4639      	mov	r1, r7
 80093ee:	f7f6 feef 	bl	80001d0 <__aeabi_dsub>
 80093f2:	4642      	mov	r2, r8
 80093f4:	464b      	mov	r3, r9
 80093f6:	f7f6 feed 	bl	80001d4 <__adddf3>
 80093fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093fe:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009402:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009406:	e9ca 2300 	strd	r2, r3, [sl]
 800940a:	e748      	b.n	800929e <__kernel_rem_pio2+0x4ea>
 800940c:	4638      	mov	r0, r7
 800940e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009412:	4631      	mov	r1, r6
 8009414:	f7f6 fede 	bl	80001d4 <__adddf3>
 8009418:	3c01      	subs	r4, #1
 800941a:	4607      	mov	r7, r0
 800941c:	460e      	mov	r6, r1
 800941e:	e744      	b.n	80092aa <__kernel_rem_pio2+0x4f6>
 8009420:	9b01      	ldr	r3, [sp, #4]
 8009422:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009426:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800942a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800942e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8009432:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009436:	601d      	str	r5, [r3, #0]
 8009438:	615e      	str	r6, [r3, #20]
 800943a:	e71b      	b.n	8009274 <__kernel_rem_pio2+0x4c0>
 800943c:	41700000 	.word	0x41700000
 8009440:	3e700000 	.word	0x3e700000
 8009444:	00000000 	.word	0x00000000

08009448 <__kernel_sin>:
 8009448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800944c:	b086      	sub	sp, #24
 800944e:	e9cd 2300 	strd	r2, r3, [sp]
 8009452:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009456:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800945a:	4682      	mov	sl, r0
 800945c:	460c      	mov	r4, r1
 800945e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009460:	da03      	bge.n	800946a <__kernel_sin+0x22>
 8009462:	f7f7 fb07 	bl	8000a74 <__aeabi_d2iz>
 8009466:	2800      	cmp	r0, #0
 8009468:	d050      	beq.n	800950c <__kernel_sin+0xc4>
 800946a:	4652      	mov	r2, sl
 800946c:	4623      	mov	r3, r4
 800946e:	4650      	mov	r0, sl
 8009470:	4621      	mov	r1, r4
 8009472:	f7f7 f865 	bl	8000540 <__aeabi_dmul>
 8009476:	4606      	mov	r6, r0
 8009478:	460f      	mov	r7, r1
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4650      	mov	r0, sl
 8009480:	4621      	mov	r1, r4
 8009482:	f7f7 f85d 	bl	8000540 <__aeabi_dmul>
 8009486:	a33e      	add	r3, pc, #248	; (adr r3, 8009580 <__kernel_sin+0x138>)
 8009488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948c:	4680      	mov	r8, r0
 800948e:	4689      	mov	r9, r1
 8009490:	4630      	mov	r0, r6
 8009492:	4639      	mov	r1, r7
 8009494:	f7f7 f854 	bl	8000540 <__aeabi_dmul>
 8009498:	a33b      	add	r3, pc, #236	; (adr r3, 8009588 <__kernel_sin+0x140>)
 800949a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949e:	f7f6 fe97 	bl	80001d0 <__aeabi_dsub>
 80094a2:	4632      	mov	r2, r6
 80094a4:	463b      	mov	r3, r7
 80094a6:	f7f7 f84b 	bl	8000540 <__aeabi_dmul>
 80094aa:	a339      	add	r3, pc, #228	; (adr r3, 8009590 <__kernel_sin+0x148>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	f7f6 fe90 	bl	80001d4 <__adddf3>
 80094b4:	4632      	mov	r2, r6
 80094b6:	463b      	mov	r3, r7
 80094b8:	f7f7 f842 	bl	8000540 <__aeabi_dmul>
 80094bc:	a336      	add	r3, pc, #216	; (adr r3, 8009598 <__kernel_sin+0x150>)
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	f7f6 fe85 	bl	80001d0 <__aeabi_dsub>
 80094c6:	4632      	mov	r2, r6
 80094c8:	463b      	mov	r3, r7
 80094ca:	f7f7 f839 	bl	8000540 <__aeabi_dmul>
 80094ce:	a334      	add	r3, pc, #208	; (adr r3, 80095a0 <__kernel_sin+0x158>)
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	f7f6 fe7e 	bl	80001d4 <__adddf3>
 80094d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094dc:	b9dd      	cbnz	r5, 8009516 <__kernel_sin+0xce>
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4630      	mov	r0, r6
 80094e4:	4639      	mov	r1, r7
 80094e6:	f7f7 f82b 	bl	8000540 <__aeabi_dmul>
 80094ea:	a32f      	add	r3, pc, #188	; (adr r3, 80095a8 <__kernel_sin+0x160>)
 80094ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f0:	f7f6 fe6e 	bl	80001d0 <__aeabi_dsub>
 80094f4:	4642      	mov	r2, r8
 80094f6:	464b      	mov	r3, r9
 80094f8:	f7f7 f822 	bl	8000540 <__aeabi_dmul>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4650      	mov	r0, sl
 8009502:	4621      	mov	r1, r4
 8009504:	f7f6 fe66 	bl	80001d4 <__adddf3>
 8009508:	4682      	mov	sl, r0
 800950a:	460c      	mov	r4, r1
 800950c:	4650      	mov	r0, sl
 800950e:	4621      	mov	r1, r4
 8009510:	b006      	add	sp, #24
 8009512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009516:	2200      	movs	r2, #0
 8009518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800951c:	4b24      	ldr	r3, [pc, #144]	; (80095b0 <__kernel_sin+0x168>)
 800951e:	f7f7 f80f 	bl	8000540 <__aeabi_dmul>
 8009522:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009526:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800952a:	4640      	mov	r0, r8
 800952c:	4649      	mov	r1, r9
 800952e:	f7f7 f807 	bl	8000540 <__aeabi_dmul>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800953a:	f7f6 fe49 	bl	80001d0 <__aeabi_dsub>
 800953e:	4632      	mov	r2, r6
 8009540:	463b      	mov	r3, r7
 8009542:	f7f6 fffd 	bl	8000540 <__aeabi_dmul>
 8009546:	e9dd 2300 	ldrd	r2, r3, [sp]
 800954a:	f7f6 fe41 	bl	80001d0 <__aeabi_dsub>
 800954e:	a316      	add	r3, pc, #88	; (adr r3, 80095a8 <__kernel_sin+0x160>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	4606      	mov	r6, r0
 8009556:	460f      	mov	r7, r1
 8009558:	4640      	mov	r0, r8
 800955a:	4649      	mov	r1, r9
 800955c:	f7f6 fff0 	bl	8000540 <__aeabi_dmul>
 8009560:	4602      	mov	r2, r0
 8009562:	460b      	mov	r3, r1
 8009564:	4630      	mov	r0, r6
 8009566:	4639      	mov	r1, r7
 8009568:	f7f6 fe34 	bl	80001d4 <__adddf3>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4650      	mov	r0, sl
 8009572:	4621      	mov	r1, r4
 8009574:	f7f6 fe2c 	bl	80001d0 <__aeabi_dsub>
 8009578:	e7c6      	b.n	8009508 <__kernel_sin+0xc0>
 800957a:	bf00      	nop
 800957c:	f3af 8000 	nop.w
 8009580:	5acfd57c 	.word	0x5acfd57c
 8009584:	3de5d93a 	.word	0x3de5d93a
 8009588:	8a2b9ceb 	.word	0x8a2b9ceb
 800958c:	3e5ae5e6 	.word	0x3e5ae5e6
 8009590:	57b1fe7d 	.word	0x57b1fe7d
 8009594:	3ec71de3 	.word	0x3ec71de3
 8009598:	19c161d5 	.word	0x19c161d5
 800959c:	3f2a01a0 	.word	0x3f2a01a0
 80095a0:	1110f8a6 	.word	0x1110f8a6
 80095a4:	3f811111 	.word	0x3f811111
 80095a8:	55555549 	.word	0x55555549
 80095ac:	3fc55555 	.word	0x3fc55555
 80095b0:	3fe00000 	.word	0x3fe00000

080095b4 <fabs>:
 80095b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80095b8:	4770      	bx	lr
 80095ba:	0000      	movs	r0, r0
 80095bc:	0000      	movs	r0, r0
	...

080095c0 <floor>:
 80095c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095c4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80095c8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80095cc:	2e13      	cmp	r6, #19
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	4607      	mov	r7, r0
 80095d4:	460c      	mov	r4, r1
 80095d6:	4605      	mov	r5, r0
 80095d8:	dc34      	bgt.n	8009644 <floor+0x84>
 80095da:	2e00      	cmp	r6, #0
 80095dc:	da15      	bge.n	800960a <floor+0x4a>
 80095de:	a334      	add	r3, pc, #208	; (adr r3, 80096b0 <floor+0xf0>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	f7f6 fdf6 	bl	80001d4 <__adddf3>
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	f7f7 fa38 	bl	8000a60 <__aeabi_dcmpgt>
 80095f0:	b140      	cbz	r0, 8009604 <floor+0x44>
 80095f2:	2c00      	cmp	r4, #0
 80095f4:	da59      	bge.n	80096aa <floor+0xea>
 80095f6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80095fa:	ea57 0503 	orrs.w	r5, r7, r3
 80095fe:	d001      	beq.n	8009604 <floor+0x44>
 8009600:	2500      	movs	r5, #0
 8009602:	4c2d      	ldr	r4, [pc, #180]	; (80096b8 <floor+0xf8>)
 8009604:	4623      	mov	r3, r4
 8009606:	462f      	mov	r7, r5
 8009608:	e025      	b.n	8009656 <floor+0x96>
 800960a:	4a2c      	ldr	r2, [pc, #176]	; (80096bc <floor+0xfc>)
 800960c:	fa42 f806 	asr.w	r8, r2, r6
 8009610:	ea01 0208 	and.w	r2, r1, r8
 8009614:	4302      	orrs	r2, r0
 8009616:	d01e      	beq.n	8009656 <floor+0x96>
 8009618:	a325      	add	r3, pc, #148	; (adr r3, 80096b0 <floor+0xf0>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f7f6 fdd9 	bl	80001d4 <__adddf3>
 8009622:	2200      	movs	r2, #0
 8009624:	2300      	movs	r3, #0
 8009626:	f7f7 fa1b 	bl	8000a60 <__aeabi_dcmpgt>
 800962a:	2800      	cmp	r0, #0
 800962c:	d0ea      	beq.n	8009604 <floor+0x44>
 800962e:	2c00      	cmp	r4, #0
 8009630:	bfbe      	ittt	lt
 8009632:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009636:	fa43 f606 	asrlt.w	r6, r3, r6
 800963a:	19a4      	addlt	r4, r4, r6
 800963c:	2500      	movs	r5, #0
 800963e:	ea24 0408 	bic.w	r4, r4, r8
 8009642:	e7df      	b.n	8009604 <floor+0x44>
 8009644:	2e33      	cmp	r6, #51	; 0x33
 8009646:	dd0a      	ble.n	800965e <floor+0x9e>
 8009648:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800964c:	d103      	bne.n	8009656 <floor+0x96>
 800964e:	f7f6 fdc1 	bl	80001d4 <__adddf3>
 8009652:	4607      	mov	r7, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4638      	mov	r0, r7
 8009658:	4619      	mov	r1, r3
 800965a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965e:	f04f 32ff 	mov.w	r2, #4294967295
 8009662:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009666:	fa22 f808 	lsr.w	r8, r2, r8
 800966a:	ea18 0f00 	tst.w	r8, r0
 800966e:	d0f2      	beq.n	8009656 <floor+0x96>
 8009670:	a30f      	add	r3, pc, #60	; (adr r3, 80096b0 <floor+0xf0>)
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f7f6 fdad 	bl	80001d4 <__adddf3>
 800967a:	2200      	movs	r2, #0
 800967c:	2300      	movs	r3, #0
 800967e:	f7f7 f9ef 	bl	8000a60 <__aeabi_dcmpgt>
 8009682:	2800      	cmp	r0, #0
 8009684:	d0be      	beq.n	8009604 <floor+0x44>
 8009686:	2c00      	cmp	r4, #0
 8009688:	da02      	bge.n	8009690 <floor+0xd0>
 800968a:	2e14      	cmp	r6, #20
 800968c:	d103      	bne.n	8009696 <floor+0xd6>
 800968e:	3401      	adds	r4, #1
 8009690:	ea25 0508 	bic.w	r5, r5, r8
 8009694:	e7b6      	b.n	8009604 <floor+0x44>
 8009696:	2301      	movs	r3, #1
 8009698:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800969c:	fa03 f606 	lsl.w	r6, r3, r6
 80096a0:	4435      	add	r5, r6
 80096a2:	42bd      	cmp	r5, r7
 80096a4:	bf38      	it	cc
 80096a6:	18e4      	addcc	r4, r4, r3
 80096a8:	e7f2      	b.n	8009690 <floor+0xd0>
 80096aa:	2500      	movs	r5, #0
 80096ac:	462c      	mov	r4, r5
 80096ae:	e7a9      	b.n	8009604 <floor+0x44>
 80096b0:	8800759c 	.word	0x8800759c
 80096b4:	7e37e43c 	.word	0x7e37e43c
 80096b8:	bff00000 	.word	0xbff00000
 80096bc:	000fffff 	.word	0x000fffff

080096c0 <scalbn>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80096c6:	4604      	mov	r4, r0
 80096c8:	460d      	mov	r5, r1
 80096ca:	4617      	mov	r7, r2
 80096cc:	460b      	mov	r3, r1
 80096ce:	b996      	cbnz	r6, 80096f6 <scalbn+0x36>
 80096d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80096d4:	4303      	orrs	r3, r0
 80096d6:	d039      	beq.n	800974c <scalbn+0x8c>
 80096d8:	4b35      	ldr	r3, [pc, #212]	; (80097b0 <scalbn+0xf0>)
 80096da:	2200      	movs	r2, #0
 80096dc:	f7f6 ff30 	bl	8000540 <__aeabi_dmul>
 80096e0:	4b34      	ldr	r3, [pc, #208]	; (80097b4 <scalbn+0xf4>)
 80096e2:	4604      	mov	r4, r0
 80096e4:	429f      	cmp	r7, r3
 80096e6:	460d      	mov	r5, r1
 80096e8:	da0f      	bge.n	800970a <scalbn+0x4a>
 80096ea:	a32d      	add	r3, pc, #180	; (adr r3, 80097a0 <scalbn+0xe0>)
 80096ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f0:	f7f6 ff26 	bl	8000540 <__aeabi_dmul>
 80096f4:	e006      	b.n	8009704 <scalbn+0x44>
 80096f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80096fa:	4296      	cmp	r6, r2
 80096fc:	d10a      	bne.n	8009714 <scalbn+0x54>
 80096fe:	4602      	mov	r2, r0
 8009700:	f7f6 fd68 	bl	80001d4 <__adddf3>
 8009704:	4604      	mov	r4, r0
 8009706:	460d      	mov	r5, r1
 8009708:	e020      	b.n	800974c <scalbn+0x8c>
 800970a:	460b      	mov	r3, r1
 800970c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009710:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009714:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009718:	19b9      	adds	r1, r7, r6
 800971a:	4291      	cmp	r1, r2
 800971c:	dd0e      	ble.n	800973c <scalbn+0x7c>
 800971e:	a322      	add	r3, pc, #136	; (adr r3, 80097a8 <scalbn+0xe8>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009728:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800972c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009730:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009734:	4820      	ldr	r0, [pc, #128]	; (80097b8 <scalbn+0xf8>)
 8009736:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800973a:	e7d9      	b.n	80096f0 <scalbn+0x30>
 800973c:	2900      	cmp	r1, #0
 800973e:	dd08      	ble.n	8009752 <scalbn+0x92>
 8009740:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009744:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009748:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800974c:	4620      	mov	r0, r4
 800974e:	4629      	mov	r1, r5
 8009750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009752:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009756:	da16      	bge.n	8009786 <scalbn+0xc6>
 8009758:	f24c 3350 	movw	r3, #50000	; 0xc350
 800975c:	429f      	cmp	r7, r3
 800975e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009762:	dd08      	ble.n	8009776 <scalbn+0xb6>
 8009764:	4c15      	ldr	r4, [pc, #84]	; (80097bc <scalbn+0xfc>)
 8009766:	4814      	ldr	r0, [pc, #80]	; (80097b8 <scalbn+0xf8>)
 8009768:	f363 74df 	bfi	r4, r3, #31, #1
 800976c:	a30e      	add	r3, pc, #56	; (adr r3, 80097a8 <scalbn+0xe8>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	4621      	mov	r1, r4
 8009774:	e7bc      	b.n	80096f0 <scalbn+0x30>
 8009776:	4c12      	ldr	r4, [pc, #72]	; (80097c0 <scalbn+0x100>)
 8009778:	4812      	ldr	r0, [pc, #72]	; (80097c4 <scalbn+0x104>)
 800977a:	f363 74df 	bfi	r4, r3, #31, #1
 800977e:	a308      	add	r3, pc, #32	; (adr r3, 80097a0 <scalbn+0xe0>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	e7f5      	b.n	8009772 <scalbn+0xb2>
 8009786:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800978a:	3136      	adds	r1, #54	; 0x36
 800978c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009790:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009794:	4620      	mov	r0, r4
 8009796:	4629      	mov	r1, r5
 8009798:	2200      	movs	r2, #0
 800979a:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <scalbn+0x108>)
 800979c:	e7a8      	b.n	80096f0 <scalbn+0x30>
 800979e:	bf00      	nop
 80097a0:	c2f8f359 	.word	0xc2f8f359
 80097a4:	01a56e1f 	.word	0x01a56e1f
 80097a8:	8800759c 	.word	0x8800759c
 80097ac:	7e37e43c 	.word	0x7e37e43c
 80097b0:	43500000 	.word	0x43500000
 80097b4:	ffff3cb0 	.word	0xffff3cb0
 80097b8:	8800759c 	.word	0x8800759c
 80097bc:	7e37e43c 	.word	0x7e37e43c
 80097c0:	01a56e1f 	.word	0x01a56e1f
 80097c4:	c2f8f359 	.word	0xc2f8f359
 80097c8:	3c900000 	.word	0x3c900000

080097cc <_init>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	bf00      	nop
 80097d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097d2:	bc08      	pop	{r3}
 80097d4:	469e      	mov	lr, r3
 80097d6:	4770      	bx	lr

080097d8 <_fini>:
 80097d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097da:	bf00      	nop
 80097dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097de:	bc08      	pop	{r3}
 80097e0:	469e      	mov	lr, r3
 80097e2:	4770      	bx	lr
