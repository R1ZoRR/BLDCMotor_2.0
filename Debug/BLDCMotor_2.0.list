
BLDCMotor_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000947c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08009608  08009608  00019608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009800  08009800  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08009800  08009800  00019800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009808  08009808  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009808  08009808  00019808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800980c  0800980c  0001980c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08009810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c28  20000020  08009830  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c48  08009830  00020c48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b0d  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025c1  00000000  00000000  00032b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00035118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  000361e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209ba  00000000  00000000  000371c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ef8  00000000  00000000  00057b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c842a  00000000  00000000  00069a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131e9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ccc  00000000  00000000  00131ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080095ec 	.word	0x080095ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	080095ec 	.word	0x080095ec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <__aeabi_uldivmod>:
 800114c:	b953      	cbnz	r3, 8001164 <__aeabi_uldivmod+0x18>
 800114e:	b94a      	cbnz	r2, 8001164 <__aeabi_uldivmod+0x18>
 8001150:	2900      	cmp	r1, #0
 8001152:	bf08      	it	eq
 8001154:	2800      	cmpeq	r0, #0
 8001156:	bf1c      	itt	ne
 8001158:	f04f 31ff 	movne.w	r1, #4294967295
 800115c:	f04f 30ff 	movne.w	r0, #4294967295
 8001160:	f000 b96e 	b.w	8001440 <__aeabi_idiv0>
 8001164:	f1ad 0c08 	sub.w	ip, sp, #8
 8001168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800116c:	f000 f806 	bl	800117c <__udivmoddi4>
 8001170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr

0800117c <__udivmoddi4>:
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	9e08      	ldr	r6, [sp, #32]
 8001182:	460d      	mov	r5, r1
 8001184:	4604      	mov	r4, r0
 8001186:	468e      	mov	lr, r1
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 8083 	bne.w	8001294 <__udivmoddi4+0x118>
 800118e:	428a      	cmp	r2, r1
 8001190:	4617      	mov	r7, r2
 8001192:	d947      	bls.n	8001224 <__udivmoddi4+0xa8>
 8001194:	fab2 f382 	clz	r3, r2
 8001198:	b14b      	cbz	r3, 80011ae <__udivmoddi4+0x32>
 800119a:	f1c3 0120 	rsb	r1, r3, #32
 800119e:	fa05 fe03 	lsl.w	lr, r5, r3
 80011a2:	fa20 f101 	lsr.w	r1, r0, r1
 80011a6:	409f      	lsls	r7, r3
 80011a8:	ea41 0e0e 	orr.w	lr, r1, lr
 80011ac:	409c      	lsls	r4, r3
 80011ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011b2:	fbbe fcf8 	udiv	ip, lr, r8
 80011b6:	fa1f f987 	uxth.w	r9, r7
 80011ba:	fb08 e21c 	mls	r2, r8, ip, lr
 80011be:	fb0c f009 	mul.w	r0, ip, r9
 80011c2:	0c21      	lsrs	r1, r4, #16
 80011c4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d90a      	bls.n	80011e2 <__udivmoddi4+0x66>
 80011cc:	18ba      	adds	r2, r7, r2
 80011ce:	f10c 31ff 	add.w	r1, ip, #4294967295
 80011d2:	f080 8118 	bcs.w	8001406 <__udivmoddi4+0x28a>
 80011d6:	4290      	cmp	r0, r2
 80011d8:	f240 8115 	bls.w	8001406 <__udivmoddi4+0x28a>
 80011dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80011e0:	443a      	add	r2, r7
 80011e2:	1a12      	subs	r2, r2, r0
 80011e4:	fbb2 f0f8 	udiv	r0, r2, r8
 80011e8:	fb08 2210 	mls	r2, r8, r0, r2
 80011ec:	fb00 f109 	mul.w	r1, r0, r9
 80011f0:	b2a4      	uxth	r4, r4
 80011f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011f6:	42a1      	cmp	r1, r4
 80011f8:	d909      	bls.n	800120e <__udivmoddi4+0x92>
 80011fa:	193c      	adds	r4, r7, r4
 80011fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8001200:	f080 8103 	bcs.w	800140a <__udivmoddi4+0x28e>
 8001204:	42a1      	cmp	r1, r4
 8001206:	f240 8100 	bls.w	800140a <__udivmoddi4+0x28e>
 800120a:	3802      	subs	r0, #2
 800120c:	443c      	add	r4, r7
 800120e:	1a64      	subs	r4, r4, r1
 8001210:	2100      	movs	r1, #0
 8001212:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001216:	b11e      	cbz	r6, 8001220 <__udivmoddi4+0xa4>
 8001218:	2200      	movs	r2, #0
 800121a:	40dc      	lsrs	r4, r3
 800121c:	e9c6 4200 	strd	r4, r2, [r6]
 8001220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001224:	b902      	cbnz	r2, 8001228 <__udivmoddi4+0xac>
 8001226:	deff      	udf	#255	; 0xff
 8001228:	fab2 f382 	clz	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d14f      	bne.n	80012d0 <__udivmoddi4+0x154>
 8001230:	1a8d      	subs	r5, r1, r2
 8001232:	2101      	movs	r1, #1
 8001234:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001238:	fa1f f882 	uxth.w	r8, r2
 800123c:	fbb5 fcfe 	udiv	ip, r5, lr
 8001240:	fb0e 551c 	mls	r5, lr, ip, r5
 8001244:	fb08 f00c 	mul.w	r0, r8, ip
 8001248:	0c22      	lsrs	r2, r4, #16
 800124a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800124e:	42a8      	cmp	r0, r5
 8001250:	d907      	bls.n	8001262 <__udivmoddi4+0xe6>
 8001252:	197d      	adds	r5, r7, r5
 8001254:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001258:	d202      	bcs.n	8001260 <__udivmoddi4+0xe4>
 800125a:	42a8      	cmp	r0, r5
 800125c:	f200 80e9 	bhi.w	8001432 <__udivmoddi4+0x2b6>
 8001260:	4694      	mov	ip, r2
 8001262:	1a2d      	subs	r5, r5, r0
 8001264:	fbb5 f0fe 	udiv	r0, r5, lr
 8001268:	fb0e 5510 	mls	r5, lr, r0, r5
 800126c:	fb08 f800 	mul.w	r8, r8, r0
 8001270:	b2a4      	uxth	r4, r4
 8001272:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001276:	45a0      	cmp	r8, r4
 8001278:	d907      	bls.n	800128a <__udivmoddi4+0x10e>
 800127a:	193c      	adds	r4, r7, r4
 800127c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001280:	d202      	bcs.n	8001288 <__udivmoddi4+0x10c>
 8001282:	45a0      	cmp	r8, r4
 8001284:	f200 80d9 	bhi.w	800143a <__udivmoddi4+0x2be>
 8001288:	4610      	mov	r0, r2
 800128a:	eba4 0408 	sub.w	r4, r4, r8
 800128e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001292:	e7c0      	b.n	8001216 <__udivmoddi4+0x9a>
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x12e>
 8001298:	2e00      	cmp	r6, #0
 800129a:	f000 80b1 	beq.w	8001400 <__udivmoddi4+0x284>
 800129e:	2100      	movs	r1, #0
 80012a0:	e9c6 0500 	strd	r0, r5, [r6]
 80012a4:	4608      	mov	r0, r1
 80012a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012aa:	fab3 f183 	clz	r1, r3
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d14b      	bne.n	800134a <__udivmoddi4+0x1ce>
 80012b2:	42ab      	cmp	r3, r5
 80012b4:	d302      	bcc.n	80012bc <__udivmoddi4+0x140>
 80012b6:	4282      	cmp	r2, r0
 80012b8:	f200 80b9 	bhi.w	800142e <__udivmoddi4+0x2b2>
 80012bc:	1a84      	subs	r4, r0, r2
 80012be:	eb65 0303 	sbc.w	r3, r5, r3
 80012c2:	2001      	movs	r0, #1
 80012c4:	469e      	mov	lr, r3
 80012c6:	2e00      	cmp	r6, #0
 80012c8:	d0aa      	beq.n	8001220 <__udivmoddi4+0xa4>
 80012ca:	e9c6 4e00 	strd	r4, lr, [r6]
 80012ce:	e7a7      	b.n	8001220 <__udivmoddi4+0xa4>
 80012d0:	409f      	lsls	r7, r3
 80012d2:	f1c3 0220 	rsb	r2, r3, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80012e0:	fa1f f887 	uxth.w	r8, r7
 80012e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80012e8:	fa24 f202 	lsr.w	r2, r4, r2
 80012ec:	409d      	lsls	r5, r3
 80012ee:	fb00 fc08 	mul.w	ip, r0, r8
 80012f2:	432a      	orrs	r2, r5
 80012f4:	0c15      	lsrs	r5, r2, #16
 80012f6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012fa:	45ac      	cmp	ip, r5
 80012fc:	fa04 f403 	lsl.w	r4, r4, r3
 8001300:	d909      	bls.n	8001316 <__udivmoddi4+0x19a>
 8001302:	197d      	adds	r5, r7, r5
 8001304:	f100 31ff 	add.w	r1, r0, #4294967295
 8001308:	f080 808f 	bcs.w	800142a <__udivmoddi4+0x2ae>
 800130c:	45ac      	cmp	ip, r5
 800130e:	f240 808c 	bls.w	800142a <__udivmoddi4+0x2ae>
 8001312:	3802      	subs	r0, #2
 8001314:	443d      	add	r5, r7
 8001316:	eba5 050c 	sub.w	r5, r5, ip
 800131a:	fbb5 f1fe 	udiv	r1, r5, lr
 800131e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001322:	fb01 f908 	mul.w	r9, r1, r8
 8001326:	b295      	uxth	r5, r2
 8001328:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800132c:	45a9      	cmp	r9, r5
 800132e:	d907      	bls.n	8001340 <__udivmoddi4+0x1c4>
 8001330:	197d      	adds	r5, r7, r5
 8001332:	f101 32ff 	add.w	r2, r1, #4294967295
 8001336:	d274      	bcs.n	8001422 <__udivmoddi4+0x2a6>
 8001338:	45a9      	cmp	r9, r5
 800133a:	d972      	bls.n	8001422 <__udivmoddi4+0x2a6>
 800133c:	3902      	subs	r1, #2
 800133e:	443d      	add	r5, r7
 8001340:	eba5 0509 	sub.w	r5, r5, r9
 8001344:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001348:	e778      	b.n	800123c <__udivmoddi4+0xc0>
 800134a:	f1c1 0720 	rsb	r7, r1, #32
 800134e:	408b      	lsls	r3, r1
 8001350:	fa22 fc07 	lsr.w	ip, r2, r7
 8001354:	ea4c 0c03 	orr.w	ip, ip, r3
 8001358:	fa25 f407 	lsr.w	r4, r5, r7
 800135c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001360:	fbb4 f9fe 	udiv	r9, r4, lr
 8001364:	fa1f f88c 	uxth.w	r8, ip
 8001368:	fb0e 4419 	mls	r4, lr, r9, r4
 800136c:	fa20 f307 	lsr.w	r3, r0, r7
 8001370:	fb09 fa08 	mul.w	sl, r9, r8
 8001374:	408d      	lsls	r5, r1
 8001376:	431d      	orrs	r5, r3
 8001378:	0c2b      	lsrs	r3, r5, #16
 800137a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800137e:	45a2      	cmp	sl, r4
 8001380:	fa02 f201 	lsl.w	r2, r2, r1
 8001384:	fa00 f301 	lsl.w	r3, r0, r1
 8001388:	d909      	bls.n	800139e <__udivmoddi4+0x222>
 800138a:	eb1c 0404 	adds.w	r4, ip, r4
 800138e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001392:	d248      	bcs.n	8001426 <__udivmoddi4+0x2aa>
 8001394:	45a2      	cmp	sl, r4
 8001396:	d946      	bls.n	8001426 <__udivmoddi4+0x2aa>
 8001398:	f1a9 0902 	sub.w	r9, r9, #2
 800139c:	4464      	add	r4, ip
 800139e:	eba4 040a 	sub.w	r4, r4, sl
 80013a2:	fbb4 f0fe 	udiv	r0, r4, lr
 80013a6:	fb0e 4410 	mls	r4, lr, r0, r4
 80013aa:	fb00 fa08 	mul.w	sl, r0, r8
 80013ae:	b2ad      	uxth	r5, r5
 80013b0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013b4:	45a2      	cmp	sl, r4
 80013b6:	d908      	bls.n	80013ca <__udivmoddi4+0x24e>
 80013b8:	eb1c 0404 	adds.w	r4, ip, r4
 80013bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80013c0:	d22d      	bcs.n	800141e <__udivmoddi4+0x2a2>
 80013c2:	45a2      	cmp	sl, r4
 80013c4:	d92b      	bls.n	800141e <__udivmoddi4+0x2a2>
 80013c6:	3802      	subs	r0, #2
 80013c8:	4464      	add	r4, ip
 80013ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013ce:	fba0 8902 	umull	r8, r9, r0, r2
 80013d2:	eba4 040a 	sub.w	r4, r4, sl
 80013d6:	454c      	cmp	r4, r9
 80013d8:	46c6      	mov	lr, r8
 80013da:	464d      	mov	r5, r9
 80013dc:	d319      	bcc.n	8001412 <__udivmoddi4+0x296>
 80013de:	d016      	beq.n	800140e <__udivmoddi4+0x292>
 80013e0:	b15e      	cbz	r6, 80013fa <__udivmoddi4+0x27e>
 80013e2:	ebb3 020e 	subs.w	r2, r3, lr
 80013e6:	eb64 0405 	sbc.w	r4, r4, r5
 80013ea:	fa04 f707 	lsl.w	r7, r4, r7
 80013ee:	fa22 f301 	lsr.w	r3, r2, r1
 80013f2:	431f      	orrs	r7, r3
 80013f4:	40cc      	lsrs	r4, r1
 80013f6:	e9c6 7400 	strd	r7, r4, [r6]
 80013fa:	2100      	movs	r1, #0
 80013fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001400:	4631      	mov	r1, r6
 8001402:	4630      	mov	r0, r6
 8001404:	e70c      	b.n	8001220 <__udivmoddi4+0xa4>
 8001406:	468c      	mov	ip, r1
 8001408:	e6eb      	b.n	80011e2 <__udivmoddi4+0x66>
 800140a:	4610      	mov	r0, r2
 800140c:	e6ff      	b.n	800120e <__udivmoddi4+0x92>
 800140e:	4543      	cmp	r3, r8
 8001410:	d2e6      	bcs.n	80013e0 <__udivmoddi4+0x264>
 8001412:	ebb8 0e02 	subs.w	lr, r8, r2
 8001416:	eb69 050c 	sbc.w	r5, r9, ip
 800141a:	3801      	subs	r0, #1
 800141c:	e7e0      	b.n	80013e0 <__udivmoddi4+0x264>
 800141e:	4628      	mov	r0, r5
 8001420:	e7d3      	b.n	80013ca <__udivmoddi4+0x24e>
 8001422:	4611      	mov	r1, r2
 8001424:	e78c      	b.n	8001340 <__udivmoddi4+0x1c4>
 8001426:	4681      	mov	r9, r0
 8001428:	e7b9      	b.n	800139e <__udivmoddi4+0x222>
 800142a:	4608      	mov	r0, r1
 800142c:	e773      	b.n	8001316 <__udivmoddi4+0x19a>
 800142e:	4608      	mov	r0, r1
 8001430:	e749      	b.n	80012c6 <__udivmoddi4+0x14a>
 8001432:	f1ac 0c02 	sub.w	ip, ip, #2
 8001436:	443d      	add	r5, r7
 8001438:	e713      	b.n	8001262 <__udivmoddi4+0xe6>
 800143a:	3802      	subs	r0, #2
 800143c:	443c      	add	r4, r7
 800143e:	e724      	b.n	800128a <__udivmoddi4+0x10e>

08001440 <__aeabi_idiv0>:
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <initialize_PID_constants>:
float I_beta = 0;
float I_d = 0;
float I_q = 0;
float summ = 0;

void initialize_PID_constants() {
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	Kp = 3;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <initialize_PID_constants+0x20>)
 800144a:	4a07      	ldr	r2, [pc, #28]	; (8001468 <initialize_PID_constants+0x24>)
 800144c:	601a      	str	r2, [r3, #0]
	Ki = 5;
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <initialize_PID_constants+0x28>)
 8001450:	4a07      	ldr	r2, [pc, #28]	; (8001470 <initialize_PID_constants+0x2c>)
 8001452:	601a      	str	r2, [r3, #0]
    Kd = 1;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <initialize_PID_constants+0x30>)
 8001456:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800145a:	601a      	str	r2, [r3, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	2000063c 	.word	0x2000063c
 8001468:	40400000 	.word	0x40400000
 800146c:	20000074 	.word	0x20000074
 8001470:	40a00000 	.word	0x40a00000
 8001474:	20000364 	.word	0x20000364

08001478 <move_rotor>:
uint16_t cnt_hall_last = 0;

/////////////////////////////////

// Функция изменяет ШИМ в соответсвии с указанным вектором тяги
void move_rotor(float to_angle) {
 8001478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
	// Расчет потенциалов и заполнения шима для фаз
	U_PWM = pwm*(sin((to_angle)     * M_PI/180) + sin((to_angle)     * M_PI/60)/4);
 8001482:	4bc3      	ldr	r3, [pc, #780]	; (8001790 <move_rotor+0x318>)
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe fff0 	bl	800046c <__aeabi_i2d>
 800148c:	4604      	mov	r4, r0
 800148e:	460d      	mov	r5, r1
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7fe fffd 	bl	8000490 <__aeabi_f2d>
 8001496:	a3bc      	add	r3, pc, #752	; (adr r3, 8001788 <move_rotor+0x310>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff f850 	bl	8000540 <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4bb9      	ldr	r3, [pc, #740]	; (8001794 <move_rotor+0x31c>)
 80014ae:	f7ff f971 	bl	8000794 <__aeabi_ddiv>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f007 f897 	bl	80085ec <sin>
 80014be:	4680      	mov	r8, r0
 80014c0:	4689      	mov	r9, r1
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7fe ffe4 	bl	8000490 <__aeabi_f2d>
 80014c8:	a3af      	add	r3, pc, #700	; (adr r3, 8001788 <move_rotor+0x310>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f837 	bl	8000540 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	4bae      	ldr	r3, [pc, #696]	; (8001798 <move_rotor+0x320>)
 80014e0:	f7ff f958 	bl	8000794 <__aeabi_ddiv>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f007 f87e 	bl	80085ec <sin>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4ba9      	ldr	r3, [pc, #676]	; (800179c <move_rotor+0x324>)
 80014f6:	f7ff f94d 	bl	8000794 <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4640      	mov	r0, r8
 8001500:	4649      	mov	r1, r9
 8001502:	f7fe fe67 	bl	80001d4 <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4620      	mov	r0, r4
 800150c:	4629      	mov	r1, r5
 800150e:	f7ff f817 	bl	8000540 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fad3 	bl	8000ac4 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	4a9f      	ldr	r2, [pc, #636]	; (80017a0 <move_rotor+0x328>)
 8001522:	6013      	str	r3, [r2, #0]
	V_PWM = pwm*(sin((to_angle+240) * M_PI/180) + sin((to_angle+240) * M_PI/60)/4);
 8001524:	4b9a      	ldr	r3, [pc, #616]	; (8001790 <move_rotor+0x318>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ff9f 	bl	800046c <__aeabi_i2d>
 800152e:	4604      	mov	r4, r0
 8001530:	460d      	mov	r5, r1
 8001532:	499c      	ldr	r1, [pc, #624]	; (80017a4 <move_rotor+0x32c>)
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fb1b 	bl	8000b70 <__addsf3>
 800153a:	4603      	mov	r3, r0
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ffa7 	bl	8000490 <__aeabi_f2d>
 8001542:	a391      	add	r3, pc, #580	; (adr r3, 8001788 <move_rotor+0x310>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe fffa 	bl	8000540 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b8e      	ldr	r3, [pc, #568]	; (8001794 <move_rotor+0x31c>)
 800155a:	f7ff f91b 	bl	8000794 <__aeabi_ddiv>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f007 f841 	bl	80085ec <sin>
 800156a:	4680      	mov	r8, r0
 800156c:	4689      	mov	r9, r1
 800156e:	498d      	ldr	r1, [pc, #564]	; (80017a4 <move_rotor+0x32c>)
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff fafd 	bl	8000b70 <__addsf3>
 8001576:	4603      	mov	r3, r0
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff89 	bl	8000490 <__aeabi_f2d>
 800157e:	a382      	add	r3, pc, #520	; (adr r3, 8001788 <move_rotor+0x310>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7fe ffdc 	bl	8000540 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	4b80      	ldr	r3, [pc, #512]	; (8001798 <move_rotor+0x320>)
 8001596:	f7ff f8fd 	bl	8000794 <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f007 f823 	bl	80085ec <sin>
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b7c      	ldr	r3, [pc, #496]	; (800179c <move_rotor+0x324>)
 80015ac:	f7ff f8f2 	bl	8000794 <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4640      	mov	r0, r8
 80015b6:	4649      	mov	r1, r9
 80015b8:	f7fe fe0c 	bl	80001d4 <__adddf3>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7fe ffbc 	bl	8000540 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fa78 	bl	8000ac4 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a74      	ldr	r2, [pc, #464]	; (80017a8 <move_rotor+0x330>)
 80015d8:	6013      	str	r3, [r2, #0]
	W_PWM = pwm*(sin((to_angle+120) * M_PI/180) + sin((to_angle+120) * M_PI/60)/4);
 80015da:	4b6d      	ldr	r3, [pc, #436]	; (8001790 <move_rotor+0x318>)
 80015dc:	881b      	ldrh	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ff44 	bl	800046c <__aeabi_i2d>
 80015e4:	4604      	mov	r4, r0
 80015e6:	460d      	mov	r5, r1
 80015e8:	4970      	ldr	r1, [pc, #448]	; (80017ac <move_rotor+0x334>)
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff fac0 	bl	8000b70 <__addsf3>
 80015f0:	4603      	mov	r3, r0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff4c 	bl	8000490 <__aeabi_f2d>
 80015f8:	a363      	add	r3, pc, #396	; (adr r3, 8001788 <move_rotor+0x310>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe ff9f 	bl	8000540 <__aeabi_dmul>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b61      	ldr	r3, [pc, #388]	; (8001794 <move_rotor+0x31c>)
 8001610:	f7ff f8c0 	bl	8000794 <__aeabi_ddiv>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f006 ffe6 	bl	80085ec <sin>
 8001620:	4680      	mov	r8, r0
 8001622:	4689      	mov	r9, r1
 8001624:	4961      	ldr	r1, [pc, #388]	; (80017ac <move_rotor+0x334>)
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff faa2 	bl	8000b70 <__addsf3>
 800162c:	4603      	mov	r3, r0
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff2e 	bl	8000490 <__aeabi_f2d>
 8001634:	a354      	add	r3, pc, #336	; (adr r3, 8001788 <move_rotor+0x310>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe ff81 	bl	8000540 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b53      	ldr	r3, [pc, #332]	; (8001798 <move_rotor+0x320>)
 800164c:	f7ff f8a2 	bl	8000794 <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f006 ffc8 	bl	80085ec <sin>
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	4b4e      	ldr	r3, [pc, #312]	; (800179c <move_rotor+0x324>)
 8001662:	f7ff f897 	bl	8000794 <__aeabi_ddiv>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4640      	mov	r0, r8
 800166c:	4649      	mov	r1, r9
 800166e:	f7fe fdb1 	bl	80001d4 <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4620      	mov	r0, r4
 8001678:	4629      	mov	r1, r5
 800167a:	f7fe ff61 	bl	8000540 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fa1d 	bl	8000ac4 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	4a48      	ldr	r2, [pc, #288]	; (80017b0 <move_rotor+0x338>)
 800168e:	6013      	str	r3, [r2, #0]
	/////////////////////////////////
	// Перенастройка шима на фазах

	if(U_PWM >= 0) { // if, т. к. позитивными и негативными ключами управляют разные каналы таймеров
 8001690:	4b43      	ldr	r3, [pc, #268]	; (80017a0 <move_rotor+0x328>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fd23 	bl	80010e4 <__aeabi_fcmpge>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d011      	beq.n	80016c8 <move_rotor+0x250>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80016a4:	2100      	movs	r1, #0
 80016a6:	4843      	ldr	r0, [pc, #268]	; (80017b4 <move_rotor+0x33c>)
 80016a8:	f006 fa4c 	bl	8007b44 <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR1 = (uint16_t)(U_PWM);
 80016ac:	4b3c      	ldr	r3, [pc, #240]	; (80017a0 <move_rotor+0x328>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fd2b 	bl	800110c <__aeabi_f2uiz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <move_rotor+0x340>)
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016be:	2100      	movs	r1, #0
 80016c0:	483c      	ldr	r0, [pc, #240]	; (80017b4 <move_rotor+0x33c>)
 80016c2:	f005 fad3 	bl	8006c6c <HAL_TIM_PWM_Start>
 80016c6:	e012      	b.n	80016ee <move_rotor+0x276>
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80016c8:	2100      	movs	r1, #0
 80016ca:	483a      	ldr	r0, [pc, #232]	; (80017b4 <move_rotor+0x33c>)
 80016cc:	f005 fb0c 	bl	8006ce8 <HAL_TIM_PWM_Stop>
		TIM1->CCR1 = (uint16_t)(-U_PWM);
 80016d0:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <move_rotor+0x328>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fd17 	bl	800110c <__aeabi_f2uiz>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <move_rotor+0x340>)
 80016e4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80016e6:	2100      	movs	r1, #0
 80016e8:	4832      	ldr	r0, [pc, #200]	; (80017b4 <move_rotor+0x33c>)
 80016ea:	f006 fa01 	bl	8007af0 <HAL_TIMEx_PWMN_Start>
	}

	if(W_PWM >= 0) {
 80016ee:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <move_rotor+0x338>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f04f 0100 	mov.w	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fcf4 	bl	80010e4 <__aeabi_fcmpge>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d011      	beq.n	8001726 <move_rotor+0x2ae>
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001702:	2100      	movs	r1, #0
 8001704:	482d      	ldr	r0, [pc, #180]	; (80017bc <move_rotor+0x344>)
 8001706:	f006 fa1d 	bl	8007b44 <HAL_TIMEx_PWMN_Stop>
		TIM8->CCR1 = (uint16_t)(V_PWM);
 800170a:	4b27      	ldr	r3, [pc, #156]	; (80017a8 <move_rotor+0x330>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fcfc 	bl	800110c <__aeabi_f2uiz>
 8001714:	4603      	mov	r3, r0
 8001716:	b29a      	uxth	r2, r3
 8001718:	4b29      	ldr	r3, [pc, #164]	; (80017c0 <move_rotor+0x348>)
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800171c:	2100      	movs	r1, #0
 800171e:	4827      	ldr	r0, [pc, #156]	; (80017bc <move_rotor+0x344>)
 8001720:	f005 faa4 	bl	8006c6c <HAL_TIM_PWM_Start>
 8001724:	e012      	b.n	800174c <move_rotor+0x2d4>
	}
	else {
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001726:	2100      	movs	r1, #0
 8001728:	4824      	ldr	r0, [pc, #144]	; (80017bc <move_rotor+0x344>)
 800172a:	f005 fadd 	bl	8006ce8 <HAL_TIM_PWM_Stop>
		TIM8->CCR1 = (uint16_t)(-V_PWM);
 800172e:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <move_rotor+0x330>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fce8 	bl	800110c <__aeabi_f2uiz>
 800173c:	4603      	mov	r3, r0
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <move_rotor+0x348>)
 8001742:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001744:	2100      	movs	r1, #0
 8001746:	481d      	ldr	r0, [pc, #116]	; (80017bc <move_rotor+0x344>)
 8001748:	f006 f9d2 	bl	8007af0 <HAL_TIMEx_PWMN_Start>
	}

	if(W_PWM >= 0) {
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <move_rotor+0x338>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f04f 0100 	mov.w	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fcc5 	bl	80010e4 <__aeabi_fcmpge>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d031      	beq.n	80017c4 <move_rotor+0x34c>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001760:	2104      	movs	r1, #4
 8001762:	4814      	ldr	r0, [pc, #80]	; (80017b4 <move_rotor+0x33c>)
 8001764:	f006 f9ee 	bl	8007b44 <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR2 = (uint16_t)(W_PWM);
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <move_rotor+0x338>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fccd 	bl	800110c <__aeabi_f2uiz>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <move_rotor+0x340>)
 8001778:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800177a:	2104      	movs	r1, #4
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <move_rotor+0x33c>)
 800177e:	f005 fa75 	bl	8006c6c <HAL_TIM_PWM_Start>
 8001782:	e032      	b.n	80017ea <move_rotor+0x372>
 8001784:	f3af 8000 	nop.w
 8001788:	54442d18 	.word	0x54442d18
 800178c:	400921fb 	.word	0x400921fb
 8001790:	20000000 	.word	0x20000000
 8001794:	40668000 	.word	0x40668000
 8001798:	404e0000 	.word	0x404e0000
 800179c:	40100000 	.word	0x40100000
 80017a0:	20000078 	.word	0x20000078
 80017a4:	43700000 	.word	0x43700000
 80017a8:	2000007c 	.word	0x2000007c
 80017ac:	42f00000 	.word	0x42f00000
 80017b0:	20000084 	.word	0x20000084
 80017b4:	20000bc4 	.word	0x20000bc4
 80017b8:	40010000 	.word	0x40010000
 80017bc:	200009cc 	.word	0x200009cc
 80017c0:	40010400 	.word	0x40010400
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80017c4:	2104      	movs	r1, #4
 80017c6:	480e      	ldr	r0, [pc, #56]	; (8001800 <move_rotor+0x388>)
 80017c8:	f005 fa8e 	bl	8006ce8 <HAL_TIM_PWM_Stop>
		TIM1->CCR2 = (uint16_t)(-W_PWM);
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <move_rotor+0x38c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fc99 	bl	800110c <__aeabi_f2uiz>
 80017da:	4603      	mov	r3, r0
 80017dc:	b29a      	uxth	r2, r3
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <move_rotor+0x390>)
 80017e0:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80017e2:	2104      	movs	r1, #4
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <move_rotor+0x388>)
 80017e6:	f006 f983 	bl	8007af0 <HAL_TIMEx_PWMN_Start>
	}

	// Сброс счетчиков таймеров для синхронизации
	TIM1->CNT = 0;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <move_rotor+0x390>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = 0;
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <move_rotor+0x394>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
	return;
 80017f6:	bf00      	nop
}
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001800:	20000bc4 	.word	0x20000bc4
 8001804:	20000084 	.word	0x20000084
 8001808:	40010000 	.word	0x40010000
 800180c:	40010400 	.word	0x40010400

08001810 <motor_control>:

// Функция, управляющая последовательностью переключением обмоток двигателя
float offset = 30; // Датчики развернуты на +26.5 градусов отностительно статора; сдвиг в меньше 27- движение по часовой, в больше - против часовой
void motor_control(uint8_t command, uint16_t pwm) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	460a      	mov	r2, r1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	4613      	mov	r3, r2
 800181e:	80bb      	strh	r3, [r7, #4]
	switch (command) {
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8098 	beq.w	8001958 <motor_control+0x148>
 8001828:	2b02      	cmp	r3, #2
 800182a:	f040 80ae 	bne.w	800198a <motor_control+0x17a>
		case Eright:
			switch (step) {
 800182e:	4b59      	ldr	r3, [pc, #356]	; (8001994 <motor_control+0x184>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	3b01      	subs	r3, #1
 8001834:	2b05      	cmp	r3, #5
 8001836:	f200 808d 	bhi.w	8001954 <motor_control+0x144>
 800183a:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <motor_control+0x30>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	0800192b 	.word	0x0800192b
 8001844:	080018d7 	.word	0x080018d7
 8001848:	08001901 	.word	0x08001901
 800184c:	08001883 	.word	0x08001883
 8001850:	08001859 	.word	0x08001859
 8001854:	080018ad 	.word	0x080018ad
			case 0b101: // Состояние 5
				rotor_angle = 30;
 8001858:	4b4f      	ldr	r3, [pc, #316]	; (8001998 <motor_control+0x188>)
 800185a:	4a50      	ldr	r2, [pc, #320]	; (800199c <motor_control+0x18c>)
 800185c:	601a      	str	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 800185e:	4b4e      	ldr	r3, [pc, #312]	; (8001998 <motor_control+0x188>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a4f      	ldr	r2, [pc, #316]	; (80019a0 <motor_control+0x190>)
 8001864:	6812      	ldr	r2, [r2, #0]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff f981 	bl	8000b70 <__addsf3>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b4c      	ldr	r3, [pc, #304]	; (80019a4 <motor_control+0x194>)
 8001874:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 8001876:	4b4b      	ldr	r3, [pc, #300]	; (80019a4 <motor_control+0x194>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fdfc 	bl	8001478 <move_rotor>
				break;
 8001880:	e069      	b.n	8001956 <motor_control+0x146>
			case 0b100: // Состояние 4
				rotor_angle = 90;
 8001882:	4b45      	ldr	r3, [pc, #276]	; (8001998 <motor_control+0x188>)
 8001884:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <motor_control+0x198>)
 8001886:	601a      	str	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 8001888:	4b43      	ldr	r3, [pc, #268]	; (8001998 <motor_control+0x188>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a44      	ldr	r2, [pc, #272]	; (80019a0 <motor_control+0x190>)
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff f96c 	bl	8000b70 <__addsf3>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <motor_control+0x194>)
 800189e:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 80018a0:	4b40      	ldr	r3, [pc, #256]	; (80019a4 <motor_control+0x194>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff fde7 	bl	8001478 <move_rotor>
				break;
 80018aa:	e054      	b.n	8001956 <motor_control+0x146>
			case 0b110: // Состояние 6
				rotor_angle = 150;
 80018ac:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <motor_control+0x188>)
 80018ae:	4a3f      	ldr	r2, [pc, #252]	; (80019ac <motor_control+0x19c>)
 80018b0:	601a      	str	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <motor_control+0x188>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a3a      	ldr	r2, [pc, #232]	; (80019a0 <motor_control+0x190>)
 80018b8:	6812      	ldr	r2, [r2, #0]
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff f957 	bl	8000b70 <__addsf3>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b37      	ldr	r3, [pc, #220]	; (80019a4 <motor_control+0x194>)
 80018c8:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 80018ca:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <motor_control+0x194>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff fdd2 	bl	8001478 <move_rotor>
				break;
 80018d4:	e03f      	b.n	8001956 <motor_control+0x146>
			case 0b010: // Состояние 2
				rotor_angle = 210;
 80018d6:	4b30      	ldr	r3, [pc, #192]	; (8001998 <motor_control+0x188>)
 80018d8:	4a35      	ldr	r2, [pc, #212]	; (80019b0 <motor_control+0x1a0>)
 80018da:	601a      	str	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 80018dc:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <motor_control+0x188>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <motor_control+0x190>)
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	4611      	mov	r1, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f942 	bl	8000b70 <__addsf3>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <motor_control+0x194>)
 80018f2:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 80018f4:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <motor_control+0x194>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fdbd 	bl	8001478 <move_rotor>
				break;
 80018fe:	e02a      	b.n	8001956 <motor_control+0x146>
			case 0b011: // Состояние 3
				rotor_angle = 270;
 8001900:	4b25      	ldr	r3, [pc, #148]	; (8001998 <motor_control+0x188>)
 8001902:	4a2c      	ldr	r2, [pc, #176]	; (80019b4 <motor_control+0x1a4>)
 8001904:	601a      	str	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 8001906:	4b24      	ldr	r3, [pc, #144]	; (8001998 <motor_control+0x188>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <motor_control+0x190>)
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f92d 	bl	8000b70 <__addsf3>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <motor_control+0x194>)
 800191c:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <motor_control+0x194>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fda8 	bl	8001478 <move_rotor>
				break;
 8001928:	e015      	b.n	8001956 <motor_control+0x146>
			case 0b001: // Состояние 1
				rotor_angle = 330;
 800192a:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <motor_control+0x188>)
 800192c:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <motor_control+0x1a8>)
 800192e:	601a      	str	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <motor_control+0x188>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <motor_control+0x190>)
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f918 	bl	8000b70 <__addsf3>
 8001940:	4603      	mov	r3, r0
 8001942:	461a      	mov	r2, r3
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <motor_control+0x194>)
 8001946:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <motor_control+0x194>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fd93 	bl	8001478 <move_rotor>
				break;
 8001952:	e000      	b.n	8001956 <motor_control+0x146>
			default:
				break;
 8001954:	bf00      	nop
			}
			break;
 8001956:	e019      	b.n	800198c <motor_control+0x17c>

		case Estop:
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001958:	2100      	movs	r1, #0
 800195a:	4818      	ldr	r0, [pc, #96]	; (80019bc <motor_control+0x1ac>)
 800195c:	f005 f9c4 	bl	8006ce8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001960:	2100      	movs	r1, #0
 8001962:	4816      	ldr	r0, [pc, #88]	; (80019bc <motor_control+0x1ac>)
 8001964:	f006 f8ee 	bl	8007b44 <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001968:	2104      	movs	r1, #4
 800196a:	4814      	ldr	r0, [pc, #80]	; (80019bc <motor_control+0x1ac>)
 800196c:	f005 f9bc 	bl	8006ce8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001970:	2104      	movs	r1, #4
 8001972:	4812      	ldr	r0, [pc, #72]	; (80019bc <motor_control+0x1ac>)
 8001974:	f006 f8e6 	bl	8007b44 <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001978:	2100      	movs	r1, #0
 800197a:	4811      	ldr	r0, [pc, #68]	; (80019c0 <motor_control+0x1b0>)
 800197c:	f005 f9b4 	bl	8006ce8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001980:	2100      	movs	r1, #0
 8001982:	480f      	ldr	r0, [pc, #60]	; (80019c0 <motor_control+0x1b0>)
 8001984:	f006 f8de 	bl	8007b44 <HAL_TIMEx_PWMN_Stop>
			break;
 8001988:	e000      	b.n	800198c <motor_control+0x17c>
//			}
//
//			break;

		default:
			break;
 800198a:	bf00      	nop
	}
}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000003c 	.word	0x2000003c
 8001998:	20000040 	.word	0x20000040
 800199c:	41f00000 	.word	0x41f00000
 80019a0:	2000000c 	.word	0x2000000c
 80019a4:	20000044 	.word	0x20000044
 80019a8:	42b40000 	.word	0x42b40000
 80019ac:	43160000 	.word	0x43160000
 80019b0:	43520000 	.word	0x43520000
 80019b4:	43870000 	.word	0x43870000
 80019b8:	43a50000 	.word	0x43a50000
 80019bc:	20000bc4 	.word	0x20000bc4
 80019c0:	200009cc 	.word	0x200009cc

080019c4 <cur_sector>:

// Чтение показателей датчиков Холла
void cur_sector() {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	hal_U = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 80019c8:	2120      	movs	r1, #32
 80019ca:	4815      	ldr	r0, [pc, #84]	; (8001a20 <cur_sector+0x5c>)
 80019cc:	f002 ffb6 	bl	800493c <HAL_GPIO_ReadPin>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <cur_sector+0x60>)
 80019d6:	701a      	strb	r2, [r3, #0]
	hal_V = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 80019d8:	2101      	movs	r1, #1
 80019da:	4811      	ldr	r0, [pc, #68]	; (8001a20 <cur_sector+0x5c>)
 80019dc:	f002 ffae 	bl	800493c <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <cur_sector+0x64>)
 80019e6:	701a      	strb	r2, [r3, #0]
	hal_W = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 80019e8:	2102      	movs	r1, #2
 80019ea:	480d      	ldr	r0, [pc, #52]	; (8001a20 <cur_sector+0x5c>)
 80019ec:	f002 ffa6 	bl	800493c <HAL_GPIO_ReadPin>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <cur_sector+0x68>)
 80019f6:	701a      	strb	r2, [r3, #0]
	step = (hal_W) | (hal_V << 1) | (hal_U << 2);
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <cur_sector+0x64>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	b25a      	sxtb	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <cur_sector+0x68>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b25a      	sxtb	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <cur_sector+0x60>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	b25b      	sxtb	r3, r3
 8001a12:	4313      	orrs	r3, r2
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <cur_sector+0x6c>)
 8001a1a:	701a      	strb	r2, [r3, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40020000 	.word	0x40020000
 8001a24:	20000080 	.word	0x20000080
 8001a28:	20000088 	.word	0x20000088
 8001a2c:	20000090 	.word	0x20000090
 8001a30:	2000003c 	.word	0x2000003c

08001a34 <HAL_GPIO_EXTI_Callback>:

float rememberAngle = 0;
// Обработчик прерываний датчиков Холла
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8001a3e:	88fb      	ldrh	r3, [r7, #6]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	dc02      	bgt.n	8001a4a <HAL_GPIO_EXTI_Callback+0x16>
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	dc02      	bgt.n	8001a4e <HAL_GPIO_EXTI_Callback+0x1a>
//			I_d = 2/3*(cos(currentAngle  * M_PI/180)+sin(currentAngle * M_PI/180));
//			I_q = 2/3*(-sin(currentAngle * M_PI/180)+cos(currentAngle * M_PI/180));
		}
		break;
	}
}
 8001a48:	e014      	b.n	8001a74 <HAL_GPIO_EXTI_Callback+0x40>
	switch(GPIO_Pin) {
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d112      	bne.n	8001a74 <HAL_GPIO_EXTI_Callback+0x40>
		if (START_FLAG!=0){
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_GPIO_EXTI_Callback+0x48>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_EXTI_Callback+0x3e>
			cnt_hall += 1;
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001a60:	801a      	strh	r2, [r3, #0]
			cur_sector();
 8001a62:	f7ff ffaf 	bl	80019c4 <cur_sector>
			motor_control(Eright, pwm);
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_GPIO_EXTI_Callback+0x50>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	2002      	movs	r0, #2
 8001a6e:	f7ff fecf 	bl	8001810 <motor_control>
		break;
 8001a72:	bf00      	nop
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000003d 	.word	0x2000003d
 8001a80:	20000060 	.word	0x20000060
 8001a84:	20000000 	.word	0x20000000

08001a88 <calculateSpeed>:

#define PULSES_PER_REVOLUTION 	6
#define GEAR_RATIO 				28 // Передаточное число
#define STEPS_REDUCER 			2

void calculateSpeed() {
 8001a88:	b598      	push	{r3, r4, r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	currentSpeed = cnt_hall * 60 / (336 * pid_time / 1000); // Текущая скорость в об/мин. Расчет: cnt_hall * 3.571428 = 60 c * cnt_hall / 16.8 = , где  16.8 = 336 * 0.05 - кол-во прерываний датчика холла за 0.05 с, для вращения со скоростью 1 об/с
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <calculateSpeed+0x48>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4613      	mov	r3, r2
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f91c 	bl	8000cd8 <__aeabi_i2f>
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <calculateSpeed+0x4c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	490c      	ldr	r1, [pc, #48]	; (8001ad8 <calculateSpeed+0x50>)
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f969 	bl	8000d80 <__aeabi_fmul>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	490a      	ldr	r1, [pc, #40]	; (8001adc <calculateSpeed+0x54>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fa18 	bl	8000ee8 <__aeabi_fdiv>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4619      	mov	r1, r3
 8001abc:	4620      	mov	r0, r4
 8001abe:	f7ff fa13 	bl	8000ee8 <__aeabi_fdiv>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <calculateSpeed+0x58>)
 8001ac8:	601a      	str	r2, [r3, #0]
}
 8001aca:	bf00      	nop
 8001acc:	bd98      	pop	{r3, r4, r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000060 	.word	0x20000060
 8001ad4:	2000004c 	.word	0x2000004c
 8001ad8:	43a80000 	.word	0x43a80000
 8001adc:	447a0000 	.word	0x447a0000
 8001ae0:	20000048 	.word	0x20000048

08001ae4 <calculatePID>:


float tmp_pwm;
void calculatePID() {
 8001ae4:	b598      	push	{r3, r4, r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
    error = targetRPM - currentSpeed;
 8001ae8:	4b40      	ldr	r3, [pc, #256]	; (8001bec <calculatePID+0x108>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <calculatePID+0x10c>)
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f83a 	bl	8000b6c <__aeabi_fsub>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <calculatePID+0x110>)
 8001afe:	601a      	str	r2, [r3, #0]
    integral += error * (pid_time/1000);
 8001b00:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <calculatePID+0x114>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	493d      	ldr	r1, [pc, #244]	; (8001bfc <calculatePID+0x118>)
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f9ee 	bl	8000ee8 <__aeabi_fdiv>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b38      	ldr	r3, [pc, #224]	; (8001bf4 <calculatePID+0x110>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f7ff f932 	bl	8000d80 <__aeabi_fmul>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <calculatePID+0x11c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	4610      	mov	r0, r2
 8001b28:	f7ff f822 	bl	8000b70 <__addsf3>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4b33      	ldr	r3, [pc, #204]	; (8001c00 <calculatePID+0x11c>)
 8001b32:	601a      	str	r2, [r3, #0]
    derivative = (error - lastError) / (pid_time/1000);
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <calculatePID+0x110>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a32      	ldr	r2, [pc, #200]	; (8001c04 <calculatePID+0x120>)
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff f814 	bl	8000b6c <__aeabi_fsub>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461c      	mov	r4, r3
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <calculatePID+0x114>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	492b      	ldr	r1, [pc, #172]	; (8001bfc <calculatePID+0x118>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f9ca 	bl	8000ee8 <__aeabi_fdiv>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4619      	mov	r1, r3
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff f9c5 	bl	8000ee8 <__aeabi_fdiv>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <calculatePID+0x124>)
 8001b64:	601a      	str	r2, [r3, #0]

    tmp_pwm = Kp*error + Ki*integral + Kd*derivative;
 8001b66:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <calculatePID+0x128>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a22      	ldr	r2, [pc, #136]	; (8001bf4 <calculatePID+0x110>)
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	4611      	mov	r1, r2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff f905 	bl	8000d80 <__aeabi_fmul>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461c      	mov	r4, r3
 8001b7a:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <calculatePID+0x12c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <calculatePID+0x11c>)
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f8fb 	bl	8000d80 <__aeabi_fmul>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7fe ffee 	bl	8000b70 <__addsf3>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461c      	mov	r4, r3
 8001b98:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <calculatePID+0x130>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a1a      	ldr	r2, [pc, #104]	; (8001c08 <calculatePID+0x124>)
 8001b9e:	6812      	ldr	r2, [r2, #0]
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f8ec 	bl	8000d80 <__aeabi_fmul>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4619      	mov	r1, r3
 8001bac:	4620      	mov	r0, r4
 8001bae:	f7fe ffdf 	bl	8000b70 <__addsf3>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <calculatePID+0x134>)
 8001bb8:	601a      	str	r2, [r3, #0]
    pwm = tmp_pwm;
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <calculatePID+0x134>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff faa4 	bl	800110c <__aeabi_f2uiz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <calculatePID+0x138>)
 8001bca:	801a      	strh	r2, [r3, #0]
    if (pwm > 3751) pwm = 3751;
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <calculatePID+0x138>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	f640 62a7 	movw	r2, #3751	; 0xea7
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d903      	bls.n	8001be0 <calculatePID+0xfc>
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <calculatePID+0x138>)
 8001bda:	f640 62a7 	movw	r2, #3751	; 0xea7
 8001bde:	801a      	strh	r2, [r3, #0]
    if (pwm < 0) pwm = 2700;
    lastError = error;
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <calculatePID+0x110>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a07      	ldr	r2, [pc, #28]	; (8001c04 <calculatePID+0x120>)
 8001be6:	6013      	str	r3, [r2, #0]
}
 8001be8:	bf00      	nop
 8001bea:	bd98      	pop	{r3, r4, r7, pc}
 8001bec:	20000008 	.word	0x20000008
 8001bf0:	20000048 	.word	0x20000048
 8001bf4:	20000368 	.word	0x20000368
 8001bf8:	2000004c 	.word	0x2000004c
 8001bfc:	447a0000 	.word	0x447a0000
 8001c00:	20000644 	.word	0x20000644
 8001c04:	2000008c 	.word	0x2000008c
 8001c08:	20000070 	.word	0x20000070
 8001c0c:	2000063c 	.word	0x2000063c
 8001c10:	20000074 	.word	0x20000074
 8001c14:	20000364 	.word	0x20000364
 8001c18:	2000006c 	.word	0x2000006c
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_TIM_PeriodElapsedCallback>:


int j = 0;

// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	if (htim == &htim14) {
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a24      	ldr	r2, [pc, #144]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d141      	bne.n	8001cb4 <HAL_TIM_PeriodElapsedCallback+0x94>
		pid_time += 0.5; // 0.5 мс - период таймера 14. Расчет: (TIM_ARR * TIM_PSC) / TIM_FREQ / ) = ((499+1) * (59+1)) / 60 000 000 = 0,0005 с = 0.5 мс
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe ff99 	bl	8000b70 <__addsf3>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c44:	601a      	str	r2, [r3, #0]

		if(pid_time >= TIME_INTERVAL_MS) { // (pid_time >= TIME_INTERVAL_MS)||(cnt_hall >= 500)
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	4611      	mov	r1, r2
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fa47 	bl	80010e4 <__aeabi_fcmpge>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00a      	beq.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0x52>
			calculateSpeed();
 8001c5c:	f7ff ff14 	bl	8001a88 <calculateSpeed>
			calculatePID();
 8001c60:	f7ff ff40 	bl	8001ae4 <calculatePID>
			pid_time = 0;
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
			cnt_hall = 0;
 8001c6c:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	801a      	strh	r2, [r3, #0]
		}

		currentAngle += ((targetRPM/60) * 360) / (2000);// targetRPM * 360 / (60 * 20)
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4916      	ldr	r1, [pc, #88]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f935 	bl	8000ee8 <__aeabi_fdiv>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4914      	ldr	r1, [pc, #80]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f87c 	bl	8000d80 <__aeabi_fmul>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4913      	ldr	r1, [pc, #76]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f92b 	bl	8000ee8 <__aeabi_fdiv>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f7fe ff67 	bl	8000b70 <__addsf3>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ca8:	601a      	str	r2, [r3, #0]
		move_rotor(currentAngle);
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fbe2 	bl	8001478 <move_rotor>
	}
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000c04 	.word	0x20000c04
 8001cc0:	2000004c 	.word	0x2000004c
 8001cc4:	20000004 	.word	0x20000004
 8001cc8:	20000060 	.word	0x20000060
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	42700000 	.word	0x42700000
 8001cd4:	43b40000 	.word	0x43b40000
 8001cd8:	44fa0000 	.word	0x44fa0000
 8001cdc:	20000044 	.word	0x20000044

08001ce0 <HAL_ADC_ConvCpltCallback>:

// Обработчик прерываний АЦП
float Sensitivity_I = 0.0066; // Чувствительность датчика тока в мВ/мА

// Обработка показаний АЦП по готовности всех 3-х каналов
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
	// где rawValues - показания АЦП; 3.3 В - питание АПЦ; 4096 - количество уровней квантования при 12 разрядах; ((5.62+10)/10)) - компенсация нормирующего делителя напряжения; 2.5 В - компинсация кривой датчика тока (точка отсчета 0 мА);
	// Расчет: (((2000*3.3)/4096)*(5.62+10)/10-2.5)/0.0066 = 2,56 мА; (((2000*3.3)/4096)*(5.62+10)/10-2.5)/0.0066-6,9739139441
	I_a = ((rawValues[0] * 3.3 / 4096) * (5.62+10) / 10 - 2.5) / Sensitivity_I;
 8001ce8:	4b79      	ldr	r3, [pc, #484]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fbbd 	bl	800046c <__aeabi_i2d>
 8001cf2:	a373      	add	r3, pc, #460	; (adr r3, 8001ec0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fc22 	bl	8000540 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f04f 0200 	mov.w	r2, #0
 8001d08:	4b72      	ldr	r3, [pc, #456]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001d0a:	f7fe fd43 	bl	8000794 <__aeabi_ddiv>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	a36c      	add	r3, pc, #432	; (adr r3, 8001ec8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	f7fe fc10 	bl	8000540 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	4b6a      	ldr	r3, [pc, #424]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001d2e:	f7fe fd31 	bl	8000794 <__aeabi_ddiv>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4610      	mov	r0, r2
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	4b67      	ldr	r3, [pc, #412]	; (8001edc <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001d40:	f7fe fa46 	bl	80001d0 <__aeabi_dsub>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4614      	mov	r4, r2
 8001d4a:	461d      	mov	r5, r3
 8001d4c:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <HAL_ADC_ConvCpltCallback+0x200>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fb9d 	bl	8000490 <__aeabi_f2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	f7fe fd19 	bl	8000794 <__aeabi_ddiv>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe feab 	bl	8000ac4 <__aeabi_d2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4a5c      	ldr	r2, [pc, #368]	; (8001ee4 <HAL_ADC_ConvCpltCallback+0x204>)
 8001d72:	6013      	str	r3, [r2, #0]
	I_b = ((rawValues[1] * 3.3 / 4096) * (5.62+10) / 10 - 2.5) / Sensitivity_I;
 8001d74:	4b56      	ldr	r3, [pc, #344]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001d76:	885b      	ldrh	r3, [r3, #2]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fb77 	bl	800046c <__aeabi_i2d>
 8001d7e:	a350      	add	r3, pc, #320	; (adr r3, 8001ec0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f7fe fbdc 	bl	8000540 <__aeabi_dmul>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001d96:	f7fe fcfd 	bl	8000794 <__aeabi_ddiv>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	a349      	add	r3, pc, #292	; (adr r3, 8001ec8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fbca 	bl	8000540 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001dba:	f7fe fceb 	bl	8000794 <__aeabi_ddiv>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4b44      	ldr	r3, [pc, #272]	; (8001edc <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001dcc:	f7fe fa00 	bl	80001d0 <__aeabi_dsub>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	4b41      	ldr	r3, [pc, #260]	; (8001ee0 <HAL_ADC_ConvCpltCallback+0x200>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fb57 	bl	8000490 <__aeabi_f2d>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	4620      	mov	r0, r4
 8001de8:	4629      	mov	r1, r5
 8001dea:	f7fe fcd3 	bl	8000794 <__aeabi_ddiv>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4610      	mov	r0, r2
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7fe fe65 	bl	8000ac4 <__aeabi_d2f>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4a3a      	ldr	r2, [pc, #232]	; (8001ee8 <HAL_ADC_ConvCpltCallback+0x208>)
 8001dfe:	6013      	str	r3, [r2, #0]
	I_c = ((rawValues[2] * 3.3 / 4096) * (5.62+10) / 10 - 2.5) / Sensitivity_I;
 8001e00:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8001e02:	889b      	ldrh	r3, [r3, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb31 	bl	800046c <__aeabi_i2d>
 8001e0a:	a32d      	add	r3, pc, #180	; (adr r3, 8001ec0 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e10:	f7fe fb96 	bl	8000540 <__aeabi_dmul>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4610      	mov	r0, r2
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8001e22:	f7fe fcb7 	bl	8000794 <__aeabi_ddiv>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	a326      	add	r3, pc, #152	; (adr r3, 8001ec8 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fb84 	bl	8000540 <__aeabi_dmul>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8001e46:	f7fe fca5 	bl	8000794 <__aeabi_ddiv>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_ADC_ConvCpltCallback+0x1fc>)
 8001e58:	f7fe f9ba 	bl	80001d0 <__aeabi_dsub>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4614      	mov	r4, r2
 8001e62:	461d      	mov	r5, r3
 8001e64:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <HAL_ADC_ConvCpltCallback+0x200>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb11 	bl	8000490 <__aeabi_f2d>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4620      	mov	r0, r4
 8001e74:	4629      	mov	r1, r5
 8001e76:	f7fe fc8d 	bl	8000794 <__aeabi_ddiv>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	f7fe fe1f 	bl	8000ac4 <__aeabi_d2f>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a18      	ldr	r2, [pc, #96]	; (8001eec <HAL_ADC_ConvCpltCallback+0x20c>)
 8001e8a:	6013      	str	r3, [r2, #0]
	summ = I_a + I_b + I_c;
 8001e8c:	4b15      	ldr	r3, [pc, #84]	; (8001ee4 <HAL_ADC_ConvCpltCallback+0x204>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a15      	ldr	r2, [pc, #84]	; (8001ee8 <HAL_ADC_ConvCpltCallback+0x208>)
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fe6a 	bl	8000b70 <__addsf3>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_ADC_ConvCpltCallback+0x20c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f7fe fe62 	bl	8000b70 <__addsf3>
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_ADC_ConvCpltCallback+0x210>)
 8001eb2:	601a      	str	r2, [r3, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebc:	f3af 8000 	nop.w
 8001ec0:	66666666 	.word	0x66666666
 8001ec4:	400a6666 	.word	0x400a6666
 8001ec8:	a3d70a3e 	.word	0xa3d70a3e
 8001ecc:	402f3d70 	.word	0x402f3d70
 8001ed0:	20000064 	.word	0x20000064
 8001ed4:	40b00000 	.word	0x40b00000
 8001ed8:	40240000 	.word	0x40240000
 8001edc:	40040000 	.word	0x40040000
 8001ee0:	20000010 	.word	0x20000010
 8001ee4:	20000050 	.word	0x20000050
 8001ee8:	20000054 	.word	0x20000054
 8001eec:	20000058 	.word	0x20000058
 8001ef0:	2000005c 	.word	0x2000005c

08001ef4 <start>:
uint16_t VU[360];
uint16_t VV[360];
uint16_t VW[360];

// функция - инициализация
void start(){
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	initialize_PID_constants();
 8001ef8:	f7ff faa4 	bl	8001444 <initialize_PID_constants>
	START_FLAG=1;
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <start+0x28>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim14);
 8001f02:	4807      	ldr	r0, [pc, #28]	; (8001f20 <start+0x2c>)
 8001f04:	f004 fe27 	bl	8006b56 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawValues, 3);
 8001f08:	2203      	movs	r2, #3
 8001f0a:	4906      	ldr	r1, [pc, #24]	; (8001f24 <start+0x30>)
 8001f0c:	4806      	ldr	r0, [pc, #24]	; (8001f28 <start+0x34>)
 8001f0e:	f001 faed 	bl	80034ec <HAL_ADC_Start_DMA>
	cur_sector();
 8001f12:	f7ff fd57 	bl	80019c4 <cur_sector>
//	move_rotor(0);
//	motor_control(Eright, pwm);
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000003d 	.word	0x2000003d
 8001f20:	20000c04 	.word	0x20000c04
 8001f24:	20000064 	.word	0x20000064
 8001f28:	20000ad4 	.word	0x20000ad4

08001f2c <loop>:

// Бесконечный цикл
void loop(){
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3c:	f001 f8e4 	bl	8003108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f40:	f000 f81b 	bl	8001f7a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f44:	f000 fbd0 	bl	80026e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f48:	f000 fb98 	bl	800267c <MX_DMA_Init>
  MX_ADC1_Init();
 8001f4c:	f000 f85c 	bl	8002008 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001f50:	f000 f952 	bl	80021f8 <MX_I2C3_Init>
  MX_TIM1_Init();
 8001f54:	f000 f97e 	bl	8002254 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001f58:	f000 fa7c 	bl	8002454 <MX_TIM8_Init>
  MX_TIM14_Init();
 8001f5c:	f000 fb1a 	bl	8002594 <MX_TIM14_Init>
  MX_USART3_UART_Init();
 8001f60:	f000 fb62 	bl	8002628 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001f64:	f000 fa22 	bl	80023ac <MX_TIM4_Init>
  MX_ADC2_Init();
 8001f68:	f000 f8b6 	bl	80020d8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001f6c:	f000 f8fc 	bl	8002168 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  start();
 8001f70:	f7ff ffc0 	bl	8001ef4 <start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001f74:	f7ff ffda 	bl	8001f2c <loop>
 8001f78:	e7fc      	b.n	8001f74 <main+0x3c>

08001f7a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b092      	sub	sp, #72	; 0x48
 8001f7e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	2230      	movs	r2, #48	; 0x30
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f006 fb27 	bl	80085dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f8e:	1d3b      	adds	r3, r7, #4
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fa8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fae:	2308      	movs	r3, #8
 8001fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001fb2:	23f0      	movs	r3, #240	; 0xf0
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 f916 	bl	80061f4 <HAL_RCC_OscConfig>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001fce:	f000 fc27 	bl	8002820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fe2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	2103      	movs	r1, #3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f004 fb6a 	bl	80066c8 <HAL_RCC_ClockConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001ffa:	f000 fc11 	bl	8002820 <Error_Handler>
  }
}
 8001ffe:	bf00      	nop
 8002000:	3748      	adds	r7, #72	; 0x48
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800200e:	f107 0314 	add.w	r3, r7, #20
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <MX_ADC1_Init+0xc4>)
 8002028:	4a29      	ldr	r2, [pc, #164]	; (80020d0 <MX_ADC1_Init+0xc8>)
 800202a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <MX_ADC1_Init+0xc4>)
 800202e:	2200      	movs	r2, #0
 8002030:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <MX_ADC1_Init+0xc4>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002038:	4b24      	ldr	r3, [pc, #144]	; (80020cc <MX_ADC1_Init+0xc4>)
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <MX_ADC1_Init+0xc4>)
 8002040:	2201      	movs	r2, #1
 8002042:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002044:	4b21      	ldr	r3, [pc, #132]	; (80020cc <MX_ADC1_Init+0xc4>)
 8002046:	2200      	movs	r2, #0
 8002048:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <MX_ADC1_Init+0xc4>)
 800204c:	2200      	movs	r2, #0
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002050:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <MX_ADC1_Init+0xc4>)
 8002052:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <MX_ADC1_Init+0xcc>)
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002056:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <MX_ADC1_Init+0xc4>)
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800205c:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <MX_ADC1_Init+0xc4>)
 800205e:	2201      	movs	r2, #1
 8002060:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002062:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <MX_ADC1_Init+0xc4>)
 8002064:	2201      	movs	r2, #1
 8002066:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002068:	4b18      	ldr	r3, [pc, #96]	; (80020cc <MX_ADC1_Init+0xc4>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800206e:	4817      	ldr	r0, [pc, #92]	; (80020cc <MX_ADC1_Init+0xc4>)
 8002070:	f001 f8b8 	bl	80031e4 <HAL_ADC_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800207a:	f000 fbd1 	bl	8002820 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 800207e:	2316      	movs	r3, #22
 8002080:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 8002082:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002086:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8002088:	2300      	movs	r3, #0
 800208a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4619      	mov	r1, r3
 8002092:	480e      	ldr	r0, [pc, #56]	; (80020cc <MX_ADC1_Init+0xc4>)
 8002094:	f001 fdc8 	bl	8003c28 <HAL_ADCEx_MultiModeConfigChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 800209e:	f000 fbbf 	bl	8002820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80020a2:	2304      	movs	r3, #4
 80020a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80020aa:	2307      	movs	r3, #7
 80020ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020ae:	1d3b      	adds	r3, r7, #4
 80020b0:	4619      	mov	r1, r3
 80020b2:	4806      	ldr	r0, [pc, #24]	; (80020cc <MX_ADC1_Init+0xc4>)
 80020b4:	f001 fb08 	bl	80036c8 <HAL_ADC_ConfigChannel>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 80020be:	f000 fbaf 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020c2:	bf00      	nop
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000ad4 	.word	0x20000ad4
 80020d0:	40012000 	.word	0x40012000
 80020d4:	0f000001 	.word	0x0f000001

080020d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020de:	463b      	mov	r3, r7
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <MX_ADC2_Init+0x88>)
 80020ec:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <MX_ADC2_Init+0x8c>)
 80020ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <MX_ADC2_Init+0x88>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80020f6:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <MX_ADC2_Init+0x88>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80020fc:	4b18      	ldr	r3, [pc, #96]	; (8002160 <MX_ADC2_Init+0x88>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002102:	4b17      	ldr	r3, [pc, #92]	; (8002160 <MX_ADC2_Init+0x88>)
 8002104:	2201      	movs	r2, #1
 8002106:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002108:	4b15      	ldr	r3, [pc, #84]	; (8002160 <MX_ADC2_Init+0x88>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800210e:	4b14      	ldr	r3, [pc, #80]	; (8002160 <MX_ADC2_Init+0x88>)
 8002110:	2200      	movs	r2, #0
 8002112:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <MX_ADC2_Init+0x88>)
 8002116:	2201      	movs	r2, #1
 8002118:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <MX_ADC2_Init+0x88>)
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <MX_ADC2_Init+0x88>)
 8002122:	2201      	movs	r2, #1
 8002124:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002126:	480e      	ldr	r0, [pc, #56]	; (8002160 <MX_ADC2_Init+0x88>)
 8002128:	f001 f85c 	bl	80031e4 <HAL_ADC_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_ADC2_Init+0x5e>
  {
    Error_Handler();
 8002132:	f000 fb75 	bl	8002820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002136:	230f      	movs	r3, #15
 8002138:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800213a:	2301      	movs	r3, #1
 800213c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002142:	463b      	mov	r3, r7
 8002144:	4619      	mov	r1, r3
 8002146:	4806      	ldr	r0, [pc, #24]	; (8002160 <MX_ADC2_Init+0x88>)
 8002148:	f001 fabe 	bl	80036c8 <HAL_ADC_ConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8002152:	f000 fb65 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000a8c 	.word	0x20000a8c
 8002164:	40012100 	.word	0x40012100

08002168 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800216e:	463b      	mov	r3, r7
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <MX_ADC3_Init+0x88>)
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <MX_ADC3_Init+0x8c>)
 800217e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <MX_ADC3_Init+0x88>)
 8002182:	2200      	movs	r2, #0
 8002184:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <MX_ADC3_Init+0x88>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <MX_ADC3_Init+0x88>)
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <MX_ADC3_Init+0x88>)
 8002194:	2201      	movs	r2, #1
 8002196:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <MX_ADC3_Init+0x88>)
 800219a:	2200      	movs	r2, #0
 800219c:	621a      	str	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800219e:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <MX_ADC3_Init+0x88>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80021a4:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <MX_ADC3_Init+0x88>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80021aa:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <MX_ADC3_Init+0x88>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <MX_ADC3_Init+0x88>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80021b6:	480e      	ldr	r0, [pc, #56]	; (80021f0 <MX_ADC3_Init+0x88>)
 80021b8:	f001 f814 	bl	80031e4 <HAL_ADC_Init>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_ADC3_Init+0x5e>
  {
    Error_Handler();
 80021c2:	f000 fb2d 	bl	8002820 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80021c6:	230d      	movs	r3, #13
 80021c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021ca:	2301      	movs	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80021d2:	463b      	mov	r3, r7
 80021d4:	4619      	mov	r1, r3
 80021d6:	4806      	ldr	r0, [pc, #24]	; (80021f0 <MX_ADC3_Init+0x88>)
 80021d8:	f001 fa76 	bl	80036c8 <HAL_ADC_ConfigChannel>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 80021e2:	f000 fb1d 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000b1c 	.word	0x20000b1c
 80021f4:	40012200 	.word	0x40012200

080021f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <MX_I2C3_Init+0x50>)
 80021fe:	4a13      	ldr	r2, [pc, #76]	; (800224c <MX_I2C3_Init+0x54>)
 8002200:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <MX_I2C3_Init+0x50>)
 8002204:	4a12      	ldr	r2, [pc, #72]	; (8002250 <MX_I2C3_Init+0x58>)
 8002206:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <MX_I2C3_Init+0x50>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <MX_I2C3_Init+0x50>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <MX_I2C3_Init+0x50>)
 8002216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800221a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800221c:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <MX_I2C3_Init+0x50>)
 800221e:	2200      	movs	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002222:	4b09      	ldr	r3, [pc, #36]	; (8002248 <MX_I2C3_Init+0x50>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002228:	4b07      	ldr	r3, [pc, #28]	; (8002248 <MX_I2C3_Init+0x50>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <MX_I2C3_Init+0x50>)
 8002230:	2200      	movs	r2, #0
 8002232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002234:	4804      	ldr	r0, [pc, #16]	; (8002248 <MX_I2C3_Init+0x50>)
 8002236:	f002 fbb1 	bl	800499c <HAL_I2C_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002240:	f000 faee 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002244:	bf00      	nop
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000978 	.word	0x20000978
 800224c:	40005c00 	.word	0x40005c00
 8002250:	000186a0 	.word	0x000186a0

08002254 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b096      	sub	sp, #88	; 0x58
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800225a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	611a      	str	r2, [r3, #16]
 8002282:	615a      	str	r2, [r3, #20]
 8002284:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	2220      	movs	r2, #32
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f006 f9a5 	bl	80085dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002292:	4b44      	ldr	r3, [pc, #272]	; (80023a4 <MX_TIM1_Init+0x150>)
 8002294:	4a44      	ldr	r2, [pc, #272]	; (80023a8 <MX_TIM1_Init+0x154>)
 8002296:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002298:	4b42      	ldr	r3, [pc, #264]	; (80023a4 <MX_TIM1_Init+0x150>)
 800229a:	2200      	movs	r2, #0
 800229c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800229e:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <MX_TIM1_Init+0x150>)
 80022a0:	2220      	movs	r2, #32
 80022a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3749;
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <MX_TIM1_Init+0x150>)
 80022a6:	f640 62a5 	movw	r2, #3749	; 0xea5
 80022aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ac:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <MX_TIM1_Init+0x150>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022b2:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <MX_TIM1_Init+0x150>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <MX_TIM1_Init+0x150>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022be:	4839      	ldr	r0, [pc, #228]	; (80023a4 <MX_TIM1_Init+0x150>)
 80022c0:	f004 fc1e 	bl	8006b00 <HAL_TIM_Base_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80022ca:	f000 faa9 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022d8:	4619      	mov	r1, r3
 80022da:	4832      	ldr	r0, [pc, #200]	; (80023a4 <MX_TIM1_Init+0x150>)
 80022dc:	f005 f81c 	bl	8007318 <HAL_TIM_ConfigClockSource>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80022e6:	f000 fa9b 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022ea:	482e      	ldr	r0, [pc, #184]	; (80023a4 <MX_TIM1_Init+0x150>)
 80022ec:	f004 fc8a 	bl	8006c04 <HAL_TIM_PWM_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80022f6:	f000 fa93 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002302:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002306:	4619      	mov	r1, r3
 8002308:	4826      	ldr	r0, [pc, #152]	; (80023a4 <MX_TIM1_Init+0x150>)
 800230a:	f005 fc5c 	bl	8007bc6 <HAL_TIMEx_MasterConfigSynchronization>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002314:	f000 fa84 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002318:	2360      	movs	r3, #96	; 0x60
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002320:	2300      	movs	r3, #0
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002324:	2300      	movs	r3, #0
 8002326:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002338:	2200      	movs	r2, #0
 800233a:	4619      	mov	r1, r3
 800233c:	4819      	ldr	r0, [pc, #100]	; (80023a4 <MX_TIM1_Init+0x150>)
 800233e:	f004 ff25 	bl	800718c <HAL_TIM_PWM_ConfigChannel>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002348:	f000 fa6a 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800234c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002350:	2204      	movs	r2, #4
 8002352:	4619      	mov	r1, r3
 8002354:	4813      	ldr	r0, [pc, #76]	; (80023a4 <MX_TIM1_Init+0x150>)
 8002356:	f004 ff19 	bl	800718c <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002360:	f000 fa5e 	bl	8002820 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800237c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	4619      	mov	r1, r3
 8002386:	4807      	ldr	r0, [pc, #28]	; (80023a4 <MX_TIM1_Init+0x150>)
 8002388:	f005 fc61 	bl	8007c4e <HAL_TIMEx_ConfigBreakDeadTime>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002392:	f000 fa45 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002396:	4803      	ldr	r0, [pc, #12]	; (80023a4 <MX_TIM1_Init+0x150>)
 8002398:	f000 fcee 	bl	8002d78 <HAL_TIM_MspPostInit>

}
 800239c:	bf00      	nop
 800239e:	3758      	adds	r7, #88	; 0x58
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000bc4 	.word	0x20000bc4
 80023a8:	40010000 	.word	0x40010000

080023ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08c      	sub	sp, #48	; 0x30
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023b2:	f107 030c 	add.w	r3, r7, #12
 80023b6:	2224      	movs	r2, #36	; 0x24
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f006 f90e 	bl	80085dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023c8:	4b20      	ldr	r3, [pc, #128]	; (800244c <MX_TIM4_Init+0xa0>)
 80023ca:	4a21      	ldr	r2, [pc, #132]	; (8002450 <MX_TIM4_Init+0xa4>)
 80023cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <MX_TIM4_Init+0xa0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <MX_TIM4_Init+0xa0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023da:	4b1c      	ldr	r3, [pc, #112]	; (800244c <MX_TIM4_Init+0xa0>)
 80023dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <MX_TIM4_Init+0xa0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <MX_TIM4_Init+0xa0>)
 80023ea:	2280      	movs	r2, #128	; 0x80
 80023ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023ee:	2303      	movs	r3, #3
 80023f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023f6:	2301      	movs	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80023fe:	230a      	movs	r3, #10
 8002400:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002406:	2301      	movs	r3, #1
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800240a:	2300      	movs	r3, #0
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800240e:	230a      	movs	r3, #10
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002412:	f107 030c 	add.w	r3, r7, #12
 8002416:	4619      	mov	r1, r3
 8002418:	480c      	ldr	r0, [pc, #48]	; (800244c <MX_TIM4_Init+0xa0>)
 800241a:	f004 fcbd 	bl	8006d98 <HAL_TIM_Encoder_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002424:	f000 f9fc 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	4619      	mov	r1, r3
 8002434:	4805      	ldr	r0, [pc, #20]	; (800244c <MX_TIM4_Init+0xa0>)
 8002436:	f005 fbc6 	bl	8007bc6 <HAL_TIMEx_MasterConfigSynchronization>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002440:	f000 f9ee 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002444:	bf00      	nop
 8002446:	3730      	adds	r7, #48	; 0x30
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000a0c 	.word	0x20000a0c
 8002450:	40000800 	.word	0x40000800

08002454 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b096      	sub	sp, #88	; 0x58
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002468:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	615a      	str	r2, [r3, #20]
 8002484:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	2220      	movs	r2, #32
 800248a:	2100      	movs	r1, #0
 800248c:	4618      	mov	r0, r3
 800248e:	f006 f8a5 	bl	80085dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002492:	4b3e      	ldr	r3, [pc, #248]	; (800258c <MX_TIM8_Init+0x138>)
 8002494:	4a3e      	ldr	r2, [pc, #248]	; (8002590 <MX_TIM8_Init+0x13c>)
 8002496:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002498:	4b3c      	ldr	r3, [pc, #240]	; (800258c <MX_TIM8_Init+0x138>)
 800249a:	2200      	movs	r2, #0
 800249c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <MX_TIM8_Init+0x138>)
 80024a0:	2220      	movs	r2, #32
 80024a2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3749;
 80024a4:	4b39      	ldr	r3, [pc, #228]	; (800258c <MX_TIM8_Init+0x138>)
 80024a6:	f640 62a5 	movw	r2, #3749	; 0xea5
 80024aa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ac:	4b37      	ldr	r3, [pc, #220]	; (800258c <MX_TIM8_Init+0x138>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80024b2:	4b36      	ldr	r3, [pc, #216]	; (800258c <MX_TIM8_Init+0x138>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b8:	4b34      	ldr	r3, [pc, #208]	; (800258c <MX_TIM8_Init+0x138>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80024be:	4833      	ldr	r0, [pc, #204]	; (800258c <MX_TIM8_Init+0x138>)
 80024c0:	f004 fb1e 	bl	8006b00 <HAL_TIM_Base_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80024ca:	f000 f9a9 	bl	8002820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80024d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80024d8:	4619      	mov	r1, r3
 80024da:	482c      	ldr	r0, [pc, #176]	; (800258c <MX_TIM8_Init+0x138>)
 80024dc:	f004 ff1c 	bl	8007318 <HAL_TIM_ConfigClockSource>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80024e6:	f000 f99b 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80024ea:	4828      	ldr	r0, [pc, #160]	; (800258c <MX_TIM8_Init+0x138>)
 80024ec:	f004 fb8a 	bl	8006c04 <HAL_TIM_PWM_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80024f6:	f000 f993 	bl	8002820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002502:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002506:	4619      	mov	r1, r3
 8002508:	4820      	ldr	r0, [pc, #128]	; (800258c <MX_TIM8_Init+0x138>)
 800250a:	f005 fb5c 	bl	8007bc6 <HAL_TIMEx_MasterConfigSynchronization>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002514:	f000 f984 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002518:	2360      	movs	r3, #96	; 0x60
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002520:	2300      	movs	r3, #0
 8002522:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002524:	2300      	movs	r3, #0
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800252c:	2300      	movs	r3, #0
 800252e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002530:	2300      	movs	r3, #0
 8002532:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002538:	2200      	movs	r2, #0
 800253a:	4619      	mov	r1, r3
 800253c:	4813      	ldr	r0, [pc, #76]	; (800258c <MX_TIM8_Init+0x138>)
 800253e:	f004 fe25 	bl	800718c <HAL_TIM_PWM_ConfigChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002548:	f000 f96a 	bl	8002820 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002564:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800256a:	1d3b      	adds	r3, r7, #4
 800256c:	4619      	mov	r1, r3
 800256e:	4807      	ldr	r0, [pc, #28]	; (800258c <MX_TIM8_Init+0x138>)
 8002570:	f005 fb6d 	bl	8007c4e <HAL_TIMEx_ConfigBreakDeadTime>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800257a:	f000 f951 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800257e:	4803      	ldr	r0, [pc, #12]	; (800258c <MX_TIM8_Init+0x138>)
 8002580:	f000 fbfa 	bl	8002d78 <HAL_TIM_MspPostInit>

}
 8002584:	bf00      	nop
 8002586:	3758      	adds	r7, #88	; 0x58
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	200009cc 	.word	0x200009cc
 8002590:	40010400 	.word	0x40010400

08002594 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
 80025a8:	615a      	str	r2, [r3, #20]
 80025aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80025ac:	4b1c      	ldr	r3, [pc, #112]	; (8002620 <MX_TIM14_Init+0x8c>)
 80025ae:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <MX_TIM14_Init+0x90>)
 80025b0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 59;
 80025b2:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <MX_TIM14_Init+0x8c>)
 80025b4:	223b      	movs	r2, #59	; 0x3b
 80025b6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <MX_TIM14_Init+0x8c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <MX_TIM14_Init+0x8c>)
 80025c0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80025c4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <MX_TIM14_Init+0x8c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <MX_TIM14_Init+0x8c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80025d2:	4813      	ldr	r0, [pc, #76]	; (8002620 <MX_TIM14_Init+0x8c>)
 80025d4:	f004 fa94 	bl	8006b00 <HAL_TIM_Base_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80025de:	f000 f91f 	bl	8002820 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80025e2:	480f      	ldr	r0, [pc, #60]	; (8002620 <MX_TIM14_Init+0x8c>)
 80025e4:	f004 fada 	bl	8006b9c <HAL_TIM_OC_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80025ee:	f000 f917 	bl	8002820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2200      	movs	r2, #0
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	; (8002620 <MX_TIM14_Init+0x8c>)
 800260a:	f004 fd5f 	bl	80070cc <HAL_TIM_OC_ConfigChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002614:	f000 f904 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000c04 	.word	0x20000c04
 8002624:	40002000 	.word	0x40002000

08002628 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MX_USART3_UART_Init+0x4c>)
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <MX_USART3_UART_Init+0x50>)
 8002630:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <MX_USART3_UART_Init+0x4c>)
 8002634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002638:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <MX_USART3_UART_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_USART3_UART_Init+0x4c>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <MX_USART3_UART_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_USART3_UART_Init+0x4c>)
 800264e:	220c      	movs	r2, #12
 8002650:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <MX_USART3_UART_Init+0x4c>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_USART3_UART_Init+0x4c>)
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800265e:	4805      	ldr	r0, [pc, #20]	; (8002674 <MX_USART3_UART_Init+0x4c>)
 8002660:	f005 fb7c 	bl	8007d5c <HAL_UART_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800266a:	f000 f8d9 	bl	8002820 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000a4c 	.word	0x20000a4c
 8002678:	40004800 	.word	0x40004800

0800267c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <MX_DMA_Init+0x68>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <MX_DMA_Init+0x68>)
 800268c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <MX_DMA_Init+0x68>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	603b      	str	r3, [r7, #0]
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <MX_DMA_Init+0x68>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <MX_DMA_Init+0x68>)
 80026a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <MX_DMA_Init+0x68>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b6:	603b      	str	r3, [r7, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	200f      	movs	r0, #15
 80026c0:	f001 fbcd 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80026c4:	200f      	movs	r0, #15
 80026c6:	f001 fbe6 	bl	8003e96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	2038      	movs	r0, #56	; 0x38
 80026d0:	f001 fbc5 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80026d4:	2038      	movs	r0, #56	; 0x38
 80026d6:	f001 fbde 	bl	8003e96 <HAL_NVIC_EnableIRQ>

}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800

080026e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	; 0x30
 80026ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
 80026fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	4b43      	ldr	r3, [pc, #268]	; (8002810 <MX_GPIO_Init+0x128>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a42      	ldr	r2, [pc, #264]	; (8002810 <MX_GPIO_Init+0x128>)
 8002708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b40      	ldr	r3, [pc, #256]	; (8002810 <MX_GPIO_Init+0x128>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	4b3c      	ldr	r3, [pc, #240]	; (8002810 <MX_GPIO_Init+0x128>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a3b      	ldr	r2, [pc, #236]	; (8002810 <MX_GPIO_Init+0x128>)
 8002724:	f043 0304 	orr.w	r3, r3, #4
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b39      	ldr	r3, [pc, #228]	; (8002810 <MX_GPIO_Init+0x128>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	4b35      	ldr	r3, [pc, #212]	; (8002810 <MX_GPIO_Init+0x128>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a34      	ldr	r2, [pc, #208]	; (8002810 <MX_GPIO_Init+0x128>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b32      	ldr	r3, [pc, #200]	; (8002810 <MX_GPIO_Init+0x128>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	4b2e      	ldr	r3, [pc, #184]	; (8002810 <MX_GPIO_Init+0x128>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a2d      	ldr	r2, [pc, #180]	; (8002810 <MX_GPIO_Init+0x128>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <MX_GPIO_Init+0x128>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	4b27      	ldr	r3, [pc, #156]	; (8002810 <MX_GPIO_Init+0x128>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a26      	ldr	r2, [pc, #152]	; (8002810 <MX_GPIO_Init+0x128>)
 8002778:	f043 0310 	orr.w	r3, r3, #16
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b24      	ldr	r3, [pc, #144]	; (8002810 <MX_GPIO_Init+0x128>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	4b20      	ldr	r3, [pc, #128]	; (8002810 <MX_GPIO_Init+0x128>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a1f      	ldr	r2, [pc, #124]	; (8002810 <MX_GPIO_Init+0x128>)
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <MX_GPIO_Init+0x128>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 80027a6:	2323      	movs	r3, #35	; 0x23
 80027a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <MX_GPIO_Init+0x12c>)
 80027ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f107 031c 	add.w	r3, r7, #28
 80027b6:	4619      	mov	r1, r3
 80027b8:	4817      	ldr	r0, [pc, #92]	; (8002818 <MX_GPIO_Init+0x130>)
 80027ba:	f001 ff21 	bl	8004600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80027c2:	4b14      	ldr	r3, [pc, #80]	; (8002814 <MX_GPIO_Init+0x12c>)
 80027c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4619      	mov	r1, r3
 80027d0:	4812      	ldr	r0, [pc, #72]	; (800281c <MX_GPIO_Init+0x134>)
 80027d2:	f001 ff15 	bl	8004600 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	2006      	movs	r0, #6
 80027dc:	f001 fb3f 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80027e0:	2006      	movs	r0, #6
 80027e2:	f001 fb58 	bl	8003e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	2007      	movs	r0, #7
 80027ec:	f001 fb37 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80027f0:	2007      	movs	r0, #7
 80027f2:	f001 fb50 	bl	8003e96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	2017      	movs	r0, #23
 80027fc:	f001 fb2f 	bl	8003e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002800:	2017      	movs	r0, #23
 8002802:	f001 fb48 	bl	8003e96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002806:	bf00      	nop
 8002808:	3730      	adds	r7, #48	; 0x30
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800
 8002814:	10310000 	.word	0x10310000
 8002818:	40020000 	.word	0x40020000
 800281c:	40020800 	.word	0x40020800

08002820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002824:	b672      	cpsid	i
}
 8002826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002828:	e7fe      	b.n	8002828 <Error_Handler+0x8>
	...

0800282c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_MspInit+0x48>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a0e      	ldr	r2, [pc, #56]	; (8002874 <HAL_MspInit+0x48>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <HAL_MspInit+0x48>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	603b      	str	r3, [r7, #0]
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_MspInit+0x48>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a07      	ldr	r2, [pc, #28]	; (8002874 <HAL_MspInit+0x48>)
 8002858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_MspInit+0x48>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	40023800 	.word	0x40023800

08002878 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b090      	sub	sp, #64	; 0x40
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	605a      	str	r2, [r3, #4]
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	60da      	str	r2, [r3, #12]
 800288e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a83      	ldr	r2, [pc, #524]	; (8002aa4 <HAL_ADC_MspInit+0x22c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	f040 8095 	bne.w	80029c6 <HAL_ADC_MspInit+0x14e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800289c:	2300      	movs	r3, #0
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a0:	4b81      	ldr	r3, [pc, #516]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	4a80      	ldr	r2, [pc, #512]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80028a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028aa:	6453      	str	r3, [r2, #68]	; 0x44
 80028ac:	4b7e      	ldr	r3, [pc, #504]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
 80028bc:	4b7a      	ldr	r3, [pc, #488]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	4a79      	ldr	r2, [pc, #484]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80028c2:	f043 0304 	orr.w	r3, r3, #4
 80028c6:	6313      	str	r3, [r2, #48]	; 0x30
 80028c8:	4b77      	ldr	r3, [pc, #476]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d4:	2300      	movs	r3, #0
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	4b73      	ldr	r3, [pc, #460]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	4a72      	ldr	r2, [pc, #456]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6313      	str	r3, [r2, #48]	; 0x30
 80028e4:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	623b      	str	r3, [r7, #32]
 80028ee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	4a6b      	ldr	r2, [pc, #428]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80028fa:	f043 0302 	orr.w	r3, r3, #2
 80028fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002900:	4b69      	ldr	r3, [pc, #420]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800290c:	2338      	movs	r3, #56	; 0x38
 800290e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002910:	2303      	movs	r3, #3
 8002912:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291c:	4619      	mov	r1, r3
 800291e:	4863      	ldr	r0, [pc, #396]	; (8002aac <HAL_ADC_MspInit+0x234>)
 8002920:	f001 fe6e 	bl	8004600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002924:	2318      	movs	r3, #24
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002928:	2303      	movs	r3, #3
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002934:	4619      	mov	r1, r3
 8002936:	485e      	ldr	r0, [pc, #376]	; (8002ab0 <HAL_ADC_MspInit+0x238>)
 8002938:	f001 fe62 	bl	8004600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800293c:	2302      	movs	r3, #2
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002940:	2303      	movs	r3, #3
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294c:	4619      	mov	r1, r3
 800294e:	4859      	ldr	r0, [pc, #356]	; (8002ab4 <HAL_ADC_MspInit+0x23c>)
 8002950:	f001 fe56 	bl	8004600 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002954:	4b58      	ldr	r3, [pc, #352]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 8002956:	4a59      	ldr	r2, [pc, #356]	; (8002abc <HAL_ADC_MspInit+0x244>)
 8002958:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800295a:	4b57      	ldr	r3, [pc, #348]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 800295c:	2200      	movs	r2, #0
 800295e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002960:	4b55      	ldr	r3, [pc, #340]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002966:	4b54      	ldr	r3, [pc, #336]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800296c:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 800296e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002972:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 8002976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800297a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800297c:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 800297e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002982:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002984:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 8002986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800298a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800298c:	4b4a      	ldr	r3, [pc, #296]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002992:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 8002994:	2200      	movs	r2, #0
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002998:	4847      	ldr	r0, [pc, #284]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 800299a:	f001 fa97 	bl	8003ecc <HAL_DMA_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80029a4:	f7ff ff3c 	bl	8002820 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a43      	ldr	r2, [pc, #268]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
 80029ae:	4a42      	ldr	r2, [pc, #264]	; (8002ab8 <HAL_ADC_MspInit+0x240>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80029b4:	2200      	movs	r2, #0
 80029b6:	2101      	movs	r1, #1
 80029b8:	2012      	movs	r0, #18
 80029ba:	f001 fa50 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80029be:	2012      	movs	r0, #18
 80029c0:	f001 fa69 	bl	8003e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80029c4:	e06a      	b.n	8002a9c <HAL_ADC_MspInit+0x224>
  else if(hadc->Instance==ADC2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a3d      	ldr	r2, [pc, #244]	; (8002ac0 <HAL_ADC_MspInit+0x248>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d130      	bne.n	8002a32 <HAL_ADC_MspInit+0x1ba>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	4a33      	ldr	r2, [pc, #204]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80029da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029de:	6453      	str	r3, [r2, #68]	; 0x44
 80029e0:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80029e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	4a2c      	ldr	r2, [pc, #176]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	6313      	str	r3, [r2, #48]	; 0x30
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002a08:	2328      	movs	r3, #40	; 0x28
 8002a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4824      	ldr	r0, [pc, #144]	; (8002aac <HAL_ADC_MspInit+0x234>)
 8002a1c:	f001 fdf0 	bl	8004600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2101      	movs	r1, #1
 8002a24:	2012      	movs	r0, #18
 8002a26:	f001 fa1a 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a2a:	2012      	movs	r0, #18
 8002a2c:	f001 fa33 	bl	8003e96 <HAL_NVIC_EnableIRQ>
}
 8002a30:	e034      	b.n	8002a9c <HAL_ADC_MspInit+0x224>
  else if(hadc->Instance==ADC3)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <HAL_ADC_MspInit+0x24c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d12f      	bne.n	8002a9c <HAL_ADC_MspInit+0x224>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 8002a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a4a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4c:	4b16      	ldr	r3, [pc, #88]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	6313      	str	r3, [r2, #48]	; 0x30
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <HAL_ADC_MspInit+0x230>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a74:	2308      	movs	r3, #8
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a84:	4619      	mov	r1, r3
 8002a86:	4809      	ldr	r0, [pc, #36]	; (8002aac <HAL_ADC_MspInit+0x234>)
 8002a88:	f001 fdba 	bl	8004600 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2101      	movs	r1, #1
 8002a90:	2012      	movs	r0, #18
 8002a92:	f001 f9e4 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a96:	2012      	movs	r0, #18
 8002a98:	f001 f9fd 	bl	8003e96 <HAL_NVIC_EnableIRQ>
}
 8002a9c:	bf00      	nop
 8002a9e:	3740      	adds	r7, #64	; 0x40
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40012000 	.word	0x40012000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	20000b64 	.word	0x20000b64
 8002abc:	40026410 	.word	0x40026410
 8002ac0:	40012100 	.word	0x40012100
 8002ac4:	40012200 	.word	0x40012200

08002ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a44      	ldr	r2, [pc, #272]	; (8002bf8 <HAL_I2C_MspInit+0x130>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	f040 8082 	bne.w	8002bf0 <HAL_I2C_MspInit+0x128>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	4b42      	ldr	r3, [pc, #264]	; (8002bfc <HAL_I2C_MspInit+0x134>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	4a41      	ldr	r2, [pc, #260]	; (8002bfc <HAL_I2C_MspInit+0x134>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	6313      	str	r3, [r2, #48]	; 0x30
 8002afc:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_I2C_MspInit+0x134>)
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <HAL_I2C_MspInit+0x134>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	4a3a      	ldr	r2, [pc, #232]	; (8002bfc <HAL_I2C_MspInit+0x134>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6313      	str	r3, [r2, #48]	; 0x30
 8002b18:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <HAL_I2C_MspInit+0x134>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2a:	2312      	movs	r3, #18
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b32:	2303      	movs	r3, #3
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b36:	2304      	movs	r3, #4
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	482f      	ldr	r0, [pc, #188]	; (8002c00 <HAL_I2C_MspInit+0x138>)
 8002b42:	f001 fd5d 	bl	8004600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b4c:	2312      	movs	r3, #18
 8002b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b58:	2304      	movs	r3, #4
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4619      	mov	r1, r3
 8002b62:	4828      	ldr	r0, [pc, #160]	; (8002c04 <HAL_I2C_MspInit+0x13c>)
 8002b64:	f001 fd4c 	bl	8004600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_I2C_MspInit+0x134>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <HAL_I2C_MspInit+0x134>)
 8002b72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b76:	6413      	str	r3, [r2, #64]	; 0x40
 8002b78:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_I2C_MspInit+0x134>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002b86:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <HAL_I2C_MspInit+0x144>)
 8002b88:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002b8c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002b90:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b92:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002b94:	2240      	movs	r2, #64	; 0x40
 8002b96:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba4:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ba6:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8002bc4:	4810      	ldr	r0, [pc, #64]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002bc6:	f001 f981 	bl	8003ecc <HAL_DMA_Init>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 8002bd0:	f7ff fe26 	bl	8002820 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a0c      	ldr	r2, [pc, #48]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8002bda:	4a0b      	ldr	r2, [pc, #44]	; (8002c08 <HAL_I2C_MspInit+0x140>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	2048      	movs	r0, #72	; 0x48
 8002be6:	f001 f93a 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8002bea:	2048      	movs	r0, #72	; 0x48
 8002bec:	f001 f953 	bl	8003e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002bf0:	bf00      	nop
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40005c00 	.word	0x40005c00
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40020800 	.word	0x40020800
 8002c04:	40020000 	.word	0x40020000
 8002c08:	20000918 	.word	0x20000918
 8002c0c:	40026070 	.word	0x40026070

08002c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <HAL_TIM_Base_MspInit+0xb8>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d116      	bne.n	8002c50 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <HAL_TIM_Base_MspInit+0xbc>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	4a28      	ldr	r2, [pc, #160]	; (8002ccc <HAL_TIM_Base_MspInit+0xbc>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_TIM_Base_MspInit+0xbc>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	2019      	movs	r0, #25
 8002c44:	f001 f90b 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c48:	2019      	movs	r0, #25
 8002c4a:	f001 f924 	bl	8003e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002c4e:	e036      	b.n	8002cbe <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a1e      	ldr	r2, [pc, #120]	; (8002cd0 <HAL_TIM_Base_MspInit+0xc0>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d116      	bne.n	8002c88 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_TIM_Base_MspInit+0xbc>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_TIM_Base_MspInit+0xbc>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <HAL_TIM_Base_MspInit+0xbc>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	2100      	movs	r1, #0
 8002c7a:	202d      	movs	r0, #45	; 0x2d
 8002c7c:	f001 f8ef 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002c80:	202d      	movs	r0, #45	; 0x2d
 8002c82:	f001 f908 	bl	8003e96 <HAL_NVIC_EnableIRQ>
}
 8002c86:	e01a      	b.n	8002cbe <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM14)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a11      	ldr	r2, [pc, #68]	; (8002cd4 <HAL_TIM_Base_MspInit+0xc4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d115      	bne.n	8002cbe <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_TIM_Base_MspInit+0xbc>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a0c      	ldr	r2, [pc, #48]	; (8002ccc <HAL_TIM_Base_MspInit+0xbc>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_TIM_Base_MspInit+0xbc>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002cae:	2200      	movs	r2, #0
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	202d      	movs	r0, #45	; 0x2d
 8002cb4:	f001 f8d3 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002cb8:	202d      	movs	r0, #45	; 0x2d
 8002cba:	f001 f8ec 	bl	8003e96 <HAL_NVIC_EnableIRQ>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40010400 	.word	0x40010400
 8002cd4:	40002000 	.word	0x40002000

08002cd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <HAL_TIM_Encoder_MspInit+0x94>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d134      	bne.n	8002d64 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002d20:	f043 0308 	orr.w	r3, r3, #8
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002d32:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d40:	2300      	movs	r3, #0
 8002d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d44:	2302      	movs	r3, #2
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4809      	ldr	r0, [pc, #36]	; (8002d74 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002d50:	f001 fc56 	bl	8004600 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2100      	movs	r1, #0
 8002d58:	201e      	movs	r0, #30
 8002d5a:	f001 f880 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d5e:	201e      	movs	r0, #30
 8002d60:	f001 f899 	bl	8003e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d64:	bf00      	nop
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40020c00 	.word	0x40020c00

08002d78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a33      	ldr	r2, [pc, #204]	; (8002e64 <HAL_TIM_MspPostInit+0xec>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d11f      	bne.n	8002dda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	4b32      	ldr	r3, [pc, #200]	; (8002e68 <HAL_TIM_MspPostInit+0xf0>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a31      	ldr	r2, [pc, #196]	; (8002e68 <HAL_TIM_MspPostInit+0xf0>)
 8002da4:	f043 0310 	orr.w	r3, r3, #16
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b2f      	ldr	r3, [pc, #188]	; (8002e68 <HAL_TIM_MspPostInit+0xf0>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002db6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dcc:	f107 0314 	add.w	r3, r7, #20
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	4826      	ldr	r0, [pc, #152]	; (8002e6c <HAL_TIM_MspPostInit+0xf4>)
 8002dd4:	f001 fc14 	bl	8004600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002dd8:	e040      	b.n	8002e5c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <HAL_TIM_MspPostInit+0xf8>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d13b      	bne.n	8002e5c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <HAL_TIM_MspPostInit+0xf0>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_TIM_MspPostInit+0xf0>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6313      	str	r3, [r2, #48]	; 0x30
 8002df4:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <HAL_TIM_MspPostInit+0xf0>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <HAL_TIM_MspPostInit+0xf0>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_TIM_MspPostInit+0xf0>)
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
 8002e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e10:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_TIM_MspPostInit+0xf0>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e20:	2302      	movs	r3, #2
 8002e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	4619      	mov	r1, r3
 8002e36:	480f      	ldr	r0, [pc, #60]	; (8002e74 <HAL_TIM_MspPostInit+0xfc>)
 8002e38:	f001 fbe2 	bl	8004600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e3c:	2340      	movs	r3, #64	; 0x40
 8002e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4619      	mov	r1, r3
 8002e56:	4808      	ldr	r0, [pc, #32]	; (8002e78 <HAL_TIM_MspPostInit+0x100>)
 8002e58:	f001 fbd2 	bl	8004600 <HAL_GPIO_Init>
}
 8002e5c:	bf00      	nop
 8002e5e:	3728      	adds	r7, #40	; 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40010400 	.word	0x40010400
 8002e74:	40020000 	.word	0x40020000
 8002e78:	40020800 	.word	0x40020800

08002e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <HAL_UART_MspInit+0x94>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d134      	bne.n	8002f08 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <HAL_UART_MspInit+0x98>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <HAL_UART_MspInit+0x98>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eac:	6413      	str	r3, [r2, #64]	; 0x40
 8002eae:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_UART_MspInit+0x98>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_UART_MspInit+0x98>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <HAL_UART_MspInit+0x98>)
 8002ec4:	f043 0308 	orr.w	r3, r3, #8
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_UART_MspInit+0x98>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ed6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ee8:	2307      	movs	r3, #7
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4809      	ldr	r0, [pc, #36]	; (8002f18 <HAL_UART_MspInit+0x9c>)
 8002ef4:	f001 fb84 	bl	8004600 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2100      	movs	r1, #0
 8002efc:	2027      	movs	r0, #39	; 0x27
 8002efe:	f000 ffae 	bl	8003e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f02:	2027      	movs	r0, #39	; 0x27
 8002f04:	f000 ffc7 	bl	8003e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f08:	bf00      	nop
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40004800 	.word	0x40004800
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020c00 	.word	0x40020c00

08002f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f20:	e7fe      	b.n	8002f20 <NMI_Handler+0x4>

08002f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f26:	e7fe      	b.n	8002f26 <HardFault_Handler+0x4>

08002f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <MemManage_Handler+0x4>

08002f2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f32:	e7fe      	b.n	8002f32 <BusFault_Handler+0x4>

08002f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <UsageFault_Handler+0x4>

08002f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr

08002f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f62:	f000 f923 	bl	80031ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f001 fcfc 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002f7c:	2002      	movs	r0, #2
 8002f7e:	f001 fcf5 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8002f8c:	4802      	ldr	r0, [pc, #8]	; (8002f98 <DMA1_Stream4_IRQHandler+0x10>)
 8002f8e:	f001 f8c5 	bl	800411c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000918 	.word	0x20000918

08002f9c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002fa0:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <ADC_IRQHandler+0x1c>)
 8002fa2:	f000 f962 	bl	800326a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002fa6:	4805      	ldr	r0, [pc, #20]	; (8002fbc <ADC_IRQHandler+0x20>)
 8002fa8:	f000 f95f 	bl	800326a <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8002fac:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <ADC_IRQHandler+0x24>)
 8002fae:	f000 f95c 	bl	800326a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000ad4 	.word	0x20000ad4
 8002fbc:	20000a8c 	.word	0x20000a8c
 8002fc0:	20000b1c 	.word	0x20000b1c

08002fc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002fc8:	2020      	movs	r0, #32
 8002fca:	f001 fccf 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002fce:	2080      	movs	r0, #128	; 0x80
 8002fd0:	f001 fccc 	bl	800496c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002fd4:	bf00      	nop
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fdc:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002fde:	f003 ff6d 	bl	8006ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000bc4 	.word	0x20000bc4

08002fec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ff0:	4802      	ldr	r0, [pc, #8]	; (8002ffc <TIM4_IRQHandler+0x10>)
 8002ff2:	f003 ff63 	bl	8006ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000a0c 	.word	0x20000a0c

08003000 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003004:	4802      	ldr	r0, [pc, #8]	; (8003010 <USART3_IRQHandler+0x10>)
 8003006:	f004 fef7 	bl	8007df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000a4c 	.word	0x20000a4c

08003014 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003018:	4803      	ldr	r0, [pc, #12]	; (8003028 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 800301a:	f003 ff4f 	bl	8006ebc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 800301e:	4803      	ldr	r0, [pc, #12]	; (800302c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8003020:	f003 ff4c 	bl	8006ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}
 8003028:	200009cc 	.word	0x200009cc
 800302c:	20000c04 	.word	0x20000c04

08003030 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003034:	4802      	ldr	r0, [pc, #8]	; (8003040 <DMA2_Stream0_IRQHandler+0x10>)
 8003036:	f001 f871 	bl	800411c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000b64 	.word	0x20000b64

08003044 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8003048:	4802      	ldr	r0, [pc, #8]	; (8003054 <I2C3_EV_IRQHandler+0x10>)
 800304a:	f001 fdeb 	bl	8004c24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000978 	.word	0x20000978

08003058 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800305c:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <SystemInit+0x50>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a11      	ldr	r2, [pc, #68]	; (80030a8 <SystemInit+0x50>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <SystemInit+0x50>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800306e:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <SystemInit+0x50>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a0d      	ldr	r2, [pc, #52]	; (80030a8 <SystemInit+0x50>)
 8003074:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <SystemInit+0x50>)
 8003080:	4a0a      	ldr	r2, [pc, #40]	; (80030ac <SystemInit+0x54>)
 8003082:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <SystemInit+0x50>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <SystemInit+0x50>)
 800308a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800308e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <SystemInit+0x50>)
 8003092:	2200      	movs	r2, #0
 8003094:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <SystemInit+0x58>)
 8003098:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800309c:	609a      	str	r2, [r3, #8]
#endif
}
 800309e:	bf00      	nop
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800
 80030ac:	24003010 	.word	0x24003010
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80030b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030ba:	e003      	b.n	80030c4 <LoopCopyDataInit>

080030bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030c2:	3104      	adds	r1, #4

080030c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80030c4:	480b      	ldr	r0, [pc, #44]	; (80030f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030c6:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030cc:	d3f6      	bcc.n	80030bc <CopyDataInit>
  ldr  r2, =_sbss
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030d0:	e002      	b.n	80030d8 <LoopFillZerobss>

080030d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80030d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030d4:	f842 3b04 	str.w	r3, [r2], #4

080030d8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80030d8:	4b09      	ldr	r3, [pc, #36]	; (8003100 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030dc:	d3f9      	bcc.n	80030d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030de:	f7ff ffbb 	bl	8003058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030e2:	f005 fa57 	bl	8008594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030e6:	f7fe ff27 	bl	8001f38 <main>
  bx  lr
 80030ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80030f0:	08009810 	.word	0x08009810
  ldr  r0, =_sdata
 80030f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030f8:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 80030fc:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8003100:	20000c48 	.word	0x20000c48

08003104 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003104:	e7fe      	b.n	8003104 <CAN1_RX0_IRQHandler>
	...

08003108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <HAL_Init+0x40>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <HAL_Init+0x40>)
 8003112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <HAL_Init+0x40>)
 800311e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a07      	ldr	r2, [pc, #28]	; (8003148 <HAL_Init+0x40>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003130:	2003      	movs	r0, #3
 8003132:	f000 fe89 	bl	8003e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003136:	200f      	movs	r0, #15
 8003138:	f000 f808 	bl	800314c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800313c:	f7ff fb76 	bl	800282c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023c00 	.word	0x40023c00

0800314c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_InitTick+0x54>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_InitTick+0x58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003162:	fbb3 f3f1 	udiv	r3, r3, r1
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fea1 	bl	8003eb2 <HAL_SYSTICK_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00e      	b.n	8003198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d80a      	bhi.n	8003196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003180:	2200      	movs	r2, #0
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f000 fe69 	bl	8003e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <HAL_InitTick+0x5c>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000014 	.word	0x20000014
 80031a4:	2000001c 	.word	0x2000001c
 80031a8:	20000018 	.word	0x20000018

080031ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_IncTick+0x1c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_IncTick+0x20>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	4a03      	ldr	r2, [pc, #12]	; (80031cc <HAL_IncTick+0x20>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	2000001c 	.word	0x2000001c
 80031cc:	20000c44 	.word	0x20000c44

080031d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return uwTick;
 80031d4:	4b02      	ldr	r3, [pc, #8]	; (80031e0 <HAL_GetTick+0x10>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr
 80031e0:	20000c44 	.word	0x20000c44

080031e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e033      	b.n	8003262 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff fb38 	bl	8002878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d118      	bne.n	8003254 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800322a:	f023 0302 	bic.w	r3, r3, #2
 800322e:	f043 0202 	orr.w	r2, r3, #2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 fb66 	bl	8003908 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f023 0303 	bic.w	r3, r3, #3
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
 8003252:	e001      	b.n	8003258 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b20      	cmp	r3, #32
 800329c:	bf0c      	ite	eq
 800329e:	2301      	moveq	r3, #1
 80032a0:	2300      	movne	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d049      	beq.n	8003340 <HAL_ADC_IRQHandler+0xd6>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d046      	beq.n	8003340 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d12b      	bne.n	8003330 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d127      	bne.n	8003330 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d006      	beq.n	80032fc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d119      	bne.n	8003330 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0220 	bic.w	r2, r2, #32
 800330a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f043 0201 	orr.w	r2, r3, #1
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7fe fcd5 	bl	8001ce0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f06f 0212 	mvn.w	r2, #18
 800333e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b04      	cmp	r3, #4
 800334c:	bf0c      	ite	eq
 800334e:	2301      	moveq	r3, #1
 8003350:	2300      	movne	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003360:	2b80      	cmp	r3, #128	; 0x80
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d057      	beq.n	8003422 <HAL_ADC_IRQHandler+0x1b8>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d054      	beq.n	8003422 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003388:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d139      	bne.n	8003412 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d006      	beq.n	80033ba <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d12b      	bne.n	8003412 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d124      	bne.n	8003412 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d11d      	bne.n	8003412 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d119      	bne.n	8003412 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ec:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003402:	2b00      	cmp	r3, #0
 8003404:	d105      	bne.n	8003412 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f043 0201 	orr.w	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fbfe 	bl	8003c14 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 020c 	mvn.w	r2, #12
 8003420:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	bf0c      	ite	eq
 8003446:	2301      	moveq	r3, #1
 8003448:	2300      	movne	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d017      	beq.n	8003484 <HAL_ADC_IRQHandler+0x21a>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d014      	beq.n	8003484 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d10d      	bne.n	8003484 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f914 	bl	80036a2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f06f 0201 	mvn.w	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0320 	and.w	r3, r3, #32
 800348e:	2b20      	cmp	r3, #32
 8003490:	bf0c      	ite	eq
 8003492:	2301      	moveq	r3, #1
 8003494:	2300      	movne	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034a8:	bf0c      	ite	eq
 80034aa:	2301      	moveq	r3, #1
 80034ac:	2300      	movne	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d015      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x27a>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d012      	beq.n	80034e4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f06f 0220 	mvn.w	r2, #32
 80034d2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8ed 	bl	80036b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f06f 0220 	mvn.w	r2, #32
 80034e2:	601a      	str	r2, [r3, #0]
  }
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_ADC_Start_DMA+0x1e>
 8003506:	2302      	movs	r3, #2
 8003508:	e0af      	b.n	800366a <HAL_ADC_Start_DMA+0x17e>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d018      	beq.n	8003552 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0201 	orr.w	r2, r2, #1
 800352e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003530:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_ADC_Start_DMA+0x188>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a50      	ldr	r2, [pc, #320]	; (8003678 <HAL_ADC_Start_DMA+0x18c>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0c9a      	lsrs	r2, r3, #18
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003544:	e002      	b.n	800354c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	3b01      	subs	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f9      	bne.n	8003546 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	f040 8083 	bne.w	8003668 <HAL_ADC_Start_DMA+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800358c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a0:	d106      	bne.n	80035b0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f023 0206 	bic.w	r2, r3, #6
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	645a      	str	r2, [r3, #68]	; 0x44
 80035ae:	e002      	b.n	80035b6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	4a2e      	ldr	r2, [pc, #184]	; (800367c <HAL_ADC_Start_DMA+0x190>)
 80035c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	4a2d      	ldr	r2, [pc, #180]	; (8003680 <HAL_ADC_Start_DMA+0x194>)
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	4a2c      	ldr	r2, [pc, #176]	; (8003684 <HAL_ADC_Start_DMA+0x198>)
 80035d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	334c      	adds	r3, #76	; 0x4c
 800360a:	4619      	mov	r1, r3
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f000 fd0a 	bl	8004028 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003614:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <HAL_ADC_Start_DMA+0x19c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10f      	bne.n	8003640 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d11c      	bne.n	8003668 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800363c:	609a      	str	r2, [r3, #8]
 800363e:	e013      	b.n	8003668 <HAL_ADC_Start_DMA+0x17c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a11      	ldr	r2, [pc, #68]	; (800368c <HAL_ADC_Start_DMA+0x1a0>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10e      	bne.n	8003668 <HAL_ADC_Start_DMA+0x17c>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d107      	bne.n	8003668 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003666:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	20000014 	.word	0x20000014
 8003678:	431bde83 	.word	0x431bde83
 800367c:	08003b11 	.word	0x08003b11
 8003680:	08003bcb 	.word	0x08003bcb
 8003684:	08003be7 	.word	0x08003be7
 8003688:	40012300 	.word	0x40012300
 800368c:	40012000 	.word	0x40012000

08003690 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	bc80      	pop	{r7}
 80036a0:	4770      	bx	lr

080036a2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr

080036b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
	...

080036c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x1c>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e103      	b.n	80038ec <HAL_ADC_ConfigChannel+0x224>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b09      	cmp	r3, #9
 80036f2:	d925      	bls.n	8003740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68d9      	ldr	r1, [r3, #12]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	3b1e      	subs	r3, #30
 800370a:	2207      	movs	r2, #7
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43da      	mvns	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	400a      	ands	r2, r1
 8003718:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68d9      	ldr	r1, [r3, #12]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	4618      	mov	r0, r3
 800372c:	4603      	mov	r3, r0
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4403      	add	r3, r0
 8003732:	3b1e      	subs	r3, #30
 8003734:	409a      	lsls	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	e022      	b.n	8003786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6919      	ldr	r1, [r3, #16]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	2207      	movs	r2, #7
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	400a      	ands	r2, r1
 8003762:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6919      	ldr	r1, [r3, #16]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	4618      	mov	r0, r3
 8003776:	4603      	mov	r3, r0
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4403      	add	r3, r0
 800377c:	409a      	lsls	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b06      	cmp	r3, #6
 800378c:	d824      	bhi.n	80037d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	3b05      	subs	r3, #5
 80037a0:	221f      	movs	r2, #31
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43da      	mvns	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	400a      	ands	r2, r1
 80037ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4618      	mov	r0, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	3b05      	subs	r3, #5
 80037ca:	fa00 f203 	lsl.w	r2, r0, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
 80037d6:	e04c      	b.n	8003872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d824      	bhi.n	800382a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	3b23      	subs	r3, #35	; 0x23
 80037f2:	221f      	movs	r2, #31
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43da      	mvns	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	400a      	ands	r2, r1
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	4618      	mov	r0, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	3b23      	subs	r3, #35	; 0x23
 800381c:	fa00 f203 	lsl.w	r2, r0, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
 8003828:	e023      	b.n	8003872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	3b41      	subs	r3, #65	; 0x41
 800383c:	221f      	movs	r2, #31
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	400a      	ands	r2, r1
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	4618      	mov	r0, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	3b41      	subs	r3, #65	; 0x41
 8003866:	fa00 f203 	lsl.w	r2, r0, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a20      	ldr	r2, [pc, #128]	; (80038f8 <HAL_ADC_ConfigChannel+0x230>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d109      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x1c8>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b12      	cmp	r3, #18
 8003882:	d105      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003884:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <HAL_ADC_ConfigChannel+0x234>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <HAL_ADC_ConfigChannel+0x234>)
 800388a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800388e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <HAL_ADC_ConfigChannel+0x230>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d123      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x21a>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b10      	cmp	r3, #16
 80038a0:	d003      	beq.n	80038aa <HAL_ADC_ConfigChannel+0x1e2>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b11      	cmp	r3, #17
 80038a8:	d11b      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80038aa:	4b14      	ldr	r3, [pc, #80]	; (80038fc <HAL_ADC_ConfigChannel+0x234>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4a13      	ldr	r2, [pc, #76]	; (80038fc <HAL_ADC_ConfigChannel+0x234>)
 80038b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038b4:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d111      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_ADC_ConfigChannel+0x238>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <HAL_ADC_ConfigChannel+0x23c>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	0c9a      	lsrs	r2, r3, #18
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80038d4:	e002      	b.n	80038dc <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3b01      	subs	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f9      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40012000 	.word	0x40012000
 80038fc:	40012300 	.word	0x40012300
 8003900:	20000014 	.word	0x20000014
 8003904:	431bde83 	.word	0x431bde83

08003908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003910:	4b7d      	ldr	r3, [pc, #500]	; (8003b08 <ADC_Init+0x200>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a7c      	ldr	r2, [pc, #496]	; (8003b08 <ADC_Init+0x200>)
 8003916:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800391a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800391c:	4b7a      	ldr	r3, [pc, #488]	; (8003b08 <ADC_Init+0x200>)
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4978      	ldr	r1, [pc, #480]	; (8003b08 <ADC_Init+0x200>)
 8003926:	4313      	orrs	r3, r2
 8003928:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	021a      	lsls	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800395c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800397e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6899      	ldr	r1, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	4a5d      	ldr	r2, [pc, #372]	; (8003b0c <ADC_Init+0x204>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d022      	beq.n	80039e2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689a      	ldr	r2, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6899      	ldr	r1, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6899      	ldr	r1, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	609a      	str	r2, [r3, #8]
 80039e0:	e00f      	b.n	8003a02 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a00:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0202 	bic.w	r2, r2, #2
 8003a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6899      	ldr	r1, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	005a      	lsls	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d027      	beq.n	8003a7e <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a3c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a4c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	3b01      	subs	r3, #1
 8003a54:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003a58:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	fa92 f2a2 	rbit	r2, r2
 8003a60:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	fab2 f282 	clz	r2, r2
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	fa03 f102 	lsl.w	r1, r3, r2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	e007      	b.n	8003a8e <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a8c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	051a      	lsls	r2, r3, #20
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ac2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6899      	ldr	r1, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	025a      	lsls	r2, r3, #9
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6899      	ldr	r1, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	029a      	lsls	r2, r3, #10
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	40012300 	.word	0x40012300
 8003b0c:	0f000001 	.word	0x0f000001

08003b10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d13c      	bne.n	8003ba4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d12b      	bne.n	8003b9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d127      	bne.n	8003b9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d119      	bne.n	8003b9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 0220 	bic.w	r2, r2, #32
 8003b76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7fe f89f 	bl	8001ce0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ba2:	e00e      	b.n	8003bc2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7ff fd7f 	bl	80036b4 <HAL_ADC_ErrorCallback>
}
 8003bb6:	e004      	b.n	8003bc2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	4798      	blx	r3
}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f7ff fd59 	bl	8003690 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2240      	movs	r2, #64	; 0x40
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	f043 0204 	orr.w	r2, r3, #4
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7ff fd54 	bl	80036b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e02f      	b.n	8003ca0 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8003c48:	4b18      	ldr	r3, [pc, #96]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a17      	ldr	r2, [pc, #92]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c4e:	f023 031f 	bic.w	r3, r3, #31
 8003c52:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->Mode;
 8003c54:	4b15      	ldr	r3, [pc, #84]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4913      	ldr	r1, [pc, #76]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8003c62:	4b12      	ldr	r3, [pc, #72]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4a11      	ldr	r2, [pc, #68]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003c6c:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	490d      	ldr	r1, [pc, #52]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	604b      	str	r3, [r1, #4]
  
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c86:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4906      	ldr	r1, [pc, #24]	; (8003cac <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	604b      	str	r3, [r1, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40012300 	.word	0x40012300

08003cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce2:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	60d3      	str	r3, [r2, #12]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <__NVIC_GetPriorityGrouping+0x18>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	0a1b      	lsrs	r3, r3, #8
 8003d02:	f003 0307 	and.w	r3, r3, #7
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bc80      	pop	{r7}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	db0b      	blt.n	8003d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	f003 021f 	and.w	r2, r3, #31
 8003d2c:	4906      	ldr	r1, [pc, #24]	; (8003d48 <__NVIC_EnableIRQ+0x34>)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	2001      	movs	r0, #1
 8003d36:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d3e:	bf00      	nop
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr
 8003d48:	e000e100 	.word	0xe000e100

08003d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	6039      	str	r1, [r7, #0]
 8003d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	db0a      	blt.n	8003d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	490c      	ldr	r1, [pc, #48]	; (8003d98 <__NVIC_SetPriority+0x4c>)
 8003d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d6a:	0112      	lsls	r2, r2, #4
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	440b      	add	r3, r1
 8003d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d74:	e00a      	b.n	8003d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4908      	ldr	r1, [pc, #32]	; (8003d9c <__NVIC_SetPriority+0x50>)
 8003d7c:	79fb      	ldrb	r3, [r7, #7]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	3b04      	subs	r3, #4
 8003d84:	0112      	lsls	r2, r2, #4
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	440b      	add	r3, r1
 8003d8a:	761a      	strb	r2, [r3, #24]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	e000e100 	.word	0xe000e100
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b089      	sub	sp, #36	; 0x24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f1c3 0307 	rsb	r3, r3, #7
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	bf28      	it	cs
 8003dbe:	2304      	movcs	r3, #4
 8003dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	2b06      	cmp	r3, #6
 8003dc8:	d902      	bls.n	8003dd0 <NVIC_EncodePriority+0x30>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3b03      	subs	r3, #3
 8003dce:	e000      	b.n	8003dd2 <NVIC_EncodePriority+0x32>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	401a      	ands	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de8:	f04f 31ff 	mov.w	r1, #4294967295
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	fa01 f303 	lsl.w	r3, r1, r3
 8003df2:	43d9      	mvns	r1, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df8:	4313      	orrs	r3, r2
         );
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3724      	adds	r7, #36	; 0x24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bc80      	pop	{r7}
 8003e02:	4770      	bx	lr

08003e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e14:	d301      	bcc.n	8003e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e16:	2301      	movs	r3, #1
 8003e18:	e00f      	b.n	8003e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e1a:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <SysTick_Config+0x40>)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e22:	210f      	movs	r1, #15
 8003e24:	f04f 30ff 	mov.w	r0, #4294967295
 8003e28:	f7ff ff90 	bl	8003d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <SysTick_Config+0x40>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e32:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <SysTick_Config+0x40>)
 8003e34:	2207      	movs	r2, #7
 8003e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	e000e010 	.word	0xe000e010

08003e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff2d 	bl	8003cb0 <__NVIC_SetPriorityGrouping>
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b086      	sub	sp, #24
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	4603      	mov	r3, r0
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	607a      	str	r2, [r7, #4]
 8003e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e70:	f7ff ff42 	bl	8003cf8 <__NVIC_GetPriorityGrouping>
 8003e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	6978      	ldr	r0, [r7, #20]
 8003e7c:	f7ff ff90 	bl	8003da0 <NVIC_EncodePriority>
 8003e80:	4602      	mov	r2, r0
 8003e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff5f 	bl	8003d4c <__NVIC_SetPriority>
}
 8003e8e:	bf00      	nop
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ff35 	bl	8003d14 <__NVIC_EnableIRQ>
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff ffa2 	bl	8003e04 <SysTick_Config>
 8003ec0:	4603      	mov	r3, r0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ed8:	f7ff f97a 	bl	80031d0 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e099      	b.n	800401c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0201 	bic.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f08:	e00f      	b.n	8003f2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f0a:	f7ff f961 	bl	80031d0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b05      	cmp	r3, #5
 8003f16:	d908      	bls.n	8003f2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2203      	movs	r2, #3
 8003f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e078      	b.n	800401c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1e8      	bne.n	8003f0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	4b38      	ldr	r3, [pc, #224]	; (8004024 <HAL_DMA_Init+0x158>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d107      	bne.n	8003f94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f023 0307 	bic.w	r3, r3, #7
 8003faa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d117      	bne.n	8003fee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00e      	beq.n	8003fee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fa9b 	bl	800450c <DMA_CheckFifoParam>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d008      	beq.n	8003fee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2240      	movs	r2, #64	; 0x40
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fea:	2301      	movs	r3, #1
 8003fec:	e016      	b.n	800401c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fa54 	bl	80044a4 <DMA_CalcBaseAndBitshift>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004004:	223f      	movs	r2, #63	; 0x3f
 8004006:	409a      	lsls	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	f010803f 	.word	0xf010803f

08004028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_DMA_Start_IT+0x26>
 800404a:	2302      	movs	r3, #2
 800404c:	e040      	b.n	80040d0 <HAL_DMA_Start_IT+0xa8>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b01      	cmp	r3, #1
 8004060:	d12f      	bne.n	80040c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2202      	movs	r2, #2
 8004066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68b9      	ldr	r1, [r7, #8]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f9e7 	bl	800444a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	223f      	movs	r2, #63	; 0x3f
 8004082:	409a      	lsls	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0216 	orr.w	r2, r2, #22
 8004096:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0208 	orr.w	r2, r2, #8
 80040ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e005      	b.n	80040ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040ca:	2302      	movs	r3, #2
 80040cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d004      	beq.n	80040f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2280      	movs	r2, #128	; 0x80
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e00c      	b.n	8004110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2205      	movs	r2, #5
 80040fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	bc80      	pop	{r7}
 8004118:	4770      	bx	lr
	...

0800411c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004128:	4b92      	ldr	r3, [pc, #584]	; (8004374 <HAL_DMA_IRQHandler+0x258>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a92      	ldr	r2, [pc, #584]	; (8004378 <HAL_DMA_IRQHandler+0x25c>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	0a9b      	lsrs	r3, r3, #10
 8004134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004146:	2208      	movs	r2, #8
 8004148:	409a      	lsls	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4013      	ands	r3, r2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01a      	beq.n	8004188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d013      	beq.n	8004188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0204 	bic.w	r2, r2, #4
 800416e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	2208      	movs	r2, #8
 8004176:	409a      	lsls	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004180:	f043 0201 	orr.w	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418c:	2201      	movs	r2, #1
 800418e:	409a      	lsls	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d012      	beq.n	80041be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041aa:	2201      	movs	r2, #1
 80041ac:	409a      	lsls	r2, r3
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	f043 0202 	orr.w	r2, r3, #2
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c2:	2204      	movs	r2, #4
 80041c4:	409a      	lsls	r2, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d012      	beq.n	80041f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	2204      	movs	r2, #4
 80041e2:	409a      	lsls	r2, r3
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	f043 0204 	orr.w	r2, r3, #4
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f8:	2210      	movs	r2, #16
 80041fa:	409a      	lsls	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d043      	beq.n	800428c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d03c      	beq.n	800428c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004216:	2210      	movs	r2, #16
 8004218:	409a      	lsls	r2, r3
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d018      	beq.n	800425e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d108      	bne.n	800424c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d024      	beq.n	800428c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	4798      	blx	r3
 800424a:	e01f      	b.n	800428c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01b      	beq.n	800428c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4798      	blx	r3
 800425c:	e016      	b.n	800428c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d107      	bne.n	800427c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0208 	bic.w	r2, r2, #8
 800427a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004290:	2220      	movs	r2, #32
 8004292:	409a      	lsls	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4013      	ands	r3, r2
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 808e 	beq.w	80043ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0310 	and.w	r3, r3, #16
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 8086 	beq.w	80043ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b2:	2220      	movs	r2, #32
 80042b4:	409a      	lsls	r2, r3
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b05      	cmp	r3, #5
 80042c4:	d136      	bne.n	8004334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0216 	bic.w	r2, r2, #22
 80042d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695a      	ldr	r2, [r3, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <HAL_DMA_IRQHandler+0x1da>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d007      	beq.n	8004306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0208 	bic.w	r2, r2, #8
 8004304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430a:	223f      	movs	r2, #63	; 0x3f
 800430c:	409a      	lsls	r2, r3
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004326:	2b00      	cmp	r3, #0
 8004328:	d07d      	beq.n	8004426 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
        }
        return;
 8004332:	e078      	b.n	8004426 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d01c      	beq.n	800437c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d108      	bne.n	8004362 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004354:	2b00      	cmp	r3, #0
 8004356:	d030      	beq.n	80043ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
 8004360:	e02b      	b.n	80043ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d027      	beq.n	80043ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	4798      	blx	r3
 8004372:	e022      	b.n	80043ba <HAL_DMA_IRQHandler+0x29e>
 8004374:	20000014 	.word	0x20000014
 8004378:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10f      	bne.n	80043aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0210 	bic.w	r2, r2, #16
 8004398:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d032      	beq.n	8004428 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d022      	beq.n	8004414 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2205      	movs	r2, #5
 80043d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	3301      	adds	r3, #1
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d307      	bcc.n	8004402 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f2      	bne.n	80043e6 <HAL_DMA_IRQHandler+0x2ca>
 8004400:	e000      	b.n	8004404 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004402:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	4798      	blx	r3
 8004424:	e000      	b.n	8004428 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004426:	bf00      	nop
    }
  }
}
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop

08004430 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800443e:	b2db      	uxtb	r3, r3
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
 8004456:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004466:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d108      	bne.n	800448a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004488:	e007      	b.n	800449a <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	60da      	str	r2, [r3, #12]
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	bc80      	pop	{r7}
 80044a2:	4770      	bx	lr

080044a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	3b10      	subs	r3, #16
 80044b4:	4a13      	ldr	r2, [pc, #76]	; (8004504 <DMA_CalcBaseAndBitshift+0x60>)
 80044b6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ba:	091b      	lsrs	r3, r3, #4
 80044bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <DMA_CalcBaseAndBitshift+0x64>)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d909      	bls.n	80044e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044da:	f023 0303 	bic.w	r3, r3, #3
 80044de:	1d1a      	adds	r2, r3, #4
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	659a      	str	r2, [r3, #88]	; 0x58
 80044e4:	e007      	b.n	80044f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044ee:	f023 0303 	bic.w	r3, r3, #3
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	aaaaaaab 	.word	0xaaaaaaab
 8004508:	08009620 	.word	0x08009620

0800450c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d11f      	bne.n	8004566 <DMA_CheckFifoParam+0x5a>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b03      	cmp	r3, #3
 800452a:	d856      	bhi.n	80045da <DMA_CheckFifoParam+0xce>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <DMA_CheckFifoParam+0x28>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	08004545 	.word	0x08004545
 8004538:	08004557 	.word	0x08004557
 800453c:	08004545 	.word	0x08004545
 8004540:	080045db 	.word	0x080045db
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d046      	beq.n	80045de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004554:	e043      	b.n	80045de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800455e:	d140      	bne.n	80045e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004564:	e03d      	b.n	80045e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800456e:	d121      	bne.n	80045b4 <DMA_CheckFifoParam+0xa8>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d837      	bhi.n	80045e6 <DMA_CheckFifoParam+0xda>
 8004576:	a201      	add	r2, pc, #4	; (adr r2, 800457c <DMA_CheckFifoParam+0x70>)
 8004578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457c:	0800458d 	.word	0x0800458d
 8004580:	08004593 	.word	0x08004593
 8004584:	0800458d 	.word	0x0800458d
 8004588:	080045a5 	.word	0x080045a5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
      break;
 8004590:	e030      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d025      	beq.n	80045ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a2:	e022      	b.n	80045ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ac:	d11f      	bne.n	80045ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045b2:	e01c      	b.n	80045ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d903      	bls.n	80045c2 <DMA_CheckFifoParam+0xb6>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d003      	beq.n	80045c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045c0:	e018      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
      break;
 80045c6:	e015      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00e      	beq.n	80045f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      break;
 80045d8:	e00b      	b.n	80045f2 <DMA_CheckFifoParam+0xe6>
      break;
 80045da:	bf00      	nop
 80045dc:	e00a      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;
 80045de:	bf00      	nop
 80045e0:	e008      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;
 80045e2:	bf00      	nop
 80045e4:	e006      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;
 80045e6:	bf00      	nop
 80045e8:	e004      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;
 80045ea:	bf00      	nop
 80045ec:	e002      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80045ee:	bf00      	nop
 80045f0:	e000      	b.n	80045f4 <DMA_CheckFifoParam+0xe8>
      break;
 80045f2:	bf00      	nop
    }
  } 
  
  return status; 
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr

08004600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004600:	b480      	push	{r7}
 8004602:	b087      	sub	sp, #28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800460e:	e16f      	b.n	80048f0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	2101      	movs	r1, #1
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	fa01 f303 	lsl.w	r3, r1, r3
 800461c:	4013      	ands	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8161 	beq.w	80048ea <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d00b      	beq.n	8004648 <HAL_GPIO_Init+0x48>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d007      	beq.n	8004648 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800463c:	2b11      	cmp	r3, #17
 800463e:	d003      	beq.n	8004648 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b12      	cmp	r3, #18
 8004646:	d130      	bne.n	80046aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	2203      	movs	r2, #3
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4013      	ands	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800467e:	2201      	movs	r2, #1
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4013      	ands	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 0201 	and.w	r2, r3, #1
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	2203      	movs	r2, #3
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43db      	mvns	r3, r3
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d003      	beq.n	80046ea <HAL_GPIO_Init+0xea>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b12      	cmp	r3, #18
 80046e8:	d123      	bne.n	8004732 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	08da      	lsrs	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	3208      	adds	r2, #8
 80046f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	220f      	movs	r2, #15
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	43db      	mvns	r3, r3
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	4013      	ands	r3, r2
 800470c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	08da      	lsrs	r2, r3, #3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3208      	adds	r2, #8
 800472c:	6939      	ldr	r1, [r7, #16]
 800472e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	2203      	movs	r2, #3
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4013      	ands	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0203 	and.w	r2, r3, #3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4313      	orrs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 80bb 	beq.w	80048ea <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004774:	2300      	movs	r3, #0
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	4b64      	ldr	r3, [pc, #400]	; (800490c <HAL_GPIO_Init+0x30c>)
 800477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477c:	4a63      	ldr	r2, [pc, #396]	; (800490c <HAL_GPIO_Init+0x30c>)
 800477e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004782:	6453      	str	r3, [r2, #68]	; 0x44
 8004784:	4b61      	ldr	r3, [pc, #388]	; (800490c <HAL_GPIO_Init+0x30c>)
 8004786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004790:	4a5f      	ldr	r2, [pc, #380]	; (8004910 <HAL_GPIO_Init+0x310>)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	089b      	lsrs	r3, r3, #2
 8004796:	3302      	adds	r3, #2
 8004798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800479c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	220f      	movs	r2, #15
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a57      	ldr	r2, [pc, #348]	; (8004914 <HAL_GPIO_Init+0x314>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d031      	beq.n	8004820 <HAL_GPIO_Init+0x220>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a56      	ldr	r2, [pc, #344]	; (8004918 <HAL_GPIO_Init+0x318>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d02b      	beq.n	800481c <HAL_GPIO_Init+0x21c>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a55      	ldr	r2, [pc, #340]	; (800491c <HAL_GPIO_Init+0x31c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d025      	beq.n	8004818 <HAL_GPIO_Init+0x218>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a54      	ldr	r2, [pc, #336]	; (8004920 <HAL_GPIO_Init+0x320>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d01f      	beq.n	8004814 <HAL_GPIO_Init+0x214>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a53      	ldr	r2, [pc, #332]	; (8004924 <HAL_GPIO_Init+0x324>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d019      	beq.n	8004810 <HAL_GPIO_Init+0x210>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a52      	ldr	r2, [pc, #328]	; (8004928 <HAL_GPIO_Init+0x328>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <HAL_GPIO_Init+0x20c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a51      	ldr	r2, [pc, #324]	; (800492c <HAL_GPIO_Init+0x32c>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00d      	beq.n	8004808 <HAL_GPIO_Init+0x208>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a50      	ldr	r2, [pc, #320]	; (8004930 <HAL_GPIO_Init+0x330>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <HAL_GPIO_Init+0x204>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a4f      	ldr	r2, [pc, #316]	; (8004934 <HAL_GPIO_Init+0x334>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d101      	bne.n	8004800 <HAL_GPIO_Init+0x200>
 80047fc:	2308      	movs	r3, #8
 80047fe:	e010      	b.n	8004822 <HAL_GPIO_Init+0x222>
 8004800:	2309      	movs	r3, #9
 8004802:	e00e      	b.n	8004822 <HAL_GPIO_Init+0x222>
 8004804:	2307      	movs	r3, #7
 8004806:	e00c      	b.n	8004822 <HAL_GPIO_Init+0x222>
 8004808:	2306      	movs	r3, #6
 800480a:	e00a      	b.n	8004822 <HAL_GPIO_Init+0x222>
 800480c:	2305      	movs	r3, #5
 800480e:	e008      	b.n	8004822 <HAL_GPIO_Init+0x222>
 8004810:	2304      	movs	r3, #4
 8004812:	e006      	b.n	8004822 <HAL_GPIO_Init+0x222>
 8004814:	2303      	movs	r3, #3
 8004816:	e004      	b.n	8004822 <HAL_GPIO_Init+0x222>
 8004818:	2302      	movs	r3, #2
 800481a:	e002      	b.n	8004822 <HAL_GPIO_Init+0x222>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <HAL_GPIO_Init+0x222>
 8004820:	2300      	movs	r3, #0
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	f002 0203 	and.w	r2, r2, #3
 8004828:	0092      	lsls	r2, r2, #2
 800482a:	4093      	lsls	r3, r2
 800482c:	461a      	mov	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004834:	4936      	ldr	r1, [pc, #216]	; (8004910 <HAL_GPIO_Init+0x310>)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	089b      	lsrs	r3, r3, #2
 800483a:	3302      	adds	r3, #2
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004842:	4b3d      	ldr	r3, [pc, #244]	; (8004938 <HAL_GPIO_Init+0x338>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	43db      	mvns	r3, r3
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4013      	ands	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004866:	4a34      	ldr	r2, [pc, #208]	; (8004938 <HAL_GPIO_Init+0x338>)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800486c:	4b32      	ldr	r3, [pc, #200]	; (8004938 <HAL_GPIO_Init+0x338>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	43db      	mvns	r3, r3
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	4013      	ands	r3, r2
 800487a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004890:	4a29      	ldr	r2, [pc, #164]	; (8004938 <HAL_GPIO_Init+0x338>)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004896:	4b28      	ldr	r3, [pc, #160]	; (8004938 <HAL_GPIO_Init+0x338>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	43db      	mvns	r3, r3
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4013      	ands	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80048ba:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <HAL_GPIO_Init+0x338>)
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048c0:	4b1d      	ldr	r3, [pc, #116]	; (8004938 <HAL_GPIO_Init+0x338>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	43db      	mvns	r3, r3
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80048e4:	4a14      	ldr	r2, [pc, #80]	; (8004938 <HAL_GPIO_Init+0x338>)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	3301      	adds	r3, #1
 80048ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	fa22 f303 	lsr.w	r3, r2, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	f47f ae88 	bne.w	8004610 <HAL_GPIO_Init+0x10>
  }
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	371c      	adds	r7, #28
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr
 800490c:	40023800 	.word	0x40023800
 8004910:	40013800 	.word	0x40013800
 8004914:	40020000 	.word	0x40020000
 8004918:	40020400 	.word	0x40020400
 800491c:	40020800 	.word	0x40020800
 8004920:	40020c00 	.word	0x40020c00
 8004924:	40021000 	.word	0x40021000
 8004928:	40021400 	.word	0x40021400
 800492c:	40021800 	.word	0x40021800
 8004930:	40021c00 	.word	0x40021c00
 8004934:	40022000 	.word	0x40022000
 8004938:	40013c00 	.word	0x40013c00

0800493c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	887b      	ldrh	r3, [r7, #2]
 800494e:	4013      	ands	r3, r2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004954:	2301      	movs	r3, #1
 8004956:	73fb      	strb	r3, [r7, #15]
 8004958:	e001      	b.n	800495e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800495a:	2300      	movs	r3, #0
 800495c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800495e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr
	...

0800496c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	4603      	mov	r3, r0
 8004974:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004976:	4b08      	ldr	r3, [pc, #32]	; (8004998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d006      	beq.n	8004990 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004982:	4a05      	ldr	r2, [pc, #20]	; (8004998 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fd f852 	bl	8001a34 <HAL_GPIO_EXTI_Callback>
  }
}
 8004990:	bf00      	nop
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40013c00 	.word	0x40013c00

0800499c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e12b      	b.n	8004c06 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d106      	bne.n	80049c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fe f880 	bl	8002ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2224      	movs	r2, #36	; 0x24
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a00:	f002 f83a 	bl	8006a78 <HAL_RCC_GetPCLK1Freq>
 8004a04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4a81      	ldr	r2, [pc, #516]	; (8004c10 <HAL_I2C_Init+0x274>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d807      	bhi.n	8004a20 <HAL_I2C_Init+0x84>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4a80      	ldr	r2, [pc, #512]	; (8004c14 <HAL_I2C_Init+0x278>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bf94      	ite	ls
 8004a18:	2301      	movls	r3, #1
 8004a1a:	2300      	movhi	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e006      	b.n	8004a2e <HAL_I2C_Init+0x92>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a7d      	ldr	r2, [pc, #500]	; (8004c18 <HAL_I2C_Init+0x27c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	bf94      	ite	ls
 8004a28:	2301      	movls	r3, #1
 8004a2a:	2300      	movhi	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e0e7      	b.n	8004c06 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a78      	ldr	r2, [pc, #480]	; (8004c1c <HAL_I2C_Init+0x280>)
 8004a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3e:	0c9b      	lsrs	r3, r3, #18
 8004a40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a6a      	ldr	r2, [pc, #424]	; (8004c10 <HAL_I2C_Init+0x274>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d802      	bhi.n	8004a70 <HAL_I2C_Init+0xd4>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	e009      	b.n	8004a84 <HAL_I2C_Init+0xe8>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a76:	fb02 f303 	mul.w	r3, r2, r3
 8004a7a:	4a69      	ldr	r2, [pc, #420]	; (8004c20 <HAL_I2C_Init+0x284>)
 8004a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a80:	099b      	lsrs	r3, r3, #6
 8004a82:	3301      	adds	r3, #1
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	495c      	ldr	r1, [pc, #368]	; (8004c10 <HAL_I2C_Init+0x274>)
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	d819      	bhi.n	8004ad8 <HAL_I2C_Init+0x13c>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1e59      	subs	r1, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ab2:	1c59      	adds	r1, r3, #1
 8004ab4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004ab8:	400b      	ands	r3, r1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <HAL_I2C_Init+0x138>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1e59      	subs	r1, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004acc:	3301      	adds	r3, #1
 8004ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad2:	e051      	b.n	8004b78 <HAL_I2C_Init+0x1dc>
 8004ad4:	2304      	movs	r3, #4
 8004ad6:	e04f      	b.n	8004b78 <HAL_I2C_Init+0x1dc>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d111      	bne.n	8004b04 <HAL_I2C_Init+0x168>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1e58      	subs	r0, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6859      	ldr	r1, [r3, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	440b      	add	r3, r1
 8004aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af2:	3301      	adds	r3, #1
 8004af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e012      	b.n	8004b2a <HAL_I2C_Init+0x18e>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	1e58      	subs	r0, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6859      	ldr	r1, [r3, #4]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	0099      	lsls	r1, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf0c      	ite	eq
 8004b24:	2301      	moveq	r3, #1
 8004b26:	2300      	movne	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <HAL_I2C_Init+0x196>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e022      	b.n	8004b78 <HAL_I2C_Init+0x1dc>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10e      	bne.n	8004b58 <HAL_I2C_Init+0x1bc>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1e58      	subs	r0, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6859      	ldr	r1, [r3, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	440b      	add	r3, r1
 8004b48:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b56:	e00f      	b.n	8004b78 <HAL_I2C_Init+0x1dc>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1e58      	subs	r0, r3, #1
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6859      	ldr	r1, [r3, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	0099      	lsls	r1, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b74:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	6809      	ldr	r1, [r1, #0]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ba6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	6911      	ldr	r1, [r2, #16]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68d2      	ldr	r2, [r2, #12]
 8004bb2:	4311      	orrs	r1, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695a      	ldr	r2, [r3, #20]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	000186a0 	.word	0x000186a0
 8004c14:	001e847f 	.word	0x001e847f
 8004c18:	003d08ff 	.word	0x003d08ff
 8004c1c:	431bde83 	.word	0x431bde83
 8004c20:	10624dd3 	.word	0x10624dd3

08004c24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c4c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d003      	beq.n	8004c5c <HAL_I2C_EV_IRQHandler+0x38>
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	f040 80b6 	bne.w	8004dc8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10d      	bne.n	8004c92 <HAL_I2C_EV_IRQHandler+0x6e>
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004c7c:	d003      	beq.n	8004c86 <HAL_I2C_EV_IRQHandler+0x62>
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c84:	d101      	bne.n	8004c8a <HAL_I2C_EV_IRQHandler+0x66>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_I2C_EV_IRQHandler+0x68>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	f000 8127 	beq.w	8004ee0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00c      	beq.n	8004cb6 <HAL_I2C_EV_IRQHandler+0x92>
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	0a5b      	lsrs	r3, r3, #9
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d006      	beq.n	8004cb6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f001 fa88 	bl	80061be <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fc6a 	bl	8005588 <I2C_Master_SB>
 8004cb4:	e087      	b.n	8004dc6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	08db      	lsrs	r3, r3, #3
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d009      	beq.n	8004cd6 <HAL_I2C_EV_IRQHandler+0xb2>
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	0a5b      	lsrs	r3, r3, #9
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 fcdf 	bl	8005692 <I2C_Master_ADD10>
 8004cd4:	e077      	b.n	8004dc6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <HAL_I2C_EV_IRQHandler+0xd2>
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	0a5b      	lsrs	r3, r3, #9
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fcf8 	bl	80056e4 <I2C_Master_ADDR>
 8004cf4:	e067      	b.n	8004dc6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	089b      	lsrs	r3, r3, #2
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d030      	beq.n	8004d64 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d10:	f000 80e8 	beq.w	8004ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	09db      	lsrs	r3, r3, #7
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00f      	beq.n	8004d40 <HAL_I2C_EV_IRQHandler+0x11c>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	0a9b      	lsrs	r3, r3, #10
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <HAL_I2C_EV_IRQHandler+0x11c>
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	089b      	lsrs	r3, r3, #2
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d103      	bne.n	8004d40 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f937 	bl	8004fac <I2C_MasterTransmit_TXE>
 8004d3e:	e042      	b.n	8004dc6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	089b      	lsrs	r3, r3, #2
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80cb 	beq.w	8004ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	0a5b      	lsrs	r3, r3, #9
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80c4 	beq.w	8004ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f9c1 	bl	80050e4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d62:	e0bf      	b.n	8004ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d72:	f000 80b7 	beq.w	8004ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	099b      	lsrs	r3, r3, #6
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00f      	beq.n	8004da2 <HAL_I2C_EV_IRQHandler+0x17e>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	0a9b      	lsrs	r3, r3, #10
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_I2C_EV_IRQHandler+0x17e>
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	089b      	lsrs	r3, r3, #2
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa88 	bl	80052b0 <I2C_MasterReceive_RXNE>
 8004da0:	e011      	b.n	8004dc6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	089b      	lsrs	r3, r3, #2
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 809a 	beq.w	8004ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	0a5b      	lsrs	r3, r3, #9
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8093 	beq.w	8004ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 faf8 	bl	80053b4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dc4:	e08e      	b.n	8004ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004dc6:	e08d      	b.n	8004ee4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d004      	beq.n	8004dda <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	61fb      	str	r3, [r7, #28]
 8004dd8:	e007      	b.n	8004dea <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	085b      	lsrs	r3, r3, #1
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d012      	beq.n	8004e1c <HAL_I2C_EV_IRQHandler+0x1f8>
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	0a5b      	lsrs	r3, r3, #9
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00c      	beq.n	8004e1c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004e12:	69b9      	ldr	r1, [r7, #24]
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 feb1 	bl	8005b7c <I2C_Slave_ADDR>
 8004e1a:	e066      	b.n	8004eea <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	091b      	lsrs	r3, r3, #4
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d009      	beq.n	8004e3c <HAL_I2C_EV_IRQHandler+0x218>
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	0a5b      	lsrs	r3, r3, #9
 8004e2c:	f003 0301 	and.w	r3, r3, #1
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fee5 	bl	8005c04 <I2C_Slave_STOPF>
 8004e3a:	e056      	b.n	8004eea <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e3c:	7bbb      	ldrb	r3, [r7, #14]
 8004e3e:	2b21      	cmp	r3, #33	; 0x21
 8004e40:	d002      	beq.n	8004e48 <HAL_I2C_EV_IRQHandler+0x224>
 8004e42:	7bbb      	ldrb	r3, [r7, #14]
 8004e44:	2b29      	cmp	r3, #41	; 0x29
 8004e46:	d125      	bne.n	8004e94 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	09db      	lsrs	r3, r3, #7
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00f      	beq.n	8004e74 <HAL_I2C_EV_IRQHandler+0x250>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	0a9b      	lsrs	r3, r3, #10
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d009      	beq.n	8004e74 <HAL_I2C_EV_IRQHandler+0x250>
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d103      	bne.n	8004e74 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fdc9 	bl	8005a04 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e72:	e039      	b.n	8004ee8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	089b      	lsrs	r3, r3, #2
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d033      	beq.n	8004ee8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	0a5b      	lsrs	r3, r3, #9
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d02d      	beq.n	8004ee8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fdf6 	bl	8005a7e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e92:	e029      	b.n	8004ee8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00f      	beq.n	8004ec0 <HAL_I2C_EV_IRQHandler+0x29c>
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	0a9b      	lsrs	r3, r3, #10
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <HAL_I2C_EV_IRQHandler+0x29c>
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	089b      	lsrs	r3, r3, #2
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fe00 	bl	8005abe <I2C_SlaveReceive_RXNE>
 8004ebe:	e014      	b.n	8004eea <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00e      	beq.n	8004eea <HAL_I2C_EV_IRQHandler+0x2c6>
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	0a5b      	lsrs	r3, r3, #9
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fe2e 	bl	8005b3a <I2C_SlaveReceive_BTF>
 8004ede:	e004      	b.n	8004eea <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004ee0:	bf00      	nop
 8004ee2:	e002      	b.n	8004eea <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ee4:	bf00      	nop
 8004ee6:	e000      	b.n	8004eea <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ee8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004eea:	3720      	adds	r7, #32
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	70fb      	strb	r3, [r7, #3]
 8004f44:	4613      	mov	r3, r2
 8004f46:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr

08004f76 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bc80      	pop	{r7}
 8004f98:	4770      	bx	lr

08004f9a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d150      	bne.n	8005074 <I2C_MasterTransmit_TXE+0xc8>
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b21      	cmp	r3, #33	; 0x21
 8004fd6:	d14d      	bne.n	8005074 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d01d      	beq.n	800501a <I2C_MasterTransmit_TXE+0x6e>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b20      	cmp	r3, #32
 8004fe2:	d01a      	beq.n	800501a <I2C_MasterTransmit_TXE+0x6e>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004fea:	d016      	beq.n	800501a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ffa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2211      	movs	r2, #17
 8005000:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff ff6c 	bl	8004ef0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005018:	e060      	b.n	80050dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005028:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005038:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d107      	bne.n	8005064 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff ff81 	bl	8004f64 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005062:	e03b      	b.n	80050dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f7ff ff3f 	bl	8004ef0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005072:	e033      	b.n	80050dc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	2b21      	cmp	r3, #33	; 0x21
 8005078:	d005      	beq.n	8005086 <I2C_MasterTransmit_TXE+0xda>
 800507a:	7bbb      	ldrb	r3, [r7, #14]
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d12d      	bne.n	80050dc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	2b22      	cmp	r3, #34	; 0x22
 8005084:	d12a      	bne.n	80050dc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d108      	bne.n	80050a2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80050a0:	e01c      	b.n	80050dc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b40      	cmp	r3, #64	; 0x40
 80050ac:	d103      	bne.n	80050b6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f898 	bl	80051e4 <I2C_MemoryTransmit_TXE_BTF>
}
 80050b4:	e012      	b.n	80050dc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	781a      	ldrb	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80050da:	e7ff      	b.n	80050dc <I2C_MasterTransmit_TXE+0x130>
 80050dc:	bf00      	nop
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b21      	cmp	r3, #33	; 0x21
 80050fc:	d165      	bne.n	80051ca <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d012      	beq.n	800512e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	781a      	ldrb	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800512c:	e056      	b.n	80051dc <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d01d      	beq.n	8005170 <I2C_MasterTransmit_BTF+0x8c>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b20      	cmp	r3, #32
 8005138:	d01a      	beq.n	8005170 <I2C_MasterTransmit_BTF+0x8c>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005140:	d016      	beq.n	8005170 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005150:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2211      	movs	r2, #17
 8005156:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f7ff fec1 	bl	8004ef0 <HAL_I2C_MasterTxCpltCallback>
}
 800516e:	e035      	b.n	80051dc <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800517e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800518e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d107      	bne.n	80051ba <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7ff fed6 	bl	8004f64 <HAL_I2C_MemTxCpltCallback>
}
 80051b8:	e010      	b.n	80051dc <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff fe94 	bl	8004ef0 <HAL_I2C_MasterTxCpltCallback>
}
 80051c8:	e008      	b.n	80051dc <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b40      	cmp	r3, #64	; 0x40
 80051d4:	d102      	bne.n	80051dc <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f804 	bl	80051e4 <I2C_MemoryTransmit_TXE_BTF>
}
 80051dc:	bf00      	nop
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d11d      	bne.n	8005230 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d10b      	bne.n	8005214 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005200:	b2da      	uxtb	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520c:	1c9a      	adds	r2, r3, #2
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005212:	e048      	b.n	80052a6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005218:	b29b      	uxth	r3, r3
 800521a:	121b      	asrs	r3, r3, #8
 800521c:	b2da      	uxtb	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005228:	1c5a      	adds	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800522e:	e03a      	b.n	80052a6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005234:	2b01      	cmp	r3, #1
 8005236:	d10b      	bne.n	8005250 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523c:	b2da      	uxtb	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800524e:	e02a      	b.n	80052a6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005254:	2b02      	cmp	r3, #2
 8005256:	d126      	bne.n	80052a6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b22      	cmp	r3, #34	; 0x22
 8005262:	d108      	bne.n	8005276 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	e017      	b.n	80052a6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b21      	cmp	r3, #33	; 0x21
 8005280:	d111      	bne.n	80052a6 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	781a      	ldrb	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b22      	cmp	r3, #34	; 0x22
 80052c2:	d173      	bne.n	80053ac <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d920      	bls.n	8005314 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	691a      	ldr	r2, [r3, #16]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	b2d2      	uxtb	r2, r2
 80052de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	3b01      	subs	r3, #1
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d154      	bne.n	80053ac <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005310:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005312:	e04b      	b.n	80053ac <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	2b02      	cmp	r3, #2
 800531a:	d047      	beq.n	80053ac <I2C_MasterReceive_RXNE+0xfc>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d002      	beq.n	8005328 <I2C_MasterReceive_RXNE+0x78>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d141      	bne.n	80053ac <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005336:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005346:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691a      	ldr	r2, [r3, #16]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005364:	b29b      	uxth	r3, r3
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d10a      	bne.n	8005398 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fdf0 	bl	8004f76 <HAL_I2C_MemRxCpltCallback>
}
 8005396:	e009      	b.n	80053ac <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2212      	movs	r2, #18
 80053a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff fdab 	bl	8004f02 <HAL_I2C_MasterRxCpltCallback>
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d11b      	bne.n	8005404 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053da:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005402:	e0bd      	b.n	8005580 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005408:	b29b      	uxth	r3, r3
 800540a:	2b03      	cmp	r3, #3
 800540c:	d129      	bne.n	8005462 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b04      	cmp	r3, #4
 8005422:	d00a      	beq.n	800543a <I2C_MasterReceive_BTF+0x86>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d007      	beq.n	800543a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005438:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005460:	e08e      	b.n	8005580 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d176      	bne.n	800555a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d002      	beq.n	8005478 <I2C_MasterReceive_BTF+0xc4>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b10      	cmp	r3, #16
 8005476:	d108      	bne.n	800548a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	e019      	b.n	80054be <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b04      	cmp	r3, #4
 800548e:	d002      	beq.n	8005496 <I2C_MasterReceive_BTF+0xe2>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d108      	bne.n	80054a8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e00a      	b.n	80054be <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b10      	cmp	r3, #16
 80054ac:	d007      	beq.n	80054be <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054bc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691a      	ldr	r2, [r3, #16]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	b2d2      	uxtb	r2, r2
 80054f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	1c5a      	adds	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005500:	b29b      	uxth	r3, r3
 8005502:	3b01      	subs	r3, #1
 8005504:	b29a      	uxth	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005518:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d10a      	bne.n	8005544 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff fd1a 	bl	8004f76 <HAL_I2C_MemRxCpltCallback>
}
 8005542:	e01d      	b.n	8005580 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2212      	movs	r2, #18
 8005550:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fcd5 	bl	8004f02 <HAL_I2C_MasterRxCpltCallback>
}
 8005558:	e012      	b.n	8005580 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005576:	b29b      	uxth	r3, r3
 8005578:	3b01      	subs	r3, #1
 800557a:	b29a      	uxth	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005580:	bf00      	nop
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d117      	bne.n	80055cc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d109      	bne.n	80055b8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055b4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80055b6:	e067      	b.n	8005688 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	611a      	str	r2, [r3, #16]
}
 80055ca:	e05d      	b.n	8005688 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d4:	d133      	bne.n	800563e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b21      	cmp	r3, #33	; 0x21
 80055e0:	d109      	bne.n	80055f6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055f2:	611a      	str	r2, [r3, #16]
 80055f4:	e008      	b.n	8005608 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	b2da      	uxtb	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560c:	2b00      	cmp	r3, #0
 800560e:	d004      	beq.n	800561a <I2C_Master_SB+0x92>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d108      	bne.n	800562c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	2b00      	cmp	r3, #0
 8005620:	d032      	beq.n	8005688 <I2C_Master_SB+0x100>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d02d      	beq.n	8005688 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563a:	605a      	str	r2, [r3, #4]
}
 800563c:	e024      	b.n	8005688 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10e      	bne.n	8005664 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	b29b      	uxth	r3, r3
 800564c:	11db      	asrs	r3, r3, #7
 800564e:	b2db      	uxtb	r3, r3
 8005650:	f003 0306 	and.w	r3, r3, #6
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f063 030f 	orn	r3, r3, #15
 800565a:	b2da      	uxtb	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	611a      	str	r2, [r3, #16]
}
 8005662:	e011      	b.n	8005688 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	2b01      	cmp	r3, #1
 800566a:	d10d      	bne.n	8005688 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	b29b      	uxth	r3, r3
 8005672:	11db      	asrs	r3, r3, #7
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f003 0306 	and.w	r3, r3, #6
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f063 030e 	orn	r3, r3, #14
 8005680:	b2da      	uxtb	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	611a      	str	r2, [r3, #16]
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	bc80      	pop	{r7}
 8005690:	4770      	bx	lr

08005692 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d103      	bne.n	80056b6 <I2C_Master_ADD10+0x24>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d011      	beq.n	80056da <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <I2C_Master_ADD10+0x38>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b091      	sub	sp, #68	; 0x44
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005700:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b22      	cmp	r3, #34	; 0x22
 800570c:	f040 8169 	bne.w	80059e2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10f      	bne.n	8005738 <I2C_Master_ADDR+0x54>
 8005718:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d10b      	bne.n	8005738 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005720:	2300      	movs	r3, #0
 8005722:	633b      	str	r3, [r7, #48]	; 0x30
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	633b      	str	r3, [r7, #48]	; 0x30
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	633b      	str	r3, [r7, #48]	; 0x30
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	e160      	b.n	80059fa <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11d      	bne.n	800577c <I2C_Master_ADDR+0x98>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005748:	d118      	bne.n	800577c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574a:	2300      	movs	r3, #0
 800574c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800575e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800576e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	651a      	str	r2, [r3, #80]	; 0x50
 800577a:	e13e      	b.n	80059fa <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d113      	bne.n	80057ae <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005786:	2300      	movs	r3, #0
 8005788:	62bb      	str	r3, [r7, #40]	; 0x28
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	e115      	b.n	80059da <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	f040 808a 	bne.w	80058ce <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057c0:	d137      	bne.n	8005832 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e0:	d113      	bne.n	800580a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f2:	2300      	movs	r3, #0
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	627b      	str	r3, [r7, #36]	; 0x24
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	e0e7      	b.n	80059da <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580a:	2300      	movs	r3, #0
 800580c:	623b      	str	r3, [r7, #32]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	623b      	str	r3, [r7, #32]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	623b      	str	r3, [r7, #32]
 800581e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e0d3      	b.n	80059da <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005834:	2b08      	cmp	r3, #8
 8005836:	d02e      	beq.n	8005896 <I2C_Master_ADDR+0x1b2>
 8005838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583a:	2b20      	cmp	r3, #32
 800583c:	d02b      	beq.n	8005896 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	2b12      	cmp	r3, #18
 8005842:	d102      	bne.n	800584a <I2C_Master_ADDR+0x166>
 8005844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005846:	2b01      	cmp	r3, #1
 8005848:	d125      	bne.n	8005896 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584c:	2b04      	cmp	r3, #4
 800584e:	d00e      	beq.n	800586e <I2C_Master_ADDR+0x18a>
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	2b02      	cmp	r3, #2
 8005854:	d00b      	beq.n	800586e <I2C_Master_ADDR+0x18a>
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	2b10      	cmp	r3, #16
 800585a:	d008      	beq.n	800586e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	e007      	b.n	800587e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800587c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587e:	2300      	movs	r3, #0
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	61fb      	str	r3, [r7, #28]
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	e0a1      	b.n	80059da <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a6:	2300      	movs	r3, #0
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	e085      	b.n	80059da <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d14d      	bne.n	8005974 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d016      	beq.n	800590c <I2C_Master_ADDR+0x228>
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d013      	beq.n	800590c <I2C_Master_ADDR+0x228>
 80058e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e6:	2b10      	cmp	r3, #16
 80058e8:	d010      	beq.n	800590c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	e007      	b.n	800591c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800591a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800592a:	d117      	bne.n	800595c <I2C_Master_ADDR+0x278>
 800592c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005932:	d00b      	beq.n	800594c <I2C_Master_ADDR+0x268>
 8005934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005936:	2b01      	cmp	r3, #1
 8005938:	d008      	beq.n	800594c <I2C_Master_ADDR+0x268>
 800593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593c:	2b08      	cmp	r3, #8
 800593e:	d005      	beq.n	800594c <I2C_Master_ADDR+0x268>
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	2b10      	cmp	r3, #16
 8005944:	d002      	beq.n	800594c <I2C_Master_ADDR+0x268>
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	2b20      	cmp	r3, #32
 800594a:	d107      	bne.n	800595c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800595a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	e032      	b.n	80059da <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005982:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800598e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005992:	d117      	bne.n	80059c4 <I2C_Master_ADDR+0x2e0>
 8005994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005996:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800599a:	d00b      	beq.n	80059b4 <I2C_Master_ADDR+0x2d0>
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d008      	beq.n	80059b4 <I2C_Master_ADDR+0x2d0>
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d005      	beq.n	80059b4 <I2C_Master_ADDR+0x2d0>
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	2b10      	cmp	r3, #16
 80059ac:	d002      	beq.n	80059b4 <I2C_Master_ADDR+0x2d0>
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d107      	bne.n	80059c4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059c2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059c4:	2300      	movs	r3, #0
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80059e0:	e00b      	b.n	80059fa <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059e2:	2300      	movs	r3, #0
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
}
 80059f8:	e7ff      	b.n	80059fa <I2C_Master_ADDR+0x316>
 80059fa:	bf00      	nop
 80059fc:	3744      	adds	r7, #68	; 0x44
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a12:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d02b      	beq.n	8005a76 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d114      	bne.n	8005a76 <I2C_SlaveTransmit_TXE+0x72>
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b29      	cmp	r3, #41	; 0x29
 8005a50:	d111      	bne.n	8005a76 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a60:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2221      	movs	r2, #33	; 0x21
 8005a66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2228      	movs	r2, #40	; 0x28
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f7ff fa4f 	bl	8004f14 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a76:	bf00      	nop
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d011      	beq.n	8005ab4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr

08005abe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005acc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d02c      	beq.n	8005b32 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d114      	bne.n	8005b32 <I2C_SlaveReceive_RXNE+0x74>
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0c:	d111      	bne.n	8005b32 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2222      	movs	r2, #34	; 0x22
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2228      	movs	r2, #40	; 0x28
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff f9fa 	bl	8004f26 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b32:	bf00      	nop
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d012      	beq.n	8005b72 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	1c5a      	adds	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bc80      	pop	{r7}
 8005b7a:	4770      	bx	lr

08005b7c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005b86:	2300      	movs	r3, #0
 8005b88:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b96:	2b28      	cmp	r3, #40	; 0x28
 8005b98:	d127      	bne.n	8005bea <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	089b      	lsrs	r3, r3, #2
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	09db      	lsrs	r3, r3, #7
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	81bb      	strh	r3, [r7, #12]
 8005bcc:	e002      	b.n	8005bd4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005bdc:	89ba      	ldrh	r2, [r7, #12]
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	4619      	mov	r1, r3
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff f9a8 	bl	8004f38 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005be8:	e008      	b.n	8005bfc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f06f 0202 	mvn.w	r2, #2
 8005bf2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005bfc:	bf00      	nop
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c12:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c22:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c24:	2300      	movs	r3, #0
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	60bb      	str	r3, [r7, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0201 	orr.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c50:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c60:	d172      	bne.n	8005d48 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	2b22      	cmp	r3, #34	; 0x22
 8005c66:	d002      	beq.n	8005c6e <I2C_Slave_STOPF+0x6a>
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c6c:	d135      	bne.n	8005cda <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f043 0204 	orr.w	r2, r3, #4
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ca0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe fbc2 	bl	8004430 <HAL_DMA_GetState>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d049      	beq.n	8005d46 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	4a69      	ldr	r2, [pc, #420]	; (8005e5c <I2C_Slave_STOPF+0x258>)
 8005cb8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fe fa0a 	bl	80040d8 <HAL_DMA_Abort_IT>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d03d      	beq.n	8005d46 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cd8:	e035      	b.n	8005d46 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d005      	beq.n	8005cfe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f043 0204 	orr.w	r2, r3, #4
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fe fb8c 	bl	8004430 <HAL_DMA_GetState>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d014      	beq.n	8005d48 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d22:	4a4e      	ldr	r2, [pc, #312]	; (8005e5c <I2C_Slave_STOPF+0x258>)
 8005d24:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fe f9d4 	bl	80040d8 <HAL_DMA_Abort_IT>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d008      	beq.n	8005d48 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d40:	4610      	mov	r0, r2
 8005d42:	4798      	blx	r3
 8005d44:	e000      	b.n	8005d48 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d46:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d03e      	beq.n	8005dd0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d112      	bne.n	8005d86 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d90:	2b40      	cmp	r3, #64	; 0x40
 8005d92:	d112      	bne.n	8005dba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc8:	f043 0204 	orr.w	r2, r3, #4
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f843 	bl	8005e64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005dde:	e039      	b.n	8005e54 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	2b2a      	cmp	r3, #42	; 0x2a
 8005de4:	d109      	bne.n	8005dfa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2228      	movs	r2, #40	; 0x28
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff f896 	bl	8004f26 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b28      	cmp	r3, #40	; 0x28
 8005e04:	d111      	bne.n	8005e2a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <I2C_Slave_STOPF+0x25c>)
 8005e0a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff f895 	bl	8004f52 <HAL_I2C_ListenCpltCallback>
}
 8005e28:	e014      	b.n	8005e54 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	2b22      	cmp	r3, #34	; 0x22
 8005e30:	d002      	beq.n	8005e38 <I2C_Slave_STOPF+0x234>
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b22      	cmp	r3, #34	; 0x22
 8005e36:	d10d      	bne.n	8005e54 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff f869 	bl	8004f26 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e54:	bf00      	nop
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	080060c1 	.word	0x080060c1
 8005e60:	ffff0000 	.word	0xffff0000

08005e64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e72:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b10      	cmp	r3, #16
 8005e7e:	d10a      	bne.n	8005e96 <I2C_ITError+0x32>
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b22      	cmp	r3, #34	; 0x22
 8005e84:	d107      	bne.n	8005e96 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e94:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e9c:	2b28      	cmp	r3, #40	; 0x28
 8005e9e:	d107      	bne.n	8005eb0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2228      	movs	r2, #40	; 0x28
 8005eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005eae:	e015      	b.n	8005edc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ebe:	d006      	beq.n	8005ece <I2C_ITError+0x6a>
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	2b60      	cmp	r3, #96	; 0x60
 8005ec4:	d003      	beq.n	8005ece <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2220      	movs	r2, #32
 8005eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eea:	d162      	bne.n	8005fb2 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005efa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d020      	beq.n	8005f4c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	4a6a      	ldr	r2, [pc, #424]	; (80060b8 <I2C_ITError+0x254>)
 8005f10:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe f8de 	bl	80040d8 <HAL_DMA_Abort_IT>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 8089 	beq.w	8006036 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0201 	bic.w	r2, r2, #1
 8005f32:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f46:	4610      	mov	r0, r2
 8005f48:	4798      	blx	r3
 8005f4a:	e074      	b.n	8006036 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	4a59      	ldr	r2, [pc, #356]	; (80060b8 <I2C_ITError+0x254>)
 8005f52:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe f8bd 	bl	80040d8 <HAL_DMA_Abort_IT>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d068      	beq.n	8006036 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6e:	2b40      	cmp	r3, #64	; 0x40
 8005f70:	d10b      	bne.n	8005f8a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0201 	bic.w	r2, r2, #1
 8005f98:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
 8005fb0:	e041      	b.n	8006036 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b60      	cmp	r3, #96	; 0x60
 8005fbc:	d125      	bne.n	800600a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd6:	2b40      	cmp	r3, #64	; 0x40
 8005fd8:	d10b      	bne.n	8005ff2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0201 	bic.w	r2, r2, #1
 8006000:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fe ffc9 	bl	8004f9a <HAL_I2C_AbortCpltCallback>
 8006008:	e015      	b.n	8006036 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006014:	2b40      	cmp	r3, #64	; 0x40
 8006016:	d10b      	bne.n	8006030 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	b2d2      	uxtb	r2, r2
 8006024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fe ffa9 	bl	8004f88 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10e      	bne.n	8006064 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006060:	2b00      	cmp	r3, #0
 8006062:	d007      	beq.n	8006074 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006072:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b04      	cmp	r3, #4
 8006086:	d113      	bne.n	80060b0 <I2C_ITError+0x24c>
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	2b28      	cmp	r3, #40	; 0x28
 800608c:	d110      	bne.n	80060b0 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a0a      	ldr	r2, [pc, #40]	; (80060bc <I2C_ITError+0x258>)
 8006092:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f7fe ff51 	bl	8004f52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	080060c1 	.word	0x080060c1
 80060bc:	ffff0000 	.word	0xffff0000

080060c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e2:	2200      	movs	r2, #0
 80060e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f2:	2200      	movs	r2, #0
 80060f4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006104:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006118:	2200      	movs	r2, #0
 800611a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	2200      	movs	r2, #0
 800612a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b60      	cmp	r3, #96	; 0x60
 8006146:	d10e      	bne.n	8006166 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7fe ff1b 	bl	8004f9a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006164:	e027      	b.n	80061b6 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006166:	7afb      	ldrb	r3, [r7, #11]
 8006168:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800616c:	2b28      	cmp	r3, #40	; 0x28
 800616e:	d117      	bne.n	80061a0 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800618e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2228      	movs	r2, #40	; 0x28
 800619a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800619e:	e007      	b.n	80061b0 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7fe fee9 	bl	8004f88 <HAL_I2C_ErrorCallback>
}
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80061ce:	d103      	bne.n	80061d8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80061d6:	e007      	b.n	80061e8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80061e0:	d102      	bne.n	80061e8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2208      	movs	r2, #8
 80061e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr
	...

080061f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b090      	sub	sp, #64	; 0x40
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e253      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	d050      	beq.n	80062b4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006212:	4ba3      	ldr	r3, [pc, #652]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 030c 	and.w	r3, r3, #12
 800621a:	2b04      	cmp	r3, #4
 800621c:	d00c      	beq.n	8006238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800621e:	4ba0      	ldr	r3, [pc, #640]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006226:	2b08      	cmp	r3, #8
 8006228:	d112      	bne.n	8006250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800622a:	4b9d      	ldr	r3, [pc, #628]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006236:	d10b      	bne.n	8006250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006238:	4b99      	ldr	r3, [pc, #612]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d036      	beq.n	80062b2 <HAL_RCC_OscConfig+0xbe>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d132      	bne.n	80062b2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e22e      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	4b93      	ldr	r3, [pc, #588]	; (80064a4 <HAL_RCC_OscConfig+0x2b0>)
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d013      	beq.n	800628a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006262:	f7fc ffb5 	bl	80031d0 <HAL_GetTick>
 8006266:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006268:	e008      	b.n	800627c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800626a:	f7fc ffb1 	bl	80031d0 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b64      	cmp	r3, #100	; 0x64
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e218      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627c:	4b88      	ldr	r3, [pc, #544]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f0      	beq.n	800626a <HAL_RCC_OscConfig+0x76>
 8006288:	e014      	b.n	80062b4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800628a:	f7fc ffa1 	bl	80031d0 <HAL_GetTick>
 800628e:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006290:	e008      	b.n	80062a4 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006292:	f7fc ff9d 	bl	80031d0 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b64      	cmp	r3, #100	; 0x64
 800629e:	d901      	bls.n	80062a4 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e204      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062a4:	4b7e      	ldr	r3, [pc, #504]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1f0      	bne.n	8006292 <HAL_RCC_OscConfig+0x9e>
 80062b0:	e000      	b.n	80062b4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d077      	beq.n	80063b0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062c0:	4b77      	ldr	r3, [pc, #476]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 030c 	and.w	r3, r3, #12
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00b      	beq.n	80062e4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062cc:	4b74      	ldr	r3, [pc, #464]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d126      	bne.n	8006326 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062d8:	4b71      	ldr	r3, [pc, #452]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d120      	bne.n	8006326 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e4:	4b6e      	ldr	r3, [pc, #440]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_RCC_OscConfig+0x108>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e1d8      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062fc:	4b68      	ldr	r3, [pc, #416]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	21f8      	movs	r1, #248	; 0xf8
 800630a:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800630c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800630e:	fa91 f1a1 	rbit	r1, r1
 8006312:	62f9      	str	r1, [r7, #44]	; 0x2c
  return result;
 8006314:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006316:	fab1 f181 	clz	r1, r1
 800631a:	b2c9      	uxtb	r1, r1
 800631c:	408b      	lsls	r3, r1
 800631e:	4960      	ldr	r1, [pc, #384]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	4313      	orrs	r3, r2
 8006322:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006324:	e044      	b.n	80063b0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d02a      	beq.n	8006384 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800632e:	4b5e      	ldr	r3, [pc, #376]	; (80064a8 <HAL_RCC_OscConfig+0x2b4>)
 8006330:	2201      	movs	r2, #1
 8006332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006334:	f7fc ff4c 	bl	80031d0 <HAL_GetTick>
 8006338:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633a:	e008      	b.n	800634e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800633c:	f7fc ff48 	bl	80031d0 <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d901      	bls.n	800634e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e1af      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634e:	4b54      	ldr	r3, [pc, #336]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0302 	and.w	r3, r3, #2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0f0      	beq.n	800633c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635a:	4b51      	ldr	r3, [pc, #324]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	21f8      	movs	r1, #248	; 0xf8
 8006368:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800636a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800636c:	fa91 f1a1 	rbit	r1, r1
 8006370:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8006372:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006374:	fab1 f181 	clz	r1, r1
 8006378:	b2c9      	uxtb	r1, r1
 800637a:	408b      	lsls	r3, r1
 800637c:	4948      	ldr	r1, [pc, #288]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 800637e:	4313      	orrs	r3, r2
 8006380:	600b      	str	r3, [r1, #0]
 8006382:	e015      	b.n	80063b0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006384:	4b48      	ldr	r3, [pc, #288]	; (80064a8 <HAL_RCC_OscConfig+0x2b4>)
 8006386:	2200      	movs	r2, #0
 8006388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638a:	f7fc ff21 	bl	80031d0 <HAL_GetTick>
 800638e:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006392:	f7fc ff1d 	bl	80031d0 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e184      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063a4:	4b3e      	ldr	r3, [pc, #248]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f0      	bne.n	8006392 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d030      	beq.n	800641e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d016      	beq.n	80063f2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063c4:	4b39      	ldr	r3, [pc, #228]	; (80064ac <HAL_RCC_OscConfig+0x2b8>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ca:	f7fc ff01 	bl	80031d0 <HAL_GetTick>
 80063ce:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063d2:	f7fc fefd 	bl	80031d0 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e164      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063e4:	4b2e      	ldr	r3, [pc, #184]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 80063e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <HAL_RCC_OscConfig+0x1de>
 80063f0:	e015      	b.n	800641e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063f2:	4b2e      	ldr	r3, [pc, #184]	; (80064ac <HAL_RCC_OscConfig+0x2b8>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063f8:	f7fc feea 	bl	80031d0 <HAL_GetTick>
 80063fc:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006400:	f7fc fee6 	bl	80031d0 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e14d      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006412:	4b23      	ldr	r3, [pc, #140]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 8006414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0304 	and.w	r3, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8088 	beq.w	800653c <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 800642c:	2300      	movs	r3, #0
 800642e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006432:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d110      	bne.n	8006460 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800643e:	2300      	movs	r3, #0
 8006440:	60bb      	str	r3, [r7, #8]
 8006442:	4b17      	ldr	r3, [pc, #92]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	4a16      	ldr	r2, [pc, #88]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 8006448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644c:	6413      	str	r3, [r2, #64]	; 0x40
 800644e:	4b14      	ldr	r3, [pc, #80]	; (80064a0 <HAL_RCC_OscConfig+0x2ac>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006456:	60bb      	str	r3, [r7, #8]
 8006458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800645a:	2301      	movs	r3, #1
 800645c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006460:	4b13      	ldr	r3, [pc, #76]	; (80064b0 <HAL_RCC_OscConfig+0x2bc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a12      	ldr	r2, [pc, #72]	; (80064b0 <HAL_RCC_OscConfig+0x2bc>)
 8006466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800646a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800646c:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <HAL_RCC_OscConfig+0x2bc>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006474:	2b00      	cmp	r3, #0
 8006476:	d123      	bne.n	80064c0 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006478:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <HAL_RCC_OscConfig+0x2bc>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a0c      	ldr	r2, [pc, #48]	; (80064b0 <HAL_RCC_OscConfig+0x2bc>)
 800647e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006482:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006484:	f7fc fea4 	bl	80031d0 <HAL_GetTick>
 8006488:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648a:	e013      	b.n	80064b4 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800648c:	f7fc fea0 	bl	80031d0 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d90c      	bls.n	80064b4 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e107      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
 800649e:	bf00      	nop
 80064a0:	40023800 	.word	0x40023800
 80064a4:	40023802 	.word	0x40023802
 80064a8:	42470000 	.word	0x42470000
 80064ac:	42470e80 	.word	0x42470e80
 80064b0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b4:	4b80      	ldr	r3, [pc, #512]	; (80066b8 <HAL_RCC_OscConfig+0x4c4>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d0e5      	beq.n	800648c <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	4b7d      	ldr	r3, [pc, #500]	; (80066bc <HAL_RCC_OscConfig+0x4c8>)
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d015      	beq.n	80064fe <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d2:	f7fc fe7d 	bl	80031d0 <HAL_GetTick>
 80064d6:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d8:	e00a      	b.n	80064f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064da:	f7fc fe79 	bl	80031d0 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d901      	bls.n	80064f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80064ec:	2303      	movs	r3, #3
 80064ee:	e0de      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064f0:	4b73      	ldr	r3, [pc, #460]	; (80066c0 <HAL_RCC_OscConfig+0x4cc>)
 80064f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0ee      	beq.n	80064da <HAL_RCC_OscConfig+0x2e6>
 80064fc:	e014      	b.n	8006528 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064fe:	f7fc fe67 	bl	80031d0 <HAL_GetTick>
 8006502:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006504:	e00a      	b.n	800651c <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006506:	f7fc fe63 	bl	80031d0 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f241 3288 	movw	r2, #5000	; 0x1388
 8006514:	4293      	cmp	r3, r2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e0c8      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800651c:	4b68      	ldr	r3, [pc, #416]	; (80066c0 <HAL_RCC_OscConfig+0x4cc>)
 800651e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1ee      	bne.n	8006506 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800652c:	2b01      	cmp	r3, #1
 800652e:	d105      	bne.n	800653c <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006530:	4b63      	ldr	r3, [pc, #396]	; (80066c0 <HAL_RCC_OscConfig+0x4cc>)
 8006532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006534:	4a62      	ldr	r2, [pc, #392]	; (80066c0 <HAL_RCC_OscConfig+0x4cc>)
 8006536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800653a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 80b3 	beq.w	80066ac <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006546:	4b5e      	ldr	r3, [pc, #376]	; (80066c0 <HAL_RCC_OscConfig+0x4cc>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f003 030c 	and.w	r3, r3, #12
 800654e:	2b08      	cmp	r3, #8
 8006550:	d07d      	beq.n	800664e <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2b02      	cmp	r3, #2
 8006558:	d162      	bne.n	8006620 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655a:	4b5a      	ldr	r3, [pc, #360]	; (80066c4 <HAL_RCC_OscConfig+0x4d0>)
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006560:	f7fc fe36 	bl	80031d0 <HAL_GetTick>
 8006564:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006568:	f7fc fe32 	bl	80031d0 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b64      	cmp	r3, #100	; 0x64
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e099      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800657a:	4b51      	ldr	r3, [pc, #324]	; (80066c0 <HAL_RCC_OscConfig+0x4cc>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f0      	bne.n	8006568 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69da      	ldr	r2, [r3, #28]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8006598:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800659a:	6939      	ldr	r1, [r7, #16]
 800659c:	fa91 f1a1 	rbit	r1, r1
 80065a0:	60f9      	str	r1, [r7, #12]
  return result;
 80065a2:	68f9      	ldr	r1, [r7, #12]
 80065a4:	fab1 f181 	clz	r1, r1
 80065a8:	b2c9      	uxtb	r1, r1
 80065aa:	408b      	lsls	r3, r1
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b2:	085b      	lsrs	r3, r3, #1
 80065b4:	3b01      	subs	r3, #1
 80065b6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80065ba:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065bc:	69b9      	ldr	r1, [r7, #24]
 80065be:	fa91 f1a1 	rbit	r1, r1
 80065c2:	6179      	str	r1, [r7, #20]
  return result;
 80065c4:	6979      	ldr	r1, [r7, #20]
 80065c6:	fab1 f181 	clz	r1, r1
 80065ca:	b2c9      	uxtb	r1, r1
 80065cc:	408b      	lsls	r3, r1
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80065d8:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065da:	6a39      	ldr	r1, [r7, #32]
 80065dc:	fa91 f1a1 	rbit	r1, r1
 80065e0:	61f9      	str	r1, [r7, #28]
  return result;
 80065e2:	69f9      	ldr	r1, [r7, #28]
 80065e4:	fab1 f181 	clz	r1, r1
 80065e8:	b2c9      	uxtb	r1, r1
 80065ea:	408b      	lsls	r3, r1
 80065ec:	4934      	ldr	r1, [pc, #208]	; (80066c0 <HAL_RCC_OscConfig+0x4cc>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065f2:	4b34      	ldr	r3, [pc, #208]	; (80066c4 <HAL_RCC_OscConfig+0x4d0>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f8:	f7fc fdea 	bl	80031d0 <HAL_GetTick>
 80065fc:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006600:	f7fc fde6 	bl	80031d0 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b64      	cmp	r3, #100	; 0x64
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e04d      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006612:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <HAL_RCC_OscConfig+0x4cc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d0f0      	beq.n	8006600 <HAL_RCC_OscConfig+0x40c>
 800661e:	e045      	b.n	80066ac <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006620:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <HAL_RCC_OscConfig+0x4d0>)
 8006622:	2200      	movs	r2, #0
 8006624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006626:	f7fc fdd3 	bl	80031d0 <HAL_GetTick>
 800662a:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662c:	e008      	b.n	8006640 <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800662e:	f7fc fdcf 	bl	80031d0 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b64      	cmp	r3, #100	; 0x64
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e036      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006640:	4b1f      	ldr	r3, [pc, #124]	; (80066c0 <HAL_RCC_OscConfig+0x4cc>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1f0      	bne.n	800662e <HAL_RCC_OscConfig+0x43a>
 800664c:	e02e      	b.n	80066ac <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e029      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800665a:	4b19      	ldr	r3, [pc, #100]	; (80066c0 <HAL_RCC_OscConfig+0x4cc>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	429a      	cmp	r2, r3
 800666c:	d11c      	bne.n	80066a8 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006670:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006678:	429a      	cmp	r2, r3
 800667a:	d115      	bne.n	80066a8 <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800667c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667e:	099b      	lsrs	r3, r3, #6
 8006680:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006688:	429a      	cmp	r2, r3
 800668a:	d10d      	bne.n	80066a8 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006696:	429a      	cmp	r2, r3
 8006698:	d106      	bne.n	80066a8 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d001      	beq.n	80066ac <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e000      	b.n	80066ae <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3740      	adds	r7, #64	; 0x40
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	40007000 	.word	0x40007000
 80066bc:	40023870 	.word	0x40023870
 80066c0:	40023800 	.word	0x40023800
 80066c4:	42470060 	.word	0x42470060

080066c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e0d2      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066dc:	4b6b      	ldr	r3, [pc, #428]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 030f 	and.w	r3, r3, #15
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d90c      	bls.n	8006704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ea:	4b68      	ldr	r3, [pc, #416]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066f2:	4b66      	ldr	r3, [pc, #408]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 030f 	and.w	r3, r3, #15
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d001      	beq.n	8006704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0be      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0302 	and.w	r3, r3, #2
 800670c:	2b00      	cmp	r3, #0
 800670e:	d020      	beq.n	8006752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d005      	beq.n	8006728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800671c:	4b5c      	ldr	r3, [pc, #368]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	4a5b      	ldr	r2, [pc, #364]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8006734:	4b56      	ldr	r3, [pc, #344]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4a55      	ldr	r2, [pc, #340]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800673a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800673e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006740:	4b53      	ldr	r3, [pc, #332]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	4950      	ldr	r1, [pc, #320]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800674e:	4313      	orrs	r3, r2
 8006750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	2b00      	cmp	r3, #0
 800675c:	d040      	beq.n	80067e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d107      	bne.n	8006776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006766:	4b4a      	ldr	r3, [pc, #296]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d115      	bne.n	800679e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e085      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2b02      	cmp	r3, #2
 800677c:	d107      	bne.n	800678e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800677e:	4b44      	ldr	r3, [pc, #272]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d109      	bne.n	800679e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e079      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800678e:	4b40      	ldr	r3, [pc, #256]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e071      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800679e:	4b3c      	ldr	r3, [pc, #240]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f023 0203 	bic.w	r2, r3, #3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	4939      	ldr	r1, [pc, #228]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067b0:	f7fc fd0e 	bl	80031d0 <HAL_GetTick>
 80067b4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b6:	e00a      	b.n	80067ce <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067b8:	f7fc fd0a 	bl	80031d0 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e059      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ce:	4b30      	ldr	r3, [pc, #192]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 020c 	and.w	r2, r3, #12
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	429a      	cmp	r2, r3
 80067de:	d1eb      	bne.n	80067b8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067e0:	4b2a      	ldr	r3, [pc, #168]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 030f 	and.w	r3, r3, #15
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d20c      	bcs.n	8006808 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ee:	4b27      	ldr	r3, [pc, #156]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067f6:	4b25      	ldr	r3, [pc, #148]	; (800688c <HAL_RCC_ClockConfig+0x1c4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 030f 	and.w	r3, r3, #15
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d001      	beq.n	8006808 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e03c      	b.n	8006882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d008      	beq.n	8006826 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006814:	4b1e      	ldr	r3, [pc, #120]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	491b      	ldr	r1, [pc, #108]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006822:	4313      	orrs	r3, r2
 8006824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d009      	beq.n	8006846 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006832:	4b17      	ldr	r3, [pc, #92]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4913      	ldr	r1, [pc, #76]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 8006842:	4313      	orrs	r3, r2
 8006844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8006846:	f000 f82b 	bl	80068a0 <HAL_RCC_GetSysClockFreq>
 800684a:	4601      	mov	r1, r0
 800684c:	4b10      	ldr	r3, [pc, #64]	; (8006890 <HAL_RCC_ClockConfig+0x1c8>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006854:	22f0      	movs	r2, #240	; 0xf0
 8006856:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	fa92 f2a2 	rbit	r2, r2
 800685e:	60fa      	str	r2, [r7, #12]
  return result;
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	fab2 f282 	clz	r2, r2
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	40d3      	lsrs	r3, r2
 800686a:	4a0a      	ldr	r2, [pc, #40]	; (8006894 <HAL_RCC_ClockConfig+0x1cc>)
 800686c:	5cd3      	ldrb	r3, [r2, r3]
 800686e:	fa21 f303 	lsr.w	r3, r1, r3
 8006872:	4a09      	ldr	r2, [pc, #36]	; (8006898 <HAL_RCC_ClockConfig+0x1d0>)
 8006874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006876:	4b09      	ldr	r3, [pc, #36]	; (800689c <HAL_RCC_ClockConfig+0x1d4>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f7fc fc66 	bl	800314c <HAL_InitTick>

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	40023c00 	.word	0x40023c00
 8006890:	40023800 	.word	0x40023800
 8006894:	08009608 	.word	0x08009608
 8006898:	20000014 	.word	0x20000014
 800689c:	20000018 	.word	0x20000018

080068a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	2300      	movs	r3, #0
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	2300      	movs	r3, #0
 80068b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068b8:	4b67      	ldr	r3, [pc, #412]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 030c 	and.w	r3, r3, #12
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d00d      	beq.n	80068e0 <HAL_RCC_GetSysClockFreq+0x40>
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	f200 80bd 	bhi.w	8006a44 <HAL_RCC_GetSysClockFreq+0x1a4>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_RCC_GetSysClockFreq+0x34>
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d003      	beq.n	80068da <HAL_RCC_GetSysClockFreq+0x3a>
 80068d2:	e0b7      	b.n	8006a44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068d4:	4b61      	ldr	r3, [pc, #388]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80068d6:	60bb      	str	r3, [r7, #8]
       break;
 80068d8:	e0b7      	b.n	8006a4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068da:	4b61      	ldr	r3, [pc, #388]	; (8006a60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80068dc:	60bb      	str	r3, [r7, #8]
      break;
 80068de:	e0b4      	b.n	8006a4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068e0:	4b5d      	ldr	r3, [pc, #372]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068ea:	4b5b      	ldr	r3, [pc, #364]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04d      	beq.n	8006992 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068f6:	4b58      	ldr	r3, [pc, #352]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	099b      	lsrs	r3, r3, #6
 80068fc:	461a      	mov	r2, r3
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006906:	f04f 0100 	mov.w	r1, #0
 800690a:	ea02 0800 	and.w	r8, r2, r0
 800690e:	ea03 0901 	and.w	r9, r3, r1
 8006912:	4640      	mov	r0, r8
 8006914:	4649      	mov	r1, r9
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	f04f 0300 	mov.w	r3, #0
 800691e:	014b      	lsls	r3, r1, #5
 8006920:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006924:	0142      	lsls	r2, r0, #5
 8006926:	4610      	mov	r0, r2
 8006928:	4619      	mov	r1, r3
 800692a:	ebb0 0008 	subs.w	r0, r0, r8
 800692e:	eb61 0109 	sbc.w	r1, r1, r9
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	018b      	lsls	r3, r1, #6
 800693c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006940:	0182      	lsls	r2, r0, #6
 8006942:	1a12      	subs	r2, r2, r0
 8006944:	eb63 0301 	sbc.w	r3, r3, r1
 8006948:	f04f 0000 	mov.w	r0, #0
 800694c:	f04f 0100 	mov.w	r1, #0
 8006950:	00d9      	lsls	r1, r3, #3
 8006952:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006956:	00d0      	lsls	r0, r2, #3
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	eb12 0208 	adds.w	r2, r2, r8
 8006960:	eb43 0309 	adc.w	r3, r3, r9
 8006964:	f04f 0000 	mov.w	r0, #0
 8006968:	f04f 0100 	mov.w	r1, #0
 800696c:	0259      	lsls	r1, r3, #9
 800696e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006972:	0250      	lsls	r0, r2, #9
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4610      	mov	r0, r2
 800697a:	4619      	mov	r1, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	461a      	mov	r2, r3
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	f7fa fbe2 	bl	800114c <__aeabi_uldivmod>
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4613      	mov	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	e04a      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006992:	4b31      	ldr	r3, [pc, #196]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	099b      	lsrs	r3, r3, #6
 8006998:	461a      	mov	r2, r3
 800699a:	f04f 0300 	mov.w	r3, #0
 800699e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069a2:	f04f 0100 	mov.w	r1, #0
 80069a6:	ea02 0400 	and.w	r4, r2, r0
 80069aa:	ea03 0501 	and.w	r5, r3, r1
 80069ae:	4620      	mov	r0, r4
 80069b0:	4629      	mov	r1, r5
 80069b2:	f04f 0200 	mov.w	r2, #0
 80069b6:	f04f 0300 	mov.w	r3, #0
 80069ba:	014b      	lsls	r3, r1, #5
 80069bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069c0:	0142      	lsls	r2, r0, #5
 80069c2:	4610      	mov	r0, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	1b00      	subs	r0, r0, r4
 80069c8:	eb61 0105 	sbc.w	r1, r1, r5
 80069cc:	f04f 0200 	mov.w	r2, #0
 80069d0:	f04f 0300 	mov.w	r3, #0
 80069d4:	018b      	lsls	r3, r1, #6
 80069d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069da:	0182      	lsls	r2, r0, #6
 80069dc:	1a12      	subs	r2, r2, r0
 80069de:	eb63 0301 	sbc.w	r3, r3, r1
 80069e2:	f04f 0000 	mov.w	r0, #0
 80069e6:	f04f 0100 	mov.w	r1, #0
 80069ea:	00d9      	lsls	r1, r3, #3
 80069ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069f0:	00d0      	lsls	r0, r2, #3
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	1912      	adds	r2, r2, r4
 80069f8:	eb45 0303 	adc.w	r3, r5, r3
 80069fc:	f04f 0000 	mov.w	r0, #0
 8006a00:	f04f 0100 	mov.w	r1, #0
 8006a04:	0299      	lsls	r1, r3, #10
 8006a06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a0a:	0290      	lsls	r0, r2, #10
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4610      	mov	r0, r2
 8006a12:	4619      	mov	r1, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	461a      	mov	r2, r3
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	f7fa fb96 	bl	800114c <__aeabi_uldivmod>
 8006a20:	4602      	mov	r2, r0
 8006a22:	460b      	mov	r3, r1
 8006a24:	4613      	mov	r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a28:	4b0b      	ldr	r3, [pc, #44]	; (8006a58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	0c1b      	lsrs	r3, r3, #16
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	3301      	adds	r3, #1
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	60bb      	str	r3, [r7, #8]
      break;
 8006a42:	e002      	b.n	8006a4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006a46:	60bb      	str	r3, [r7, #8]
      break;
 8006a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006a56:	bf00      	nop
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	00f42400 	.word	0x00f42400
 8006a60:	007a1200 	.word	0x007a1200

08006a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a68:	4b02      	ldr	r3, [pc, #8]	; (8006a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr
 8006a74:	20000014 	.word	0x20000014

08006a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006a7e:	f7ff fff1 	bl	8006a64 <HAL_RCC_GetHCLKFreq>
 8006a82:	4601      	mov	r1, r0
 8006a84:	4b0b      	ldr	r3, [pc, #44]	; (8006ab4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006a8c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006a90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	fa92 f2a2 	rbit	r2, r2
 8006a98:	603a      	str	r2, [r7, #0]
  return result;
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	fab2 f282 	clz	r2, r2
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	40d3      	lsrs	r3, r2
 8006aa4:	4a04      	ldr	r2, [pc, #16]	; (8006ab8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006aa6:	5cd3      	ldrb	r3, [r2, r3]
 8006aa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	08009618 	.word	0x08009618

08006abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8006ac2:	f7ff ffcf 	bl	8006a64 <HAL_RCC_GetHCLKFreq>
 8006ac6:	4601      	mov	r1, r0
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006ad0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8006ad4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	fa92 f2a2 	rbit	r2, r2
 8006adc:	603a      	str	r2, [r7, #0]
  return result;
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	fab2 f282 	clz	r2, r2
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	40d3      	lsrs	r3, r2
 8006ae8:	4a04      	ldr	r2, [pc, #16]	; (8006afc <HAL_RCC_GetPCLK2Freq+0x40>)
 8006aea:	5cd3      	ldrb	r3, [r2, r3]
 8006aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40023800 	.word	0x40023800
 8006afc:	08009618 	.word	0x08009618

08006b00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e01d      	b.n	8006b4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fc f872 	bl	8002c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	4610      	mov	r0, r2
 8006b40:	f000 fcd2 	bl	80074e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b085      	sub	sp, #20
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f042 0201 	orr.w	r2, r2, #1
 8006b6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b06      	cmp	r3, #6
 8006b7e:	d007      	beq.n	8006b90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0201 	orr.w	r2, r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e01d      	b.n	8006bea <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d106      	bne.n	8006bc8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 f815 	bl	8006bf2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4610      	mov	r0, r2
 8006bdc:	f000 fc84 	bl	80074e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e01d      	b.n	8006c52 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f815 	bl	8006c5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4619      	mov	r1, r3
 8006c42:	4610      	mov	r0, r2
 8006c44:	f000 fc50 	bl	80074e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 ff12 	bl	8007aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a15      	ldr	r2, [pc, #84]	; (8006ce0 <HAL_TIM_PWM_Start+0x74>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d004      	beq.n	8006c98 <HAL_TIM_PWM_Start+0x2c>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a14      	ldr	r2, [pc, #80]	; (8006ce4 <HAL_TIM_PWM_Start+0x78>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d101      	bne.n	8006c9c <HAL_TIM_PWM_Start+0x30>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <HAL_TIM_PWM_Start+0x32>
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b06      	cmp	r3, #6
 8006cc2:	d007      	beq.n	8006cd4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40010400 	.word	0x40010400

08006ce8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fed4 	bl	8007aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a22      	ldr	r2, [pc, #136]	; (8006d90 <HAL_TIM_PWM_Stop+0xa8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d004      	beq.n	8006d14 <HAL_TIM_PWM_Stop+0x2c>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a21      	ldr	r2, [pc, #132]	; (8006d94 <HAL_TIM_PWM_Stop+0xac>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d101      	bne.n	8006d18 <HAL_TIM_PWM_Stop+0x30>
 8006d14:	2301      	movs	r3, #1
 8006d16:	e000      	b.n	8006d1a <HAL_TIM_PWM_Stop+0x32>
 8006d18:	2300      	movs	r3, #0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d017      	beq.n	8006d4e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6a1a      	ldr	r2, [r3, #32]
 8006d24:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d28:	4013      	ands	r3, r2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10f      	bne.n	8006d4e <HAL_TIM_PWM_Stop+0x66>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6a1a      	ldr	r2, [r3, #32]
 8006d34:	f240 4344 	movw	r3, #1092	; 0x444
 8006d38:	4013      	ands	r3, r2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d107      	bne.n	8006d4e <HAL_TIM_PWM_Stop+0x66>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6a1a      	ldr	r2, [r3, #32]
 8006d54:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d58:	4013      	ands	r3, r2
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10f      	bne.n	8006d7e <HAL_TIM_PWM_Stop+0x96>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6a1a      	ldr	r2, [r3, #32]
 8006d64:	f240 4344 	movw	r3, #1092	; 0x444
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d107      	bne.n	8006d7e <HAL_TIM_PWM_Stop+0x96>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0201 	bic.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40010400 	.word	0x40010400

08006d98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e083      	b.n	8006eb4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d106      	bne.n	8006dc6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fb ff89 	bl	8002cd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	6812      	ldr	r2, [r2, #0]
 8006dd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ddc:	f023 0307 	bic.w	r3, r3, #7
 8006de0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3304      	adds	r3, #4
 8006dea:	4619      	mov	r1, r3
 8006dec:	4610      	mov	r0, r2
 8006dee:	f000 fb7b 	bl	80074e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e1a:	f023 0303 	bic.w	r3, r3, #3
 8006e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006e38:	f023 030c 	bic.w	r3, r3, #12
 8006e3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	4313      	orrs	r3, r2
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	011a      	lsls	r2, r3, #4
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	031b      	lsls	r3, r3, #12
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e76:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e7e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	011b      	lsls	r3, r3, #4
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3718      	adds	r7, #24
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0302 	and.w	r3, r3, #2
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d122      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d11b      	bne.n	8006f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0202 	mvn.w	r2, #2
 8006ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fad7 	bl	80074b2 <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 faca 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fad9 	bl	80074c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d122      	bne.n	8006f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f003 0304 	and.w	r3, r3, #4
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d11b      	bne.n	8006f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f06f 0204 	mvn.w	r2, #4
 8006f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2202      	movs	r2, #2
 8006f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 faad 	bl	80074b2 <HAL_TIM_IC_CaptureCallback>
 8006f58:	e005      	b.n	8006f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 faa0 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 faaf 	bl	80074c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0308 	and.w	r3, r3, #8
 8006f76:	2b08      	cmp	r3, #8
 8006f78:	d122      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0308 	and.w	r3, r3, #8
 8006f84:	2b08      	cmp	r3, #8
 8006f86:	d11b      	bne.n	8006fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0208 	mvn.w	r2, #8
 8006f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2204      	movs	r2, #4
 8006f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	f003 0303 	and.w	r3, r3, #3
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa83 	bl	80074b2 <HAL_TIM_IC_CaptureCallback>
 8006fac:	e005      	b.n	8006fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fa76 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fa85 	bl	80074c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0310 	and.w	r3, r3, #16
 8006fca:	2b10      	cmp	r3, #16
 8006fcc:	d122      	bne.n	8007014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f003 0310 	and.w	r3, r3, #16
 8006fd8:	2b10      	cmp	r3, #16
 8006fda:	d11b      	bne.n	8007014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f06f 0210 	mvn.w	r2, #16
 8006fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fa59 	bl	80074b2 <HAL_TIM_IC_CaptureCallback>
 8007000:	e005      	b.n	800700e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa4c 	bl	80074a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fa5b 	bl	80074c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b01      	cmp	r3, #1
 8007020:	d10e      	bne.n	8007040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d107      	bne.n	8007040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0201 	mvn.w	r2, #1
 8007038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fa fdf0 	bl	8001c20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800704a:	2b80      	cmp	r3, #128	; 0x80
 800704c:	d10e      	bne.n	800706c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007058:	2b80      	cmp	r3, #128	; 0x80
 800705a:	d107      	bne.n	800706c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fe4b 	bl	8007d02 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007076:	2b40      	cmp	r3, #64	; 0x40
 8007078:	d10e      	bne.n	8007098 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b40      	cmp	r3, #64	; 0x40
 8007086:	d107      	bne.n	8007098 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa1f 	bl	80074d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f003 0320 	and.w	r3, r3, #32
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d10e      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d107      	bne.n	80070c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f06f 0220 	mvn.w	r2, #32
 80070bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fe16 	bl	8007cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070c4:	bf00      	nop
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d101      	bne.n	80070e6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80070e2:	2302      	movs	r3, #2
 80070e4:	e04e      	b.n	8007184 <HAL_TIM_OC_ConfigChannel+0xb8>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2202      	movs	r2, #2
 80070f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b0c      	cmp	r3, #12
 80070fa:	d839      	bhi.n	8007170 <HAL_TIM_OC_ConfigChannel+0xa4>
 80070fc:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <HAL_TIM_OC_ConfigChannel+0x38>)
 80070fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007102:	bf00      	nop
 8007104:	08007139 	.word	0x08007139
 8007108:	08007171 	.word	0x08007171
 800710c:	08007171 	.word	0x08007171
 8007110:	08007171 	.word	0x08007171
 8007114:	08007147 	.word	0x08007147
 8007118:	08007171 	.word	0x08007171
 800711c:	08007171 	.word	0x08007171
 8007120:	08007171 	.word	0x08007171
 8007124:	08007155 	.word	0x08007155
 8007128:	08007171 	.word	0x08007171
 800712c:	08007171 	.word	0x08007171
 8007130:	08007171 	.word	0x08007171
 8007134:	08007163 	.word	0x08007163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fa70 	bl	8007624 <TIM_OC1_SetConfig>
      break;
 8007144:	e015      	b.n	8007172 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	4618      	mov	r0, r3
 800714e:	f000 fad9 	bl	8007704 <TIM_OC2_SetConfig>
      break;
 8007152:	e00e      	b.n	8007172 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68b9      	ldr	r1, [r7, #8]
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fb46 	bl	80077ec <TIM_OC3_SetConfig>
      break;
 8007160:	e007      	b.n	8007172 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68b9      	ldr	r1, [r7, #8]
 8007168:	4618      	mov	r0, r3
 800716a:	f000 fbb3 	bl	80078d4 <TIM_OC4_SetConfig>
      break;
 800716e:	e000      	b.n	8007172 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8007170:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3710      	adds	r7, #16
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d101      	bne.n	80071a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80071a2:	2302      	movs	r3, #2
 80071a4:	e0b4      	b.n	8007310 <HAL_TIM_PWM_ConfigChannel+0x184>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2202      	movs	r2, #2
 80071b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b0c      	cmp	r3, #12
 80071ba:	f200 809f 	bhi.w	80072fc <HAL_TIM_PWM_ConfigChannel+0x170>
 80071be:	a201      	add	r2, pc, #4	; (adr r2, 80071c4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80071c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c4:	080071f9 	.word	0x080071f9
 80071c8:	080072fd 	.word	0x080072fd
 80071cc:	080072fd 	.word	0x080072fd
 80071d0:	080072fd 	.word	0x080072fd
 80071d4:	08007239 	.word	0x08007239
 80071d8:	080072fd 	.word	0x080072fd
 80071dc:	080072fd 	.word	0x080072fd
 80071e0:	080072fd 	.word	0x080072fd
 80071e4:	0800727b 	.word	0x0800727b
 80071e8:	080072fd 	.word	0x080072fd
 80071ec:	080072fd 	.word	0x080072fd
 80071f0:	080072fd 	.word	0x080072fd
 80071f4:	080072bb 	.word	0x080072bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68b9      	ldr	r1, [r7, #8]
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 fa10 	bl	8007624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0208 	orr.w	r2, r2, #8
 8007212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699a      	ldr	r2, [r3, #24]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0204 	bic.w	r2, r2, #4
 8007222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6999      	ldr	r1, [r3, #24]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	691a      	ldr	r2, [r3, #16]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	430a      	orrs	r2, r1
 8007234:	619a      	str	r2, [r3, #24]
      break;
 8007236:	e062      	b.n	80072fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fa60 	bl	8007704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699a      	ldr	r2, [r3, #24]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	699a      	ldr	r2, [r3, #24]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6999      	ldr	r1, [r3, #24]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	021a      	lsls	r2, r3, #8
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	619a      	str	r2, [r3, #24]
      break;
 8007278:	e041      	b.n	80072fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fab3 	bl	80077ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69da      	ldr	r2, [r3, #28]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 0208 	orr.w	r2, r2, #8
 8007294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0204 	bic.w	r2, r2, #4
 80072a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	69d9      	ldr	r1, [r3, #28]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	691a      	ldr	r2, [r3, #16]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	61da      	str	r2, [r3, #28]
      break;
 80072b8:	e021      	b.n	80072fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68b9      	ldr	r1, [r7, #8]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fb07 	bl	80078d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69da      	ldr	r2, [r3, #28]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69da      	ldr	r2, [r3, #28]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69d9      	ldr	r1, [r3, #28]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	021a      	lsls	r2, r3, #8
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	430a      	orrs	r2, r1
 80072f8:	61da      	str	r2, [r3, #28]
      break;
 80072fa:	e000      	b.n	80072fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80072fc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_TIM_ConfigClockSource+0x18>
 800732c:	2302      	movs	r3, #2
 800732e:	e0b3      	b.n	8007498 <HAL_TIM_ConfigClockSource+0x180>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800734e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007356:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007368:	d03e      	beq.n	80073e8 <HAL_TIM_ConfigClockSource+0xd0>
 800736a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736e:	f200 8087 	bhi.w	8007480 <HAL_TIM_ConfigClockSource+0x168>
 8007372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007376:	f000 8085 	beq.w	8007484 <HAL_TIM_ConfigClockSource+0x16c>
 800737a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737e:	d87f      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x168>
 8007380:	2b70      	cmp	r3, #112	; 0x70
 8007382:	d01a      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0xa2>
 8007384:	2b70      	cmp	r3, #112	; 0x70
 8007386:	d87b      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x168>
 8007388:	2b60      	cmp	r3, #96	; 0x60
 800738a:	d050      	beq.n	800742e <HAL_TIM_ConfigClockSource+0x116>
 800738c:	2b60      	cmp	r3, #96	; 0x60
 800738e:	d877      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x168>
 8007390:	2b50      	cmp	r3, #80	; 0x50
 8007392:	d03c      	beq.n	800740e <HAL_TIM_ConfigClockSource+0xf6>
 8007394:	2b50      	cmp	r3, #80	; 0x50
 8007396:	d873      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x168>
 8007398:	2b40      	cmp	r3, #64	; 0x40
 800739a:	d058      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x136>
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d86f      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x168>
 80073a0:	2b30      	cmp	r3, #48	; 0x30
 80073a2:	d064      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x156>
 80073a4:	2b30      	cmp	r3, #48	; 0x30
 80073a6:	d86b      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x168>
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d060      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x156>
 80073ac:	2b20      	cmp	r3, #32
 80073ae:	d867      	bhi.n	8007480 <HAL_TIM_ConfigClockSource+0x168>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d05c      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x156>
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d05a      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80073b8:	e062      	b.n	8007480 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6899      	ldr	r1, [r3, #8]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f000 fb4e 	bl	8007a6a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	609a      	str	r2, [r3, #8]
      break;
 80073e6:	e04e      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	6899      	ldr	r1, [r3, #8]
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f000 fb37 	bl	8007a6a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800740a:	609a      	str	r2, [r3, #8]
      break;
 800740c:	e03b      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6818      	ldr	r0, [r3, #0]
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	6859      	ldr	r1, [r3, #4]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	461a      	mov	r2, r3
 800741c:	f000 faae 	bl	800797c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2150      	movs	r1, #80	; 0x50
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fb05 	bl	8007a36 <TIM_ITRx_SetConfig>
      break;
 800742c:	e02b      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	461a      	mov	r2, r3
 800743c:	f000 facc 	bl	80079d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2160      	movs	r1, #96	; 0x60
 8007446:	4618      	mov	r0, r3
 8007448:	f000 faf5 	bl	8007a36 <TIM_ITRx_SetConfig>
      break;
 800744c:	e01b      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6859      	ldr	r1, [r3, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	461a      	mov	r2, r3
 800745c:	f000 fa8e 	bl	800797c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2140      	movs	r1, #64	; 0x40
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fae5 	bl	8007a36 <TIM_ITRx_SetConfig>
      break;
 800746c:	e00b      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4619      	mov	r1, r3
 8007478:	4610      	mov	r0, r2
 800747a:	f000 fadc 	bl	8007a36 <TIM_ITRx_SetConfig>
      break;
 800747e:	e002      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007480:	bf00      	nop
 8007482:	e000      	b.n	8007486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007484:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3710      	adds	r7, #16
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bc80      	pop	{r7}
 80074b0:	4770      	bx	lr

080074b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b083      	sub	sp, #12
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074ba:	bf00      	nop
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	bc80      	pop	{r7}
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr

080074d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bc80      	pop	{r7}
 80074e6:	4770      	bx	lr

080074e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a3f      	ldr	r2, [pc, #252]	; (80075f8 <TIM_Base_SetConfig+0x110>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d013      	beq.n	8007528 <TIM_Base_SetConfig+0x40>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007506:	d00f      	beq.n	8007528 <TIM_Base_SetConfig+0x40>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a3c      	ldr	r2, [pc, #240]	; (80075fc <TIM_Base_SetConfig+0x114>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d00b      	beq.n	8007528 <TIM_Base_SetConfig+0x40>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a3b      	ldr	r2, [pc, #236]	; (8007600 <TIM_Base_SetConfig+0x118>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d007      	beq.n	8007528 <TIM_Base_SetConfig+0x40>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a3a      	ldr	r2, [pc, #232]	; (8007604 <TIM_Base_SetConfig+0x11c>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d003      	beq.n	8007528 <TIM_Base_SetConfig+0x40>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a39      	ldr	r2, [pc, #228]	; (8007608 <TIM_Base_SetConfig+0x120>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d108      	bne.n	800753a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a2e      	ldr	r2, [pc, #184]	; (80075f8 <TIM_Base_SetConfig+0x110>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d02b      	beq.n	800759a <TIM_Base_SetConfig+0xb2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007548:	d027      	beq.n	800759a <TIM_Base_SetConfig+0xb2>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a2b      	ldr	r2, [pc, #172]	; (80075fc <TIM_Base_SetConfig+0x114>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d023      	beq.n	800759a <TIM_Base_SetConfig+0xb2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a2a      	ldr	r2, [pc, #168]	; (8007600 <TIM_Base_SetConfig+0x118>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d01f      	beq.n	800759a <TIM_Base_SetConfig+0xb2>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a29      	ldr	r2, [pc, #164]	; (8007604 <TIM_Base_SetConfig+0x11c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d01b      	beq.n	800759a <TIM_Base_SetConfig+0xb2>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a28      	ldr	r2, [pc, #160]	; (8007608 <TIM_Base_SetConfig+0x120>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d017      	beq.n	800759a <TIM_Base_SetConfig+0xb2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a27      	ldr	r2, [pc, #156]	; (800760c <TIM_Base_SetConfig+0x124>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <TIM_Base_SetConfig+0xb2>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a26      	ldr	r2, [pc, #152]	; (8007610 <TIM_Base_SetConfig+0x128>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d00f      	beq.n	800759a <TIM_Base_SetConfig+0xb2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a25      	ldr	r2, [pc, #148]	; (8007614 <TIM_Base_SetConfig+0x12c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d00b      	beq.n	800759a <TIM_Base_SetConfig+0xb2>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	4a24      	ldr	r2, [pc, #144]	; (8007618 <TIM_Base_SetConfig+0x130>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d007      	beq.n	800759a <TIM_Base_SetConfig+0xb2>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a23      	ldr	r2, [pc, #140]	; (800761c <TIM_Base_SetConfig+0x134>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d003      	beq.n	800759a <TIM_Base_SetConfig+0xb2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a22      	ldr	r2, [pc, #136]	; (8007620 <TIM_Base_SetConfig+0x138>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d108      	bne.n	80075ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a09      	ldr	r2, [pc, #36]	; (80075f8 <TIM_Base_SetConfig+0x110>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d003      	beq.n	80075e0 <TIM_Base_SetConfig+0xf8>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a0b      	ldr	r2, [pc, #44]	; (8007608 <TIM_Base_SetConfig+0x120>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d103      	bne.n	80075e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	615a      	str	r2, [r3, #20]
}
 80075ee:	bf00      	nop
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bc80      	pop	{r7}
 80075f6:	4770      	bx	lr
 80075f8:	40010000 	.word	0x40010000
 80075fc:	40000400 	.word	0x40000400
 8007600:	40000800 	.word	0x40000800
 8007604:	40000c00 	.word	0x40000c00
 8007608:	40010400 	.word	0x40010400
 800760c:	40014000 	.word	0x40014000
 8007610:	40014400 	.word	0x40014400
 8007614:	40014800 	.word	0x40014800
 8007618:	40001800 	.word	0x40001800
 800761c:	40001c00 	.word	0x40001c00
 8007620:	40002000 	.word	0x40002000

08007624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	f023 0201 	bic.w	r2, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f023 0302 	bic.w	r3, r3, #2
 800766c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a20      	ldr	r2, [pc, #128]	; (80076fc <TIM_OC1_SetConfig+0xd8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d003      	beq.n	8007688 <TIM_OC1_SetConfig+0x64>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a1f      	ldr	r2, [pc, #124]	; (8007700 <TIM_OC1_SetConfig+0xdc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d10c      	bne.n	80076a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f023 0308 	bic.w	r3, r3, #8
 800768e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f023 0304 	bic.w	r3, r3, #4
 80076a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a15      	ldr	r2, [pc, #84]	; (80076fc <TIM_OC1_SetConfig+0xd8>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d003      	beq.n	80076b2 <TIM_OC1_SetConfig+0x8e>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a14      	ldr	r2, [pc, #80]	; (8007700 <TIM_OC1_SetConfig+0xdc>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d111      	bne.n	80076d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	621a      	str	r2, [r3, #32]
}
 80076f0:	bf00      	nop
 80076f2:	371c      	adds	r7, #28
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc80      	pop	{r7}
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	40010000 	.word	0x40010000
 8007700:	40010400 	.word	0x40010400

08007704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f023 0210 	bic.w	r2, r3, #16
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800773a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f023 0320 	bic.w	r3, r3, #32
 800774e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4313      	orrs	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a21      	ldr	r2, [pc, #132]	; (80077e4 <TIM_OC2_SetConfig+0xe0>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d003      	beq.n	800776c <TIM_OC2_SetConfig+0x68>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a20      	ldr	r2, [pc, #128]	; (80077e8 <TIM_OC2_SetConfig+0xe4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d10d      	bne.n	8007788 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	011b      	lsls	r3, r3, #4
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a16      	ldr	r2, [pc, #88]	; (80077e4 <TIM_OC2_SetConfig+0xe0>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d003      	beq.n	8007798 <TIM_OC2_SetConfig+0x94>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a15      	ldr	r2, [pc, #84]	; (80077e8 <TIM_OC2_SetConfig+0xe4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d113      	bne.n	80077c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800779e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	621a      	str	r2, [r3, #32]
}
 80077da:	bf00      	nop
 80077dc:	371c      	adds	r7, #28
 80077de:	46bd      	mov	sp, r7
 80077e0:	bc80      	pop	{r7}
 80077e2:	4770      	bx	lr
 80077e4:	40010000 	.word	0x40010000
 80077e8:	40010400 	.word	0x40010400

080077ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800781a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f023 0303 	bic.w	r3, r3, #3
 8007822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	021b      	lsls	r3, r3, #8
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a21      	ldr	r2, [pc, #132]	; (80078cc <TIM_OC3_SetConfig+0xe0>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d003      	beq.n	8007852 <TIM_OC3_SetConfig+0x66>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a20      	ldr	r2, [pc, #128]	; (80078d0 <TIM_OC3_SetConfig+0xe4>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d10d      	bne.n	800786e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4313      	orrs	r3, r2
 8007864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800786c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a16      	ldr	r2, [pc, #88]	; (80078cc <TIM_OC3_SetConfig+0xe0>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d003      	beq.n	800787e <TIM_OC3_SetConfig+0x92>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	4a15      	ldr	r2, [pc, #84]	; (80078d0 <TIM_OC3_SetConfig+0xe4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d113      	bne.n	80078a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800788c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	685a      	ldr	r2, [r3, #4]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	697a      	ldr	r2, [r7, #20]
 80078be:	621a      	str	r2, [r3, #32]
}
 80078c0:	bf00      	nop
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bc80      	pop	{r7}
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40010400 	.word	0x40010400

080078d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800790a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	4313      	orrs	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800791e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	031b      	lsls	r3, r3, #12
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	4313      	orrs	r3, r2
 800792a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a11      	ldr	r2, [pc, #68]	; (8007974 <TIM_OC4_SetConfig+0xa0>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d003      	beq.n	800793c <TIM_OC4_SetConfig+0x68>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a10      	ldr	r2, [pc, #64]	; (8007978 <TIM_OC4_SetConfig+0xa4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d109      	bne.n	8007950 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	019b      	lsls	r3, r3, #6
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	4313      	orrs	r3, r2
 800794e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	621a      	str	r2, [r3, #32]
}
 800796a:	bf00      	nop
 800796c:	371c      	adds	r7, #28
 800796e:	46bd      	mov	sp, r7
 8007970:	bc80      	pop	{r7}
 8007972:	4770      	bx	lr
 8007974:	40010000 	.word	0x40010000
 8007978:	40010400 	.word	0x40010400

0800797c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	f023 0201 	bic.w	r2, r3, #1
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	011b      	lsls	r3, r3, #4
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f023 030a 	bic.w	r3, r3, #10
 80079b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	697a      	ldr	r2, [r7, #20]
 80079cc:	621a      	str	r2, [r3, #32]
}
 80079ce:	bf00      	nop
 80079d0:	371c      	adds	r7, #28
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bc80      	pop	{r7}
 80079d6:	4770      	bx	lr

080079d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	f023 0210 	bic.w	r2, r3, #16
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	031b      	lsls	r3, r3, #12
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	011b      	lsls	r3, r3, #4
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	621a      	str	r2, [r3, #32]
}
 8007a2c:	bf00      	nop
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bc80      	pop	{r7}
 8007a34:	4770      	bx	lr

08007a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b085      	sub	sp, #20
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f043 0307 	orr.w	r3, r3, #7
 8007a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	609a      	str	r2, [r3, #8]
}
 8007a60:	bf00      	nop
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b087      	sub	sp, #28
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	607a      	str	r2, [r7, #4]
 8007a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	021a      	lsls	r2, r3, #8
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	609a      	str	r2, [r3, #8]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	2201      	movs	r2, #1
 8007abc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a1a      	ldr	r2, [r3, #32]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	43db      	mvns	r3, r3
 8007aca:	401a      	ands	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a1a      	ldr	r2, [r3, #32]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	f003 031f 	and.w	r3, r3, #31
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	621a      	str	r2, [r3, #32]
}
 8007ae6:	bf00      	nop
 8007ae8:	371c      	adds	r7, #28
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bc80      	pop	{r7}
 8007aee:	4770      	bx	lr

08007af0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2204      	movs	r2, #4
 8007b00:	6839      	ldr	r1, [r7, #0]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 f906 	bl	8007d14 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b06      	cmp	r3, #6
 8007b28:	d007      	beq.n	8007b3a <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0201 	orr.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 f8dc 	bl	8007d14 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6a1a      	ldr	r2, [r3, #32]
 8007b62:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b66:	4013      	ands	r3, r2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10f      	bne.n	8007b8c <HAL_TIMEx_PWMN_Stop+0x48>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6a1a      	ldr	r2, [r3, #32]
 8007b72:	f240 4344 	movw	r3, #1092	; 0x444
 8007b76:	4013      	ands	r3, r2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d107      	bne.n	8007b8c <HAL_TIMEx_PWMN_Stop+0x48>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6a1a      	ldr	r2, [r3, #32]
 8007b92:	f241 1311 	movw	r3, #4369	; 0x1111
 8007b96:	4013      	ands	r3, r2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10f      	bne.n	8007bbc <HAL_TIMEx_PWMN_Stop+0x78>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6a1a      	ldr	r2, [r3, #32]
 8007ba2:	f240 4344 	movw	r3, #1092	; 0x444
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d107      	bne.n	8007bbc <HAL_TIMEx_PWMN_Stop+0x78>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f022 0201 	bic.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3708      	adds	r7, #8
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b085      	sub	sp, #20
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d101      	bne.n	8007bde <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bda:	2302      	movs	r3, #2
 8007bdc:	e032      	b.n	8007c44 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2202      	movs	r2, #2
 8007bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c16:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bc80      	pop	{r7}
 8007c4c:	4770      	bx	lr

08007c4e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b085      	sub	sp, #20
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e03d      	b.n	8007ce6 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	69db      	ldr	r3, [r3, #28]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr

08007cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bc80      	pop	{r7}
 8007d00:	4770      	bx	lr

08007d02 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bc80      	pop	{r7}
 8007d12:	4770      	bx	lr

08007d14 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f003 031f 	and.w	r3, r3, #31
 8007d26:	2204      	movs	r2, #4
 8007d28:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6a1a      	ldr	r2, [r3, #32]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	43db      	mvns	r3, r3
 8007d36:	401a      	ands	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a1a      	ldr	r2, [r3, #32]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	fa01 f303 	lsl.w	r3, r1, r3
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]
}
 8007d52:	bf00      	nop
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bc80      	pop	{r7}
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e03f      	b.n	8007dee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d106      	bne.n	8007d88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f7fb f87a 	bl	8002e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2224      	movs	r2, #36	; 0x24
 8007d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fa63 	bl	800826c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	691a      	ldr	r2, [r3, #16]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007db4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	695a      	ldr	r2, [r3, #20]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	f003 030f 	and.w	r3, r3, #15
 8007e26:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10d      	bne.n	8007e4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d008      	beq.n	8007e4a <HAL_UART_IRQHandler+0x52>
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d003      	beq.n	8007e4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f991 	bl	800816a <UART_Receive_IT>
      return;
 8007e48:	e0d0      	b.n	8007fec <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 80b0 	beq.w	8007fb2 <HAL_UART_IRQHandler+0x1ba>
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d105      	bne.n	8007e68 <HAL_UART_IRQHandler+0x70>
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 80a5 	beq.w	8007fb2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <HAL_UART_IRQHandler+0x90>
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e80:	f043 0201 	orr.w	r2, r3, #1
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	f003 0304 	and.w	r3, r3, #4
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <HAL_UART_IRQHandler+0xb0>
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea0:	f043 0202 	orr.w	r2, r3, #2
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00a      	beq.n	8007ec8 <HAL_UART_IRQHandler+0xd0>
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d005      	beq.n	8007ec8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec0:	f043 0204 	orr.w	r2, r3, #4
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f003 0308 	and.w	r3, r3, #8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00f      	beq.n	8007ef2 <HAL_UART_IRQHandler+0xfa>
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d104      	bne.n	8007ee6 <HAL_UART_IRQHandler+0xee>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d005      	beq.n	8007ef2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eea:	f043 0208 	orr.w	r2, r3, #8
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d077      	beq.n	8007fea <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d007      	beq.n	8007f14 <HAL_UART_IRQHandler+0x11c>
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	f003 0320 	and.w	r3, r3, #32
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f92b 	bl	800816a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f1e:	2b40      	cmp	r3, #64	; 0x40
 8007f20:	bf0c      	ite	eq
 8007f22:	2301      	moveq	r3, #1
 8007f24:	2300      	movne	r3, #0
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2e:	f003 0308 	and.w	r3, r3, #8
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <HAL_UART_IRQHandler+0x144>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d031      	beq.n	8007fa0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f876 	bl	800802e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f4c:	2b40      	cmp	r3, #64	; 0x40
 8007f4e:	d123      	bne.n	8007f98 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	695a      	ldr	r2, [r3, #20]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f5e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d013      	beq.n	8007f90 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6c:	4a21      	ldr	r2, [pc, #132]	; (8007ff4 <HAL_UART_IRQHandler+0x1fc>)
 8007f6e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fc f8af 	bl	80040d8 <HAL_DMA_Abort_IT>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d016      	beq.n	8007fae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8e:	e00e      	b.n	8007fae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f843 	bl	800801c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f96:	e00a      	b.n	8007fae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f83f 	bl	800801c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9e:	e006      	b.n	8007fae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f83b 	bl	800801c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007fac:	e01d      	b.n	8007fea <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fae:	bf00      	nop
    return;
 8007fb0:	e01b      	b.n	8007fea <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d008      	beq.n	8007fce <HAL_UART_IRQHandler+0x1d6>
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f862 	bl	8008090 <UART_Transmit_IT>
    return;
 8007fcc:	e00e      	b.n	8007fec <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d009      	beq.n	8007fec <HAL_UART_IRQHandler+0x1f4>
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d004      	beq.n	8007fec <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f8a9 	bl	800813a <UART_EndTransmit_IT>
    return;
 8007fe8:	e000      	b.n	8007fec <HAL_UART_IRQHandler+0x1f4>
    return;
 8007fea:	bf00      	nop
  }
}
 8007fec:	3720      	adds	r7, #32
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	08008069 	.word	0x08008069

08007ff8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	bc80      	pop	{r7}
 8008008:	4770      	bx	lr

0800800a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	bc80      	pop	{r7}
 800801a:	4770      	bx	lr

0800801c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	bc80      	pop	{r7}
 800802c:	4770      	bx	lr

0800802e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008044:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	695a      	ldr	r2, [r3, #20]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f022 0201 	bic.w	r2, r2, #1
 8008054:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800805e:	bf00      	nop
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr

08008068 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff ffca 	bl	800801c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b21      	cmp	r3, #33	; 0x21
 80080a2:	d144      	bne.n	800812e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ac:	d11a      	bne.n	80080e4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	881b      	ldrh	r3, [r3, #0]
 80080b8:	461a      	mov	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d105      	bne.n	80080d8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	1c9a      	adds	r2, r3, #2
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	621a      	str	r2, [r3, #32]
 80080d6:	e00e      	b.n	80080f6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1b      	ldr	r3, [r3, #32]
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	621a      	str	r2, [r3, #32]
 80080e2:	e008      	b.n	80080f6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	1c59      	adds	r1, r3, #1
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	6211      	str	r1, [r2, #32]
 80080ee:	781a      	ldrb	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29b      	uxth	r3, r3
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	4619      	mov	r1, r3
 8008104:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10f      	bne.n	800812a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008118:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008128:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	e000      	b.n	8008130 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800812e:	2302      	movs	r3, #2
  }
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr

0800813a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008150:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2220      	movs	r2, #32
 8008156:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff ff4c 	bl	8007ff8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b22      	cmp	r3, #34	; 0x22
 800817c:	d171      	bne.n	8008262 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008186:	d123      	bne.n	80081d0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10e      	bne.n	80081b4 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	b29b      	uxth	r3, r3
 800819e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	1c9a      	adds	r2, r3, #2
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	629a      	str	r2, [r3, #40]	; 0x28
 80081b2:	e029      	b.n	8008208 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	b29a      	uxth	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c8:	1c5a      	adds	r2, r3, #1
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	629a      	str	r2, [r3, #40]	; 0x28
 80081ce:	e01b      	b.n	8008208 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6858      	ldr	r0, [r3, #4]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e2:	1c59      	adds	r1, r3, #1
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	6291      	str	r1, [r2, #40]	; 0x28
 80081e8:	b2c2      	uxtb	r2, r0
 80081ea:	701a      	strb	r2, [r3, #0]
 80081ec:	e00c      	b.n	8008208 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	b2da      	uxtb	r2, r3
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fa:	1c58      	adds	r0, r3, #1
 80081fc:	6879      	ldr	r1, [r7, #4]
 80081fe:	6288      	str	r0, [r1, #40]	; 0x28
 8008200:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008204:	b2d2      	uxtb	r2, r2
 8008206:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800820c:	b29b      	uxth	r3, r3
 800820e:	3b01      	subs	r3, #1
 8008210:	b29b      	uxth	r3, r3
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	4619      	mov	r1, r3
 8008216:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008218:	2b00      	cmp	r3, #0
 800821a:	d120      	bne.n	800825e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0220 	bic.w	r2, r2, #32
 800822a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800823a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	695a      	ldr	r2, [r3, #20]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f022 0201 	bic.w	r2, r2, #1
 800824a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff fed8 	bl	800800a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	e002      	b.n	8008264 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	e000      	b.n	8008264 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008262:	2302      	movs	r3, #2
  }
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	431a      	orrs	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80082ac:	f023 030c 	bic.w	r3, r3, #12
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6812      	ldr	r2, [r2, #0]
 80082b4:	68f9      	ldr	r1, [r7, #12]
 80082b6:	430b      	orrs	r3, r1
 80082b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	430a      	orrs	r2, r1
 80082ce:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d8:	f040 80aa 	bne.w	8008430 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4aa9      	ldr	r2, [pc, #676]	; (8008588 <UART_SetConfig+0x31c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d004      	beq.n	80082f0 <UART_SetConfig+0x84>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4aa8      	ldr	r2, [pc, #672]	; (800858c <UART_SetConfig+0x320>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d14f      	bne.n	8008390 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082f0:	f7fe fbe4 	bl	8006abc <HAL_RCC_GetPCLK2Freq>
 80082f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	009a      	lsls	r2, r3, #2
 8008300:	441a      	add	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	fbb2 f3f3 	udiv	r3, r2, r3
 800830c:	4aa0      	ldr	r2, [pc, #640]	; (8008590 <UART_SetConfig+0x324>)
 800830e:	fba2 2303 	umull	r2, r3, r2, r3
 8008312:	095b      	lsrs	r3, r3, #5
 8008314:	0119      	lsls	r1, r3, #4
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	4613      	mov	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	009a      	lsls	r2, r3, #2
 8008320:	441a      	add	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	005b      	lsls	r3, r3, #1
 8008328:	fbb2 f2f3 	udiv	r2, r2, r3
 800832c:	4b98      	ldr	r3, [pc, #608]	; (8008590 <UART_SetConfig+0x324>)
 800832e:	fba3 0302 	umull	r0, r3, r3, r2
 8008332:	095b      	lsrs	r3, r3, #5
 8008334:	2064      	movs	r0, #100	; 0x64
 8008336:	fb00 f303 	mul.w	r3, r0, r3
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	3332      	adds	r3, #50	; 0x32
 8008340:	4a93      	ldr	r2, [pc, #588]	; (8008590 <UART_SetConfig+0x324>)
 8008342:	fba2 2303 	umull	r2, r3, r2, r3
 8008346:	095b      	lsrs	r3, r3, #5
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800834e:	4419      	add	r1, r3
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	4613      	mov	r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	4413      	add	r3, r2
 8008358:	009a      	lsls	r2, r3, #2
 800835a:	441a      	add	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	fbb2 f2f3 	udiv	r2, r2, r3
 8008366:	4b8a      	ldr	r3, [pc, #552]	; (8008590 <UART_SetConfig+0x324>)
 8008368:	fba3 0302 	umull	r0, r3, r3, r2
 800836c:	095b      	lsrs	r3, r3, #5
 800836e:	2064      	movs	r0, #100	; 0x64
 8008370:	fb00 f303 	mul.w	r3, r0, r3
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	00db      	lsls	r3, r3, #3
 8008378:	3332      	adds	r3, #50	; 0x32
 800837a:	4a85      	ldr	r2, [pc, #532]	; (8008590 <UART_SetConfig+0x324>)
 800837c:	fba2 2303 	umull	r2, r3, r2, r3
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	f003 0207 	and.w	r2, r3, #7
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	440a      	add	r2, r1
 800838c:	609a      	str	r2, [r3, #8]
 800838e:	e0f7      	b.n	8008580 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008390:	f7fe fb72 	bl	8006a78 <HAL_RCC_GetPCLK1Freq>
 8008394:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009a      	lsls	r2, r3, #2
 80083a0:	441a      	add	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	005b      	lsls	r3, r3, #1
 80083a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ac:	4a78      	ldr	r2, [pc, #480]	; (8008590 <UART_SetConfig+0x324>)
 80083ae:	fba2 2303 	umull	r2, r3, r2, r3
 80083b2:	095b      	lsrs	r3, r3, #5
 80083b4:	0119      	lsls	r1, r3, #4
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	4613      	mov	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4413      	add	r3, r2
 80083be:	009a      	lsls	r2, r3, #2
 80083c0:	441a      	add	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80083cc:	4b70      	ldr	r3, [pc, #448]	; (8008590 <UART_SetConfig+0x324>)
 80083ce:	fba3 0302 	umull	r0, r3, r3, r2
 80083d2:	095b      	lsrs	r3, r3, #5
 80083d4:	2064      	movs	r0, #100	; 0x64
 80083d6:	fb00 f303 	mul.w	r3, r0, r3
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	00db      	lsls	r3, r3, #3
 80083de:	3332      	adds	r3, #50	; 0x32
 80083e0:	4a6b      	ldr	r2, [pc, #428]	; (8008590 <UART_SetConfig+0x324>)
 80083e2:	fba2 2303 	umull	r2, r3, r2, r3
 80083e6:	095b      	lsrs	r3, r3, #5
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80083ee:	4419      	add	r1, r3
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	4413      	add	r3, r2
 80083f8:	009a      	lsls	r2, r3, #2
 80083fa:	441a      	add	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	fbb2 f2f3 	udiv	r2, r2, r3
 8008406:	4b62      	ldr	r3, [pc, #392]	; (8008590 <UART_SetConfig+0x324>)
 8008408:	fba3 0302 	umull	r0, r3, r3, r2
 800840c:	095b      	lsrs	r3, r3, #5
 800840e:	2064      	movs	r0, #100	; 0x64
 8008410:	fb00 f303 	mul.w	r3, r0, r3
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	3332      	adds	r3, #50	; 0x32
 800841a:	4a5d      	ldr	r2, [pc, #372]	; (8008590 <UART_SetConfig+0x324>)
 800841c:	fba2 2303 	umull	r2, r3, r2, r3
 8008420:	095b      	lsrs	r3, r3, #5
 8008422:	f003 0207 	and.w	r2, r3, #7
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	440a      	add	r2, r1
 800842c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800842e:	e0a7      	b.n	8008580 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a54      	ldr	r2, [pc, #336]	; (8008588 <UART_SetConfig+0x31c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d004      	beq.n	8008444 <UART_SetConfig+0x1d8>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a53      	ldr	r2, [pc, #332]	; (800858c <UART_SetConfig+0x320>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d14e      	bne.n	80084e2 <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008444:	f7fe fb3a 	bl	8006abc <HAL_RCC_GetPCLK2Freq>
 8008448:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	4613      	mov	r3, r2
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	009a      	lsls	r2, r3, #2
 8008454:	441a      	add	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008460:	4a4b      	ldr	r2, [pc, #300]	; (8008590 <UART_SetConfig+0x324>)
 8008462:	fba2 2303 	umull	r2, r3, r2, r3
 8008466:	095b      	lsrs	r3, r3, #5
 8008468:	0119      	lsls	r1, r3, #4
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	4613      	mov	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4413      	add	r3, r2
 8008472:	009a      	lsls	r2, r3, #2
 8008474:	441a      	add	r2, r3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008480:	4b43      	ldr	r3, [pc, #268]	; (8008590 <UART_SetConfig+0x324>)
 8008482:	fba3 0302 	umull	r0, r3, r3, r2
 8008486:	095b      	lsrs	r3, r3, #5
 8008488:	2064      	movs	r0, #100	; 0x64
 800848a:	fb00 f303 	mul.w	r3, r0, r3
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	3332      	adds	r3, #50	; 0x32
 8008494:	4a3e      	ldr	r2, [pc, #248]	; (8008590 <UART_SetConfig+0x324>)
 8008496:	fba2 2303 	umull	r2, r3, r2, r3
 800849a:	095b      	lsrs	r3, r3, #5
 800849c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084a0:	4419      	add	r1, r3
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009a      	lsls	r2, r3, #2
 80084ac:	441a      	add	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80084b8:	4b35      	ldr	r3, [pc, #212]	; (8008590 <UART_SetConfig+0x324>)
 80084ba:	fba3 0302 	umull	r0, r3, r3, r2
 80084be:	095b      	lsrs	r3, r3, #5
 80084c0:	2064      	movs	r0, #100	; 0x64
 80084c2:	fb00 f303 	mul.w	r3, r0, r3
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	011b      	lsls	r3, r3, #4
 80084ca:	3332      	adds	r3, #50	; 0x32
 80084cc:	4a30      	ldr	r2, [pc, #192]	; (8008590 <UART_SetConfig+0x324>)
 80084ce:	fba2 2303 	umull	r2, r3, r2, r3
 80084d2:	095b      	lsrs	r3, r3, #5
 80084d4:	f003 020f 	and.w	r2, r3, #15
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	440a      	add	r2, r1
 80084de:	609a      	str	r2, [r3, #8]
 80084e0:	e04e      	b.n	8008580 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 80084e2:	f7fe fac9 	bl	8006a78 <HAL_RCC_GetPCLK1Freq>
 80084e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009a      	lsls	r2, r3, #2
 80084f2:	441a      	add	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fe:	4a24      	ldr	r2, [pc, #144]	; (8008590 <UART_SetConfig+0x324>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	0119      	lsls	r1, r3, #4
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	4613      	mov	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	009a      	lsls	r2, r3, #2
 8008512:	441a      	add	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	fbb2 f2f3 	udiv	r2, r2, r3
 800851e:	4b1c      	ldr	r3, [pc, #112]	; (8008590 <UART_SetConfig+0x324>)
 8008520:	fba3 0302 	umull	r0, r3, r3, r2
 8008524:	095b      	lsrs	r3, r3, #5
 8008526:	2064      	movs	r0, #100	; 0x64
 8008528:	fb00 f303 	mul.w	r3, r0, r3
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	3332      	adds	r3, #50	; 0x32
 8008532:	4a17      	ldr	r2, [pc, #92]	; (8008590 <UART_SetConfig+0x324>)
 8008534:	fba2 2303 	umull	r2, r3, r2, r3
 8008538:	095b      	lsrs	r3, r3, #5
 800853a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800853e:	4419      	add	r1, r3
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	009a      	lsls	r2, r3, #2
 800854a:	441a      	add	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	fbb2 f2f3 	udiv	r2, r2, r3
 8008556:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <UART_SetConfig+0x324>)
 8008558:	fba3 0302 	umull	r0, r3, r3, r2
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	2064      	movs	r0, #100	; 0x64
 8008560:	fb00 f303 	mul.w	r3, r0, r3
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	3332      	adds	r3, #50	; 0x32
 800856a:	4a09      	ldr	r2, [pc, #36]	; (8008590 <UART_SetConfig+0x324>)
 800856c:	fba2 2303 	umull	r2, r3, r2, r3
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	f003 020f 	and.w	r2, r3, #15
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	440a      	add	r2, r1
 800857c:	609a      	str	r2, [r3, #8]
}
 800857e:	e7ff      	b.n	8008580 <UART_SetConfig+0x314>
 8008580:	bf00      	nop
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	40011000 	.word	0x40011000
 800858c:	40011400 	.word	0x40011400
 8008590:	51eb851f 	.word	0x51eb851f

08008594 <__libc_init_array>:
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	2600      	movs	r6, #0
 8008598:	4d0c      	ldr	r5, [pc, #48]	; (80085cc <__libc_init_array+0x38>)
 800859a:	4c0d      	ldr	r4, [pc, #52]	; (80085d0 <__libc_init_array+0x3c>)
 800859c:	1b64      	subs	r4, r4, r5
 800859e:	10a4      	asrs	r4, r4, #2
 80085a0:	42a6      	cmp	r6, r4
 80085a2:	d109      	bne.n	80085b8 <__libc_init_array+0x24>
 80085a4:	f001 f822 	bl	80095ec <_init>
 80085a8:	2600      	movs	r6, #0
 80085aa:	4d0a      	ldr	r5, [pc, #40]	; (80085d4 <__libc_init_array+0x40>)
 80085ac:	4c0a      	ldr	r4, [pc, #40]	; (80085d8 <__libc_init_array+0x44>)
 80085ae:	1b64      	subs	r4, r4, r5
 80085b0:	10a4      	asrs	r4, r4, #2
 80085b2:	42a6      	cmp	r6, r4
 80085b4:	d105      	bne.n	80085c2 <__libc_init_array+0x2e>
 80085b6:	bd70      	pop	{r4, r5, r6, pc}
 80085b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80085bc:	4798      	blx	r3
 80085be:	3601      	adds	r6, #1
 80085c0:	e7ee      	b.n	80085a0 <__libc_init_array+0xc>
 80085c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c6:	4798      	blx	r3
 80085c8:	3601      	adds	r6, #1
 80085ca:	e7f2      	b.n	80085b2 <__libc_init_array+0x1e>
 80085cc:	08009808 	.word	0x08009808
 80085d0:	08009808 	.word	0x08009808
 80085d4:	08009808 	.word	0x08009808
 80085d8:	0800980c 	.word	0x0800980c

080085dc <memset>:
 80085dc:	4603      	mov	r3, r0
 80085de:	4402      	add	r2, r0
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d100      	bne.n	80085e6 <memset+0xa>
 80085e4:	4770      	bx	lr
 80085e6:	f803 1b01 	strb.w	r1, [r3], #1
 80085ea:	e7f9      	b.n	80085e0 <memset+0x4>

080085ec <sin>:
 80085ec:	b530      	push	{r4, r5, lr}
 80085ee:	4a20      	ldr	r2, [pc, #128]	; (8008670 <sin+0x84>)
 80085f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085f4:	4293      	cmp	r3, r2
 80085f6:	b087      	sub	sp, #28
 80085f8:	dc06      	bgt.n	8008608 <sin+0x1c>
 80085fa:	2300      	movs	r3, #0
 80085fc:	2200      	movs	r2, #0
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	2300      	movs	r3, #0
 8008602:	f000 fe31 	bl	8009268 <__kernel_sin>
 8008606:	e006      	b.n	8008616 <sin+0x2a>
 8008608:	4a1a      	ldr	r2, [pc, #104]	; (8008674 <sin+0x88>)
 800860a:	4293      	cmp	r3, r2
 800860c:	dd05      	ble.n	800861a <sin+0x2e>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	f7f7 fddd 	bl	80001d0 <__aeabi_dsub>
 8008616:	b007      	add	sp, #28
 8008618:	bd30      	pop	{r4, r5, pc}
 800861a:	aa02      	add	r2, sp, #8
 800861c:	f000 f82c 	bl	8008678 <__ieee754_rem_pio2>
 8008620:	f000 0003 	and.w	r0, r0, #3
 8008624:	2801      	cmp	r0, #1
 8008626:	d009      	beq.n	800863c <sin+0x50>
 8008628:	2802      	cmp	r0, #2
 800862a:	d00e      	beq.n	800864a <sin+0x5e>
 800862c:	b9c0      	cbnz	r0, 8008660 <sin+0x74>
 800862e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008632:	2301      	movs	r3, #1
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800863a:	e7e2      	b.n	8008602 <sin+0x16>
 800863c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008644:	f000 fa08 	bl	8008a58 <__kernel_cos>
 8008648:	e7e5      	b.n	8008616 <sin+0x2a>
 800864a:	2301      	movs	r3, #1
 800864c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008650:	9300      	str	r3, [sp, #0]
 8008652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008656:	f000 fe07 	bl	8009268 <__kernel_sin>
 800865a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800865e:	e7da      	b.n	8008616 <sin+0x2a>
 8008660:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008668:	f000 f9f6 	bl	8008a58 <__kernel_cos>
 800866c:	e7f5      	b.n	800865a <sin+0x6e>
 800866e:	bf00      	nop
 8008670:	3fe921fb 	.word	0x3fe921fb
 8008674:	7fefffff 	.word	0x7fefffff

08008678 <__ieee754_rem_pio2>:
 8008678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	4614      	mov	r4, r2
 800867e:	4ac4      	ldr	r2, [pc, #784]	; (8008990 <__ieee754_rem_pio2+0x318>)
 8008680:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8008684:	b08d      	sub	sp, #52	; 0x34
 8008686:	4592      	cmp	sl, r2
 8008688:	9104      	str	r1, [sp, #16]
 800868a:	dc07      	bgt.n	800869c <__ieee754_rem_pio2+0x24>
 800868c:	2200      	movs	r2, #0
 800868e:	2300      	movs	r3, #0
 8008690:	e9c4 0100 	strd	r0, r1, [r4]
 8008694:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008698:	2500      	movs	r5, #0
 800869a:	e024      	b.n	80086e6 <__ieee754_rem_pio2+0x6e>
 800869c:	4abd      	ldr	r2, [pc, #756]	; (8008994 <__ieee754_rem_pio2+0x31c>)
 800869e:	4592      	cmp	sl, r2
 80086a0:	dc72      	bgt.n	8008788 <__ieee754_rem_pio2+0x110>
 80086a2:	9b04      	ldr	r3, [sp, #16]
 80086a4:	4dbc      	ldr	r5, [pc, #752]	; (8008998 <__ieee754_rem_pio2+0x320>)
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	a3ab      	add	r3, pc, #684	; (adr r3, 8008958 <__ieee754_rem_pio2+0x2e0>)
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	dd36      	ble.n	800871e <__ieee754_rem_pio2+0xa6>
 80086b0:	f7f7 fd8e 	bl	80001d0 <__aeabi_dsub>
 80086b4:	45aa      	cmp	sl, r5
 80086b6:	4606      	mov	r6, r0
 80086b8:	460f      	mov	r7, r1
 80086ba:	d018      	beq.n	80086ee <__ieee754_rem_pio2+0x76>
 80086bc:	a3a8      	add	r3, pc, #672	; (adr r3, 8008960 <__ieee754_rem_pio2+0x2e8>)
 80086be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c2:	f7f7 fd85 	bl	80001d0 <__aeabi_dsub>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4630      	mov	r0, r6
 80086cc:	e9c4 2300 	strd	r2, r3, [r4]
 80086d0:	4639      	mov	r1, r7
 80086d2:	f7f7 fd7d 	bl	80001d0 <__aeabi_dsub>
 80086d6:	a3a2      	add	r3, pc, #648	; (adr r3, 8008960 <__ieee754_rem_pio2+0x2e8>)
 80086d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086dc:	f7f7 fd78 	bl	80001d0 <__aeabi_dsub>
 80086e0:	2501      	movs	r5, #1
 80086e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80086e6:	4628      	mov	r0, r5
 80086e8:	b00d      	add	sp, #52	; 0x34
 80086ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ee:	a39e      	add	r3, pc, #632	; (adr r3, 8008968 <__ieee754_rem_pio2+0x2f0>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	f7f7 fd6c 	bl	80001d0 <__aeabi_dsub>
 80086f8:	a39d      	add	r3, pc, #628	; (adr r3, 8008970 <__ieee754_rem_pio2+0x2f8>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	f7f7 fd65 	bl	80001d0 <__aeabi_dsub>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4630      	mov	r0, r6
 800870c:	e9c4 2300 	strd	r2, r3, [r4]
 8008710:	4639      	mov	r1, r7
 8008712:	f7f7 fd5d 	bl	80001d0 <__aeabi_dsub>
 8008716:	a396      	add	r3, pc, #600	; (adr r3, 8008970 <__ieee754_rem_pio2+0x2f8>)
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	e7de      	b.n	80086dc <__ieee754_rem_pio2+0x64>
 800871e:	f7f7 fd59 	bl	80001d4 <__adddf3>
 8008722:	45aa      	cmp	sl, r5
 8008724:	4606      	mov	r6, r0
 8008726:	460f      	mov	r7, r1
 8008728:	d016      	beq.n	8008758 <__ieee754_rem_pio2+0xe0>
 800872a:	a38d      	add	r3, pc, #564	; (adr r3, 8008960 <__ieee754_rem_pio2+0x2e8>)
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f7f7 fd50 	bl	80001d4 <__adddf3>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4630      	mov	r0, r6
 800873a:	e9c4 2300 	strd	r2, r3, [r4]
 800873e:	4639      	mov	r1, r7
 8008740:	f7f7 fd46 	bl	80001d0 <__aeabi_dsub>
 8008744:	a386      	add	r3, pc, #536	; (adr r3, 8008960 <__ieee754_rem_pio2+0x2e8>)
 8008746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874a:	f7f7 fd43 	bl	80001d4 <__adddf3>
 800874e:	f04f 35ff 	mov.w	r5, #4294967295
 8008752:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008756:	e7c6      	b.n	80086e6 <__ieee754_rem_pio2+0x6e>
 8008758:	a383      	add	r3, pc, #524	; (adr r3, 8008968 <__ieee754_rem_pio2+0x2f0>)
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	f7f7 fd39 	bl	80001d4 <__adddf3>
 8008762:	a383      	add	r3, pc, #524	; (adr r3, 8008970 <__ieee754_rem_pio2+0x2f8>)
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	4606      	mov	r6, r0
 800876a:	460f      	mov	r7, r1
 800876c:	f7f7 fd32 	bl	80001d4 <__adddf3>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4630      	mov	r0, r6
 8008776:	e9c4 2300 	strd	r2, r3, [r4]
 800877a:	4639      	mov	r1, r7
 800877c:	f7f7 fd28 	bl	80001d0 <__aeabi_dsub>
 8008780:	a37b      	add	r3, pc, #492	; (adr r3, 8008970 <__ieee754_rem_pio2+0x2f8>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	e7e0      	b.n	800874a <__ieee754_rem_pio2+0xd2>
 8008788:	4a84      	ldr	r2, [pc, #528]	; (800899c <__ieee754_rem_pio2+0x324>)
 800878a:	4592      	cmp	sl, r2
 800878c:	f300 80d5 	bgt.w	800893a <__ieee754_rem_pio2+0x2c2>
 8008790:	f000 fe20 	bl	80093d4 <fabs>
 8008794:	a378      	add	r3, pc, #480	; (adr r3, 8008978 <__ieee754_rem_pio2+0x300>)
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	4606      	mov	r6, r0
 800879c:	460f      	mov	r7, r1
 800879e:	f7f7 fecf 	bl	8000540 <__aeabi_dmul>
 80087a2:	2200      	movs	r2, #0
 80087a4:	4b7e      	ldr	r3, [pc, #504]	; (80089a0 <__ieee754_rem_pio2+0x328>)
 80087a6:	f7f7 fd15 	bl	80001d4 <__adddf3>
 80087aa:	f7f8 f963 	bl	8000a74 <__aeabi_d2iz>
 80087ae:	4605      	mov	r5, r0
 80087b0:	f7f7 fe5c 	bl	800046c <__aeabi_i2d>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087bc:	a366      	add	r3, pc, #408	; (adr r3, 8008958 <__ieee754_rem_pio2+0x2e0>)
 80087be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c2:	f7f7 febd 	bl	8000540 <__aeabi_dmul>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4630      	mov	r0, r6
 80087cc:	4639      	mov	r1, r7
 80087ce:	f7f7 fcff 	bl	80001d0 <__aeabi_dsub>
 80087d2:	a363      	add	r3, pc, #396	; (adr r3, 8008960 <__ieee754_rem_pio2+0x2e8>)
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	4680      	mov	r8, r0
 80087da:	4689      	mov	r9, r1
 80087dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087e0:	f7f7 feae 	bl	8000540 <__aeabi_dmul>
 80087e4:	2d1f      	cmp	r5, #31
 80087e6:	4606      	mov	r6, r0
 80087e8:	460f      	mov	r7, r1
 80087ea:	dc0e      	bgt.n	800880a <__ieee754_rem_pio2+0x192>
 80087ec:	4b6d      	ldr	r3, [pc, #436]	; (80089a4 <__ieee754_rem_pio2+0x32c>)
 80087ee:	1e6a      	subs	r2, r5, #1
 80087f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f4:	4553      	cmp	r3, sl
 80087f6:	d008      	beq.n	800880a <__ieee754_rem_pio2+0x192>
 80087f8:	4632      	mov	r2, r6
 80087fa:	463b      	mov	r3, r7
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f7 fce6 	bl	80001d0 <__aeabi_dsub>
 8008804:	e9c4 0100 	strd	r0, r1, [r4]
 8008808:	e013      	b.n	8008832 <__ieee754_rem_pio2+0x1ba>
 800880a:	463b      	mov	r3, r7
 800880c:	4632      	mov	r2, r6
 800880e:	4640      	mov	r0, r8
 8008810:	4649      	mov	r1, r9
 8008812:	f7f7 fcdd 	bl	80001d0 <__aeabi_dsub>
 8008816:	ea4f 532a 	mov.w	r3, sl, asr #20
 800881a:	9305      	str	r3, [sp, #20]
 800881c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008820:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008824:	f1ba 0f10 	cmp.w	sl, #16
 8008828:	dc1f      	bgt.n	800886a <__ieee754_rem_pio2+0x1f2>
 800882a:	4602      	mov	r2, r0
 800882c:	460b      	mov	r3, r1
 800882e:	e9c4 2300 	strd	r2, r3, [r4]
 8008832:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008836:	4640      	mov	r0, r8
 8008838:	4653      	mov	r3, sl
 800883a:	4649      	mov	r1, r9
 800883c:	f7f7 fcc8 	bl	80001d0 <__aeabi_dsub>
 8008840:	4632      	mov	r2, r6
 8008842:	463b      	mov	r3, r7
 8008844:	f7f7 fcc4 	bl	80001d0 <__aeabi_dsub>
 8008848:	460b      	mov	r3, r1
 800884a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800884e:	9904      	ldr	r1, [sp, #16]
 8008850:	4602      	mov	r2, r0
 8008852:	2900      	cmp	r1, #0
 8008854:	f6bf af47 	bge.w	80086e6 <__ieee754_rem_pio2+0x6e>
 8008858:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800885c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008860:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008864:	60e3      	str	r3, [r4, #12]
 8008866:	426d      	negs	r5, r5
 8008868:	e73d      	b.n	80086e6 <__ieee754_rem_pio2+0x6e>
 800886a:	a33f      	add	r3, pc, #252	; (adr r3, 8008968 <__ieee754_rem_pio2+0x2f0>)
 800886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008874:	f7f7 fe64 	bl	8000540 <__aeabi_dmul>
 8008878:	4606      	mov	r6, r0
 800887a:	460f      	mov	r7, r1
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4640      	mov	r0, r8
 8008882:	4649      	mov	r1, r9
 8008884:	f7f7 fca4 	bl	80001d0 <__aeabi_dsub>
 8008888:	4602      	mov	r2, r0
 800888a:	460b      	mov	r3, r1
 800888c:	4682      	mov	sl, r0
 800888e:	468b      	mov	fp, r1
 8008890:	4640      	mov	r0, r8
 8008892:	4649      	mov	r1, r9
 8008894:	f7f7 fc9c 	bl	80001d0 <__aeabi_dsub>
 8008898:	4632      	mov	r2, r6
 800889a:	463b      	mov	r3, r7
 800889c:	f7f7 fc98 	bl	80001d0 <__aeabi_dsub>
 80088a0:	a333      	add	r3, pc, #204	; (adr r3, 8008970 <__ieee754_rem_pio2+0x2f8>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	4606      	mov	r6, r0
 80088a8:	460f      	mov	r7, r1
 80088aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ae:	f7f7 fe47 	bl	8000540 <__aeabi_dmul>
 80088b2:	4632      	mov	r2, r6
 80088b4:	463b      	mov	r3, r7
 80088b6:	f7f7 fc8b 	bl	80001d0 <__aeabi_dsub>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4606      	mov	r6, r0
 80088c0:	460f      	mov	r7, r1
 80088c2:	4650      	mov	r0, sl
 80088c4:	4659      	mov	r1, fp
 80088c6:	f7f7 fc83 	bl	80001d0 <__aeabi_dsub>
 80088ca:	9a05      	ldr	r2, [sp, #20]
 80088cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b31      	cmp	r3, #49	; 0x31
 80088d4:	dc06      	bgt.n	80088e4 <__ieee754_rem_pio2+0x26c>
 80088d6:	4602      	mov	r2, r0
 80088d8:	460b      	mov	r3, r1
 80088da:	46d0      	mov	r8, sl
 80088dc:	46d9      	mov	r9, fp
 80088de:	e9c4 2300 	strd	r2, r3, [r4]
 80088e2:	e7a6      	b.n	8008832 <__ieee754_rem_pio2+0x1ba>
 80088e4:	a326      	add	r3, pc, #152	; (adr r3, 8008980 <__ieee754_rem_pio2+0x308>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088ee:	f7f7 fe27 	bl	8000540 <__aeabi_dmul>
 80088f2:	4606      	mov	r6, r0
 80088f4:	460f      	mov	r7, r1
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4650      	mov	r0, sl
 80088fc:	4659      	mov	r1, fp
 80088fe:	f7f7 fc67 	bl	80001d0 <__aeabi_dsub>
 8008902:	4602      	mov	r2, r0
 8008904:	460b      	mov	r3, r1
 8008906:	4680      	mov	r8, r0
 8008908:	4689      	mov	r9, r1
 800890a:	4650      	mov	r0, sl
 800890c:	4659      	mov	r1, fp
 800890e:	f7f7 fc5f 	bl	80001d0 <__aeabi_dsub>
 8008912:	4632      	mov	r2, r6
 8008914:	463b      	mov	r3, r7
 8008916:	f7f7 fc5b 	bl	80001d0 <__aeabi_dsub>
 800891a:	a31b      	add	r3, pc, #108	; (adr r3, 8008988 <__ieee754_rem_pio2+0x310>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	4606      	mov	r6, r0
 8008922:	460f      	mov	r7, r1
 8008924:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008928:	f7f7 fe0a 	bl	8000540 <__aeabi_dmul>
 800892c:	4632      	mov	r2, r6
 800892e:	463b      	mov	r3, r7
 8008930:	f7f7 fc4e 	bl	80001d0 <__aeabi_dsub>
 8008934:	4606      	mov	r6, r0
 8008936:	460f      	mov	r7, r1
 8008938:	e75e      	b.n	80087f8 <__ieee754_rem_pio2+0x180>
 800893a:	4a1b      	ldr	r2, [pc, #108]	; (80089a8 <__ieee754_rem_pio2+0x330>)
 800893c:	4592      	cmp	sl, r2
 800893e:	dd35      	ble.n	80089ac <__ieee754_rem_pio2+0x334>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	f7f7 fc44 	bl	80001d0 <__aeabi_dsub>
 8008948:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800894c:	e9c4 0100 	strd	r0, r1, [r4]
 8008950:	e6a2      	b.n	8008698 <__ieee754_rem_pio2+0x20>
 8008952:	bf00      	nop
 8008954:	f3af 8000 	nop.w
 8008958:	54400000 	.word	0x54400000
 800895c:	3ff921fb 	.word	0x3ff921fb
 8008960:	1a626331 	.word	0x1a626331
 8008964:	3dd0b461 	.word	0x3dd0b461
 8008968:	1a600000 	.word	0x1a600000
 800896c:	3dd0b461 	.word	0x3dd0b461
 8008970:	2e037073 	.word	0x2e037073
 8008974:	3ba3198a 	.word	0x3ba3198a
 8008978:	6dc9c883 	.word	0x6dc9c883
 800897c:	3fe45f30 	.word	0x3fe45f30
 8008980:	2e000000 	.word	0x2e000000
 8008984:	3ba3198a 	.word	0x3ba3198a
 8008988:	252049c1 	.word	0x252049c1
 800898c:	397b839a 	.word	0x397b839a
 8008990:	3fe921fb 	.word	0x3fe921fb
 8008994:	4002d97b 	.word	0x4002d97b
 8008998:	3ff921fb 	.word	0x3ff921fb
 800899c:	413921fb 	.word	0x413921fb
 80089a0:	3fe00000 	.word	0x3fe00000
 80089a4:	08009628 	.word	0x08009628
 80089a8:	7fefffff 	.word	0x7fefffff
 80089ac:	ea4f 552a 	mov.w	r5, sl, asr #20
 80089b0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80089b4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80089b8:	460f      	mov	r7, r1
 80089ba:	4606      	mov	r6, r0
 80089bc:	f7f8 f85a 	bl	8000a74 <__aeabi_d2iz>
 80089c0:	f7f7 fd54 	bl	800046c <__aeabi_i2d>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4630      	mov	r0, r6
 80089ca:	4639      	mov	r1, r7
 80089cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80089d0:	f7f7 fbfe 	bl	80001d0 <__aeabi_dsub>
 80089d4:	2200      	movs	r2, #0
 80089d6:	4b1e      	ldr	r3, [pc, #120]	; (8008a50 <__ieee754_rem_pio2+0x3d8>)
 80089d8:	f7f7 fdb2 	bl	8000540 <__aeabi_dmul>
 80089dc:	460f      	mov	r7, r1
 80089de:	4606      	mov	r6, r0
 80089e0:	f7f8 f848 	bl	8000a74 <__aeabi_d2iz>
 80089e4:	f7f7 fd42 	bl	800046c <__aeabi_i2d>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4630      	mov	r0, r6
 80089ee:	4639      	mov	r1, r7
 80089f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80089f4:	f7f7 fbec 	bl	80001d0 <__aeabi_dsub>
 80089f8:	2200      	movs	r2, #0
 80089fa:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <__ieee754_rem_pio2+0x3d8>)
 80089fc:	f7f7 fda0 	bl	8000540 <__aeabi_dmul>
 8008a00:	f04f 0803 	mov.w	r8, #3
 8008a04:	2600      	movs	r6, #0
 8008a06:	2700      	movs	r7, #0
 8008a08:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008a0c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008a10:	4632      	mov	r2, r6
 8008a12:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008a16:	463b      	mov	r3, r7
 8008a18:	46c2      	mov	sl, r8
 8008a1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a1e:	f7f7 fff7 	bl	8000a10 <__aeabi_dcmpeq>
 8008a22:	2800      	cmp	r0, #0
 8008a24:	d1f4      	bne.n	8008a10 <__ieee754_rem_pio2+0x398>
 8008a26:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <__ieee754_rem_pio2+0x3dc>)
 8008a28:	462a      	mov	r2, r5
 8008a2a:	9301      	str	r3, [sp, #4]
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	4621      	mov	r1, r4
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	a806      	add	r0, sp, #24
 8008a34:	4653      	mov	r3, sl
 8008a36:	f000 f8cd 	bl	8008bd4 <__kernel_rem_pio2>
 8008a3a:	9b04      	ldr	r3, [sp, #16]
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f6bf ae51 	bge.w	80086e6 <__ieee754_rem_pio2+0x6e>
 8008a44:	6863      	ldr	r3, [r4, #4]
 8008a46:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008a4a:	6063      	str	r3, [r4, #4]
 8008a4c:	68e3      	ldr	r3, [r4, #12]
 8008a4e:	e707      	b.n	8008860 <__ieee754_rem_pio2+0x1e8>
 8008a50:	41700000 	.word	0x41700000
 8008a54:	080096a8 	.word	0x080096a8

08008a58 <__kernel_cos>:
 8008a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008a60:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008a64:	4680      	mov	r8, r0
 8008a66:	460f      	mov	r7, r1
 8008a68:	e9cd 2300 	strd	r2, r3, [sp]
 8008a6c:	da04      	bge.n	8008a78 <__kernel_cos+0x20>
 8008a6e:	f7f8 f801 	bl	8000a74 <__aeabi_d2iz>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	f000 8086 	beq.w	8008b84 <__kernel_cos+0x12c>
 8008a78:	4642      	mov	r2, r8
 8008a7a:	463b      	mov	r3, r7
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	4639      	mov	r1, r7
 8008a80:	f7f7 fd5e 	bl	8000540 <__aeabi_dmul>
 8008a84:	2200      	movs	r2, #0
 8008a86:	4b4e      	ldr	r3, [pc, #312]	; (8008bc0 <__kernel_cos+0x168>)
 8008a88:	4604      	mov	r4, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	f7f7 fd58 	bl	8000540 <__aeabi_dmul>
 8008a90:	a33f      	add	r3, pc, #252	; (adr r3, 8008b90 <__kernel_cos+0x138>)
 8008a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a96:	4682      	mov	sl, r0
 8008a98:	468b      	mov	fp, r1
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	f7f7 fd4f 	bl	8000540 <__aeabi_dmul>
 8008aa2:	a33d      	add	r3, pc, #244	; (adr r3, 8008b98 <__kernel_cos+0x140>)
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	f7f7 fb94 	bl	80001d4 <__adddf3>
 8008aac:	4622      	mov	r2, r4
 8008aae:	462b      	mov	r3, r5
 8008ab0:	f7f7 fd46 	bl	8000540 <__aeabi_dmul>
 8008ab4:	a33a      	add	r3, pc, #232	; (adr r3, 8008ba0 <__kernel_cos+0x148>)
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	f7f7 fb89 	bl	80001d0 <__aeabi_dsub>
 8008abe:	4622      	mov	r2, r4
 8008ac0:	462b      	mov	r3, r5
 8008ac2:	f7f7 fd3d 	bl	8000540 <__aeabi_dmul>
 8008ac6:	a338      	add	r3, pc, #224	; (adr r3, 8008ba8 <__kernel_cos+0x150>)
 8008ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008acc:	f7f7 fb82 	bl	80001d4 <__adddf3>
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	462b      	mov	r3, r5
 8008ad4:	f7f7 fd34 	bl	8000540 <__aeabi_dmul>
 8008ad8:	a335      	add	r3, pc, #212	; (adr r3, 8008bb0 <__kernel_cos+0x158>)
 8008ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ade:	f7f7 fb77 	bl	80001d0 <__aeabi_dsub>
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	462b      	mov	r3, r5
 8008ae6:	f7f7 fd2b 	bl	8000540 <__aeabi_dmul>
 8008aea:	a333      	add	r3, pc, #204	; (adr r3, 8008bb8 <__kernel_cos+0x160>)
 8008aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af0:	f7f7 fb70 	bl	80001d4 <__adddf3>
 8008af4:	4622      	mov	r2, r4
 8008af6:	462b      	mov	r3, r5
 8008af8:	f7f7 fd22 	bl	8000540 <__aeabi_dmul>
 8008afc:	4622      	mov	r2, r4
 8008afe:	462b      	mov	r3, r5
 8008b00:	f7f7 fd1e 	bl	8000540 <__aeabi_dmul>
 8008b04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b08:	4604      	mov	r4, r0
 8008b0a:	460d      	mov	r5, r1
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	4639      	mov	r1, r7
 8008b10:	f7f7 fd16 	bl	8000540 <__aeabi_dmul>
 8008b14:	460b      	mov	r3, r1
 8008b16:	4602      	mov	r2, r0
 8008b18:	4629      	mov	r1, r5
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f7f7 fb58 	bl	80001d0 <__aeabi_dsub>
 8008b20:	4b28      	ldr	r3, [pc, #160]	; (8008bc4 <__kernel_cos+0x16c>)
 8008b22:	4680      	mov	r8, r0
 8008b24:	429e      	cmp	r6, r3
 8008b26:	4689      	mov	r9, r1
 8008b28:	dc0e      	bgt.n	8008b48 <__kernel_cos+0xf0>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4650      	mov	r0, sl
 8008b30:	4659      	mov	r1, fp
 8008b32:	f7f7 fb4d 	bl	80001d0 <__aeabi_dsub>
 8008b36:	4602      	mov	r2, r0
 8008b38:	2000      	movs	r0, #0
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	4922      	ldr	r1, [pc, #136]	; (8008bc8 <__kernel_cos+0x170>)
 8008b3e:	f7f7 fb47 	bl	80001d0 <__aeabi_dsub>
 8008b42:	b003      	add	sp, #12
 8008b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b48:	2400      	movs	r4, #0
 8008b4a:	4b20      	ldr	r3, [pc, #128]	; (8008bcc <__kernel_cos+0x174>)
 8008b4c:	4622      	mov	r2, r4
 8008b4e:	429e      	cmp	r6, r3
 8008b50:	bfcc      	ite	gt
 8008b52:	4d1f      	ldrgt	r5, [pc, #124]	; (8008bd0 <__kernel_cos+0x178>)
 8008b54:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008b58:	462b      	mov	r3, r5
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	491a      	ldr	r1, [pc, #104]	; (8008bc8 <__kernel_cos+0x170>)
 8008b5e:	f7f7 fb37 	bl	80001d0 <__aeabi_dsub>
 8008b62:	4622      	mov	r2, r4
 8008b64:	4606      	mov	r6, r0
 8008b66:	460f      	mov	r7, r1
 8008b68:	462b      	mov	r3, r5
 8008b6a:	4650      	mov	r0, sl
 8008b6c:	4659      	mov	r1, fp
 8008b6e:	f7f7 fb2f 	bl	80001d0 <__aeabi_dsub>
 8008b72:	4642      	mov	r2, r8
 8008b74:	464b      	mov	r3, r9
 8008b76:	f7f7 fb2b 	bl	80001d0 <__aeabi_dsub>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	4630      	mov	r0, r6
 8008b80:	4639      	mov	r1, r7
 8008b82:	e7dc      	b.n	8008b3e <__kernel_cos+0xe6>
 8008b84:	2000      	movs	r0, #0
 8008b86:	4910      	ldr	r1, [pc, #64]	; (8008bc8 <__kernel_cos+0x170>)
 8008b88:	e7db      	b.n	8008b42 <__kernel_cos+0xea>
 8008b8a:	bf00      	nop
 8008b8c:	f3af 8000 	nop.w
 8008b90:	be8838d4 	.word	0xbe8838d4
 8008b94:	bda8fae9 	.word	0xbda8fae9
 8008b98:	bdb4b1c4 	.word	0xbdb4b1c4
 8008b9c:	3e21ee9e 	.word	0x3e21ee9e
 8008ba0:	809c52ad 	.word	0x809c52ad
 8008ba4:	3e927e4f 	.word	0x3e927e4f
 8008ba8:	19cb1590 	.word	0x19cb1590
 8008bac:	3efa01a0 	.word	0x3efa01a0
 8008bb0:	16c15177 	.word	0x16c15177
 8008bb4:	3f56c16c 	.word	0x3f56c16c
 8008bb8:	5555554c 	.word	0x5555554c
 8008bbc:	3fa55555 	.word	0x3fa55555
 8008bc0:	3fe00000 	.word	0x3fe00000
 8008bc4:	3fd33332 	.word	0x3fd33332
 8008bc8:	3ff00000 	.word	0x3ff00000
 8008bcc:	3fe90000 	.word	0x3fe90000
 8008bd0:	3fd20000 	.word	0x3fd20000

08008bd4 <__kernel_rem_pio2>:
 8008bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008bdc:	9308      	str	r3, [sp, #32]
 8008bde:	9101      	str	r1, [sp, #4]
 8008be0:	4bc0      	ldr	r3, [pc, #768]	; (8008ee4 <__kernel_rem_pio2+0x310>)
 8008be2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008be4:	f112 0f14 	cmn.w	r2, #20
 8008be8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bec:	bfa8      	it	ge
 8008bee:	1ed4      	subge	r4, r2, #3
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	9b08      	ldr	r3, [sp, #32]
 8008bf4:	bfb8      	it	lt
 8008bf6:	2400      	movlt	r4, #0
 8008bf8:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bfc:	9306      	str	r3, [sp, #24]
 8008bfe:	bfa4      	itt	ge
 8008c00:	2318      	movge	r3, #24
 8008c02:	fb94 f4f3 	sdivge	r4, r4, r3
 8008c06:	f06f 0317 	mvn.w	r3, #23
 8008c0a:	fb04 3303 	mla	r3, r4, r3, r3
 8008c0e:	eb03 0a02 	add.w	sl, r3, r2
 8008c12:	9a06      	ldr	r2, [sp, #24]
 8008c14:	9b04      	ldr	r3, [sp, #16]
 8008c16:	1aa7      	subs	r7, r4, r2
 8008c18:	eb03 0802 	add.w	r8, r3, r2
 8008c1c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008c1e:	2500      	movs	r5, #0
 8008c20:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008c24:	2200      	movs	r2, #0
 8008c26:	2300      	movs	r3, #0
 8008c28:	9009      	str	r0, [sp, #36]	; 0x24
 8008c2a:	ae20      	add	r6, sp, #128	; 0x80
 8008c2c:	4545      	cmp	r5, r8
 8008c2e:	dd19      	ble.n	8008c64 <__kernel_rem_pio2+0x90>
 8008c30:	9b08      	ldr	r3, [sp, #32]
 8008c32:	aa20      	add	r2, sp, #128	; 0x80
 8008c34:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008c38:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008c3c:	f1c3 0301 	rsb	r3, r3, #1
 8008c40:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8008c44:	9307      	str	r3, [sp, #28]
 8008c46:	9b07      	ldr	r3, [sp, #28]
 8008c48:	9a04      	ldr	r2, [sp, #16]
 8008c4a:	4443      	add	r3, r8
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	db35      	blt.n	8008cbc <__kernel_rem_pio2+0xe8>
 8008c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c52:	2200      	movs	r2, #0
 8008c54:	f1a3 0908 	sub.w	r9, r3, #8
 8008c58:	2300      	movs	r3, #0
 8008c5a:	462f      	mov	r7, r5
 8008c5c:	2600      	movs	r6, #0
 8008c5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c62:	e01f      	b.n	8008ca4 <__kernel_rem_pio2+0xd0>
 8008c64:	42ef      	cmn	r7, r5
 8008c66:	d40b      	bmi.n	8008c80 <__kernel_rem_pio2+0xac>
 8008c68:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008c6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c70:	f7f7 fbfc 	bl	800046c <__aeabi_i2d>
 8008c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c78:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008c7c:	3501      	adds	r5, #1
 8008c7e:	e7d5      	b.n	8008c2c <__kernel_rem_pio2+0x58>
 8008c80:	4610      	mov	r0, r2
 8008c82:	4619      	mov	r1, r3
 8008c84:	e7f8      	b.n	8008c78 <__kernel_rem_pio2+0xa4>
 8008c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c8a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008c8e:	f7f7 fc57 	bl	8000540 <__aeabi_dmul>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c9a:	f7f7 fa9b 	bl	80001d4 <__adddf3>
 8008c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ca2:	3601      	adds	r6, #1
 8008ca4:	9b06      	ldr	r3, [sp, #24]
 8008ca6:	3f08      	subs	r7, #8
 8008ca8:	429e      	cmp	r6, r3
 8008caa:	ddec      	ble.n	8008c86 <__kernel_rem_pio2+0xb2>
 8008cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cb0:	3508      	adds	r5, #8
 8008cb2:	e8eb 2302 	strd	r2, r3, [fp], #8
 8008cb6:	f108 0801 	add.w	r8, r8, #1
 8008cba:	e7c4      	b.n	8008c46 <__kernel_rem_pio2+0x72>
 8008cbc:	9b04      	ldr	r3, [sp, #16]
 8008cbe:	aa0c      	add	r2, sp, #48	; 0x30
 8008cc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cc6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008cc8:	9f04      	ldr	r7, [sp, #16]
 8008cca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008cce:	930a      	str	r3, [sp, #40]	; 0x28
 8008cd0:	463e      	mov	r6, r7
 8008cd2:	ab98      	add	r3, sp, #608	; 0x260
 8008cd4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008cd8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008cdc:	f8cd b008 	str.w	fp, [sp, #8]
 8008ce0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8008ce4:	2e00      	cmp	r6, #0
 8008ce6:	dc71      	bgt.n	8008dcc <__kernel_rem_pio2+0x1f8>
 8008ce8:	4652      	mov	r2, sl
 8008cea:	4620      	mov	r0, r4
 8008cec:	4629      	mov	r1, r5
 8008cee:	f000 fbf7 	bl	80094e0 <scalbn>
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	f7f7 fc20 	bl	8000540 <__aeabi_dmul>
 8008d00:	f000 fb6e 	bl	80093e0 <floor>
 8008d04:	2200      	movs	r2, #0
 8008d06:	4b78      	ldr	r3, [pc, #480]	; (8008ee8 <__kernel_rem_pio2+0x314>)
 8008d08:	f7f7 fc1a 	bl	8000540 <__aeabi_dmul>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4620      	mov	r0, r4
 8008d12:	4629      	mov	r1, r5
 8008d14:	f7f7 fa5c 	bl	80001d0 <__aeabi_dsub>
 8008d18:	460d      	mov	r5, r1
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	f7f7 feaa 	bl	8000a74 <__aeabi_d2iz>
 8008d20:	9007      	str	r0, [sp, #28]
 8008d22:	f7f7 fba3 	bl	800046c <__aeabi_i2d>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	f7f7 fa4f 	bl	80001d0 <__aeabi_dsub>
 8008d32:	f1ba 0f00 	cmp.w	sl, #0
 8008d36:	4680      	mov	r8, r0
 8008d38:	4689      	mov	r9, r1
 8008d3a:	dd70      	ble.n	8008e1e <__kernel_rem_pio2+0x24a>
 8008d3c:	1e7a      	subs	r2, r7, #1
 8008d3e:	ab0c      	add	r3, sp, #48	; 0x30
 8008d40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008d44:	9c07      	ldr	r4, [sp, #28]
 8008d46:	f1ca 0118 	rsb	r1, sl, #24
 8008d4a:	fa40 f301 	asr.w	r3, r0, r1
 8008d4e:	441c      	add	r4, r3
 8008d50:	408b      	lsls	r3, r1
 8008d52:	1ac0      	subs	r0, r0, r3
 8008d54:	ab0c      	add	r3, sp, #48	; 0x30
 8008d56:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008d5a:	f1ca 0317 	rsb	r3, sl, #23
 8008d5e:	9407      	str	r4, [sp, #28]
 8008d60:	fa40 f303 	asr.w	r3, r0, r3
 8008d64:	9302      	str	r3, [sp, #8]
 8008d66:	9b02      	ldr	r3, [sp, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dd66      	ble.n	8008e3a <__kernel_rem_pio2+0x266>
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008d72:	4614      	mov	r4, r2
 8008d74:	9b07      	ldr	r3, [sp, #28]
 8008d76:	3301      	adds	r3, #1
 8008d78:	9307      	str	r3, [sp, #28]
 8008d7a:	4297      	cmp	r7, r2
 8008d7c:	f300 809f 	bgt.w	8008ebe <__kernel_rem_pio2+0x2ea>
 8008d80:	f1ba 0f00 	cmp.w	sl, #0
 8008d84:	dd07      	ble.n	8008d96 <__kernel_rem_pio2+0x1c2>
 8008d86:	f1ba 0f01 	cmp.w	sl, #1
 8008d8a:	f000 80b9 	beq.w	8008f00 <__kernel_rem_pio2+0x32c>
 8008d8e:	f1ba 0f02 	cmp.w	sl, #2
 8008d92:	f000 80bf 	beq.w	8008f14 <__kernel_rem_pio2+0x340>
 8008d96:	9b02      	ldr	r3, [sp, #8]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d14e      	bne.n	8008e3a <__kernel_rem_pio2+0x266>
 8008d9c:	4642      	mov	r2, r8
 8008d9e:	464b      	mov	r3, r9
 8008da0:	2000      	movs	r0, #0
 8008da2:	4952      	ldr	r1, [pc, #328]	; (8008eec <__kernel_rem_pio2+0x318>)
 8008da4:	f7f7 fa14 	bl	80001d0 <__aeabi_dsub>
 8008da8:	4680      	mov	r8, r0
 8008daa:	4689      	mov	r9, r1
 8008dac:	2c00      	cmp	r4, #0
 8008dae:	d044      	beq.n	8008e3a <__kernel_rem_pio2+0x266>
 8008db0:	4652      	mov	r2, sl
 8008db2:	2000      	movs	r0, #0
 8008db4:	494d      	ldr	r1, [pc, #308]	; (8008eec <__kernel_rem_pio2+0x318>)
 8008db6:	f000 fb93 	bl	80094e0 <scalbn>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	f7f7 fa05 	bl	80001d0 <__aeabi_dsub>
 8008dc6:	4680      	mov	r8, r0
 8008dc8:	4689      	mov	r9, r1
 8008dca:	e036      	b.n	8008e3a <__kernel_rem_pio2+0x266>
 8008dcc:	2200      	movs	r2, #0
 8008dce:	4b48      	ldr	r3, [pc, #288]	; (8008ef0 <__kernel_rem_pio2+0x31c>)
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	f7f7 fbb4 	bl	8000540 <__aeabi_dmul>
 8008dd8:	f7f7 fe4c 	bl	8000a74 <__aeabi_d2iz>
 8008ddc:	f7f7 fb46 	bl	800046c <__aeabi_i2d>
 8008de0:	2200      	movs	r2, #0
 8008de2:	4b44      	ldr	r3, [pc, #272]	; (8008ef4 <__kernel_rem_pio2+0x320>)
 8008de4:	4680      	mov	r8, r0
 8008de6:	4689      	mov	r9, r1
 8008de8:	f7f7 fbaa 	bl	8000540 <__aeabi_dmul>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4620      	mov	r0, r4
 8008df2:	4629      	mov	r1, r5
 8008df4:	f7f7 f9ec 	bl	80001d0 <__aeabi_dsub>
 8008df8:	f7f7 fe3c 	bl	8000a74 <__aeabi_d2iz>
 8008dfc:	9b02      	ldr	r3, [sp, #8]
 8008dfe:	3e01      	subs	r6, #1
 8008e00:	f843 0b04 	str.w	r0, [r3], #4
 8008e04:	9302      	str	r3, [sp, #8]
 8008e06:	ab70      	add	r3, sp, #448	; 0x1c0
 8008e08:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008e0c:	4640      	mov	r0, r8
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	4649      	mov	r1, r9
 8008e14:	f7f7 f9de 	bl	80001d4 <__adddf3>
 8008e18:	4604      	mov	r4, r0
 8008e1a:	460d      	mov	r5, r1
 8008e1c:	e762      	b.n	8008ce4 <__kernel_rem_pio2+0x110>
 8008e1e:	d105      	bne.n	8008e2c <__kernel_rem_pio2+0x258>
 8008e20:	1e7b      	subs	r3, r7, #1
 8008e22:	aa0c      	add	r2, sp, #48	; 0x30
 8008e24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008e28:	15c3      	asrs	r3, r0, #23
 8008e2a:	e79b      	b.n	8008d64 <__kernel_rem_pio2+0x190>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4b32      	ldr	r3, [pc, #200]	; (8008ef8 <__kernel_rem_pio2+0x324>)
 8008e30:	f7f7 fe0c 	bl	8000a4c <__aeabi_dcmpge>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d13f      	bne.n	8008eb8 <__kernel_rem_pio2+0x2e4>
 8008e38:	9002      	str	r0, [sp, #8]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4640      	mov	r0, r8
 8008e40:	4649      	mov	r1, r9
 8008e42:	f7f7 fde5 	bl	8000a10 <__aeabi_dcmpeq>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	f000 80b5 	beq.w	8008fb6 <__kernel_rem_pio2+0x3e2>
 8008e4c:	1e7c      	subs	r4, r7, #1
 8008e4e:	4623      	mov	r3, r4
 8008e50:	2200      	movs	r2, #0
 8008e52:	9904      	ldr	r1, [sp, #16]
 8008e54:	428b      	cmp	r3, r1
 8008e56:	da64      	bge.n	8008f22 <__kernel_rem_pio2+0x34e>
 8008e58:	2a00      	cmp	r2, #0
 8008e5a:	d078      	beq.n	8008f4e <__kernel_rem_pio2+0x37a>
 8008e5c:	ab0c      	add	r3, sp, #48	; 0x30
 8008e5e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008e62:	f1aa 0a18 	sub.w	sl, sl, #24
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f000 80a3 	beq.w	8008fb2 <__kernel_rem_pio2+0x3de>
 8008e6c:	4652      	mov	r2, sl
 8008e6e:	2000      	movs	r0, #0
 8008e70:	491e      	ldr	r1, [pc, #120]	; (8008eec <__kernel_rem_pio2+0x318>)
 8008e72:	f000 fb35 	bl	80094e0 <scalbn>
 8008e76:	46a2      	mov	sl, r4
 8008e78:	4606      	mov	r6, r0
 8008e7a:	460f      	mov	r7, r1
 8008e7c:	f04f 0800 	mov.w	r8, #0
 8008e80:	00e3      	lsls	r3, r4, #3
 8008e82:	9306      	str	r3, [sp, #24]
 8008e84:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8008ef0 <__kernel_rem_pio2+0x31c>
 8008e88:	ab70      	add	r3, sp, #448	; 0x1c0
 8008e8a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008e8e:	f1ba 0f00 	cmp.w	sl, #0
 8008e92:	f280 80c6 	bge.w	8009022 <__kernel_rem_pio2+0x44e>
 8008e96:	4627      	mov	r7, r4
 8008e98:	f04f 0800 	mov.w	r8, #0
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	f2c0 80f3 	blt.w	8009088 <__kernel_rem_pio2+0x4b4>
 8008ea2:	4b16      	ldr	r3, [pc, #88]	; (8008efc <__kernel_rem_pio2+0x328>)
 8008ea4:	f04f 0a00 	mov.w	sl, #0
 8008ea8:	461d      	mov	r5, r3
 8008eaa:	ab70      	add	r3, sp, #448	; 0x1c0
 8008eac:	f04f 0b00 	mov.w	fp, #0
 8008eb0:	2600      	movs	r6, #0
 8008eb2:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8008eb6:	e0d9      	b.n	800906c <__kernel_rem_pio2+0x498>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	9302      	str	r3, [sp, #8]
 8008ebc:	e756      	b.n	8008d6c <__kernel_rem_pio2+0x198>
 8008ebe:	f8db 3000 	ldr.w	r3, [fp]
 8008ec2:	b954      	cbnz	r4, 8008eda <__kernel_rem_pio2+0x306>
 8008ec4:	b123      	cbz	r3, 8008ed0 <__kernel_rem_pio2+0x2fc>
 8008ec6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008eca:	f8cb 3000 	str.w	r3, [fp]
 8008ece:	2301      	movs	r3, #1
 8008ed0:	461c      	mov	r4, r3
 8008ed2:	3201      	adds	r2, #1
 8008ed4:	f10b 0b04 	add.w	fp, fp, #4
 8008ed8:	e74f      	b.n	8008d7a <__kernel_rem_pio2+0x1a6>
 8008eda:	1acb      	subs	r3, r1, r3
 8008edc:	f8cb 3000 	str.w	r3, [fp]
 8008ee0:	4623      	mov	r3, r4
 8008ee2:	e7f5      	b.n	8008ed0 <__kernel_rem_pio2+0x2fc>
 8008ee4:	080097f0 	.word	0x080097f0
 8008ee8:	40200000 	.word	0x40200000
 8008eec:	3ff00000 	.word	0x3ff00000
 8008ef0:	3e700000 	.word	0x3e700000
 8008ef4:	41700000 	.word	0x41700000
 8008ef8:	3fe00000 	.word	0x3fe00000
 8008efc:	080097b0 	.word	0x080097b0
 8008f00:	1e7a      	subs	r2, r7, #1
 8008f02:	ab0c      	add	r3, sp, #48	; 0x30
 8008f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f08:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008f0c:	a90c      	add	r1, sp, #48	; 0x30
 8008f0e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008f12:	e740      	b.n	8008d96 <__kernel_rem_pio2+0x1c2>
 8008f14:	1e7a      	subs	r2, r7, #1
 8008f16:	ab0c      	add	r3, sp, #48	; 0x30
 8008f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008f20:	e7f4      	b.n	8008f0c <__kernel_rem_pio2+0x338>
 8008f22:	a90c      	add	r1, sp, #48	; 0x30
 8008f24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	e791      	b.n	8008e52 <__kernel_rem_pio2+0x27e>
 8008f2e:	3401      	adds	r4, #1
 8008f30:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008f34:	2a00      	cmp	r2, #0
 8008f36:	d0fa      	beq.n	8008f2e <__kernel_rem_pio2+0x35a>
 8008f38:	9b08      	ldr	r3, [sp, #32]
 8008f3a:	1c7e      	adds	r6, r7, #1
 8008f3c:	18fd      	adds	r5, r7, r3
 8008f3e:	ab20      	add	r3, sp, #128	; 0x80
 8008f40:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008f44:	443c      	add	r4, r7
 8008f46:	42b4      	cmp	r4, r6
 8008f48:	da04      	bge.n	8008f54 <__kernel_rem_pio2+0x380>
 8008f4a:	4627      	mov	r7, r4
 8008f4c:	e6c0      	b.n	8008cd0 <__kernel_rem_pio2+0xfc>
 8008f4e:	2401      	movs	r4, #1
 8008f50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f52:	e7ed      	b.n	8008f30 <__kernel_rem_pio2+0x35c>
 8008f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f56:	462f      	mov	r7, r5
 8008f58:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008f5c:	f7f7 fa86 	bl	800046c <__aeabi_i2d>
 8008f60:	f04f 0b00 	mov.w	fp, #0
 8008f64:	f04f 0800 	mov.w	r8, #0
 8008f68:	f04f 0900 	mov.w	r9, #0
 8008f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f6e:	e8e7 0102 	strd	r0, r1, [r7], #8
 8008f72:	3b08      	subs	r3, #8
 8008f74:	9302      	str	r3, [sp, #8]
 8008f76:	9b06      	ldr	r3, [sp, #24]
 8008f78:	459b      	cmp	fp, r3
 8008f7a:	dd07      	ble.n	8008f8c <__kernel_rem_pio2+0x3b8>
 8008f7c:	ab70      	add	r3, sp, #448	; 0x1c0
 8008f7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008f82:	463d      	mov	r5, r7
 8008f84:	e9c3 8900 	strd	r8, r9, [r3]
 8008f88:	3601      	adds	r6, #1
 8008f8a:	e7dc      	b.n	8008f46 <__kernel_rem_pio2+0x372>
 8008f8c:	9902      	ldr	r1, [sp, #8]
 8008f8e:	f10b 0b01 	add.w	fp, fp, #1
 8008f92:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8008f96:	9102      	str	r1, [sp, #8]
 8008f98:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8008f9c:	f7f7 fad0 	bl	8000540 <__aeabi_dmul>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4640      	mov	r0, r8
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	f7f7 f914 	bl	80001d4 <__adddf3>
 8008fac:	4680      	mov	r8, r0
 8008fae:	4689      	mov	r9, r1
 8008fb0:	e7e1      	b.n	8008f76 <__kernel_rem_pio2+0x3a2>
 8008fb2:	3c01      	subs	r4, #1
 8008fb4:	e752      	b.n	8008e5c <__kernel_rem_pio2+0x288>
 8008fb6:	f1ca 0200 	rsb	r2, sl, #0
 8008fba:	4640      	mov	r0, r8
 8008fbc:	4649      	mov	r1, r9
 8008fbe:	f000 fa8f 	bl	80094e0 <scalbn>
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	4ba5      	ldr	r3, [pc, #660]	; (800925c <__kernel_rem_pio2+0x688>)
 8008fc6:	4604      	mov	r4, r0
 8008fc8:	460d      	mov	r5, r1
 8008fca:	f7f7 fd3f 	bl	8000a4c <__aeabi_dcmpge>
 8008fce:	b1f8      	cbz	r0, 8009010 <__kernel_rem_pio2+0x43c>
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	4ba3      	ldr	r3, [pc, #652]	; (8009260 <__kernel_rem_pio2+0x68c>)
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f7f7 fab2 	bl	8000540 <__aeabi_dmul>
 8008fdc:	f7f7 fd4a 	bl	8000a74 <__aeabi_d2iz>
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	f7f7 fa43 	bl	800046c <__aeabi_i2d>
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	4b9c      	ldr	r3, [pc, #624]	; (800925c <__kernel_rem_pio2+0x688>)
 8008fea:	f7f7 faa9 	bl	8000540 <__aeabi_dmul>
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	4629      	mov	r1, r5
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f7f7 f8eb 	bl	80001d0 <__aeabi_dsub>
 8008ffa:	f7f7 fd3b 	bl	8000a74 <__aeabi_d2iz>
 8008ffe:	1c7c      	adds	r4, r7, #1
 8009000:	ab0c      	add	r3, sp, #48	; 0x30
 8009002:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009006:	f10a 0a18 	add.w	sl, sl, #24
 800900a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800900e:	e72d      	b.n	8008e6c <__kernel_rem_pio2+0x298>
 8009010:	4620      	mov	r0, r4
 8009012:	4629      	mov	r1, r5
 8009014:	f7f7 fd2e 	bl	8000a74 <__aeabi_d2iz>
 8009018:	ab0c      	add	r3, sp, #48	; 0x30
 800901a:	463c      	mov	r4, r7
 800901c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8009020:	e724      	b.n	8008e6c <__kernel_rem_pio2+0x298>
 8009022:	ab0c      	add	r3, sp, #48	; 0x30
 8009024:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009028:	f7f7 fa20 	bl	800046c <__aeabi_i2d>
 800902c:	4632      	mov	r2, r6
 800902e:	463b      	mov	r3, r7
 8009030:	f7f7 fa86 	bl	8000540 <__aeabi_dmul>
 8009034:	4642      	mov	r2, r8
 8009036:	e86b 0102 	strd	r0, r1, [fp], #-8
 800903a:	464b      	mov	r3, r9
 800903c:	4630      	mov	r0, r6
 800903e:	4639      	mov	r1, r7
 8009040:	f7f7 fa7e 	bl	8000540 <__aeabi_dmul>
 8009044:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009048:	4606      	mov	r6, r0
 800904a:	460f      	mov	r7, r1
 800904c:	e71f      	b.n	8008e8e <__kernel_rem_pio2+0x2ba>
 800904e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009052:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009056:	f7f7 fa73 	bl	8000540 <__aeabi_dmul>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4650      	mov	r0, sl
 8009060:	4659      	mov	r1, fp
 8009062:	f7f7 f8b7 	bl	80001d4 <__adddf3>
 8009066:	4682      	mov	sl, r0
 8009068:	468b      	mov	fp, r1
 800906a:	3601      	adds	r6, #1
 800906c:	9b04      	ldr	r3, [sp, #16]
 800906e:	429e      	cmp	r6, r3
 8009070:	dc01      	bgt.n	8009076 <__kernel_rem_pio2+0x4a2>
 8009072:	45b0      	cmp	r8, r6
 8009074:	daeb      	bge.n	800904e <__kernel_rem_pio2+0x47a>
 8009076:	ab48      	add	r3, sp, #288	; 0x120
 8009078:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800907c:	e9c3 ab00 	strd	sl, fp, [r3]
 8009080:	3f01      	subs	r7, #1
 8009082:	f108 0801 	add.w	r8, r8, #1
 8009086:	e709      	b.n	8008e9c <__kernel_rem_pio2+0x2c8>
 8009088:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800908a:	2b02      	cmp	r3, #2
 800908c:	dc09      	bgt.n	80090a2 <__kernel_rem_pio2+0x4ce>
 800908e:	2b00      	cmp	r3, #0
 8009090:	dc34      	bgt.n	80090fc <__kernel_rem_pio2+0x528>
 8009092:	d05e      	beq.n	8009152 <__kernel_rem_pio2+0x57e>
 8009094:	9b07      	ldr	r3, [sp, #28]
 8009096:	f003 0007 	and.w	r0, r3, #7
 800909a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800909e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80090a4:	2b03      	cmp	r3, #3
 80090a6:	d1f5      	bne.n	8009094 <__kernel_rem_pio2+0x4c0>
 80090a8:	9a06      	ldr	r2, [sp, #24]
 80090aa:	ab48      	add	r3, sp, #288	; 0x120
 80090ac:	441a      	add	r2, r3
 80090ae:	4615      	mov	r5, r2
 80090b0:	4692      	mov	sl, r2
 80090b2:	46a3      	mov	fp, r4
 80090b4:	f1bb 0f00 	cmp.w	fp, #0
 80090b8:	dc7a      	bgt.n	80091b0 <__kernel_rem_pio2+0x5dc>
 80090ba:	46aa      	mov	sl, r5
 80090bc:	46a3      	mov	fp, r4
 80090be:	f1bb 0f01 	cmp.w	fp, #1
 80090c2:	f300 8094 	bgt.w	80091ee <__kernel_rem_pio2+0x61a>
 80090c6:	2700      	movs	r7, #0
 80090c8:	463e      	mov	r6, r7
 80090ca:	2c01      	cmp	r4, #1
 80090cc:	f300 80ae 	bgt.w	800922c <__kernel_rem_pio2+0x658>
 80090d0:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80090d4:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80090d8:	9b02      	ldr	r3, [sp, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f040 80b0 	bne.w	8009240 <__kernel_rem_pio2+0x66c>
 80090e0:	4603      	mov	r3, r0
 80090e2:	462a      	mov	r2, r5
 80090e4:	9801      	ldr	r0, [sp, #4]
 80090e6:	e9c0 2300 	strd	r2, r3, [r0]
 80090ea:	4622      	mov	r2, r4
 80090ec:	460b      	mov	r3, r1
 80090ee:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80090f2:	463a      	mov	r2, r7
 80090f4:	4633      	mov	r3, r6
 80090f6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80090fa:	e7cb      	b.n	8009094 <__kernel_rem_pio2+0x4c0>
 80090fc:	2000      	movs	r0, #0
 80090fe:	9a06      	ldr	r2, [sp, #24]
 8009100:	ab48      	add	r3, sp, #288	; 0x120
 8009102:	441a      	add	r2, r3
 8009104:	4615      	mov	r5, r2
 8009106:	46a0      	mov	r8, r4
 8009108:	4601      	mov	r1, r0
 800910a:	f1b8 0f00 	cmp.w	r8, #0
 800910e:	da3c      	bge.n	800918a <__kernel_rem_pio2+0x5b6>
 8009110:	9b02      	ldr	r3, [sp, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d040      	beq.n	8009198 <__kernel_rem_pio2+0x5c4>
 8009116:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800911a:	4602      	mov	r2, r0
 800911c:	462b      	mov	r3, r5
 800911e:	9d01      	ldr	r5, [sp, #4]
 8009120:	2601      	movs	r6, #1
 8009122:	e9c5 2300 	strd	r2, r3, [r5]
 8009126:	460b      	mov	r3, r1
 8009128:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800912c:	f7f7 f850 	bl	80001d0 <__aeabi_dsub>
 8009130:	4684      	mov	ip, r0
 8009132:	460f      	mov	r7, r1
 8009134:	ad48      	add	r5, sp, #288	; 0x120
 8009136:	42b4      	cmp	r4, r6
 8009138:	f105 0508 	add.w	r5, r5, #8
 800913c:	da2e      	bge.n	800919c <__kernel_rem_pio2+0x5c8>
 800913e:	9b02      	ldr	r3, [sp, #8]
 8009140:	b10b      	cbz	r3, 8009146 <__kernel_rem_pio2+0x572>
 8009142:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009146:	4662      	mov	r2, ip
 8009148:	463b      	mov	r3, r7
 800914a:	9901      	ldr	r1, [sp, #4]
 800914c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009150:	e7a0      	b.n	8009094 <__kernel_rem_pio2+0x4c0>
 8009152:	9a06      	ldr	r2, [sp, #24]
 8009154:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8009156:	ab48      	add	r3, sp, #288	; 0x120
 8009158:	441a      	add	r2, r3
 800915a:	4615      	mov	r5, r2
 800915c:	4637      	mov	r7, r6
 800915e:	2c00      	cmp	r4, #0
 8009160:	da09      	bge.n	8009176 <__kernel_rem_pio2+0x5a2>
 8009162:	9b02      	ldr	r3, [sp, #8]
 8009164:	b10b      	cbz	r3, 800916a <__kernel_rem_pio2+0x596>
 8009166:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800916a:	4632      	mov	r2, r6
 800916c:	463b      	mov	r3, r7
 800916e:	9901      	ldr	r1, [sp, #4]
 8009170:	e9c1 2300 	strd	r2, r3, [r1]
 8009174:	e78e      	b.n	8009094 <__kernel_rem_pio2+0x4c0>
 8009176:	4630      	mov	r0, r6
 8009178:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800917c:	4639      	mov	r1, r7
 800917e:	f7f7 f829 	bl	80001d4 <__adddf3>
 8009182:	3c01      	subs	r4, #1
 8009184:	4606      	mov	r6, r0
 8009186:	460f      	mov	r7, r1
 8009188:	e7e9      	b.n	800915e <__kernel_rem_pio2+0x58a>
 800918a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800918e:	f7f7 f821 	bl	80001d4 <__adddf3>
 8009192:	f108 38ff 	add.w	r8, r8, #4294967295
 8009196:	e7b8      	b.n	800910a <__kernel_rem_pio2+0x536>
 8009198:	460d      	mov	r5, r1
 800919a:	e7be      	b.n	800911a <__kernel_rem_pio2+0x546>
 800919c:	4660      	mov	r0, ip
 800919e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80091a2:	4639      	mov	r1, r7
 80091a4:	f7f7 f816 	bl	80001d4 <__adddf3>
 80091a8:	3601      	adds	r6, #1
 80091aa:	4684      	mov	ip, r0
 80091ac:	460f      	mov	r7, r1
 80091ae:	e7c2      	b.n	8009136 <__kernel_rem_pio2+0x562>
 80091b0:	e9da 6700 	ldrd	r6, r7, [sl]
 80091b4:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80091b8:	4632      	mov	r2, r6
 80091ba:	463b      	mov	r3, r7
 80091bc:	4640      	mov	r0, r8
 80091be:	4649      	mov	r1, r9
 80091c0:	f7f7 f808 	bl	80001d4 <__adddf3>
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	f7f6 fffe 	bl	80001d0 <__aeabi_dsub>
 80091d4:	4632      	mov	r2, r6
 80091d6:	463b      	mov	r3, r7
 80091d8:	f7f6 fffc 	bl	80001d4 <__adddf3>
 80091dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091e0:	e86a 0102 	strd	r0, r1, [sl], #-8
 80091e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091e8:	e9ca 2300 	strd	r2, r3, [sl]
 80091ec:	e762      	b.n	80090b4 <__kernel_rem_pio2+0x4e0>
 80091ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80091f2:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80091f6:	4642      	mov	r2, r8
 80091f8:	464b      	mov	r3, r9
 80091fa:	4630      	mov	r0, r6
 80091fc:	4639      	mov	r1, r7
 80091fe:	f7f6 ffe9 	bl	80001d4 <__adddf3>
 8009202:	4602      	mov	r2, r0
 8009204:	460b      	mov	r3, r1
 8009206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800920a:	4630      	mov	r0, r6
 800920c:	4639      	mov	r1, r7
 800920e:	f7f6 ffdf 	bl	80001d0 <__aeabi_dsub>
 8009212:	4642      	mov	r2, r8
 8009214:	464b      	mov	r3, r9
 8009216:	f7f6 ffdd 	bl	80001d4 <__adddf3>
 800921a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800921e:	e86a 0102 	strd	r0, r1, [sl], #-8
 8009222:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009226:	e9ca 2300 	strd	r2, r3, [sl]
 800922a:	e748      	b.n	80090be <__kernel_rem_pio2+0x4ea>
 800922c:	4638      	mov	r0, r7
 800922e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8009232:	4631      	mov	r1, r6
 8009234:	f7f6 ffce 	bl	80001d4 <__adddf3>
 8009238:	3c01      	subs	r4, #1
 800923a:	4607      	mov	r7, r0
 800923c:	460e      	mov	r6, r1
 800923e:	e744      	b.n	80090ca <__kernel_rem_pio2+0x4f6>
 8009240:	9b01      	ldr	r3, [sp, #4]
 8009242:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009246:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800924a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800924e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8009252:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8009256:	601d      	str	r5, [r3, #0]
 8009258:	615e      	str	r6, [r3, #20]
 800925a:	e71b      	b.n	8009094 <__kernel_rem_pio2+0x4c0>
 800925c:	41700000 	.word	0x41700000
 8009260:	3e700000 	.word	0x3e700000
 8009264:	00000000 	.word	0x00000000

08009268 <__kernel_sin>:
 8009268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	b086      	sub	sp, #24
 800926e:	e9cd 2300 	strd	r2, r3, [sp]
 8009272:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009276:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800927a:	4682      	mov	sl, r0
 800927c:	460c      	mov	r4, r1
 800927e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009280:	da03      	bge.n	800928a <__kernel_sin+0x22>
 8009282:	f7f7 fbf7 	bl	8000a74 <__aeabi_d2iz>
 8009286:	2800      	cmp	r0, #0
 8009288:	d050      	beq.n	800932c <__kernel_sin+0xc4>
 800928a:	4652      	mov	r2, sl
 800928c:	4623      	mov	r3, r4
 800928e:	4650      	mov	r0, sl
 8009290:	4621      	mov	r1, r4
 8009292:	f7f7 f955 	bl	8000540 <__aeabi_dmul>
 8009296:	4606      	mov	r6, r0
 8009298:	460f      	mov	r7, r1
 800929a:	4602      	mov	r2, r0
 800929c:	460b      	mov	r3, r1
 800929e:	4650      	mov	r0, sl
 80092a0:	4621      	mov	r1, r4
 80092a2:	f7f7 f94d 	bl	8000540 <__aeabi_dmul>
 80092a6:	a33e      	add	r3, pc, #248	; (adr r3, 80093a0 <__kernel_sin+0x138>)
 80092a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ac:	4680      	mov	r8, r0
 80092ae:	4689      	mov	r9, r1
 80092b0:	4630      	mov	r0, r6
 80092b2:	4639      	mov	r1, r7
 80092b4:	f7f7 f944 	bl	8000540 <__aeabi_dmul>
 80092b8:	a33b      	add	r3, pc, #236	; (adr r3, 80093a8 <__kernel_sin+0x140>)
 80092ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092be:	f7f6 ff87 	bl	80001d0 <__aeabi_dsub>
 80092c2:	4632      	mov	r2, r6
 80092c4:	463b      	mov	r3, r7
 80092c6:	f7f7 f93b 	bl	8000540 <__aeabi_dmul>
 80092ca:	a339      	add	r3, pc, #228	; (adr r3, 80093b0 <__kernel_sin+0x148>)
 80092cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d0:	f7f6 ff80 	bl	80001d4 <__adddf3>
 80092d4:	4632      	mov	r2, r6
 80092d6:	463b      	mov	r3, r7
 80092d8:	f7f7 f932 	bl	8000540 <__aeabi_dmul>
 80092dc:	a336      	add	r3, pc, #216	; (adr r3, 80093b8 <__kernel_sin+0x150>)
 80092de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e2:	f7f6 ff75 	bl	80001d0 <__aeabi_dsub>
 80092e6:	4632      	mov	r2, r6
 80092e8:	463b      	mov	r3, r7
 80092ea:	f7f7 f929 	bl	8000540 <__aeabi_dmul>
 80092ee:	a334      	add	r3, pc, #208	; (adr r3, 80093c0 <__kernel_sin+0x158>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	f7f6 ff6e 	bl	80001d4 <__adddf3>
 80092f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092fc:	b9dd      	cbnz	r5, 8009336 <__kernel_sin+0xce>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	4630      	mov	r0, r6
 8009304:	4639      	mov	r1, r7
 8009306:	f7f7 f91b 	bl	8000540 <__aeabi_dmul>
 800930a:	a32f      	add	r3, pc, #188	; (adr r3, 80093c8 <__kernel_sin+0x160>)
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	f7f6 ff5e 	bl	80001d0 <__aeabi_dsub>
 8009314:	4642      	mov	r2, r8
 8009316:	464b      	mov	r3, r9
 8009318:	f7f7 f912 	bl	8000540 <__aeabi_dmul>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4650      	mov	r0, sl
 8009322:	4621      	mov	r1, r4
 8009324:	f7f6 ff56 	bl	80001d4 <__adddf3>
 8009328:	4682      	mov	sl, r0
 800932a:	460c      	mov	r4, r1
 800932c:	4650      	mov	r0, sl
 800932e:	4621      	mov	r1, r4
 8009330:	b006      	add	sp, #24
 8009332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009336:	2200      	movs	r2, #0
 8009338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800933c:	4b24      	ldr	r3, [pc, #144]	; (80093d0 <__kernel_sin+0x168>)
 800933e:	f7f7 f8ff 	bl	8000540 <__aeabi_dmul>
 8009342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009346:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800934a:	4640      	mov	r0, r8
 800934c:	4649      	mov	r1, r9
 800934e:	f7f7 f8f7 	bl	8000540 <__aeabi_dmul>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800935a:	f7f6 ff39 	bl	80001d0 <__aeabi_dsub>
 800935e:	4632      	mov	r2, r6
 8009360:	463b      	mov	r3, r7
 8009362:	f7f7 f8ed 	bl	8000540 <__aeabi_dmul>
 8009366:	e9dd 2300 	ldrd	r2, r3, [sp]
 800936a:	f7f6 ff31 	bl	80001d0 <__aeabi_dsub>
 800936e:	a316      	add	r3, pc, #88	; (adr r3, 80093c8 <__kernel_sin+0x160>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	4606      	mov	r6, r0
 8009376:	460f      	mov	r7, r1
 8009378:	4640      	mov	r0, r8
 800937a:	4649      	mov	r1, r9
 800937c:	f7f7 f8e0 	bl	8000540 <__aeabi_dmul>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4630      	mov	r0, r6
 8009386:	4639      	mov	r1, r7
 8009388:	f7f6 ff24 	bl	80001d4 <__adddf3>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4650      	mov	r0, sl
 8009392:	4621      	mov	r1, r4
 8009394:	f7f6 ff1c 	bl	80001d0 <__aeabi_dsub>
 8009398:	e7c6      	b.n	8009328 <__kernel_sin+0xc0>
 800939a:	bf00      	nop
 800939c:	f3af 8000 	nop.w
 80093a0:	5acfd57c 	.word	0x5acfd57c
 80093a4:	3de5d93a 	.word	0x3de5d93a
 80093a8:	8a2b9ceb 	.word	0x8a2b9ceb
 80093ac:	3e5ae5e6 	.word	0x3e5ae5e6
 80093b0:	57b1fe7d 	.word	0x57b1fe7d
 80093b4:	3ec71de3 	.word	0x3ec71de3
 80093b8:	19c161d5 	.word	0x19c161d5
 80093bc:	3f2a01a0 	.word	0x3f2a01a0
 80093c0:	1110f8a6 	.word	0x1110f8a6
 80093c4:	3f811111 	.word	0x3f811111
 80093c8:	55555549 	.word	0x55555549
 80093cc:	3fc55555 	.word	0x3fc55555
 80093d0:	3fe00000 	.word	0x3fe00000

080093d4 <fabs>:
 80093d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80093d8:	4770      	bx	lr
 80093da:	0000      	movs	r0, r0
 80093dc:	0000      	movs	r0, r0
	...

080093e0 <floor>:
 80093e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093e4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80093e8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80093ec:	2e13      	cmp	r6, #19
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4607      	mov	r7, r0
 80093f4:	460c      	mov	r4, r1
 80093f6:	4605      	mov	r5, r0
 80093f8:	dc34      	bgt.n	8009464 <floor+0x84>
 80093fa:	2e00      	cmp	r6, #0
 80093fc:	da15      	bge.n	800942a <floor+0x4a>
 80093fe:	a334      	add	r3, pc, #208	; (adr r3, 80094d0 <floor+0xf0>)
 8009400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009404:	f7f6 fee6 	bl	80001d4 <__adddf3>
 8009408:	2200      	movs	r2, #0
 800940a:	2300      	movs	r3, #0
 800940c:	f7f7 fb28 	bl	8000a60 <__aeabi_dcmpgt>
 8009410:	b140      	cbz	r0, 8009424 <floor+0x44>
 8009412:	2c00      	cmp	r4, #0
 8009414:	da59      	bge.n	80094ca <floor+0xea>
 8009416:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800941a:	ea57 0503 	orrs.w	r5, r7, r3
 800941e:	d001      	beq.n	8009424 <floor+0x44>
 8009420:	2500      	movs	r5, #0
 8009422:	4c2d      	ldr	r4, [pc, #180]	; (80094d8 <floor+0xf8>)
 8009424:	4623      	mov	r3, r4
 8009426:	462f      	mov	r7, r5
 8009428:	e025      	b.n	8009476 <floor+0x96>
 800942a:	4a2c      	ldr	r2, [pc, #176]	; (80094dc <floor+0xfc>)
 800942c:	fa42 f806 	asr.w	r8, r2, r6
 8009430:	ea01 0208 	and.w	r2, r1, r8
 8009434:	4302      	orrs	r2, r0
 8009436:	d01e      	beq.n	8009476 <floor+0x96>
 8009438:	a325      	add	r3, pc, #148	; (adr r3, 80094d0 <floor+0xf0>)
 800943a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943e:	f7f6 fec9 	bl	80001d4 <__adddf3>
 8009442:	2200      	movs	r2, #0
 8009444:	2300      	movs	r3, #0
 8009446:	f7f7 fb0b 	bl	8000a60 <__aeabi_dcmpgt>
 800944a:	2800      	cmp	r0, #0
 800944c:	d0ea      	beq.n	8009424 <floor+0x44>
 800944e:	2c00      	cmp	r4, #0
 8009450:	bfbe      	ittt	lt
 8009452:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009456:	fa43 f606 	asrlt.w	r6, r3, r6
 800945a:	19a4      	addlt	r4, r4, r6
 800945c:	2500      	movs	r5, #0
 800945e:	ea24 0408 	bic.w	r4, r4, r8
 8009462:	e7df      	b.n	8009424 <floor+0x44>
 8009464:	2e33      	cmp	r6, #51	; 0x33
 8009466:	dd0a      	ble.n	800947e <floor+0x9e>
 8009468:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800946c:	d103      	bne.n	8009476 <floor+0x96>
 800946e:	f7f6 feb1 	bl	80001d4 <__adddf3>
 8009472:	4607      	mov	r7, r0
 8009474:	460b      	mov	r3, r1
 8009476:	4638      	mov	r0, r7
 8009478:	4619      	mov	r1, r3
 800947a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800947e:	f04f 32ff 	mov.w	r2, #4294967295
 8009482:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8009486:	fa22 f808 	lsr.w	r8, r2, r8
 800948a:	ea18 0f00 	tst.w	r8, r0
 800948e:	d0f2      	beq.n	8009476 <floor+0x96>
 8009490:	a30f      	add	r3, pc, #60	; (adr r3, 80094d0 <floor+0xf0>)
 8009492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009496:	f7f6 fe9d 	bl	80001d4 <__adddf3>
 800949a:	2200      	movs	r2, #0
 800949c:	2300      	movs	r3, #0
 800949e:	f7f7 fadf 	bl	8000a60 <__aeabi_dcmpgt>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	d0be      	beq.n	8009424 <floor+0x44>
 80094a6:	2c00      	cmp	r4, #0
 80094a8:	da02      	bge.n	80094b0 <floor+0xd0>
 80094aa:	2e14      	cmp	r6, #20
 80094ac:	d103      	bne.n	80094b6 <floor+0xd6>
 80094ae:	3401      	adds	r4, #1
 80094b0:	ea25 0508 	bic.w	r5, r5, r8
 80094b4:	e7b6      	b.n	8009424 <floor+0x44>
 80094b6:	2301      	movs	r3, #1
 80094b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80094bc:	fa03 f606 	lsl.w	r6, r3, r6
 80094c0:	4435      	add	r5, r6
 80094c2:	42bd      	cmp	r5, r7
 80094c4:	bf38      	it	cc
 80094c6:	18e4      	addcc	r4, r4, r3
 80094c8:	e7f2      	b.n	80094b0 <floor+0xd0>
 80094ca:	2500      	movs	r5, #0
 80094cc:	462c      	mov	r4, r5
 80094ce:	e7a9      	b.n	8009424 <floor+0x44>
 80094d0:	8800759c 	.word	0x8800759c
 80094d4:	7e37e43c 	.word	0x7e37e43c
 80094d8:	bff00000 	.word	0xbff00000
 80094dc:	000fffff 	.word	0x000fffff

080094e0 <scalbn>:
 80094e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80094e6:	4604      	mov	r4, r0
 80094e8:	460d      	mov	r5, r1
 80094ea:	4617      	mov	r7, r2
 80094ec:	460b      	mov	r3, r1
 80094ee:	b996      	cbnz	r6, 8009516 <scalbn+0x36>
 80094f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094f4:	4303      	orrs	r3, r0
 80094f6:	d039      	beq.n	800956c <scalbn+0x8c>
 80094f8:	4b35      	ldr	r3, [pc, #212]	; (80095d0 <scalbn+0xf0>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	f7f7 f820 	bl	8000540 <__aeabi_dmul>
 8009500:	4b34      	ldr	r3, [pc, #208]	; (80095d4 <scalbn+0xf4>)
 8009502:	4604      	mov	r4, r0
 8009504:	429f      	cmp	r7, r3
 8009506:	460d      	mov	r5, r1
 8009508:	da0f      	bge.n	800952a <scalbn+0x4a>
 800950a:	a32d      	add	r3, pc, #180	; (adr r3, 80095c0 <scalbn+0xe0>)
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	f7f7 f816 	bl	8000540 <__aeabi_dmul>
 8009514:	e006      	b.n	8009524 <scalbn+0x44>
 8009516:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800951a:	4296      	cmp	r6, r2
 800951c:	d10a      	bne.n	8009534 <scalbn+0x54>
 800951e:	4602      	mov	r2, r0
 8009520:	f7f6 fe58 	bl	80001d4 <__adddf3>
 8009524:	4604      	mov	r4, r0
 8009526:	460d      	mov	r5, r1
 8009528:	e020      	b.n	800956c <scalbn+0x8c>
 800952a:	460b      	mov	r3, r1
 800952c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009530:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009534:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009538:	19b9      	adds	r1, r7, r6
 800953a:	4291      	cmp	r1, r2
 800953c:	dd0e      	ble.n	800955c <scalbn+0x7c>
 800953e:	a322      	add	r3, pc, #136	; (adr r3, 80095c8 <scalbn+0xe8>)
 8009540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009544:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009548:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800954c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009550:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009554:	4820      	ldr	r0, [pc, #128]	; (80095d8 <scalbn+0xf8>)
 8009556:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800955a:	e7d9      	b.n	8009510 <scalbn+0x30>
 800955c:	2900      	cmp	r1, #0
 800955e:	dd08      	ble.n	8009572 <scalbn+0x92>
 8009560:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009564:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009568:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009572:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009576:	da16      	bge.n	80095a6 <scalbn+0xc6>
 8009578:	f24c 3350 	movw	r3, #50000	; 0xc350
 800957c:	429f      	cmp	r7, r3
 800957e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009582:	dd08      	ble.n	8009596 <scalbn+0xb6>
 8009584:	4c15      	ldr	r4, [pc, #84]	; (80095dc <scalbn+0xfc>)
 8009586:	4814      	ldr	r0, [pc, #80]	; (80095d8 <scalbn+0xf8>)
 8009588:	f363 74df 	bfi	r4, r3, #31, #1
 800958c:	a30e      	add	r3, pc, #56	; (adr r3, 80095c8 <scalbn+0xe8>)
 800958e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009592:	4621      	mov	r1, r4
 8009594:	e7bc      	b.n	8009510 <scalbn+0x30>
 8009596:	4c12      	ldr	r4, [pc, #72]	; (80095e0 <scalbn+0x100>)
 8009598:	4812      	ldr	r0, [pc, #72]	; (80095e4 <scalbn+0x104>)
 800959a:	f363 74df 	bfi	r4, r3, #31, #1
 800959e:	a308      	add	r3, pc, #32	; (adr r3, 80095c0 <scalbn+0xe0>)
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	e7f5      	b.n	8009592 <scalbn+0xb2>
 80095a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80095aa:	3136      	adds	r1, #54	; 0x36
 80095ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80095b0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80095b4:	4620      	mov	r0, r4
 80095b6:	4629      	mov	r1, r5
 80095b8:	2200      	movs	r2, #0
 80095ba:	4b0b      	ldr	r3, [pc, #44]	; (80095e8 <scalbn+0x108>)
 80095bc:	e7a8      	b.n	8009510 <scalbn+0x30>
 80095be:	bf00      	nop
 80095c0:	c2f8f359 	.word	0xc2f8f359
 80095c4:	01a56e1f 	.word	0x01a56e1f
 80095c8:	8800759c 	.word	0x8800759c
 80095cc:	7e37e43c 	.word	0x7e37e43c
 80095d0:	43500000 	.word	0x43500000
 80095d4:	ffff3cb0 	.word	0xffff3cb0
 80095d8:	8800759c 	.word	0x8800759c
 80095dc:	7e37e43c 	.word	0x7e37e43c
 80095e0:	01a56e1f 	.word	0x01a56e1f
 80095e4:	c2f8f359 	.word	0xc2f8f359
 80095e8:	3c900000 	.word	0x3c900000

080095ec <_init>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr

080095f8 <_fini>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	bf00      	nop
 80095fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fe:	bc08      	pop	{r3}
 8009600:	469e      	mov	lr, r3
 8009602:	4770      	bx	lr
