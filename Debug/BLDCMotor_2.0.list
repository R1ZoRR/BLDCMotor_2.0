
BLDCMotor_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a24  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08008bb0  08008bb0  00018bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008da8  08008da8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08008da8  08008da8  00018da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008db0  08008db0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008db0  08008db0  00018db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008db4  08008db4  00018db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08008db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000018  08008dd0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08008dd0  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126ba  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000259b  00000000  00000000  000326fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00034c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  00035d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209ba  00000000  00000000  00036d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e82  00000000  00000000  0005772a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c83ae  00000000  00000000  000695ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013195a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d28  00000000  00000000  001319b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b94 	.word	0x08008b94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08008b94 	.word	0x08008b94

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <__aeabi_uldivmod>:
 800114c:	b953      	cbnz	r3, 8001164 <__aeabi_uldivmod+0x18>
 800114e:	b94a      	cbnz	r2, 8001164 <__aeabi_uldivmod+0x18>
 8001150:	2900      	cmp	r1, #0
 8001152:	bf08      	it	eq
 8001154:	2800      	cmpeq	r0, #0
 8001156:	bf1c      	itt	ne
 8001158:	f04f 31ff 	movne.w	r1, #4294967295
 800115c:	f04f 30ff 	movne.w	r0, #4294967295
 8001160:	f000 b96e 	b.w	8001440 <__aeabi_idiv0>
 8001164:	f1ad 0c08 	sub.w	ip, sp, #8
 8001168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800116c:	f000 f806 	bl	800117c <__udivmoddi4>
 8001170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr

0800117c <__udivmoddi4>:
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	9e08      	ldr	r6, [sp, #32]
 8001182:	460d      	mov	r5, r1
 8001184:	4604      	mov	r4, r0
 8001186:	468e      	mov	lr, r1
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 8083 	bne.w	8001294 <__udivmoddi4+0x118>
 800118e:	428a      	cmp	r2, r1
 8001190:	4617      	mov	r7, r2
 8001192:	d947      	bls.n	8001224 <__udivmoddi4+0xa8>
 8001194:	fab2 f382 	clz	r3, r2
 8001198:	b14b      	cbz	r3, 80011ae <__udivmoddi4+0x32>
 800119a:	f1c3 0120 	rsb	r1, r3, #32
 800119e:	fa05 fe03 	lsl.w	lr, r5, r3
 80011a2:	fa20 f101 	lsr.w	r1, r0, r1
 80011a6:	409f      	lsls	r7, r3
 80011a8:	ea41 0e0e 	orr.w	lr, r1, lr
 80011ac:	409c      	lsls	r4, r3
 80011ae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011b2:	fbbe fcf8 	udiv	ip, lr, r8
 80011b6:	fa1f f987 	uxth.w	r9, r7
 80011ba:	fb08 e21c 	mls	r2, r8, ip, lr
 80011be:	fb0c f009 	mul.w	r0, ip, r9
 80011c2:	0c21      	lsrs	r1, r4, #16
 80011c4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d90a      	bls.n	80011e2 <__udivmoddi4+0x66>
 80011cc:	18ba      	adds	r2, r7, r2
 80011ce:	f10c 31ff 	add.w	r1, ip, #4294967295
 80011d2:	f080 8118 	bcs.w	8001406 <__udivmoddi4+0x28a>
 80011d6:	4290      	cmp	r0, r2
 80011d8:	f240 8115 	bls.w	8001406 <__udivmoddi4+0x28a>
 80011dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80011e0:	443a      	add	r2, r7
 80011e2:	1a12      	subs	r2, r2, r0
 80011e4:	fbb2 f0f8 	udiv	r0, r2, r8
 80011e8:	fb08 2210 	mls	r2, r8, r0, r2
 80011ec:	fb00 f109 	mul.w	r1, r0, r9
 80011f0:	b2a4      	uxth	r4, r4
 80011f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80011f6:	42a1      	cmp	r1, r4
 80011f8:	d909      	bls.n	800120e <__udivmoddi4+0x92>
 80011fa:	193c      	adds	r4, r7, r4
 80011fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8001200:	f080 8103 	bcs.w	800140a <__udivmoddi4+0x28e>
 8001204:	42a1      	cmp	r1, r4
 8001206:	f240 8100 	bls.w	800140a <__udivmoddi4+0x28e>
 800120a:	3802      	subs	r0, #2
 800120c:	443c      	add	r4, r7
 800120e:	1a64      	subs	r4, r4, r1
 8001210:	2100      	movs	r1, #0
 8001212:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001216:	b11e      	cbz	r6, 8001220 <__udivmoddi4+0xa4>
 8001218:	2200      	movs	r2, #0
 800121a:	40dc      	lsrs	r4, r3
 800121c:	e9c6 4200 	strd	r4, r2, [r6]
 8001220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001224:	b902      	cbnz	r2, 8001228 <__udivmoddi4+0xac>
 8001226:	deff      	udf	#255	; 0xff
 8001228:	fab2 f382 	clz	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d14f      	bne.n	80012d0 <__udivmoddi4+0x154>
 8001230:	1a8d      	subs	r5, r1, r2
 8001232:	2101      	movs	r1, #1
 8001234:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001238:	fa1f f882 	uxth.w	r8, r2
 800123c:	fbb5 fcfe 	udiv	ip, r5, lr
 8001240:	fb0e 551c 	mls	r5, lr, ip, r5
 8001244:	fb08 f00c 	mul.w	r0, r8, ip
 8001248:	0c22      	lsrs	r2, r4, #16
 800124a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800124e:	42a8      	cmp	r0, r5
 8001250:	d907      	bls.n	8001262 <__udivmoddi4+0xe6>
 8001252:	197d      	adds	r5, r7, r5
 8001254:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001258:	d202      	bcs.n	8001260 <__udivmoddi4+0xe4>
 800125a:	42a8      	cmp	r0, r5
 800125c:	f200 80e9 	bhi.w	8001432 <__udivmoddi4+0x2b6>
 8001260:	4694      	mov	ip, r2
 8001262:	1a2d      	subs	r5, r5, r0
 8001264:	fbb5 f0fe 	udiv	r0, r5, lr
 8001268:	fb0e 5510 	mls	r5, lr, r0, r5
 800126c:	fb08 f800 	mul.w	r8, r8, r0
 8001270:	b2a4      	uxth	r4, r4
 8001272:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001276:	45a0      	cmp	r8, r4
 8001278:	d907      	bls.n	800128a <__udivmoddi4+0x10e>
 800127a:	193c      	adds	r4, r7, r4
 800127c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001280:	d202      	bcs.n	8001288 <__udivmoddi4+0x10c>
 8001282:	45a0      	cmp	r8, r4
 8001284:	f200 80d9 	bhi.w	800143a <__udivmoddi4+0x2be>
 8001288:	4610      	mov	r0, r2
 800128a:	eba4 0408 	sub.w	r4, r4, r8
 800128e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001292:	e7c0      	b.n	8001216 <__udivmoddi4+0x9a>
 8001294:	428b      	cmp	r3, r1
 8001296:	d908      	bls.n	80012aa <__udivmoddi4+0x12e>
 8001298:	2e00      	cmp	r6, #0
 800129a:	f000 80b1 	beq.w	8001400 <__udivmoddi4+0x284>
 800129e:	2100      	movs	r1, #0
 80012a0:	e9c6 0500 	strd	r0, r5, [r6]
 80012a4:	4608      	mov	r0, r1
 80012a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012aa:	fab3 f183 	clz	r1, r3
 80012ae:	2900      	cmp	r1, #0
 80012b0:	d14b      	bne.n	800134a <__udivmoddi4+0x1ce>
 80012b2:	42ab      	cmp	r3, r5
 80012b4:	d302      	bcc.n	80012bc <__udivmoddi4+0x140>
 80012b6:	4282      	cmp	r2, r0
 80012b8:	f200 80b9 	bhi.w	800142e <__udivmoddi4+0x2b2>
 80012bc:	1a84      	subs	r4, r0, r2
 80012be:	eb65 0303 	sbc.w	r3, r5, r3
 80012c2:	2001      	movs	r0, #1
 80012c4:	469e      	mov	lr, r3
 80012c6:	2e00      	cmp	r6, #0
 80012c8:	d0aa      	beq.n	8001220 <__udivmoddi4+0xa4>
 80012ca:	e9c6 4e00 	strd	r4, lr, [r6]
 80012ce:	e7a7      	b.n	8001220 <__udivmoddi4+0xa4>
 80012d0:	409f      	lsls	r7, r3
 80012d2:	f1c3 0220 	rsb	r2, r3, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80012dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80012e0:	fa1f f887 	uxth.w	r8, r7
 80012e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80012e8:	fa24 f202 	lsr.w	r2, r4, r2
 80012ec:	409d      	lsls	r5, r3
 80012ee:	fb00 fc08 	mul.w	ip, r0, r8
 80012f2:	432a      	orrs	r2, r5
 80012f4:	0c15      	lsrs	r5, r2, #16
 80012f6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80012fa:	45ac      	cmp	ip, r5
 80012fc:	fa04 f403 	lsl.w	r4, r4, r3
 8001300:	d909      	bls.n	8001316 <__udivmoddi4+0x19a>
 8001302:	197d      	adds	r5, r7, r5
 8001304:	f100 31ff 	add.w	r1, r0, #4294967295
 8001308:	f080 808f 	bcs.w	800142a <__udivmoddi4+0x2ae>
 800130c:	45ac      	cmp	ip, r5
 800130e:	f240 808c 	bls.w	800142a <__udivmoddi4+0x2ae>
 8001312:	3802      	subs	r0, #2
 8001314:	443d      	add	r5, r7
 8001316:	eba5 050c 	sub.w	r5, r5, ip
 800131a:	fbb5 f1fe 	udiv	r1, r5, lr
 800131e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001322:	fb01 f908 	mul.w	r9, r1, r8
 8001326:	b295      	uxth	r5, r2
 8001328:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800132c:	45a9      	cmp	r9, r5
 800132e:	d907      	bls.n	8001340 <__udivmoddi4+0x1c4>
 8001330:	197d      	adds	r5, r7, r5
 8001332:	f101 32ff 	add.w	r2, r1, #4294967295
 8001336:	d274      	bcs.n	8001422 <__udivmoddi4+0x2a6>
 8001338:	45a9      	cmp	r9, r5
 800133a:	d972      	bls.n	8001422 <__udivmoddi4+0x2a6>
 800133c:	3902      	subs	r1, #2
 800133e:	443d      	add	r5, r7
 8001340:	eba5 0509 	sub.w	r5, r5, r9
 8001344:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001348:	e778      	b.n	800123c <__udivmoddi4+0xc0>
 800134a:	f1c1 0720 	rsb	r7, r1, #32
 800134e:	408b      	lsls	r3, r1
 8001350:	fa22 fc07 	lsr.w	ip, r2, r7
 8001354:	ea4c 0c03 	orr.w	ip, ip, r3
 8001358:	fa25 f407 	lsr.w	r4, r5, r7
 800135c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001360:	fbb4 f9fe 	udiv	r9, r4, lr
 8001364:	fa1f f88c 	uxth.w	r8, ip
 8001368:	fb0e 4419 	mls	r4, lr, r9, r4
 800136c:	fa20 f307 	lsr.w	r3, r0, r7
 8001370:	fb09 fa08 	mul.w	sl, r9, r8
 8001374:	408d      	lsls	r5, r1
 8001376:	431d      	orrs	r5, r3
 8001378:	0c2b      	lsrs	r3, r5, #16
 800137a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800137e:	45a2      	cmp	sl, r4
 8001380:	fa02 f201 	lsl.w	r2, r2, r1
 8001384:	fa00 f301 	lsl.w	r3, r0, r1
 8001388:	d909      	bls.n	800139e <__udivmoddi4+0x222>
 800138a:	eb1c 0404 	adds.w	r4, ip, r4
 800138e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001392:	d248      	bcs.n	8001426 <__udivmoddi4+0x2aa>
 8001394:	45a2      	cmp	sl, r4
 8001396:	d946      	bls.n	8001426 <__udivmoddi4+0x2aa>
 8001398:	f1a9 0902 	sub.w	r9, r9, #2
 800139c:	4464      	add	r4, ip
 800139e:	eba4 040a 	sub.w	r4, r4, sl
 80013a2:	fbb4 f0fe 	udiv	r0, r4, lr
 80013a6:	fb0e 4410 	mls	r4, lr, r0, r4
 80013aa:	fb00 fa08 	mul.w	sl, r0, r8
 80013ae:	b2ad      	uxth	r5, r5
 80013b0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013b4:	45a2      	cmp	sl, r4
 80013b6:	d908      	bls.n	80013ca <__udivmoddi4+0x24e>
 80013b8:	eb1c 0404 	adds.w	r4, ip, r4
 80013bc:	f100 35ff 	add.w	r5, r0, #4294967295
 80013c0:	d22d      	bcs.n	800141e <__udivmoddi4+0x2a2>
 80013c2:	45a2      	cmp	sl, r4
 80013c4:	d92b      	bls.n	800141e <__udivmoddi4+0x2a2>
 80013c6:	3802      	subs	r0, #2
 80013c8:	4464      	add	r4, ip
 80013ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80013ce:	fba0 8902 	umull	r8, r9, r0, r2
 80013d2:	eba4 040a 	sub.w	r4, r4, sl
 80013d6:	454c      	cmp	r4, r9
 80013d8:	46c6      	mov	lr, r8
 80013da:	464d      	mov	r5, r9
 80013dc:	d319      	bcc.n	8001412 <__udivmoddi4+0x296>
 80013de:	d016      	beq.n	800140e <__udivmoddi4+0x292>
 80013e0:	b15e      	cbz	r6, 80013fa <__udivmoddi4+0x27e>
 80013e2:	ebb3 020e 	subs.w	r2, r3, lr
 80013e6:	eb64 0405 	sbc.w	r4, r4, r5
 80013ea:	fa04 f707 	lsl.w	r7, r4, r7
 80013ee:	fa22 f301 	lsr.w	r3, r2, r1
 80013f2:	431f      	orrs	r7, r3
 80013f4:	40cc      	lsrs	r4, r1
 80013f6:	e9c6 7400 	strd	r7, r4, [r6]
 80013fa:	2100      	movs	r1, #0
 80013fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001400:	4631      	mov	r1, r6
 8001402:	4630      	mov	r0, r6
 8001404:	e70c      	b.n	8001220 <__udivmoddi4+0xa4>
 8001406:	468c      	mov	ip, r1
 8001408:	e6eb      	b.n	80011e2 <__udivmoddi4+0x66>
 800140a:	4610      	mov	r0, r2
 800140c:	e6ff      	b.n	800120e <__udivmoddi4+0x92>
 800140e:	4543      	cmp	r3, r8
 8001410:	d2e6      	bcs.n	80013e0 <__udivmoddi4+0x264>
 8001412:	ebb8 0e02 	subs.w	lr, r8, r2
 8001416:	eb69 050c 	sbc.w	r5, r9, ip
 800141a:	3801      	subs	r0, #1
 800141c:	e7e0      	b.n	80013e0 <__udivmoddi4+0x264>
 800141e:	4628      	mov	r0, r5
 8001420:	e7d3      	b.n	80013ca <__udivmoddi4+0x24e>
 8001422:	4611      	mov	r1, r2
 8001424:	e78c      	b.n	8001340 <__udivmoddi4+0x1c4>
 8001426:	4681      	mov	r9, r0
 8001428:	e7b9      	b.n	800139e <__udivmoddi4+0x222>
 800142a:	4608      	mov	r0, r1
 800142c:	e773      	b.n	8001316 <__udivmoddi4+0x19a>
 800142e:	4608      	mov	r0, r1
 8001430:	e749      	b.n	80012c6 <__udivmoddi4+0x14a>
 8001432:	f1ac 0c02 	sub.w	ip, ip, #2
 8001436:	443d      	add	r5, r7
 8001438:	e713      	b.n	8001262 <__udivmoddi4+0xe6>
 800143a:	3802      	subs	r0, #2
 800143c:	443c      	add	r4, r7
 800143e:	e724      	b.n	800128a <__udivmoddi4+0x10e>

08001440 <__aeabi_idiv0>:
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	0000      	movs	r0, r0
	...

08001448 <initialize_PID_constants>:
float error, lastError;
float integral, derivative;

float pid_time = 0;

void initialize_PID_constants() {
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
	Kp = 0.6 * K;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <initialize_PID_constants+0x80>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f81d 	bl	8000490 <__aeabi_f2d>
 8001456:	a31a      	add	r3, pc, #104	; (adr r3, 80014c0 <initialize_PID_constants+0x78>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f870 	bl	8000540 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fb2c 	bl	8000ac4 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	4a17      	ldr	r2, [pc, #92]	; (80014cc <initialize_PID_constants+0x84>)
 8001470:	6013      	str	r3, [r2, #0]
	Ki = (2 * Kp) / TIME_INTERVAL_MS;
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <initialize_PID_constants+0x84>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4619      	mov	r1, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fb79 	bl	8000b70 <__addsf3>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <initialize_PID_constants+0x88>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f7ff fd2d 	bl	8000ee8 <__aeabi_fdiv>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <initialize_PID_constants+0x8c>)
 8001494:	601a      	str	r2, [r3, #0]
    Kd = (Kp * TIME_INTERVAL_MS) / 8;
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <initialize_PID_constants+0x84>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <initialize_PID_constants+0x88>)
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fc6d 	bl	8000d80 <__aeabi_fmul>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fd1b 	bl	8000ee8 <__aeabi_fdiv>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <initialize_PID_constants+0x90>)
 80014b8:	601a      	str	r2, [r3, #0]
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	33333333 	.word	0x33333333
 80014c4:	3fe33333 	.word	0x3fe33333
 80014c8:	20000004 	.word	0x20000004
 80014cc:	2000007c 	.word	0x2000007c
 80014d0:	20000008 	.word	0x20000008
 80014d4:	20000054 	.word	0x20000054
 80014d8:	20000074 	.word	0x20000074
 80014dc:	00000000 	.word	0x00000000

080014e0 <move_rotor>:
uint16_t cnt_hall_last = 0;

/////////////////////////////////

// Функция изменяет ШИМ в соответсвии с указанным вектором тяги
void move_rotor(float to_angle) {
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	// Расчет потенциалов и заполнения шима для фаз
	U_PWM = pwm*(sin((to_angle) * M_PI/180));
 80014e8:	4b97      	ldr	r3, [pc, #604]	; (8001748 <move_rotor+0x268>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe ffbd 	bl	800046c <__aeabi_i2d>
 80014f2:	4604      	mov	r4, r0
 80014f4:	460d      	mov	r5, r1
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7fe ffca 	bl	8000490 <__aeabi_f2d>
 80014fc:	a390      	add	r3, pc, #576	; (adr r3, 8001740 <move_rotor+0x260>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f81d 	bl	8000540 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b8e      	ldr	r3, [pc, #568]	; (800174c <move_rotor+0x26c>)
 8001514:	f7ff f93e 	bl	8000794 <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	f006 fb38 	bl	8007b94 <sin>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4620      	mov	r0, r4
 800152a:	4629      	mov	r1, r5
 800152c:	f7ff f808 	bl	8000540 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fac4 	bl	8000ac4 <__aeabi_d2f>
 800153c:	4603      	mov	r3, r0
 800153e:	4a84      	ldr	r2, [pc, #528]	; (8001750 <move_rotor+0x270>)
 8001540:	6013      	str	r3, [r2, #0]
	V_PWM = pwm*(sin((to_angle+120) * M_PI/180));
 8001542:	4b81      	ldr	r3, [pc, #516]	; (8001748 <move_rotor+0x268>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ff90 	bl	800046c <__aeabi_i2d>
 800154c:	4604      	mov	r4, r0
 800154e:	460d      	mov	r5, r1
 8001550:	4980      	ldr	r1, [pc, #512]	; (8001754 <move_rotor+0x274>)
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fb0c 	bl	8000b70 <__addsf3>
 8001558:	4603      	mov	r3, r0
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ff98 	bl	8000490 <__aeabi_f2d>
 8001560:	a377      	add	r3, pc, #476	; (adr r3, 8001740 <move_rotor+0x260>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7fe ffeb 	bl	8000540 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	4b75      	ldr	r3, [pc, #468]	; (800174c <move_rotor+0x26c>)
 8001578:	f7ff f90c 	bl	8000794 <__aeabi_ddiv>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f006 fb06 	bl	8007b94 <sin>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4620      	mov	r0, r4
 800158e:	4629      	mov	r1, r5
 8001590:	f7fe ffd6 	bl	8000540 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	f7ff fa92 	bl	8000ac4 <__aeabi_d2f>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a6d      	ldr	r2, [pc, #436]	; (8001758 <move_rotor+0x278>)
 80015a4:	6013      	str	r3, [r2, #0]
	W_PWM = pwm*(sin((to_angle+240) * M_PI/180));
 80015a6:	4b68      	ldr	r3, [pc, #416]	; (8001748 <move_rotor+0x268>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe ff5e 	bl	800046c <__aeabi_i2d>
 80015b0:	4604      	mov	r4, r0
 80015b2:	460d      	mov	r5, r1
 80015b4:	4969      	ldr	r1, [pc, #420]	; (800175c <move_rotor+0x27c>)
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fada 	bl	8000b70 <__addsf3>
 80015bc:	4603      	mov	r3, r0
 80015be:	4618      	mov	r0, r3
 80015c0:	f7fe ff66 	bl	8000490 <__aeabi_f2d>
 80015c4:	a35e      	add	r3, pc, #376	; (adr r3, 8001740 <move_rotor+0x260>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe ffb9 	bl	8000540 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	4b5c      	ldr	r3, [pc, #368]	; (800174c <move_rotor+0x26c>)
 80015dc:	f7ff f8da 	bl	8000794 <__aeabi_ddiv>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f006 fad4 	bl	8007b94 <sin>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4620      	mov	r0, r4
 80015f2:	4629      	mov	r1, r5
 80015f4:	f7fe ffa4 	bl	8000540 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff fa60 	bl	8000ac4 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4a56      	ldr	r2, [pc, #344]	; (8001760 <move_rotor+0x280>)
 8001608:	6013      	str	r3, [r2, #0]

	TIM1->CCR1 = 0;
 800160a:	4b56      	ldr	r3, [pc, #344]	; (8001764 <move_rotor+0x284>)
 800160c:	2200      	movs	r2, #0
 800160e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 8001610:	4b54      	ldr	r3, [pc, #336]	; (8001764 <move_rotor+0x284>)
 8001612:	2200      	movs	r2, #0
 8001614:	639a      	str	r2, [r3, #56]	; 0x38
	TIM8->CCR1 = 0;
 8001616:	4b54      	ldr	r3, [pc, #336]	; (8001768 <move_rotor+0x288>)
 8001618:	2200      	movs	r2, #0
 800161a:	635a      	str	r2, [r3, #52]	; 0x34

	/////////////////////////////////
	// Перенастройка шима на фазах

	if(U_PWM >= 0) { // if, т. к. позитивными и негативными ключами управляют разные каналы таймеров
 800161c:	4b4c      	ldr	r3, [pc, #304]	; (8001750 <move_rotor+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f04f 0100 	mov.w	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fd5d 	bl	80010e4 <__aeabi_fcmpge>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d010      	beq.n	8001652 <move_rotor+0x172>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001630:	2100      	movs	r1, #0
 8001632:	484e      	ldr	r0, [pc, #312]	; (800176c <move_rotor+0x28c>)
 8001634:	f005 fd5a 	bl	80070ec <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR1 = U_PWM;
 8001638:	4b45      	ldr	r3, [pc, #276]	; (8001750 <move_rotor+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4c49      	ldr	r4, [pc, #292]	; (8001764 <move_rotor+0x284>)
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd64 	bl	800110c <__aeabi_f2uiz>
 8001644:	4603      	mov	r3, r0
 8001646:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001648:	2100      	movs	r1, #0
 800164a:	4848      	ldr	r0, [pc, #288]	; (800176c <move_rotor+0x28c>)
 800164c:	f004 fde2 	bl	8006214 <HAL_TIM_PWM_Start>
 8001650:	e011      	b.n	8001676 <move_rotor+0x196>
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001652:	2100      	movs	r1, #0
 8001654:	4845      	ldr	r0, [pc, #276]	; (800176c <move_rotor+0x28c>)
 8001656:	f004 fe1b 	bl	8006290 <HAL_TIM_PWM_Stop>
		TIM1->CCR1 = -U_PWM;
 800165a:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <move_rotor+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001662:	4c40      	ldr	r4, [pc, #256]	; (8001764 <move_rotor+0x284>)
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fd51 	bl	800110c <__aeabi_f2uiz>
 800166a:	4603      	mov	r3, r0
 800166c:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800166e:	2100      	movs	r1, #0
 8001670:	483e      	ldr	r0, [pc, #248]	; (800176c <move_rotor+0x28c>)
 8001672:	f005 fd11 	bl	8007098 <HAL_TIMEx_PWMN_Start>
	}

	if(V_PWM >= 0) {
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <move_rotor+0x278>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f04f 0100 	mov.w	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fd30 	bl	80010e4 <__aeabi_fcmpge>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d010      	beq.n	80016ac <move_rotor+0x1cc>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800168a:	2104      	movs	r1, #4
 800168c:	4837      	ldr	r0, [pc, #220]	; (800176c <move_rotor+0x28c>)
 800168e:	f005 fd2d 	bl	80070ec <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR2 = V_PWM;
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <move_rotor+0x278>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4c33      	ldr	r4, [pc, #204]	; (8001764 <move_rotor+0x284>)
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fd37 	bl	800110c <__aeabi_f2uiz>
 800169e:	4603      	mov	r3, r0
 80016a0:	63a3      	str	r3, [r4, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016a2:	2104      	movs	r1, #4
 80016a4:	4831      	ldr	r0, [pc, #196]	; (800176c <move_rotor+0x28c>)
 80016a6:	f004 fdb5 	bl	8006214 <HAL_TIM_PWM_Start>
 80016aa:	e011      	b.n	80016d0 <move_rotor+0x1f0>
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80016ac:	2104      	movs	r1, #4
 80016ae:	482f      	ldr	r0, [pc, #188]	; (800176c <move_rotor+0x28c>)
 80016b0:	f004 fdee 	bl	8006290 <HAL_TIM_PWM_Stop>
		TIM1->CCR2 = -V_PWM;
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <move_rotor+0x278>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016bc:	4c29      	ldr	r4, [pc, #164]	; (8001764 <move_rotor+0x284>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fd24 	bl	800110c <__aeabi_f2uiz>
 80016c4:	4603      	mov	r3, r0
 80016c6:	63a3      	str	r3, [r4, #56]	; 0x38
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80016c8:	2104      	movs	r1, #4
 80016ca:	4828      	ldr	r0, [pc, #160]	; (800176c <move_rotor+0x28c>)
 80016cc:	f005 fce4 	bl	8007098 <HAL_TIMEx_PWMN_Start>
	}

	if(W_PWM >= 0) {
 80016d0:	4b23      	ldr	r3, [pc, #140]	; (8001760 <move_rotor+0x280>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f04f 0100 	mov.w	r1, #0
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fd03 	bl	80010e4 <__aeabi_fcmpge>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d010      	beq.n	8001706 <move_rotor+0x226>
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 80016e4:	2100      	movs	r1, #0
 80016e6:	4822      	ldr	r0, [pc, #136]	; (8001770 <move_rotor+0x290>)
 80016e8:	f005 fd00 	bl	80070ec <HAL_TIMEx_PWMN_Stop>
		TIM8->CCR1 = W_PWM;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <move_rotor+0x280>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4c1d      	ldr	r4, [pc, #116]	; (8001768 <move_rotor+0x288>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd0a 	bl	800110c <__aeabi_f2uiz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80016fc:	2100      	movs	r1, #0
 80016fe:	481c      	ldr	r0, [pc, #112]	; (8001770 <move_rotor+0x290>)
 8001700:	f004 fd88 	bl	8006214 <HAL_TIM_PWM_Start>
 8001704:	e011      	b.n	800172a <move_rotor+0x24a>
	}
	else {
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001706:	2100      	movs	r1, #0
 8001708:	4819      	ldr	r0, [pc, #100]	; (8001770 <move_rotor+0x290>)
 800170a:	f004 fdc1 	bl	8006290 <HAL_TIM_PWM_Stop>
		TIM8->CCR1 = -W_PWM;
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <move_rotor+0x280>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001716:	4c14      	ldr	r4, [pc, #80]	; (8001768 <move_rotor+0x288>)
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fcf7 	bl	800110c <__aeabi_f2uiz>
 800171e:	4603      	mov	r3, r0
 8001720:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001722:	2100      	movs	r1, #0
 8001724:	4812      	ldr	r0, [pc, #72]	; (8001770 <move_rotor+0x290>)
 8001726:	f005 fcb7 	bl	8007098 <HAL_TIMEx_PWMN_Start>
	}

	// Сброс счетчиков таймеров для синхронизации
	TIM1->CNT = 0;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <move_rotor+0x284>)
 800172c:	2200      	movs	r2, #0
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = 0;
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <move_rotor+0x288>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	; 0x24
	return;
 8001736:	bf00      	nop
}
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bdb0      	pop	{r4, r5, r7, pc}
 800173e:	bf00      	nop
 8001740:	54442d18 	.word	0x54442d18
 8001744:	400921fb 	.word	0x400921fb
 8001748:	20000000 	.word	0x20000000
 800174c:	40668000 	.word	0x40668000
 8001750:	20000058 	.word	0x20000058
 8001754:	42f00000 	.word	0x42f00000
 8001758:	2000005c 	.word	0x2000005c
 800175c:	43700000 	.word	0x43700000
 8001760:	20000064 	.word	0x20000064
 8001764:	40010000 	.word	0x40010000
 8001768:	40010400 	.word	0x40010400
 800176c:	200002a4 	.word	0x200002a4
 8001770:	2000013c 	.word	0x2000013c

08001774 <motor_control>:

// Функция, управляющая последовательностью переключением обмоток двигателя
float offset = 0;
void motor_control(uint8_t command, uint16_t pwm) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	460a      	mov	r2, r1
 800177e:	71fb      	strb	r3, [r7, #7]
 8001780:	4613      	mov	r3, r2
 8001782:	80bb      	strh	r3, [r7, #4]
	switch (command) {
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d05b      	beq.n	8001842 <motor_control+0xce>
 800178a:	2b02      	cmp	r3, #2
 800178c:	d172      	bne.n	8001874 <motor_control+0x100>
		case Eright:
			switch (step) {
 800178e:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <motor_control+0x10c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	3b01      	subs	r3, #1
 8001794:	2b05      	cmp	r3, #5
 8001796:	d852      	bhi.n	800183e <motor_control+0xca>
 8001798:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <motor_control+0x2c>)
 800179a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179e:	bf00      	nop
 80017a0:	08001829 	.word	0x08001829
 80017a4:	080017fd 	.word	0x080017fd
 80017a8:	08001813 	.word	0x08001813
 80017ac:	080017d1 	.word	0x080017d1
 80017b0:	080017b9 	.word	0x080017b9
 80017b4:	080017e7 	.word	0x080017e7
			case 0b101:
				move_rotor(0 + offset);
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <motor_control+0x110>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f04f 0100 	mov.w	r1, #0
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff f9d5 	bl	8000b70 <__addsf3>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fe89 	bl	80014e0 <move_rotor>
				break;
 80017ce:	e037      	b.n	8001840 <motor_control+0xcc>
			case 0b100:
				move_rotor(60 + offset);
 80017d0:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <motor_control+0x110>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	492c      	ldr	r1, [pc, #176]	; (8001888 <motor_control+0x114>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f9ca 	bl	8000b70 <__addsf3>
 80017dc:	4603      	mov	r3, r0
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fe7e 	bl	80014e0 <move_rotor>
				break;
 80017e4:	e02c      	b.n	8001840 <motor_control+0xcc>
			case 0b110:
				move_rotor(120 + offset);
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <motor_control+0x110>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4928      	ldr	r1, [pc, #160]	; (800188c <motor_control+0x118>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff f9bf 	bl	8000b70 <__addsf3>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fe73 	bl	80014e0 <move_rotor>
				break;
 80017fa:	e021      	b.n	8001840 <motor_control+0xcc>
			case 0b010:
				move_rotor(180 + offset);
 80017fc:	4b21      	ldr	r3, [pc, #132]	; (8001884 <motor_control+0x110>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4923      	ldr	r1, [pc, #140]	; (8001890 <motor_control+0x11c>)
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff f9b4 	bl	8000b70 <__addsf3>
 8001808:	4603      	mov	r3, r0
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fe68 	bl	80014e0 <move_rotor>
				break;
 8001810:	e016      	b.n	8001840 <motor_control+0xcc>
			case 0b011:
				move_rotor(240 + offset);
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <motor_control+0x110>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	491f      	ldr	r1, [pc, #124]	; (8001894 <motor_control+0x120>)
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f9a9 	bl	8000b70 <__addsf3>
 800181e:	4603      	mov	r3, r0
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fe5d 	bl	80014e0 <move_rotor>
				break;
 8001826:	e00b      	b.n	8001840 <motor_control+0xcc>
			case 0b001:
				move_rotor(300 + offset);
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <motor_control+0x110>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	491a      	ldr	r1, [pc, #104]	; (8001898 <motor_control+0x124>)
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f99e 	bl	8000b70 <__addsf3>
 8001834:	4603      	mov	r3, r0
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fe52 	bl	80014e0 <move_rotor>
				break;
 800183c:	e000      	b.n	8001840 <motor_control+0xcc>

			default:
				break;
 800183e:	bf00      	nop
			}
			break;
 8001840:	e019      	b.n	8001876 <motor_control+0x102>

		case Estop:
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001842:	2100      	movs	r1, #0
 8001844:	4815      	ldr	r0, [pc, #84]	; (800189c <motor_control+0x128>)
 8001846:	f004 fd23 	bl	8006290 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800184a:	2100      	movs	r1, #0
 800184c:	4813      	ldr	r0, [pc, #76]	; (800189c <motor_control+0x128>)
 800184e:	f005 fc4d 	bl	80070ec <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001852:	2104      	movs	r1, #4
 8001854:	4811      	ldr	r0, [pc, #68]	; (800189c <motor_control+0x128>)
 8001856:	f004 fd1b 	bl	8006290 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 800185a:	2104      	movs	r1, #4
 800185c:	480f      	ldr	r0, [pc, #60]	; (800189c <motor_control+0x128>)
 800185e:	f005 fc45 	bl	80070ec <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001862:	2100      	movs	r1, #0
 8001864:	480e      	ldr	r0, [pc, #56]	; (80018a0 <motor_control+0x12c>)
 8001866:	f004 fd13 	bl	8006290 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 800186a:	2100      	movs	r1, #0
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <motor_control+0x12c>)
 800186e:	f005 fc3d 	bl	80070ec <HAL_TIMEx_PWMN_Stop>
			break;
 8001872:	e000      	b.n	8001876 <motor_control+0x102>
//			}
//
//			break;

		default:
			break;
 8001874:	bf00      	nop
	}
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000034 	.word	0x20000034
 8001884:	20000044 	.word	0x20000044
 8001888:	42700000 	.word	0x42700000
 800188c:	42f00000 	.word	0x42f00000
 8001890:	43340000 	.word	0x43340000
 8001894:	43700000 	.word	0x43700000
 8001898:	43960000 	.word	0x43960000
 800189c:	200002a4 	.word	0x200002a4
 80018a0:	2000013c 	.word	0x2000013c

080018a4 <cur_sector>:

// Чтение показателей датчиков Холла
void cur_sector() {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	hal_U = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 80018a8:	2120      	movs	r1, #32
 80018aa:	4815      	ldr	r0, [pc, #84]	; (8001900 <cur_sector+0x5c>)
 80018ac:	f002 fb1a 	bl	8003ee4 <HAL_GPIO_ReadPin>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <cur_sector+0x60>)
 80018b6:	701a      	strb	r2, [r3, #0]
	hal_V = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 80018b8:	2101      	movs	r1, #1
 80018ba:	4811      	ldr	r0, [pc, #68]	; (8001900 <cur_sector+0x5c>)
 80018bc:	f002 fb12 	bl	8003ee4 <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <cur_sector+0x64>)
 80018c6:	701a      	strb	r2, [r3, #0]
	hal_W = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 80018c8:	2102      	movs	r1, #2
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <cur_sector+0x5c>)
 80018cc:	f002 fb0a 	bl	8003ee4 <HAL_GPIO_ReadPin>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <cur_sector+0x68>)
 80018d6:	701a      	strb	r2, [r3, #0]
	step = (hal_W) | (hal_V << 1) | (hal_U << 2);
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <cur_sector+0x64>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	b25a      	sxtb	r2, r3
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <cur_sector+0x68>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b25a      	sxtb	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <cur_sector+0x60>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	b25b      	sxtb	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <cur_sector+0x6c>)
 80018fa:	701a      	strb	r2, [r3, #0]
}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40020000 	.word	0x40020000
 8001904:	20000060 	.word	0x20000060
 8001908:	20000068 	.word	0x20000068
 800190c:	20000070 	.word	0x20000070
 8001910:	20000034 	.word	0x20000034
 8001914:	00000000 	.word	0x00000000

08001918 <HAL_GPIO_EXTI_Callback>:


// Обработчик прерываний датчиков Холла
float currnetAngle = 0;
float angle = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	2b02      	cmp	r3, #2
 8001926:	dc02      	bgt.n	800192e <HAL_GPIO_EXTI_Callback+0x16>
 8001928:	2b00      	cmp	r3, #0
 800192a:	dc02      	bgt.n	8001932 <HAL_GPIO_EXTI_Callback+0x1a>
				pid_time = TIM8->CNT*0.001;
			}
		}
		break;
	}
}
 800192c:	e03d      	b.n	80019aa <HAL_GPIO_EXTI_Callback+0x92>
	switch(GPIO_Pin) {
 800192e:	2b20      	cmp	r3, #32
 8001930:	d13b      	bne.n	80019aa <HAL_GPIO_EXTI_Callback+0x92>
		if (START_FLAG!=0){
 8001932:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d036      	beq.n	80019a8 <HAL_GPIO_EXTI_Callback+0x90>
			cnt_hall += 1;
 800193a:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <HAL_GPIO_EXTI_Callback+0xac>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	b29a      	uxth	r2, r3
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001944:	801a      	strh	r2, [r3, #0]
			angle = currnetAngle;
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a20      	ldr	r2, [pc, #128]	; (80019cc <HAL_GPIO_EXTI_Callback+0xb4>)
 800194c:	6013      	str	r3, [r2, #0]
			cur_sector();
 800194e:	f7ff ffa9 	bl	80018a4 <cur_sector>
			motor_control(Eright, pwm);
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	4619      	mov	r1, r3
 8001958:	2002      	movs	r0, #2
 800195a:	f7ff ff0b 	bl	8001774 <motor_control>
			if ((pid_time >= TIME_INTERVAL_MS)&&(cnt_hall >= 5)) {
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fbbb 	bl	80010e4 <__aeabi_fcmpge>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d100      	bne.n	8001976 <HAL_GPIO_EXTI_Callback+0x5e>
		break;
 8001974:	e018      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x90>
			if ((pid_time >= TIME_INTERVAL_MS)&&(cnt_hall >= 5)) {
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d914      	bls.n	80019a8 <HAL_GPIO_EXTI_Callback+0x90>
				calculateSpeed();
 800197e:	f000 f82f 	bl	80019e0 <calculateSpeed>
				pid_time = TIM8->CNT*0.001;
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_GPIO_EXTI_Callback+0xc4>)
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fd60 	bl	800044c <__aeabi_ui2d>
 800198c:	a30a      	add	r3, pc, #40	; (adr r3, 80019b8 <HAL_GPIO_EXTI_Callback+0xa0>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe fdd5 	bl	8000540 <__aeabi_dmul>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4610      	mov	r0, r2
 800199c:	4619      	mov	r1, r3
 800199e:	f7ff f891 	bl	8000ac4 <__aeabi_d2f>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <HAL_GPIO_EXTI_Callback+0xbc>)
 80019a6:	6013      	str	r3, [r2, #0]
		break;
 80019a8:	bf00      	nop
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	f3af 8000 	nop.w
 80019b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019bc:	3f50624d 	.word	0x3f50624d
 80019c0:	20000035 	.word	0x20000035
 80019c4:	20000040 	.word	0x20000040
 80019c8:	20000048 	.word	0x20000048
 80019cc:	2000004c 	.word	0x2000004c
 80019d0:	20000000 	.word	0x20000000
 80019d4:	2000003c 	.word	0x2000003c
 80019d8:	20000008 	.word	0x20000008
 80019dc:	40010400 	.word	0x40010400

080019e0 <calculateSpeed>:

#define PULSES_PER_REVOLUTION 	6
#define GEAR_RATIO 				28 // Передаточное число
#define STEPS_REDUCER 			2

void calculateSpeed() {
 80019e0:	b598      	push	{r3, r4, r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	currentSpeed = cnt_hall * 60 / (336 * pid_time / 1000); // Текущая скорость в об/мин. Расчет: cnt_hall * 3.571428 = 60 c * cnt_hall / 16.8 = , где  16.8 = 336 * 0.05 - кол-во прерываний датчика холла за 0.05 с, для вращения со скоростью 1 об/с
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <calculateSpeed+0x4c>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	461a      	mov	r2, r3
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f970 	bl	8000cd8 <__aeabi_i2f>
 80019f8:	4604      	mov	r4, r0
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <calculateSpeed+0x50>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	490d      	ldr	r1, [pc, #52]	; (8001a34 <calculateSpeed+0x54>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff f9bd 	bl	8000d80 <__aeabi_fmul>
 8001a06:	4603      	mov	r3, r0
 8001a08:	490b      	ldr	r1, [pc, #44]	; (8001a38 <calculateSpeed+0x58>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fa6c 	bl	8000ee8 <__aeabi_fdiv>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4619      	mov	r1, r3
 8001a14:	4620      	mov	r0, r4
 8001a16:	f7ff fa67 	bl	8000ee8 <__aeabi_fdiv>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <calculateSpeed+0x5c>)
 8001a20:	601a      	str	r2, [r3, #0]
	cnt_hall = 0; // Сброс счетчика импульсов
 8001a22:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <calculateSpeed+0x4c>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	801a      	strh	r2, [r3, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	bd98      	pop	{r3, r4, r7, pc}
 8001a2c:	20000040 	.word	0x20000040
 8001a30:	2000003c 	.word	0x2000003c
 8001a34:	43a80000 	.word	0x43a80000
 8001a38:	447a0000 	.word	0x447a0000
 8001a3c:	20000038 	.word	0x20000038

08001a40 <HAL_TIM_PeriodElapsedCallback>:
    lastError = error;
}

bool angleFlag = 0;
// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	if (htim == &htim14) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d138      	bne.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0x82>
		pid_time += 0.5; // 0.5 мс - период таймера 14. Расчет: (TIM_ARR * TIM_PSC) / TIM_FREQ / ) = ((499+1) * (59+1)) / 60 000 000 = 0,0005 с = 0.5 мс
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f889 	bl	8000b70 <__addsf3>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001a64:	601a      	str	r2, [r3, #0]
		if (((pid_time >= TIME_INTERVAL_MS)&&(cnt_hall >= 5))||(pid_time >= 2000)) {
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fb37 	bl	80010e4 <__aeabi_fcmpge>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_TIM_PeriodElapsedCallback+0x44>
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d809      	bhi.n	8001a98 <HAL_TIM_PeriodElapsedCallback+0x58>
 8001a84:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4917      	ldr	r1, [pc, #92]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fb2a 	bl	80010e4 <__aeabi_fcmpge>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d100      	bne.n	8001a98 <HAL_TIM_PeriodElapsedCallback+0x58>
			calculateSpeed();
//			calculatePID();
			pid_time = TIM8->CNT*0.001;
		}
	}
}
 8001a96:	e014      	b.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0x82>
			calculateSpeed();
 8001a98:	f7ff ffa2 	bl	80019e0 <calculateSpeed>
			pid_time = TIM8->CNT*0.001;
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fcd3 	bl	800044c <__aeabi_ui2d>
 8001aa6:	a30a      	add	r3, pc, #40	; (adr r3, 8001ad0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aac:	f7fe fd48 	bl	8000540 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f804 	bl	8000ac4 <__aeabi_d2f>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001ac0:	6013      	str	r3, [r2, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	f3af 8000 	nop.w
 8001ad0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ad4:	3f50624d 	.word	0x3f50624d
 8001ad8:	200002e4 	.word	0x200002e4
 8001adc:	2000003c 	.word	0x2000003c
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000040 	.word	0x20000040
 8001ae8:	44fa0000 	.word	0x44fa0000
 8001aec:	40010400 	.word	0x40010400

08001af0 <start>:

//////////////////////////////////////////////////
//////////////////////////////////////////////////

// функция - инициализация
void start(){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	initialize_PID_constants();
 8001af4:	f7ff fca8 	bl	8001448 <initialize_PID_constants>
	START_FLAG=1;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <start+0x28>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim14);
 8001afe:	4807      	ldr	r0, [pc, #28]	; (8001b1c <start+0x2c>)
 8001b00:	f004 fafd 	bl	80060fe <HAL_TIM_Base_Start_IT>
	cur_sector();
 8001b04:	f7ff fece 	bl	80018a4 <cur_sector>
	motor_control(Eright, pwm);
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <start+0x30>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f7ff fe30 	bl	8001774 <motor_control>
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000035 	.word	0x20000035
 8001b1c:	200002e4 	.word	0x200002e4
 8001b20:	20000000 	.word	0x20000000

08001b24 <loop>:

// Бесконечный цикл
void loop(){
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b34:	f000 ffd8 	bl	8002ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b38:	f000 f817 	bl	8001b6a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3c:	f000 fb3e 	bl	80021bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001b40:	f000 fb06 	bl	8002150 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b44:	f000 f858 	bl	8001bf8 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001b48:	f000 f8c0 	bl	8001ccc <MX_I2C3_Init>
  MX_TIM1_Init();
 8001b4c:	f000 f8ec 	bl	8001d28 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001b50:	f000 f9ea 	bl	8001f28 <MX_TIM8_Init>
  MX_TIM14_Init();
 8001b54:	f000 fa88 	bl	8002068 <MX_TIM14_Init>
  MX_USART3_UART_Init();
 8001b58:	f000 fad0 	bl	80020fc <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001b5c:	f000 f990 	bl	8001e80 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  start();
 8001b60:	f7ff ffc6 	bl	8001af0 <start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001b64:	f7ff ffde 	bl	8001b24 <loop>
 8001b68:	e7fc      	b.n	8001b64 <main+0x34>

08001b6a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b092      	sub	sp, #72	; 0x48
 8001b6e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b70:	f107 0318 	add.w	r3, r7, #24
 8001b74:	2230      	movs	r2, #48	; 0x30
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f006 f803 	bl	8007b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b94:	2302      	movs	r3, #2
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b9e:	2308      	movs	r3, #8
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001ba2:	23f0      	movs	r3, #240	; 0xf0
 8001ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001baa:	2304      	movs	r3, #4
 8001bac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fdf2 	bl	800579c <HAL_RCC_OscConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001bbe:	f000 fb99 	bl	80022f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bc2:	230f      	movs	r3, #15
 8001bc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2103      	movs	r1, #3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f004 f846 	bl	8005c70 <HAL_RCC_ClockConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001bea:	f000 fb83 	bl	80022f4 <Error_Handler>
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3748      	adds	r7, #72	; 0x48
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bfe:	463b      	mov	r3, r7
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c0c:	4a2d      	ldr	r2, [pc, #180]	; (8001cc4 <MX_ADC1_Init+0xcc>)
 8001c0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c1c:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c36:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <MX_ADC1_Init+0xd0>)
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c3a:	4b21      	ldr	r3, [pc, #132]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c42:	2203      	movs	r2, #3
 8001c44:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c46:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c52:	481b      	ldr	r0, [pc, #108]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c54:	f000 ffb6 	bl	8002bc4 <HAL_ADC_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 8001c5e:	f000 fb49 	bl	80022f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c62:	2304      	movs	r3, #4
 8001c64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c6e:	463b      	mov	r3, r7
 8001c70:	4619      	mov	r1, r3
 8001c72:	4813      	ldr	r0, [pc, #76]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c74:	f001 f946 	bl	8002f04 <HAL_ADC_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001c7e:	f000 fb39 	bl	80022f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c82:	2303      	movs	r3, #3
 8001c84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c86:	2302      	movs	r3, #2
 8001c88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c8a:	463b      	mov	r3, r7
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001c90:	f001 f938 	bl	8002f04 <HAL_ADC_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001c9a:	f000 fb2b 	bl	80022f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_ADC1_Init+0xc8>)
 8001ca8:	f001 f92c 	bl	8002f04 <HAL_ADC_ConfigChannel>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8001cb2:	f000 fb1f 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200001fc 	.word	0x200001fc
 8001cc4:	40012000 	.word	0x40012000
 8001cc8:	0f000001 	.word	0x0f000001

08001ccc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <MX_I2C3_Init+0x50>)
 8001cd2:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <MX_I2C3_Init+0x54>)
 8001cd4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_I2C3_Init+0x50>)
 8001cd8:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <MX_I2C3_Init+0x58>)
 8001cda:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_I2C3_Init+0x50>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_I2C3_Init+0x50>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_I2C3_Init+0x50>)
 8001cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf0:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <MX_I2C3_Init+0x50>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_I2C3_Init+0x50>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <MX_I2C3_Init+0x50>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_I2C3_Init+0x50>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d08:	4804      	ldr	r0, [pc, #16]	; (8001d1c <MX_I2C3_Init+0x50>)
 8001d0a:	f002 f91b 	bl	8003f44 <HAL_I2C_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001d14:	f000 faee 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	200000e8 	.word	0x200000e8
 8001d20:	40005c00 	.word	0x40005c00
 8001d24:	000186a0 	.word	0x000186a0

08001d28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b096      	sub	sp, #88	; 0x58
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]
 8001d56:	615a      	str	r2, [r3, #20]
 8001d58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4618      	mov	r0, r3
 8001d62:	f005 ff0f 	bl	8007b84 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d66:	4b44      	ldr	r3, [pc, #272]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001d68:	4a44      	ldr	r2, [pc, #272]	; (8001e7c <MX_TIM1_Init+0x154>)
 8001d6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d6c:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d72:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001d74:	2220      	movs	r2, #32
 8001d76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3750;
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001d7a:	f640 62a6 	movw	r2, #3750	; 0xea6
 8001d7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d80:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d86:	4b3c      	ldr	r3, [pc, #240]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8c:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d92:	4839      	ldr	r0, [pc, #228]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001d94:	f004 f988 	bl	80060a8 <HAL_TIM_Base_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001d9e:	f000 faa9 	bl	80022f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001da8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dac:	4619      	mov	r1, r3
 8001dae:	4832      	ldr	r0, [pc, #200]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001db0:	f004 fd86 	bl	80068c0 <HAL_TIM_ConfigClockSource>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dba:	f000 fa9b 	bl	80022f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001dbe:	482e      	ldr	r0, [pc, #184]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001dc0:	f004 f9f4 	bl	80061ac <HAL_TIM_PWM_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001dca:	f000 fa93 	bl	80022f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4826      	ldr	r0, [pc, #152]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001dde:	f005 f9c6 	bl	800716e <HAL_TIMEx_MasterConfigSynchronization>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001de8:	f000 fa84 	bl	80022f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dec:	2360      	movs	r3, #96	; 0x60
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e00:	2300      	movs	r3, #0
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4819      	ldr	r0, [pc, #100]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001e12:	f004 fc8f 	bl	8006734 <HAL_TIM_PWM_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001e1c:	f000 fa6a 	bl	80022f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e24:	2204      	movs	r2, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	4813      	ldr	r0, [pc, #76]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001e2a:	f004 fc83 	bl	8006734 <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001e34:	f000 fa5e 	bl	80022f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001e5c:	f005 f9cb 	bl	80071f6 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001e66:	f000 fa45 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e6a:	4803      	ldr	r0, [pc, #12]	; (8001e78 <MX_TIM1_Init+0x150>)
 8001e6c:	f000 fc7e 	bl	800276c <HAL_TIM_MspPostInit>

}
 8001e70:	bf00      	nop
 8001e72:	3758      	adds	r7, #88	; 0x58
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200002a4 	.word	0x200002a4
 8001e7c:	40010000 	.word	0x40010000

08001e80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	; 0x30
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	2224      	movs	r2, #36	; 0x24
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f005 fe78 	bl	8007b84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e9c:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <MX_TIM4_Init+0xa0>)
 8001e9e:	4a21      	ldr	r2, [pc, #132]	; (8001f24 <MX_TIM4_Init+0xa4>)
 8001ea0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <MX_TIM4_Init+0xa0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <MX_TIM4_Init+0xa0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <MX_TIM4_Init+0xa0>)
 8001eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <MX_TIM4_Init+0xa0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <MX_TIM4_Init+0xa0>)
 8001ebe:	2280      	movs	r2, #128	; 0x80
 8001ec0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ed2:	230a      	movs	r3, #10
 8001ed4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eda:	2301      	movs	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001ee2:	230a      	movs	r3, #10
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	4619      	mov	r1, r3
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <MX_TIM4_Init+0xa0>)
 8001eee:	f004 fa27 	bl	8006340 <HAL_TIM_Encoder_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ef8:	f000 f9fc 	bl	80022f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	4619      	mov	r1, r3
 8001f08:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_TIM4_Init+0xa0>)
 8001f0a:	f005 f930 	bl	800716e <HAL_TIMEx_MasterConfigSynchronization>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001f14:	f000 f9ee 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001f18:	bf00      	nop
 8001f1a:	3730      	adds	r7, #48	; 0x30
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	2000017c 	.word	0x2000017c
 8001f24:	40000800 	.word	0x40000800

08001f28 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b096      	sub	sp, #88	; 0x58
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	611a      	str	r2, [r3, #16]
 8001f56:	615a      	str	r2, [r3, #20]
 8001f58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f005 fe0f 	bl	8007b84 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <MX_TIM8_Init+0x138>)
 8001f68:	4a3e      	ldr	r2, [pc, #248]	; (8002064 <MX_TIM8_Init+0x13c>)
 8001f6a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001f6c:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <MX_TIM8_Init+0x138>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <MX_TIM8_Init+0x138>)
 8001f74:	2220      	movs	r2, #32
 8001f76:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3750;
 8001f78:	4b39      	ldr	r3, [pc, #228]	; (8002060 <MX_TIM8_Init+0x138>)
 8001f7a:	f640 62a6 	movw	r2, #3750	; 0xea6
 8001f7e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f80:	4b37      	ldr	r3, [pc, #220]	; (8002060 <MX_TIM8_Init+0x138>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001f86:	4b36      	ldr	r3, [pc, #216]	; (8002060 <MX_TIM8_Init+0x138>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <MX_TIM8_Init+0x138>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001f92:	4833      	ldr	r0, [pc, #204]	; (8002060 <MX_TIM8_Init+0x138>)
 8001f94:	f004 f888 	bl	80060a8 <HAL_TIM_Base_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001f9e:	f000 f9a9 	bl	80022f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001fa8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fac:	4619      	mov	r1, r3
 8001fae:	482c      	ldr	r0, [pc, #176]	; (8002060 <MX_TIM8_Init+0x138>)
 8001fb0:	f004 fc86 	bl	80068c0 <HAL_TIM_ConfigClockSource>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001fba:	f000 f99b 	bl	80022f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001fbe:	4828      	ldr	r0, [pc, #160]	; (8002060 <MX_TIM8_Init+0x138>)
 8001fc0:	f004 f8f4 	bl	80061ac <HAL_TIM_PWM_Init>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001fca:	f000 f993 	bl	80022f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001fd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4820      	ldr	r0, [pc, #128]	; (8002060 <MX_TIM8_Init+0x138>)
 8001fde:	f005 f8c6 	bl	800716e <HAL_TIMEx_MasterConfigSynchronization>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001fe8:	f000 f984 	bl	80022f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fec:	2360      	movs	r3, #96	; 0x60
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800200c:	2200      	movs	r2, #0
 800200e:	4619      	mov	r1, r3
 8002010:	4813      	ldr	r0, [pc, #76]	; (8002060 <MX_TIM8_Init+0x138>)
 8002012:	f004 fb8f 	bl	8006734 <HAL_TIM_PWM_ConfigChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800201c:	f000 f96a 	bl	80022f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002038:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4807      	ldr	r0, [pc, #28]	; (8002060 <MX_TIM8_Init+0x138>)
 8002044:	f005 f8d7 	bl	80071f6 <HAL_TIMEx_ConfigBreakDeadTime>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800204e:	f000 f951 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002052:	4803      	ldr	r0, [pc, #12]	; (8002060 <MX_TIM8_Init+0x138>)
 8002054:	f000 fb8a 	bl	800276c <HAL_TIM_MspPostInit>

}
 8002058:	bf00      	nop
 800205a:	3758      	adds	r7, #88	; 0x58
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	2000013c 	.word	0x2000013c
 8002064:	40010400 	.word	0x40010400

08002068 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	615a      	str	r2, [r3, #20]
 800207e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <MX_TIM14_Init+0x8c>)
 8002082:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <MX_TIM14_Init+0x90>)
 8002084:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 59;
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <MX_TIM14_Init+0x8c>)
 8002088:	223b      	movs	r2, #59	; 0x3b
 800208a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <MX_TIM14_Init+0x8c>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <MX_TIM14_Init+0x8c>)
 8002094:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002098:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209a:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <MX_TIM14_Init+0x8c>)
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a0:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <MX_TIM14_Init+0x8c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80020a6:	4813      	ldr	r0, [pc, #76]	; (80020f4 <MX_TIM14_Init+0x8c>)
 80020a8:	f003 fffe 	bl	80060a8 <HAL_TIM_Base_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80020b2:	f000 f91f 	bl	80022f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80020b6:	480f      	ldr	r0, [pc, #60]	; (80020f4 <MX_TIM14_Init+0x8c>)
 80020b8:	f004 f844 	bl	8006144 <HAL_TIM_OC_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80020c2:	f000 f917 	bl	80022f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	2200      	movs	r2, #0
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_TIM14_Init+0x8c>)
 80020de:	f004 fac9 	bl	8006674 <HAL_TIM_OC_ConfigChannel>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80020e8:	f000 f904 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200002e4 	.word	0x200002e4
 80020f8:	40002000 	.word	0x40002000

080020fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <MX_USART3_UART_Init+0x4c>)
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <MX_USART3_UART_Init+0x50>)
 8002104:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <MX_USART3_UART_Init+0x4c>)
 8002108:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800210c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800210e:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <MX_USART3_UART_Init+0x4c>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <MX_USART3_UART_Init+0x4c>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <MX_USART3_UART_Init+0x4c>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <MX_USART3_UART_Init+0x4c>)
 8002122:	220c      	movs	r2, #12
 8002124:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <MX_USART3_UART_Init+0x4c>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <MX_USART3_UART_Init+0x4c>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <MX_USART3_UART_Init+0x4c>)
 8002134:	f005 f8e6 	bl	8007304 <HAL_UART_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800213e:	f000 f8d9 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200001bc 	.word	0x200001bc
 800214c:	40004800 	.word	0x40004800

08002150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <MX_DMA_Init+0x68>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <MX_DMA_Init+0x68>)
 8002160:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <MX_DMA_Init+0x68>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <MX_DMA_Init+0x68>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a0f      	ldr	r2, [pc, #60]	; (80021b8 <MX_DMA_Init+0x68>)
 800217c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <MX_DMA_Init+0x68>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2100      	movs	r1, #0
 8002192:	200f      	movs	r0, #15
 8002194:	f001 f9bb 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002198:	200f      	movs	r0, #15
 800219a:	f001 f9d4 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800219e:	2200      	movs	r2, #0
 80021a0:	2100      	movs	r1, #0
 80021a2:	2038      	movs	r0, #56	; 0x38
 80021a4:	f001 f9b3 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021a8:	2038      	movs	r0, #56	; 0x38
 80021aa:	f001 f9cc 	bl	8003546 <HAL_NVIC_EnableIRQ>

}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800

080021bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	; 0x30
 80021c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	605a      	str	r2, [r3, #4]
 80021cc:	609a      	str	r2, [r3, #8]
 80021ce:	60da      	str	r2, [r3, #12]
 80021d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <MX_GPIO_Init+0x128>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a42      	ldr	r2, [pc, #264]	; (80022e4 <MX_GPIO_Init+0x128>)
 80021dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b40      	ldr	r3, [pc, #256]	; (80022e4 <MX_GPIO_Init+0x128>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	4b3c      	ldr	r3, [pc, #240]	; (80022e4 <MX_GPIO_Init+0x128>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f6:	4a3b      	ldr	r2, [pc, #236]	; (80022e4 <MX_GPIO_Init+0x128>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	6313      	str	r3, [r2, #48]	; 0x30
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <MX_GPIO_Init+0x128>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <MX_GPIO_Init+0x128>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a34      	ldr	r2, [pc, #208]	; (80022e4 <MX_GPIO_Init+0x128>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <MX_GPIO_Init+0x128>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <MX_GPIO_Init+0x128>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <MX_GPIO_Init+0x128>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6313      	str	r3, [r2, #48]	; 0x30
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <MX_GPIO_Init+0x128>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b27      	ldr	r3, [pc, #156]	; (80022e4 <MX_GPIO_Init+0x128>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <MX_GPIO_Init+0x128>)
 800224c:	f043 0310 	orr.w	r3, r3, #16
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <MX_GPIO_Init+0x128>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <MX_GPIO_Init+0x128>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <MX_GPIO_Init+0x128>)
 8002268:	f043 0308 	orr.w	r3, r3, #8
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <MX_GPIO_Init+0x128>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0308 	and.w	r3, r3, #8
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 800227a:	2323      	movs	r3, #35	; 0x23
 800227c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <MX_GPIO_Init+0x12c>)
 8002280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	4619      	mov	r1, r3
 800228c:	4817      	ldr	r0, [pc, #92]	; (80022ec <MX_GPIO_Init+0x130>)
 800228e:	f001 fc8b 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <MX_GPIO_Init+0x12c>)
 8002298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4812      	ldr	r0, [pc, #72]	; (80022f0 <MX_GPIO_Init+0x134>)
 80022a6:	f001 fc7f 	bl	8003ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	2006      	movs	r0, #6
 80022b0:	f001 f92d 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80022b4:	2006      	movs	r0, #6
 80022b6:	f001 f946 	bl	8003546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2007      	movs	r0, #7
 80022c0:	f001 f925 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80022c4:	2007      	movs	r0, #7
 80022c6:	f001 f93e 	bl	8003546 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2100      	movs	r1, #0
 80022ce:	2017      	movs	r0, #23
 80022d0:	f001 f91d 	bl	800350e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80022d4:	2017      	movs	r0, #23
 80022d6:	f001 f936 	bl	8003546 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022da:	bf00      	nop
 80022dc:	3730      	adds	r7, #48	; 0x30
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	10310000 	.word	0x10310000
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020800 	.word	0x40020800

080022f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f8:	b672      	cpsid	i
}
 80022fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022fc:	e7fe      	b.n	80022fc <Error_Handler+0x8>
	...

08002300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_MspInit+0x48>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	4a0e      	ldr	r2, [pc, #56]	; (8002348 <HAL_MspInit+0x48>)
 8002310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002314:	6453      	str	r3, [r2, #68]	; 0x44
 8002316:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <HAL_MspInit+0x48>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_MspInit+0x48>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <HAL_MspInit+0x48>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	; 0x40
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_MspInit+0x48>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	40023800 	.word	0x40023800

0800234c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a4d      	ldr	r2, [pc, #308]	; (80024a0 <HAL_ADC_MspInit+0x154>)
 800236a:	4293      	cmp	r3, r2
 800236c:	f040 8094 	bne.w	8002498 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
 8002374:	4b4b      	ldr	r3, [pc, #300]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 8002376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002378:	4a4a      	ldr	r2, [pc, #296]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6453      	str	r3, [r2, #68]	; 0x44
 8002380:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	4b44      	ldr	r3, [pc, #272]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4a43      	ldr	r2, [pc, #268]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6313      	str	r3, [r2, #48]	; 0x30
 800239c:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	4a3c      	ldr	r2, [pc, #240]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6313      	str	r3, [r2, #48]	; 0x30
 80023b8:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	4a35      	ldr	r2, [pc, #212]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	6313      	str	r3, [r2, #48]	; 0x30
 80023d4:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <HAL_ADC_MspInit+0x158>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80023e0:	2338      	movs	r3, #56	; 0x38
 80023e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023e4:	2303      	movs	r3, #3
 80023e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ec:	f107 031c 	add.w	r3, r7, #28
 80023f0:	4619      	mov	r1, r3
 80023f2:	482d      	ldr	r0, [pc, #180]	; (80024a8 <HAL_ADC_MspInit+0x15c>)
 80023f4:	f001 fbd8 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80023f8:	2318      	movs	r3, #24
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023fc:	2303      	movs	r3, #3
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	4828      	ldr	r0, [pc, #160]	; (80024ac <HAL_ADC_MspInit+0x160>)
 800240c:	f001 fbcc 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002410:	2302      	movs	r3, #2
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002414:	2303      	movs	r3, #3
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 031c 	add.w	r3, r7, #28
 8002420:	4619      	mov	r1, r3
 8002422:	4823      	ldr	r0, [pc, #140]	; (80024b0 <HAL_ADC_MspInit+0x164>)
 8002424:	f001 fbc0 	bl	8003ba8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002428:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 800242a:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <HAL_ADC_MspInit+0x16c>)
 800242c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800242e:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 8002430:	2200      	movs	r2, #0
 8002432:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002434:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800243a:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 800243c:	2200      	movs	r2, #0
 800243e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002440:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 8002442:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002446:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002448:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 800244a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800244e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002450:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 8002452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002456:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 800245a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800245e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 8002462:	2200      	movs	r2, #0
 8002464:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 8002468:	2200      	movs	r2, #0
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800246c:	4811      	ldr	r0, [pc, #68]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 800246e:	f001 f885 	bl	800357c <HAL_DMA_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002478:	f7ff ff3c 	bl	80022f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 8002480:	639a      	str	r2, [r3, #56]	; 0x38
 8002482:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <HAL_ADC_MspInit+0x168>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	2012      	movs	r0, #18
 800248e:	f001 f83e 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002492:	2012      	movs	r0, #18
 8002494:	f001 f857 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002498:	bf00      	nop
 800249a:	3730      	adds	r7, #48	; 0x30
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40012000 	.word	0x40012000
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020800 	.word	0x40020800
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40020400 	.word	0x40020400
 80024b4:	20000244 	.word	0x20000244
 80024b8:	40026410 	.word	0x40026410

080024bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a44      	ldr	r2, [pc, #272]	; (80025ec <HAL_I2C_MspInit+0x130>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	f040 8082 	bne.w	80025e4 <HAL_I2C_MspInit+0x128>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	4b42      	ldr	r3, [pc, #264]	; (80025f0 <HAL_I2C_MspInit+0x134>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	4a41      	ldr	r2, [pc, #260]	; (80025f0 <HAL_I2C_MspInit+0x134>)
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	6313      	str	r3, [r2, #48]	; 0x30
 80024f0:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <HAL_I2C_MspInit+0x134>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_I2C_MspInit+0x134>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	4a3a      	ldr	r2, [pc, #232]	; (80025f0 <HAL_I2C_MspInit+0x134>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6313      	str	r3, [r2, #48]	; 0x30
 800250c:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_I2C_MspInit+0x134>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800251c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800251e:	2312      	movs	r3, #18
 8002520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002526:	2303      	movs	r3, #3
 8002528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800252a:	2304      	movs	r3, #4
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252e:	f107 0314 	add.w	r3, r7, #20
 8002532:	4619      	mov	r1, r3
 8002534:	482f      	ldr	r0, [pc, #188]	; (80025f4 <HAL_I2C_MspInit+0x138>)
 8002536:	f001 fb37 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800253a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800253e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002540:	2312      	movs	r3, #18
 8002542:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002548:	2303      	movs	r3, #3
 800254a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800254c:	2304      	movs	r3, #4
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	4828      	ldr	r0, [pc, #160]	; (80025f8 <HAL_I2C_MspInit+0x13c>)
 8002558:	f001 fb26 	bl	8003ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	4b23      	ldr	r3, [pc, #140]	; (80025f0 <HAL_I2C_MspInit+0x134>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	4a22      	ldr	r2, [pc, #136]	; (80025f0 <HAL_I2C_MspInit+0x134>)
 8002566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800256a:	6413      	str	r3, [r2, #64]	; 0x40
 800256c:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_I2C_MspInit+0x134>)
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002574:	60bb      	str	r3, [r7, #8]
 8002576:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8002578:	4b20      	ldr	r3, [pc, #128]	; (80025fc <HAL_I2C_MspInit+0x140>)
 800257a:	4a21      	ldr	r2, [pc, #132]	; (8002600 <HAL_I2C_MspInit+0x144>)
 800257c:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <HAL_I2C_MspInit+0x140>)
 8002580:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002584:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_I2C_MspInit+0x140>)
 8002588:	2240      	movs	r2, #64	; 0x40
 800258a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_I2C_MspInit+0x140>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_I2C_MspInit+0x140>)
 8002594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002598:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_I2C_MspInit+0x140>)
 800259c:	2200      	movs	r2, #0
 800259e:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a0:	4b16      	ldr	r3, [pc, #88]	; (80025fc <HAL_I2C_MspInit+0x140>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_I2C_MspInit+0x140>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_I2C_MspInit+0x140>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_I2C_MspInit+0x140>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 80025b8:	4810      	ldr	r0, [pc, #64]	; (80025fc <HAL_I2C_MspInit+0x140>)
 80025ba:	f000 ffdf 	bl	800357c <HAL_DMA_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80025c4:	f7ff fe96 	bl	80022f4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_I2C_MspInit+0x140>)
 80025cc:	635a      	str	r2, [r3, #52]	; 0x34
 80025ce:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <HAL_I2C_MspInit+0x140>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80025d4:	2200      	movs	r2, #0
 80025d6:	2100      	movs	r1, #0
 80025d8:	2048      	movs	r0, #72	; 0x48
 80025da:	f000 ff98 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80025de:	2048      	movs	r0, #72	; 0x48
 80025e0:	f000 ffb1 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80025e4:	bf00      	nop
 80025e6:	3728      	adds	r7, #40	; 0x28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40005c00 	.word	0x40005c00
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40020800 	.word	0x40020800
 80025f8:	40020000 	.word	0x40020000
 80025fc:	20000088 	.word	0x20000088
 8002600:	40026070 	.word	0x40026070

08002604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a2a      	ldr	r2, [pc, #168]	; (80026bc <HAL_TIM_Base_MspInit+0xb8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d116      	bne.n	8002644 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <HAL_TIM_Base_MspInit+0xbc>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a28      	ldr	r2, [pc, #160]	; (80026c0 <HAL_TIM_Base_MspInit+0xbc>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <HAL_TIM_Base_MspInit+0xbc>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	2019      	movs	r0, #25
 8002638:	f000 ff69 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800263c:	2019      	movs	r0, #25
 800263e:	f000 ff82 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002642:	e036      	b.n	80026b2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a1e      	ldr	r2, [pc, #120]	; (80026c4 <HAL_TIM_Base_MspInit+0xc0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d116      	bne.n	800267c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <HAL_TIM_Base_MspInit+0xbc>)
 8002654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002656:	4a1a      	ldr	r2, [pc, #104]	; (80026c0 <HAL_TIM_Base_MspInit+0xbc>)
 8002658:	f043 0302 	orr.w	r3, r3, #2
 800265c:	6453      	str	r3, [r2, #68]	; 0x44
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_TIM_Base_MspInit+0xbc>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	202d      	movs	r0, #45	; 0x2d
 8002670:	f000 ff4d 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002674:	202d      	movs	r0, #45	; 0x2d
 8002676:	f000 ff66 	bl	8003546 <HAL_NVIC_EnableIRQ>
}
 800267a:	e01a      	b.n	80026b2 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM14)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a11      	ldr	r2, [pc, #68]	; (80026c8 <HAL_TIM_Base_MspInit+0xc4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d115      	bne.n	80026b2 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_TIM_Base_MspInit+0xbc>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <HAL_TIM_Base_MspInit+0xbc>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <HAL_TIM_Base_MspInit+0xbc>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	202d      	movs	r0, #45	; 0x2d
 80026a8:	f000 ff31 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80026ac:	202d      	movs	r0, #45	; 0x2d
 80026ae:	f000 ff4a 	bl	8003546 <HAL_NVIC_EnableIRQ>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40010000 	.word	0x40010000
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40010400 	.word	0x40010400
 80026c8:	40002000 	.word	0x40002000

080026cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 0314 	add.w	r3, r7, #20
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <HAL_TIM_Encoder_MspInit+0x94>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d134      	bne.n	8002758 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	4b15      	ldr	r3, [pc, #84]	; (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a14      	ldr	r2, [pc, #80]	; (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 8002714:	f043 0308 	orr.w	r3, r3, #8
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_TIM_Encoder_MspInit+0x98>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002726:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002730:	2301      	movs	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002738:	2302      	movs	r3, #2
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4619      	mov	r1, r3
 8002742:	4809      	ldr	r0, [pc, #36]	; (8002768 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002744:	f001 fa30 	bl	8003ba8 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002748:	2200      	movs	r2, #0
 800274a:	2100      	movs	r1, #0
 800274c:	201e      	movs	r0, #30
 800274e:	f000 fede 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002752:	201e      	movs	r0, #30
 8002754:	f000 fef7 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002758:	bf00      	nop
 800275a:	3728      	adds	r7, #40	; 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40000800 	.word	0x40000800
 8002764:	40023800 	.word	0x40023800
 8002768:	40020c00 	.word	0x40020c00

0800276c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a33      	ldr	r2, [pc, #204]	; (8002858 <HAL_TIM_MspPostInit+0xec>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d11f      	bne.n	80027ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b32      	ldr	r3, [pc, #200]	; (800285c <HAL_TIM_MspPostInit+0xf0>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a31      	ldr	r2, [pc, #196]	; (800285c <HAL_TIM_MspPostInit+0xf0>)
 8002798:	f043 0310 	orr.w	r3, r3, #16
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b2f      	ldr	r3, [pc, #188]	; (800285c <HAL_TIM_MspPostInit+0xf0>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80027aa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027bc:	2301      	movs	r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4619      	mov	r1, r3
 80027c6:	4826      	ldr	r0, [pc, #152]	; (8002860 <HAL_TIM_MspPostInit+0xf4>)
 80027c8:	f001 f9ee 	bl	8003ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80027cc:	e040      	b.n	8002850 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a24      	ldr	r2, [pc, #144]	; (8002864 <HAL_TIM_MspPostInit+0xf8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d13b      	bne.n	8002850 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	4b1f      	ldr	r3, [pc, #124]	; (800285c <HAL_TIM_MspPostInit+0xf0>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_TIM_MspPostInit+0xf0>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6313      	str	r3, [r2, #48]	; 0x30
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <HAL_TIM_MspPostInit+0xf0>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <HAL_TIM_MspPostInit+0xf0>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	4a17      	ldr	r2, [pc, #92]	; (800285c <HAL_TIM_MspPostInit+0xf0>)
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	6313      	str	r3, [r2, #48]	; 0x30
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_TIM_MspPostInit+0xf0>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002820:	2303      	movs	r3, #3
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	4619      	mov	r1, r3
 800282a:	480f      	ldr	r0, [pc, #60]	; (8002868 <HAL_TIM_MspPostInit+0xfc>)
 800282c:	f001 f9bc 	bl	8003ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002830:	2340      	movs	r3, #64	; 0x40
 8002832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002834:	2302      	movs	r3, #2
 8002836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002840:	2303      	movs	r3, #3
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4619      	mov	r1, r3
 800284a:	4808      	ldr	r0, [pc, #32]	; (800286c <HAL_TIM_MspPostInit+0x100>)
 800284c:	f001 f9ac 	bl	8003ba8 <HAL_GPIO_Init>
}
 8002850:	bf00      	nop
 8002852:	3728      	adds	r7, #40	; 0x28
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40010000 	.word	0x40010000
 800285c:	40023800 	.word	0x40023800
 8002860:	40021000 	.word	0x40021000
 8002864:	40010400 	.word	0x40010400
 8002868:	40020000 	.word	0x40020000
 800286c:	40020800 	.word	0x40020800

08002870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08a      	sub	sp, #40	; 0x28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0314 	add.w	r3, r7, #20
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <HAL_UART_MspInit+0x94>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d134      	bne.n	80028fc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <HAL_UART_MspInit+0x98>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <HAL_UART_MspInit+0x98>)
 800289c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_UART_MspInit+0x98>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_UART_MspInit+0x98>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a14      	ldr	r2, [pc, #80]	; (8002908 <HAL_UART_MspInit+0x98>)
 80028b8:	f043 0308 	orr.w	r3, r3, #8
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_UART_MspInit+0x98>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028dc:	2307      	movs	r3, #7
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	4809      	ldr	r0, [pc, #36]	; (800290c <HAL_UART_MspInit+0x9c>)
 80028e8:	f001 f95e 	bl	8003ba8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028ec:	2200      	movs	r2, #0
 80028ee:	2100      	movs	r1, #0
 80028f0:	2027      	movs	r0, #39	; 0x27
 80028f2:	f000 fe0c 	bl	800350e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028f6:	2027      	movs	r0, #39	; 0x27
 80028f8:	f000 fe25 	bl	8003546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028fc:	bf00      	nop
 80028fe:	3728      	adds	r7, #40	; 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40004800 	.word	0x40004800
 8002908:	40023800 	.word	0x40023800
 800290c:	40020c00 	.word	0x40020c00

08002910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002914:	e7fe      	b.n	8002914 <NMI_Handler+0x4>

08002916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002916:	b480      	push	{r7}
 8002918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800291a:	e7fe      	b.n	800291a <HardFault_Handler+0x4>

0800291c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002920:	e7fe      	b.n	8002920 <MemManage_Handler+0x4>

08002922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002922:	b480      	push	{r7}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002926:	e7fe      	b.n	8002926 <BusFault_Handler+0x4>

08002928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <UsageFault_Handler+0x4>

0800292e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800292e:	b480      	push	{r7}
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800294a:	bf00      	nop
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002956:	f000 f919 	bl	8002b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	bd80      	pop	{r7, pc}

0800295e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002962:	2001      	movs	r0, #1
 8002964:	f001 fad6 	bl	8003f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}

0800296c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002970:	2002      	movs	r0, #2
 8002972:	f001 facf 	bl	8003f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <DMA1_Stream4_IRQHandler+0x10>)
 8002982:	f000 fecb 	bl	800371c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	20000088 	.word	0x20000088

08002990 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <ADC_IRQHandler+0x10>)
 8002996:	f000 f958 	bl	8002c4a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200001fc 	.word	0x200001fc

080029a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80029a8:	2020      	movs	r0, #32
 80029aa:	f001 fab3 	bl	8003f14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80029ae:	2080      	movs	r0, #128	; 0x80
 80029b0:	f001 fab0 	bl	8003f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80029be:	f003 fd51 	bl	8006464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200002a4 	.word	0x200002a4

080029cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <TIM4_IRQHandler+0x10>)
 80029d2:	f003 fd47 	bl	8006464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	2000017c 	.word	0x2000017c

080029e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <USART3_IRQHandler+0x10>)
 80029e6:	f004 fcdb 	bl	80073a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200001bc 	.word	0x200001bc

080029f4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80029f8:	4803      	ldr	r0, [pc, #12]	; (8002a08 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 80029fa:	f003 fd33 	bl	8006464 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80029fe:	4803      	ldr	r0, [pc, #12]	; (8002a0c <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8002a00:	f003 fd30 	bl	8006464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	2000013c 	.word	0x2000013c
 8002a0c:	200002e4 	.word	0x200002e4

08002a10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <DMA2_Stream0_IRQHandler+0x10>)
 8002a16:	f000 fe81 	bl	800371c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000244 	.word	0x20000244

08002a24 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <I2C3_EV_IRQHandler+0x10>)
 8002a2a:	f001 fbcf 	bl	80041cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	200000e8 	.word	0x200000e8

08002a38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a3c:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <SystemInit+0x50>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <SystemInit+0x50>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <SystemInit+0x50>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <SystemInit+0x50>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <SystemInit+0x50>)
 8002a54:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <SystemInit+0x50>)
 8002a60:	4a0a      	ldr	r2, [pc, #40]	; (8002a8c <SystemInit+0x54>)
 8002a62:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <SystemInit+0x50>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a07      	ldr	r2, [pc, #28]	; (8002a88 <SystemInit+0x50>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <SystemInit+0x50>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a76:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <SystemInit+0x58>)
 8002a78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a7c:	609a      	str	r2, [r3, #8]
#endif
}
 8002a7e:	bf00      	nop
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	24003010 	.word	0x24003010
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002acc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002a98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a9a:	e003      	b.n	8002aa4 <LoopCopyDataInit>

08002a9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002aa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002aa2:	3104      	adds	r1, #4

08002aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002aa4:	480b      	ldr	r0, [pc, #44]	; (8002ad4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002aa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002aaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002aac:	d3f6      	bcc.n	8002a9c <CopyDataInit>
  ldr  r2, =_sbss
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ab0:	e002      	b.n	8002ab8 <LoopFillZerobss>

08002ab2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002ab2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ab4:	f842 3b04 	str.w	r3, [r2], #4

08002ab8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002aba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002abc:	d3f9      	bcc.n	8002ab2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002abe:	f7ff ffbb 	bl	8002a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ac2:	f005 f83b 	bl	8007b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ac6:	f7ff f833 	bl	8001b30 <main>
  bx  lr
 8002aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002acc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ad0:	08008db8 	.word	0x08008db8
  ldr  r0, =_sdata
 8002ad4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ad8:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8002adc:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8002ae0:	20000328 	.word	0x20000328

08002ae4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ae4:	e7fe      	b.n	8002ae4 <CAN1_RX0_IRQHandler>
	...

08002ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_Init+0x40>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0d      	ldr	r2, [pc, #52]	; (8002b28 <HAL_Init+0x40>)
 8002af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_Init+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <HAL_Init+0x40>)
 8002afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_Init+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_Init+0x40>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b10:	2003      	movs	r0, #3
 8002b12:	f000 fcf1 	bl	80034f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b16:	200f      	movs	r0, #15
 8002b18:	f000 f808 	bl	8002b2c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002b1c:	f7ff fbf0 	bl	8002300 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023c00 	.word	0x40023c00

08002b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_InitTick+0x54>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_InitTick+0x58>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fd09 	bl	8003562 <HAL_SYSTICK_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00e      	b.n	8002b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b0f      	cmp	r3, #15
 8002b5e:	d80a      	bhi.n	8002b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b60:	2200      	movs	r2, #0
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f000 fcd1 	bl	800350e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b6c:	4a06      	ldr	r2, [pc, #24]	; (8002b88 <HAL_InitTick+0x5c>)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	e000      	b.n	8002b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	2000000c 	.word	0x2000000c
 8002b84:	20000014 	.word	0x20000014
 8002b88:	20000010 	.word	0x20000010

08002b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b90:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_IncTick+0x1c>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_IncTick+0x20>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	4a03      	ldr	r2, [pc, #12]	; (8002bac <HAL_IncTick+0x20>)
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	20000014 	.word	0x20000014
 8002bac:	20000324 	.word	0x20000324

08002bb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb4:	4b02      	ldr	r3, [pc, #8]	; (8002bc0 <HAL_GetTick+0x10>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	20000324 	.word	0x20000324

08002bc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e033      	b.n	8002c42 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff fbb2 	bl	800234c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c0a:	f023 0302 	bic.w	r3, r3, #2
 8002c0e:	f043 0202 	orr.w	r2, r3, #2
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fa94 	bl	8003144 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
 8002c32:	e001      	b.n	8002c38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	2300      	movs	r3, #0
 8002c58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	bf0c      	ite	eq
 8002c7e:	2301      	moveq	r3, #1
 8002c80:	2300      	movne	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d049      	beq.n	8002d20 <HAL_ADC_IRQHandler+0xd6>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d046      	beq.n	8002d20 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d12b      	bne.n	8002d10 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d127      	bne.n	8002d10 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d119      	bne.n	8002d10 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0220 	bic.w	r2, r2, #32
 8002cea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f043 0201 	orr.w	r2, r3, #1
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f8db 	bl	8002ecc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 0212 	mvn.w	r2, #18
 8002d1e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2301      	moveq	r3, #1
 8002d30:	2300      	movne	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b80      	cmp	r3, #128	; 0x80
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d057      	beq.n	8002e02 <HAL_ADC_IRQHandler+0x1b8>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d054      	beq.n	8002e02 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d139      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d12b      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d124      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d11d      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d119      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dcc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 faaa 	bl	800334c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f06f 020c 	mvn.w	r2, #12
 8002e00:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e22:	2b40      	cmp	r3, #64	; 0x40
 8002e24:	bf0c      	ite	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	2300      	movne	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <HAL_ADC_IRQHandler+0x21a>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d014      	beq.n	8002e64 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d10d      	bne.n	8002e64 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f842 	bl	8002ede <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f06f 0201 	mvn.w	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	bf0c      	ite	eq
 8002e72:	2301      	moveq	r3, #1
 8002e74:	2300      	movne	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e88:	bf0c      	ite	eq
 8002e8a:	2301      	moveq	r3, #1
 8002e8c:	2300      	movne	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d015      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0x27a>
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d012      	beq.n	8002ec4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	f043 0202 	orr.w	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f06f 0220 	mvn.w	r2, #32
 8002eb2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f81b 	bl	8002ef0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f06f 0220 	mvn.w	r2, #32
 8002ec2:	601a      	str	r2, [r3, #0]
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
	...

08002f04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x1c>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e103      	b.n	8003128 <HAL_ADC_ConfigChannel+0x224>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2b09      	cmp	r3, #9
 8002f2e:	d925      	bls.n	8002f7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68d9      	ldr	r1, [r3, #12]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	3b1e      	subs	r3, #30
 8002f46:	2207      	movs	r2, #7
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43da      	mvns	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	400a      	ands	r2, r1
 8002f54:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68d9      	ldr	r1, [r3, #12]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	4603      	mov	r3, r0
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4403      	add	r3, r0
 8002f6e:	3b1e      	subs	r3, #30
 8002f70:	409a      	lsls	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	e022      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6919      	ldr	r1, [r3, #16]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	2207      	movs	r2, #7
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	400a      	ands	r2, r1
 8002f9e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6919      	ldr	r1, [r3, #16]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4403      	add	r3, r0
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d824      	bhi.n	8003014 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	3b05      	subs	r3, #5
 8002fdc:	221f      	movs	r2, #31
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	400a      	ands	r2, r1
 8002fea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	3b05      	subs	r3, #5
 8003006:	fa00 f203 	lsl.w	r2, r0, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	635a      	str	r2, [r3, #52]	; 0x34
 8003012:	e04c      	b.n	80030ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	2b0c      	cmp	r3, #12
 800301a:	d824      	bhi.n	8003066 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	3b23      	subs	r3, #35	; 0x23
 800302e:	221f      	movs	r2, #31
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43da      	mvns	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	400a      	ands	r2, r1
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	4618      	mov	r0, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	3b23      	subs	r3, #35	; 0x23
 8003058:	fa00 f203 	lsl.w	r2, r0, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
 8003064:	e023      	b.n	80030ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	3b41      	subs	r3, #65	; 0x41
 8003078:	221f      	movs	r2, #31
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	400a      	ands	r2, r1
 8003086:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	4618      	mov	r0, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	3b41      	subs	r3, #65	; 0x41
 80030a2:	fa00 f203 	lsl.w	r2, r0, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a20      	ldr	r2, [pc, #128]	; (8003134 <HAL_ADC_ConfigChannel+0x230>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d109      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1c8>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b12      	cmp	r3, #18
 80030be:	d105      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_ADC_ConfigChannel+0x234>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a1c      	ldr	r2, [pc, #112]	; (8003138 <HAL_ADC_ConfigChannel+0x234>)
 80030c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030ca:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a18      	ldr	r2, [pc, #96]	; (8003134 <HAL_ADC_ConfigChannel+0x230>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d123      	bne.n	800311e <HAL_ADC_ConfigChannel+0x21a>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d003      	beq.n	80030e6 <HAL_ADC_ConfigChannel+0x1e2>
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2b11      	cmp	r3, #17
 80030e4:	d11b      	bne.n	800311e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80030e6:	4b14      	ldr	r3, [pc, #80]	; (8003138 <HAL_ADC_ConfigChannel+0x234>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4a13      	ldr	r2, [pc, #76]	; (8003138 <HAL_ADC_ConfigChannel+0x234>)
 80030ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030f0:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b10      	cmp	r3, #16
 80030f8:	d111      	bne.n	800311e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_ADC_ConfigChannel+0x238>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a10      	ldr	r2, [pc, #64]	; (8003140 <HAL_ADC_ConfigChannel+0x23c>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	0c9a      	lsrs	r2, r3, #18
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003110:	e002      	b.n	8003118 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	3b01      	subs	r3, #1
 8003116:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1f9      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40012000 	.word	0x40012000
 8003138:	40012300 	.word	0x40012300
 800313c:	2000000c 	.word	0x2000000c
 8003140:	431bde83 	.word	0x431bde83

08003144 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800314c:	4b7d      	ldr	r3, [pc, #500]	; (8003344 <ADC_Init+0x200>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a7c      	ldr	r2, [pc, #496]	; (8003344 <ADC_Init+0x200>)
 8003152:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003156:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003158:	4b7a      	ldr	r3, [pc, #488]	; (8003344 <ADC_Init+0x200>)
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	4978      	ldr	r1, [pc, #480]	; (8003344 <ADC_Init+0x200>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	021a      	lsls	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	4a5d      	ldr	r2, [pc, #372]	; (8003348 <ADC_Init+0x204>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6899      	ldr	r1, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6899      	ldr	r1, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	e00f      	b.n	800323e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800322c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800323c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0202 	bic.w	r2, r2, #2
 800324c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	005a      	lsls	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d027      	beq.n	80032ba <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003278:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003288:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	3b01      	subs	r3, #1
 8003290:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003294:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	fa92 f2a2 	rbit	r2, r2
 800329c:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	fab2 f282 	clz	r2, r2
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	fa03 f102 	lsl.w	r1, r3, r2
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	e007      	b.n	80032ca <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032c8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	051a      	lsls	r2, r3, #20
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6899      	ldr	r1, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	025a      	lsls	r2, r3, #9
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	029a      	lsls	r2, r3, #10
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	609a      	str	r2, [r3, #8]
}
 8003338:	bf00      	nop
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40012300 	.word	0x40012300
 8003348:	0f000001 	.word	0x0f000001

0800334c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr
	...

08003360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800338c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003392:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	60d3      	str	r3, [r2, #12]
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	0a1b      	lsrs	r3, r3, #8
 80033b2:	f003 0307 	and.w	r3, r3, #7
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	db0b      	blt.n	80033ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4906      	ldr	r1, [pc, #24]	; (80033f8 <__NVIC_EnableIRQ+0x34>)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	095b      	lsrs	r3, r3, #5
 80033e4:	2001      	movs	r0, #1
 80033e6:	fa00 f202 	lsl.w	r2, r0, r2
 80033ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033ee:	bf00      	nop
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	e000e100 	.word	0xe000e100

080033fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	6039      	str	r1, [r7, #0]
 8003406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340c:	2b00      	cmp	r3, #0
 800340e:	db0a      	blt.n	8003426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	b2da      	uxtb	r2, r3
 8003414:	490c      	ldr	r1, [pc, #48]	; (8003448 <__NVIC_SetPriority+0x4c>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	0112      	lsls	r2, r2, #4
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	440b      	add	r3, r1
 8003420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003424:	e00a      	b.n	800343c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4908      	ldr	r1, [pc, #32]	; (800344c <__NVIC_SetPriority+0x50>)
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	3b04      	subs	r3, #4
 8003434:	0112      	lsls	r2, r2, #4
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	440b      	add	r3, r1
 800343a:	761a      	strb	r2, [r3, #24]
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	bc80      	pop	{r7}
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000e100 	.word	0xe000e100
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003450:	b480      	push	{r7}
 8003452:	b089      	sub	sp, #36	; 0x24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f1c3 0307 	rsb	r3, r3, #7
 800346a:	2b04      	cmp	r3, #4
 800346c:	bf28      	it	cs
 800346e:	2304      	movcs	r3, #4
 8003470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3304      	adds	r3, #4
 8003476:	2b06      	cmp	r3, #6
 8003478:	d902      	bls.n	8003480 <NVIC_EncodePriority+0x30>
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	3b03      	subs	r3, #3
 800347e:	e000      	b.n	8003482 <NVIC_EncodePriority+0x32>
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43da      	mvns	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	401a      	ands	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003498:	f04f 31ff 	mov.w	r1, #4294967295
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	43d9      	mvns	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	4313      	orrs	r3, r2
         );
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034c4:	d301      	bcc.n	80034ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034c6:	2301      	movs	r3, #1
 80034c8:	e00f      	b.n	80034ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ca:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <SysTick_Config+0x40>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034d2:	210f      	movs	r1, #15
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f7ff ff90 	bl	80033fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <SysTick_Config+0x40>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <SysTick_Config+0x40>)
 80034e4:	2207      	movs	r2, #7
 80034e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	e000e010 	.word	0xe000e010

080034f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff ff2d 	bl	8003360 <__NVIC_SetPriorityGrouping>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350e:	b580      	push	{r7, lr}
 8003510:	b086      	sub	sp, #24
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003520:	f7ff ff42 	bl	80033a8 <__NVIC_GetPriorityGrouping>
 8003524:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68b9      	ldr	r1, [r7, #8]
 800352a:	6978      	ldr	r0, [r7, #20]
 800352c:	f7ff ff90 	bl	8003450 <NVIC_EncodePriority>
 8003530:	4602      	mov	r2, r0
 8003532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003536:	4611      	mov	r1, r2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff5f 	bl	80033fc <__NVIC_SetPriority>
}
 800353e:	bf00      	nop
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff35 	bl	80033c4 <__NVIC_EnableIRQ>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffa2 	bl	80034b4 <SysTick_Config>
 8003570:	4603      	mov	r3, r0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003588:	f7ff fb12 	bl	8002bb0 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e099      	b.n	80036cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b8:	e00f      	b.n	80035da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ba:	f7ff faf9 	bl	8002bb0 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d908      	bls.n	80035da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2220      	movs	r2, #32
 80035cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2203      	movs	r2, #3
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e078      	b.n	80036cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e8      	bne.n	80035ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <HAL_DMA_Init+0x158>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	2b04      	cmp	r3, #4
 8003632:	d107      	bne.n	8003644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	4313      	orrs	r3, r2
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0307 	bic.w	r3, r3, #7
 800365a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b04      	cmp	r3, #4
 800366c:	d117      	bne.n	800369e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fa17 	bl	8003ab4 <DMA_CheckFifoParam>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2240      	movs	r2, #64	; 0x40
 8003690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800369a:	2301      	movs	r3, #1
 800369c:	e016      	b.n	80036cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f9d0 	bl	8003a4c <DMA_CalcBaseAndBitshift>
 80036ac:	4603      	mov	r3, r0
 80036ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	223f      	movs	r2, #63	; 0x3f
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	f010803f 	.word	0xf010803f

080036d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d004      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2280      	movs	r2, #128	; 0x80
 80036f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00c      	b.n	8003710 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2205      	movs	r2, #5
 80036fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
	...

0800371c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003728:	4b92      	ldr	r3, [pc, #584]	; (8003974 <HAL_DMA_IRQHandler+0x258>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a92      	ldr	r2, [pc, #584]	; (8003978 <HAL_DMA_IRQHandler+0x25c>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	0a9b      	lsrs	r3, r3, #10
 8003734:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	2208      	movs	r2, #8
 8003748:	409a      	lsls	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01a      	beq.n	8003788 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0204 	bic.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	2208      	movs	r2, #8
 8003776:	409a      	lsls	r2, r3
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f043 0201 	orr.w	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378c:	2201      	movs	r2, #1
 800378e:	409a      	lsls	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d012      	beq.n	80037be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	2201      	movs	r2, #1
 80037ac:	409a      	lsls	r2, r3
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0202 	orr.w	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	2204      	movs	r2, #4
 80037c4:	409a      	lsls	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d012      	beq.n	80037f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	2204      	movs	r2, #4
 80037e2:	409a      	lsls	r2, r3
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	f043 0204 	orr.w	r2, r3, #4
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	2210      	movs	r2, #16
 80037fa:	409a      	lsls	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d043      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d03c      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	2210      	movs	r2, #16
 8003818:	409a      	lsls	r2, r3
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d018      	beq.n	800385e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d108      	bne.n	800384c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d024      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	4798      	blx	r3
 800384a:	e01f      	b.n	800388c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01b      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	4798      	blx	r3
 800385c:	e016      	b.n	800388c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0208 	bic.w	r2, r2, #8
 800387a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003890:	2220      	movs	r2, #32
 8003892:	409a      	lsls	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 808e 	beq.w	80039ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8086 	beq.w	80039ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	2220      	movs	r2, #32
 80038b4:	409a      	lsls	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	d136      	bne.n	8003934 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0216 	bic.w	r2, r2, #22
 80038d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d103      	bne.n	80038f6 <HAL_DMA_IRQHandler+0x1da>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0208 	bic.w	r2, r2, #8
 8003904:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390a:	223f      	movs	r2, #63	; 0x3f
 800390c:	409a      	lsls	r2, r3
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003926:	2b00      	cmp	r3, #0
 8003928:	d07d      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
        }
        return;
 8003932:	e078      	b.n	8003a26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d01c      	beq.n	800397c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d108      	bne.n	8003962 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	2b00      	cmp	r3, #0
 8003956:	d030      	beq.n	80039ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
 8003960:	e02b      	b.n	80039ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d027      	beq.n	80039ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
 8003972:	e022      	b.n	80039ba <HAL_DMA_IRQHandler+0x29e>
 8003974:	2000000c 	.word	0x2000000c
 8003978:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10f      	bne.n	80039aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0210 	bic.w	r2, r2, #16
 8003998:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d032      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d022      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2205      	movs	r2, #5
 80039d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3301      	adds	r3, #1
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d307      	bcc.n	8003a02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f2      	bne.n	80039e6 <HAL_DMA_IRQHandler+0x2ca>
 8003a00:	e000      	b.n	8003a04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a02:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
 8003a24:	e000      	b.n	8003a28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a26:	bf00      	nop
    }
  }
}
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop

08003a30 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a3e:	b2db      	uxtb	r3, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
	...

08003a4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	3b10      	subs	r3, #16
 8003a5c:	4a13      	ldr	r2, [pc, #76]	; (8003aac <DMA_CalcBaseAndBitshift+0x60>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a66:	4a12      	ldr	r2, [pc, #72]	; (8003ab0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d909      	bls.n	8003a8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a82:	f023 0303 	bic.w	r3, r3, #3
 8003a86:	1d1a      	adds	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a8c:	e007      	b.n	8003a9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a96:	f023 0303 	bic.w	r3, r3, #3
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	aaaaaaab 	.word	0xaaaaaaab
 8003ab0:	08008bc8 	.word	0x08008bc8

08003ab4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11f      	bne.n	8003b0e <DMA_CheckFifoParam+0x5a>
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	2b03      	cmp	r3, #3
 8003ad2:	d856      	bhi.n	8003b82 <DMA_CheckFifoParam+0xce>
 8003ad4:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <DMA_CheckFifoParam+0x28>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003aed 	.word	0x08003aed
 8003ae0:	08003aff 	.word	0x08003aff
 8003ae4:	08003aed 	.word	0x08003aed
 8003ae8:	08003b83 	.word	0x08003b83
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d046      	beq.n	8003b86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afc:	e043      	b.n	8003b86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b06:	d140      	bne.n	8003b8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b0c:	e03d      	b.n	8003b8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b16:	d121      	bne.n	8003b5c <DMA_CheckFifoParam+0xa8>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d837      	bhi.n	8003b8e <DMA_CheckFifoParam+0xda>
 8003b1e:	a201      	add	r2, pc, #4	; (adr r2, 8003b24 <DMA_CheckFifoParam+0x70>)
 8003b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b24:	08003b35 	.word	0x08003b35
 8003b28:	08003b3b 	.word	0x08003b3b
 8003b2c:	08003b35 	.word	0x08003b35
 8003b30:	08003b4d 	.word	0x08003b4d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      break;
 8003b38:	e030      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d025      	beq.n	8003b92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b4a:	e022      	b.n	8003b92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b54:	d11f      	bne.n	8003b96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b5a:	e01c      	b.n	8003b96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d903      	bls.n	8003b6a <DMA_CheckFifoParam+0xb6>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d003      	beq.n	8003b70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b68:	e018      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b6e:	e015      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00e      	beq.n	8003b9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b80:	e00b      	b.n	8003b9a <DMA_CheckFifoParam+0xe6>
      break;
 8003b82:	bf00      	nop
 8003b84:	e00a      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;
 8003b86:	bf00      	nop
 8003b88:	e008      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e006      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e004      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;
 8003b92:	bf00      	nop
 8003b94:	e002      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b96:	bf00      	nop
 8003b98:	e000      	b.n	8003b9c <DMA_CheckFifoParam+0xe8>
      break;
 8003b9a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb6:	e16f      	b.n	8003e98 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 8161 	beq.w	8003e92 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d00b      	beq.n	8003bf0 <HAL_GPIO_Init+0x48>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d007      	beq.n	8003bf0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003be4:	2b11      	cmp	r3, #17
 8003be6:	d003      	beq.n	8003bf0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b12      	cmp	r3, #18
 8003bee:	d130      	bne.n	8003c52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	2203      	movs	r2, #3
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c26:	2201      	movs	r2, #1
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	091b      	lsrs	r3, r3, #4
 8003c3c:	f003 0201 	and.w	r2, r3, #1
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0xea>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b12      	cmp	r3, #18
 8003c90:	d123      	bne.n	8003cda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	08da      	lsrs	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3208      	adds	r2, #8
 8003c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	220f      	movs	r2, #15
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	691a      	ldr	r2, [r3, #16]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	08da      	lsrs	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3208      	adds	r2, #8
 8003cd4:	6939      	ldr	r1, [r7, #16]
 8003cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 0203 	and.w	r2, r3, #3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80bb 	beq.w	8003e92 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	4b64      	ldr	r3, [pc, #400]	; (8003eb4 <HAL_GPIO_Init+0x30c>)
 8003d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d24:	4a63      	ldr	r2, [pc, #396]	; (8003eb4 <HAL_GPIO_Init+0x30c>)
 8003d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d2a:	6453      	str	r3, [r2, #68]	; 0x44
 8003d2c:	4b61      	ldr	r3, [pc, #388]	; (8003eb4 <HAL_GPIO_Init+0x30c>)
 8003d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d38:	4a5f      	ldr	r2, [pc, #380]	; (8003eb8 <HAL_GPIO_Init+0x310>)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	220f      	movs	r2, #15
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a57      	ldr	r2, [pc, #348]	; (8003ebc <HAL_GPIO_Init+0x314>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d031      	beq.n	8003dc8 <HAL_GPIO_Init+0x220>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <HAL_GPIO_Init+0x318>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d02b      	beq.n	8003dc4 <HAL_GPIO_Init+0x21c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a55      	ldr	r2, [pc, #340]	; (8003ec4 <HAL_GPIO_Init+0x31c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d025      	beq.n	8003dc0 <HAL_GPIO_Init+0x218>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a54      	ldr	r2, [pc, #336]	; (8003ec8 <HAL_GPIO_Init+0x320>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d01f      	beq.n	8003dbc <HAL_GPIO_Init+0x214>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a53      	ldr	r2, [pc, #332]	; (8003ecc <HAL_GPIO_Init+0x324>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d019      	beq.n	8003db8 <HAL_GPIO_Init+0x210>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a52      	ldr	r2, [pc, #328]	; (8003ed0 <HAL_GPIO_Init+0x328>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <HAL_GPIO_Init+0x20c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a51      	ldr	r2, [pc, #324]	; (8003ed4 <HAL_GPIO_Init+0x32c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00d      	beq.n	8003db0 <HAL_GPIO_Init+0x208>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a50      	ldr	r2, [pc, #320]	; (8003ed8 <HAL_GPIO_Init+0x330>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d007      	beq.n	8003dac <HAL_GPIO_Init+0x204>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a4f      	ldr	r2, [pc, #316]	; (8003edc <HAL_GPIO_Init+0x334>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_GPIO_Init+0x200>
 8003da4:	2308      	movs	r3, #8
 8003da6:	e010      	b.n	8003dca <HAL_GPIO_Init+0x222>
 8003da8:	2309      	movs	r3, #9
 8003daa:	e00e      	b.n	8003dca <HAL_GPIO_Init+0x222>
 8003dac:	2307      	movs	r3, #7
 8003dae:	e00c      	b.n	8003dca <HAL_GPIO_Init+0x222>
 8003db0:	2306      	movs	r3, #6
 8003db2:	e00a      	b.n	8003dca <HAL_GPIO_Init+0x222>
 8003db4:	2305      	movs	r3, #5
 8003db6:	e008      	b.n	8003dca <HAL_GPIO_Init+0x222>
 8003db8:	2304      	movs	r3, #4
 8003dba:	e006      	b.n	8003dca <HAL_GPIO_Init+0x222>
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e004      	b.n	8003dca <HAL_GPIO_Init+0x222>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e002      	b.n	8003dca <HAL_GPIO_Init+0x222>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_GPIO_Init+0x222>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	f002 0203 	and.w	r2, r2, #3
 8003dd0:	0092      	lsls	r2, r2, #2
 8003dd2:	4093      	lsls	r3, r2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ddc:	4936      	ldr	r1, [pc, #216]	; (8003eb8 <HAL_GPIO_Init+0x310>)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	089b      	lsrs	r3, r3, #2
 8003de2:	3302      	adds	r3, #2
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dea:	4b3d      	ldr	r3, [pc, #244]	; (8003ee0 <HAL_GPIO_Init+0x338>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	43db      	mvns	r3, r3
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	4013      	ands	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d003      	beq.n	8003e0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e0e:	4a34      	ldr	r2, [pc, #208]	; (8003ee0 <HAL_GPIO_Init+0x338>)
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e14:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_GPIO_Init+0x338>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e38:	4a29      	ldr	r2, [pc, #164]	; (8003ee0 <HAL_GPIO_Init+0x338>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e3e:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <HAL_GPIO_Init+0x338>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	43db      	mvns	r3, r3
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e62:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <HAL_GPIO_Init+0x338>)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <HAL_GPIO_Init+0x338>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	43db      	mvns	r3, r3
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	4013      	ands	r3, r2
 8003e76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <HAL_GPIO_Init+0x338>)
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	3301      	adds	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f47f ae88 	bne.w	8003bb8 <HAL_GPIO_Init+0x10>
  }
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40013800 	.word	0x40013800
 8003ebc:	40020000 	.word	0x40020000
 8003ec0:	40020400 	.word	0x40020400
 8003ec4:	40020800 	.word	0x40020800
 8003ec8:	40020c00 	.word	0x40020c00
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40021400 	.word	0x40021400
 8003ed4:	40021800 	.word	0x40021800
 8003ed8:	40021c00 	.word	0x40021c00
 8003edc:	40022000 	.word	0x40022000
 8003ee0:	40013c00 	.word	0x40013c00

08003ee4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	887b      	ldrh	r3, [r7, #2]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
 8003f00:	e001      	b.n	8003f06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bc80      	pop	{r7}
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f1e:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	4013      	ands	r3, r2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d006      	beq.n	8003f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f2a:	4a05      	ldr	r2, [pc, #20]	; (8003f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f30:	88fb      	ldrh	r3, [r7, #6]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fd fcf0 	bl	8001918 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40013c00 	.word	0x40013c00

08003f44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d101      	bne.n	8003f56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e12b      	b.n	80041ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fe faa6 	bl	80024bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	; 0x24
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0201 	bic.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fa8:	f002 f83a 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 8003fac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4a81      	ldr	r2, [pc, #516]	; (80041b8 <HAL_I2C_Init+0x274>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d807      	bhi.n	8003fc8 <HAL_I2C_Init+0x84>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a80      	ldr	r2, [pc, #512]	; (80041bc <HAL_I2C_Init+0x278>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	bf94      	ite	ls
 8003fc0:	2301      	movls	r3, #1
 8003fc2:	2300      	movhi	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	e006      	b.n	8003fd6 <HAL_I2C_Init+0x92>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a7d      	ldr	r2, [pc, #500]	; (80041c0 <HAL_I2C_Init+0x27c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bf94      	ite	ls
 8003fd0:	2301      	movls	r3, #1
 8003fd2:	2300      	movhi	r3, #0
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e0e7      	b.n	80041ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4a78      	ldr	r2, [pc, #480]	; (80041c4 <HAL_I2C_Init+0x280>)
 8003fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe6:	0c9b      	lsrs	r3, r3, #18
 8003fe8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68ba      	ldr	r2, [r7, #8]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	4a6a      	ldr	r2, [pc, #424]	; (80041b8 <HAL_I2C_Init+0x274>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d802      	bhi.n	8004018 <HAL_I2C_Init+0xd4>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3301      	adds	r3, #1
 8004016:	e009      	b.n	800402c <HAL_I2C_Init+0xe8>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	4a69      	ldr	r2, [pc, #420]	; (80041c8 <HAL_I2C_Init+0x284>)
 8004024:	fba2 2303 	umull	r2, r3, r2, r3
 8004028:	099b      	lsrs	r3, r3, #6
 800402a:	3301      	adds	r3, #1
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	430b      	orrs	r3, r1
 8004032:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800403e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	495c      	ldr	r1, [pc, #368]	; (80041b8 <HAL_I2C_Init+0x274>)
 8004048:	428b      	cmp	r3, r1
 800404a:	d819      	bhi.n	8004080 <HAL_I2C_Init+0x13c>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1e59      	subs	r1, r3, #1
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	fbb1 f3f3 	udiv	r3, r1, r3
 800405a:	1c59      	adds	r1, r3, #1
 800405c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004060:	400b      	ands	r3, r1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_I2C_Init+0x138>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1e59      	subs	r1, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fbb1 f3f3 	udiv	r3, r1, r3
 8004074:	3301      	adds	r3, #1
 8004076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407a:	e051      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 800407c:	2304      	movs	r3, #4
 800407e:	e04f      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d111      	bne.n	80040ac <HAL_I2C_Init+0x168>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1e58      	subs	r0, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	440b      	add	r3, r1
 8004096:	fbb0 f3f3 	udiv	r3, r0, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e012      	b.n	80040d2 <HAL_I2C_Init+0x18e>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1e58      	subs	r0, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	0099      	lsls	r1, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c2:	3301      	adds	r3, #1
 80040c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_I2C_Init+0x196>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e022      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10e      	bne.n	8004100 <HAL_I2C_Init+0x1bc>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1e58      	subs	r0, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	460b      	mov	r3, r1
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	440b      	add	r3, r1
 80040f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f4:	3301      	adds	r3, #1
 80040f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fe:	e00f      	b.n	8004120 <HAL_I2C_Init+0x1dc>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1e58      	subs	r0, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	440b      	add	r3, r1
 800410e:	0099      	lsls	r1, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	fbb0 f3f3 	udiv	r3, r0, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	6809      	ldr	r1, [r1, #0]
 8004124:	4313      	orrs	r3, r2
 8004126:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800414e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6911      	ldr	r1, [r2, #16]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68d2      	ldr	r2, [r2, #12]
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	430b      	orrs	r3, r1
 8004162:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	000186a0 	.word	0x000186a0
 80041bc:	001e847f 	.word	0x001e847f
 80041c0:	003d08ff 	.word	0x003d08ff
 80041c4:	431bde83 	.word	0x431bde83
 80041c8:	10624dd3 	.word	0x10624dd3

080041cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041ec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d003      	beq.n	8004204 <HAL_I2C_EV_IRQHandler+0x38>
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b40      	cmp	r3, #64	; 0x40
 8004200:	f040 80b6 	bne.w	8004370 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10d      	bne.n	800423a <HAL_I2C_EV_IRQHandler+0x6e>
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004224:	d003      	beq.n	800422e <HAL_I2C_EV_IRQHandler+0x62>
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800422c:	d101      	bne.n	8004232 <HAL_I2C_EV_IRQHandler+0x66>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <HAL_I2C_EV_IRQHandler+0x68>
 8004232:	2300      	movs	r3, #0
 8004234:	2b01      	cmp	r3, #1
 8004236:	f000 8127 	beq.w	8004488 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00c      	beq.n	800425e <HAL_I2C_EV_IRQHandler+0x92>
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	0a5b      	lsrs	r3, r3, #9
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d006      	beq.n	800425e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f001 fa88 	bl	8005766 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fc6a 	bl	8004b30 <I2C_Master_SB>
 800425c:	e087      	b.n	800436e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <HAL_I2C_EV_IRQHandler+0xb2>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	0a5b      	lsrs	r3, r3, #9
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fcdf 	bl	8004c3a <I2C_Master_ADD10>
 800427c:	e077      	b.n	800436e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	085b      	lsrs	r3, r3, #1
 8004282:	f003 0301 	and.w	r3, r3, #1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d009      	beq.n	800429e <HAL_I2C_EV_IRQHandler+0xd2>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	0a5b      	lsrs	r3, r3, #9
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fcf8 	bl	8004c8c <I2C_Master_ADDR>
 800429c:	e067      	b.n	800436e <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	089b      	lsrs	r3, r3, #2
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d030      	beq.n	800430c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042b8:	f000 80e8 	beq.w	800448c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	09db      	lsrs	r3, r3, #7
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00f      	beq.n	80042e8 <HAL_I2C_EV_IRQHandler+0x11c>
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	0a9b      	lsrs	r3, r3, #10
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d009      	beq.n	80042e8 <HAL_I2C_EV_IRQHandler+0x11c>
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	089b      	lsrs	r3, r3, #2
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d103      	bne.n	80042e8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f937 	bl	8004554 <I2C_MasterTransmit_TXE>
 80042e6:	e042      	b.n	800436e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	089b      	lsrs	r3, r3, #2
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 80cb 	beq.w	800448c <HAL_I2C_EV_IRQHandler+0x2c0>
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	0a5b      	lsrs	r3, r3, #9
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 80c4 	beq.w	800448c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f9c1 	bl	800468c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800430a:	e0bf      	b.n	800448c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800431a:	f000 80b7 	beq.w	800448c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	099b      	lsrs	r3, r3, #6
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00f      	beq.n	800434a <HAL_I2C_EV_IRQHandler+0x17e>
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	0a9b      	lsrs	r3, r3, #10
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_I2C_EV_IRQHandler+0x17e>
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	089b      	lsrs	r3, r3, #2
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fa88 	bl	8004858 <I2C_MasterReceive_RXNE>
 8004348:	e011      	b.n	800436e <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	089b      	lsrs	r3, r3, #2
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 809a 	beq.w	800448c <HAL_I2C_EV_IRQHandler+0x2c0>
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	0a5b      	lsrs	r3, r3, #9
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8093 	beq.w	800448c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 faf8 	bl	800495c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800436c:	e08e      	b.n	800448c <HAL_I2C_EV_IRQHandler+0x2c0>
 800436e:	e08d      	b.n	800448c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d004      	beq.n	8004382 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	61fb      	str	r3, [r7, #28]
 8004380:	e007      	b.n	8004392 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d012      	beq.n	80043c4 <HAL_I2C_EV_IRQHandler+0x1f8>
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	0a5b      	lsrs	r3, r3, #9
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00c      	beq.n	80043c4 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80043ba:	69b9      	ldr	r1, [r7, #24]
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 feb1 	bl	8005124 <I2C_Slave_ADDR>
 80043c2:	e066      	b.n	8004492 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	091b      	lsrs	r3, r3, #4
 80043c8:	f003 0301 	and.w	r3, r3, #1
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d009      	beq.n	80043e4 <HAL_I2C_EV_IRQHandler+0x218>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	0a5b      	lsrs	r3, r3, #9
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 fee5 	bl	80051ac <I2C_Slave_STOPF>
 80043e2:	e056      	b.n	8004492 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80043e4:	7bbb      	ldrb	r3, [r7, #14]
 80043e6:	2b21      	cmp	r3, #33	; 0x21
 80043e8:	d002      	beq.n	80043f0 <HAL_I2C_EV_IRQHandler+0x224>
 80043ea:	7bbb      	ldrb	r3, [r7, #14]
 80043ec:	2b29      	cmp	r3, #41	; 0x29
 80043ee:	d125      	bne.n	800443c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	09db      	lsrs	r3, r3, #7
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00f      	beq.n	800441c <HAL_I2C_EV_IRQHandler+0x250>
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	0a9b      	lsrs	r3, r3, #10
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d009      	beq.n	800441c <HAL_I2C_EV_IRQHandler+0x250>
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	089b      	lsrs	r3, r3, #2
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fdc9 	bl	8004fac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800441a:	e039      	b.n	8004490 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	d033      	beq.n	8004490 <HAL_I2C_EV_IRQHandler+0x2c4>
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	0a5b      	lsrs	r3, r3, #9
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d02d      	beq.n	8004490 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fdf6 	bl	8005026 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800443a:	e029      	b.n	8004490 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	099b      	lsrs	r3, r3, #6
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00f      	beq.n	8004468 <HAL_I2C_EV_IRQHandler+0x29c>
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	0a9b      	lsrs	r3, r3, #10
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <HAL_I2C_EV_IRQHandler+0x29c>
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d103      	bne.n	8004468 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fe00 	bl	8005066 <I2C_SlaveReceive_RXNE>
 8004466:	e014      	b.n	8004492 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	089b      	lsrs	r3, r3, #2
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	0a5b      	lsrs	r3, r3, #9
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fe2e 	bl	80050e2 <I2C_SlaveReceive_BTF>
 8004486:	e004      	b.n	8004492 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004488:	bf00      	nop
 800448a:	e002      	b.n	8004492 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800448c:	bf00      	nop
 800448e:	e000      	b.n	8004492 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004490:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bc80      	pop	{r7}
 80044cc:	4770      	bx	lr

080044ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	bc80      	pop	{r7}
 80044de:	4770      	bx	lr

080044e0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	70fb      	strb	r3, [r7, #3]
 80044ec:	4613      	mov	r3, r2
 80044ee:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr

080044fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004562:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800456a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004576:	2b00      	cmp	r3, #0
 8004578:	d150      	bne.n	800461c <I2C_MasterTransmit_TXE+0xc8>
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b21      	cmp	r3, #33	; 0x21
 800457e:	d14d      	bne.n	800461c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b08      	cmp	r3, #8
 8004584:	d01d      	beq.n	80045c2 <I2C_MasterTransmit_TXE+0x6e>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b20      	cmp	r3, #32
 800458a:	d01a      	beq.n	80045c2 <I2C_MasterTransmit_TXE+0x6e>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004592:	d016      	beq.n	80045c2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045a2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2211      	movs	r2, #17
 80045a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff ff6c 	bl	8004498 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045c0:	e060      	b.n	8004684 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045d0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d107      	bne.n	800460c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff81 	bl	800450c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800460a:	e03b      	b.n	8004684 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff ff3f 	bl	8004498 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800461a:	e033      	b.n	8004684 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	2b21      	cmp	r3, #33	; 0x21
 8004620:	d005      	beq.n	800462e <I2C_MasterTransmit_TXE+0xda>
 8004622:	7bbb      	ldrb	r3, [r7, #14]
 8004624:	2b40      	cmp	r3, #64	; 0x40
 8004626:	d12d      	bne.n	8004684 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	2b22      	cmp	r3, #34	; 0x22
 800462c:	d12a      	bne.n	8004684 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d108      	bne.n	800464a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004646:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004648:	e01c      	b.n	8004684 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b40      	cmp	r3, #64	; 0x40
 8004654:	d103      	bne.n	800465e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f898 	bl	800478c <I2C_MemoryTransmit_TXE_BTF>
}
 800465c:	e012      	b.n	8004684 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004682:	e7ff      	b.n	8004684 <I2C_MasterTransmit_TXE+0x130>
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b21      	cmp	r3, #33	; 0x21
 80046a4:	d165      	bne.n	8004772 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d012      	beq.n	80046d6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80046d4:	e056      	b.n	8004784 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d01d      	beq.n	8004718 <I2C_MasterTransmit_BTF+0x8c>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b20      	cmp	r3, #32
 80046e0:	d01a      	beq.n	8004718 <I2C_MasterTransmit_BTF+0x8c>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046e8:	d016      	beq.n	8004718 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046f8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2211      	movs	r2, #17
 80046fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fec1 	bl	8004498 <HAL_I2C_MasterTxCpltCallback>
}
 8004716:	e035      	b.n	8004784 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004726:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004736:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b40      	cmp	r3, #64	; 0x40
 8004750:	d107      	bne.n	8004762 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fed6 	bl	800450c <HAL_I2C_MemTxCpltCallback>
}
 8004760:	e010      	b.n	8004784 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff fe94 	bl	8004498 <HAL_I2C_MasterTxCpltCallback>
}
 8004770:	e008      	b.n	8004784 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b40      	cmp	r3, #64	; 0x40
 800477c:	d102      	bne.n	8004784 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f804 	bl	800478c <I2C_MemoryTransmit_TXE_BTF>
}
 8004784:	bf00      	nop
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004798:	2b00      	cmp	r3, #0
 800479a:	d11d      	bne.n	80047d8 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d10b      	bne.n	80047bc <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	1c9a      	adds	r2, r3, #2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80047ba:	e048      	b.n	800484e <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	121b      	asrs	r3, r3, #8
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047d6:	e03a      	b.n	800484e <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d10b      	bne.n	80047f8 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047f6:	e02a      	b.n	800484e <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d126      	bne.n	800484e <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b22      	cmp	r3, #34	; 0x22
 800480a:	d108      	bne.n	800481e <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800481a:	601a      	str	r2, [r3, #0]
}
 800481c:	e017      	b.n	800484e <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b21      	cmp	r3, #33	; 0x21
 8004828:	d111      	bne.n	800484e <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	781a      	ldrb	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr

08004858 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b22      	cmp	r3, #34	; 0x22
 800486a:	d173      	bne.n	8004954 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004870:	b29b      	uxth	r3, r3
 8004872:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b03      	cmp	r3, #3
 8004878:	d920      	bls.n	80048bc <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b03      	cmp	r3, #3
 80048a8:	d154      	bne.n	8004954 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80048ba:	e04b      	b.n	8004954 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d047      	beq.n	8004954 <I2C_MasterReceive_RXNE+0xfc>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d002      	beq.n	80048d0 <I2C_MasterReceive_RXNE+0x78>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d141      	bne.n	8004954 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048de:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048ee:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d10a      	bne.n	8004940 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff fdf0 	bl	800451e <HAL_I2C_MemRxCpltCallback>
}
 800493e:	e009      	b.n	8004954 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2212      	movs	r2, #18
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff fdab 	bl	80044aa <HAL_I2C_MasterRxCpltCallback>
}
 8004954:	bf00      	nop
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b04      	cmp	r3, #4
 8004972:	d11b      	bne.n	80049ac <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004982:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	3b01      	subs	r3, #1
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049aa:	e0bd      	b.n	8004b28 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d129      	bne.n	8004a0a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d00a      	beq.n	80049e2 <I2C_MasterReceive_BTF+0x86>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d007      	beq.n	80049e2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	691a      	ldr	r2, [r3, #16]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a08:	e08e      	b.n	8004b28 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d176      	bne.n	8004b02 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d002      	beq.n	8004a20 <I2C_MasterReceive_BTF+0xc4>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b10      	cmp	r3, #16
 8004a1e:	d108      	bne.n	8004a32 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	e019      	b.n	8004a66 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d002      	beq.n	8004a3e <I2C_MasterReceive_BTF+0xe2>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d108      	bne.n	8004a50 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	e00a      	b.n	8004a66 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	d007      	beq.n	8004a66 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a64:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ac0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d10a      	bne.n	8004aec <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff fd1a 	bl	800451e <HAL_I2C_MemRxCpltCallback>
}
 8004aea:	e01d      	b.n	8004b28 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2212      	movs	r2, #18
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fcd5 	bl	80044aa <HAL_I2C_MasterRxCpltCallback>
}
 8004b00:	e012      	b.n	8004b28 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b40      	cmp	r3, #64	; 0x40
 8004b42:	d117      	bne.n	8004b74 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	461a      	mov	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b5c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b5e:	e067      	b.n	8004c30 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	611a      	str	r2, [r3, #16]
}
 8004b72:	e05d      	b.n	8004c30 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b7c:	d133      	bne.n	8004be6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b21      	cmp	r3, #33	; 0x21
 8004b88:	d109      	bne.n	8004b9e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b9a:	611a      	str	r2, [r3, #16]
 8004b9c:	e008      	b.n	8004bb0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d004      	beq.n	8004bc2 <I2C_Master_SB+0x92>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d108      	bne.n	8004bd4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d032      	beq.n	8004c30 <I2C_Master_SB+0x100>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d02d      	beq.n	8004c30 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be2:	605a      	str	r2, [r3, #4]
}
 8004be4:	e024      	b.n	8004c30 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10e      	bne.n	8004c0c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	11db      	asrs	r3, r3, #7
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	f003 0306 	and.w	r3, r3, #6
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	f063 030f 	orn	r3, r3, #15
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	611a      	str	r2, [r3, #16]
}
 8004c0a:	e011      	b.n	8004c30 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d10d      	bne.n	8004c30 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	11db      	asrs	r3, r3, #7
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	f003 0306 	and.w	r3, r3, #6
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f063 030e 	orn	r3, r3, #14
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	611a      	str	r2, [r3, #16]
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr

08004c3a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b083      	sub	sp, #12
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <I2C_Master_ADD10+0x24>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d011      	beq.n	8004c82 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <I2C_Master_ADD10+0x38>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c80:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr

08004c8c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b091      	sub	sp, #68	; 0x44
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b22      	cmp	r3, #34	; 0x22
 8004cb4:	f040 8169 	bne.w	8004f8a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10f      	bne.n	8004ce0 <I2C_Master_ADDR+0x54>
 8004cc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d10b      	bne.n	8004ce0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc8:	2300      	movs	r3, #0
 8004cca:	633b      	str	r3, [r7, #48]	; 0x30
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	e160      	b.n	8004fa2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d11d      	bne.n	8004d24 <I2C_Master_ADDR+0x98>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cf0:	d118      	bne.n	8004d24 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d16:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	651a      	str	r2, [r3, #80]	; 0x50
 8004d22:	e13e      	b.n	8004fa2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d113      	bne.n	8004d56 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e115      	b.n	8004f82 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	f040 808a 	bne.w	8004e76 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d68:	d137      	bne.n	8004dda <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d78:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d88:	d113      	bne.n	8004db2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d98:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	e0e7      	b.n	8004f82 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db2:	2300      	movs	r3, #0
 8004db4:	623b      	str	r3, [r7, #32]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	623b      	str	r3, [r7, #32]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	e0d3      	b.n	8004f82 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d02e      	beq.n	8004e3e <I2C_Master_ADDR+0x1b2>
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d02b      	beq.n	8004e3e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de8:	2b12      	cmp	r3, #18
 8004dea:	d102      	bne.n	8004df2 <I2C_Master_ADDR+0x166>
 8004dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d125      	bne.n	8004e3e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d00e      	beq.n	8004e16 <I2C_Master_ADDR+0x18a>
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d00b      	beq.n	8004e16 <I2C_Master_ADDR+0x18a>
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d008      	beq.n	8004e16 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	e007      	b.n	8004e26 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e24:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e26:	2300      	movs	r3, #0
 8004e28:	61fb      	str	r3, [r7, #28]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	e0a1      	b.n	8004f82 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e72:	601a      	str	r2, [r3, #0]
 8004e74:	e085      	b.n	8004f82 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d14d      	bne.n	8004f1c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d016      	beq.n	8004eb4 <I2C_Master_ADDR+0x228>
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d013      	beq.n	8004eb4 <I2C_Master_ADDR+0x228>
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	2b10      	cmp	r3, #16
 8004e90:	d010      	beq.n	8004eb4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ea0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	e007      	b.n	8004ec4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ec2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ece:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ed2:	d117      	bne.n	8004f04 <I2C_Master_ADDR+0x278>
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eda:	d00b      	beq.n	8004ef4 <I2C_Master_ADDR+0x268>
 8004edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d008      	beq.n	8004ef4 <I2C_Master_ADDR+0x268>
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d005      	beq.n	8004ef4 <I2C_Master_ADDR+0x268>
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eea:	2b10      	cmp	r3, #16
 8004eec:	d002      	beq.n	8004ef4 <I2C_Master_ADDR+0x268>
 8004eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d107      	bne.n	8004f04 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f02:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	e032      	b.n	8004f82 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f2a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f3a:	d117      	bne.n	8004f6c <I2C_Master_ADDR+0x2e0>
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f42:	d00b      	beq.n	8004f5c <I2C_Master_ADDR+0x2d0>
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d008      	beq.n	8004f5c <I2C_Master_ADDR+0x2d0>
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d005      	beq.n	8004f5c <I2C_Master_ADDR+0x2d0>
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	2b10      	cmp	r3, #16
 8004f54:	d002      	beq.n	8004f5c <I2C_Master_ADDR+0x2d0>
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d107      	bne.n	8004f6c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f6a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f88:	e00b      	b.n	8004fa2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
}
 8004fa0:	e7ff      	b.n	8004fa2 <I2C_Master_ADDR+0x316>
 8004fa2:	bf00      	nop
 8004fa4:	3744      	adds	r7, #68	; 0x44
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr

08004fac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d02b      	beq.n	800501e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	781a      	ldrb	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d114      	bne.n	800501e <I2C_SlaveTransmit_TXE+0x72>
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
 8004ff6:	2b29      	cmp	r3, #41	; 0x29
 8004ff8:	d111      	bne.n	800501e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005008:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2221      	movs	r2, #33	; 0x21
 800500e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2228      	movs	r2, #40	; 0x28
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff fa4f 	bl	80044bc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800501e:	bf00      	nop
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d011      	beq.n	800505c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	781a      	ldrb	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005052:	b29b      	uxth	r3, r3
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr

08005066 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005074:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d02c      	beq.n	80050da <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d114      	bne.n	80050da <I2C_SlaveReceive_RXNE+0x74>
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b2a      	cmp	r3, #42	; 0x2a
 80050b4:	d111      	bne.n	80050da <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2222      	movs	r2, #34	; 0x22
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2228      	movs	r2, #40	; 0x28
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f7ff f9fa 	bl	80044ce <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050da:	bf00      	nop
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d012      	beq.n	800511a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800512e:	2300      	movs	r3, #0
 8005130:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800513e:	2b28      	cmp	r3, #40	; 0x28
 8005140:	d127      	bne.n	8005192 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005150:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	089b      	lsrs	r3, r3, #2
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800515e:	2301      	movs	r3, #1
 8005160:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	09db      	lsrs	r3, r3, #7
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	81bb      	strh	r3, [r7, #12]
 8005174:	e002      	b.n	800517c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005184:	89ba      	ldrh	r2, [r7, #12]
 8005186:	7bfb      	ldrb	r3, [r7, #15]
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff f9a8 	bl	80044e0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005190:	e008      	b.n	80051a4 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f06f 0202 	mvn.w	r2, #2
 800519a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051a4:	bf00      	nop
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80051cc:	2300      	movs	r3, #0
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005208:	d172      	bne.n	80052f0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800520a:	7bfb      	ldrb	r3, [r7, #15]
 800520c:	2b22      	cmp	r3, #34	; 0x22
 800520e:	d002      	beq.n	8005216 <I2C_Slave_STOPF+0x6a>
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	2b2a      	cmp	r3, #42	; 0x2a
 8005214:	d135      	bne.n	8005282 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	b29a      	uxth	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f043 0204 	orr.w	r2, r3, #4
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005248:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	4618      	mov	r0, r3
 8005250:	f7fe fbee 	bl	8003a30 <HAL_DMA_GetState>
 8005254:	4603      	mov	r3, r0
 8005256:	2b01      	cmp	r3, #1
 8005258:	d049      	beq.n	80052ee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525e:	4a69      	ldr	r2, [pc, #420]	; (8005404 <I2C_Slave_STOPF+0x258>)
 8005260:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fa36 	bl	80036d8 <HAL_DMA_Abort_IT>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d03d      	beq.n	80052ee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800527c:	4610      	mov	r0, r2
 800527e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005280:	e035      	b.n	80052ee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	b29a      	uxth	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f043 0204 	orr.w	r2, r3, #4
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe fbb8 	bl	8003a30 <HAL_DMA_GetState>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d014      	beq.n	80052f0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ca:	4a4e      	ldr	r2, [pc, #312]	; (8005404 <I2C_Slave_STOPF+0x258>)
 80052cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe fa00 	bl	80036d8 <HAL_DMA_Abort_IT>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052e8:	4610      	mov	r0, r2
 80052ea:	4798      	blx	r3
 80052ec:	e000      	b.n	80052f0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052ee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d03e      	beq.n	8005378 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b04      	cmp	r3, #4
 8005306:	d112      	bne.n	800532e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005324:	b29b      	uxth	r3, r3
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d112      	bne.n	8005362 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691a      	ldr	r2, [r3, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29b      	uxth	r3, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005366:	b29b      	uxth	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	f043 0204 	orr.w	r2, r3, #4
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f843 	bl	800540c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005386:	e039      	b.n	80053fc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	2b2a      	cmp	r3, #42	; 0x2a
 800538c:	d109      	bne.n	80053a2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2228      	movs	r2, #40	; 0x28
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff f896 	bl	80044ce <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b28      	cmp	r3, #40	; 0x28
 80053ac:	d111      	bne.n	80053d2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a15      	ldr	r2, [pc, #84]	; (8005408 <I2C_Slave_STOPF+0x25c>)
 80053b2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff f895 	bl	80044fa <HAL_I2C_ListenCpltCallback>
}
 80053d0:	e014      	b.n	80053fc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	2b22      	cmp	r3, #34	; 0x22
 80053d8:	d002      	beq.n	80053e0 <I2C_Slave_STOPF+0x234>
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	2b22      	cmp	r3, #34	; 0x22
 80053de:	d10d      	bne.n	80053fc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7ff f869 	bl	80044ce <HAL_I2C_SlaveRxCpltCallback>
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	08005669 	.word	0x08005669
 8005408:	ffff0000 	.word	0xffff0000

0800540c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b10      	cmp	r3, #16
 8005426:	d10a      	bne.n	800543e <I2C_ITError+0x32>
 8005428:	7bfb      	ldrb	r3, [r7, #15]
 800542a:	2b22      	cmp	r3, #34	; 0x22
 800542c:	d107      	bne.n	800543e <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800543c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005444:	2b28      	cmp	r3, #40	; 0x28
 8005446:	d107      	bne.n	8005458 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2228      	movs	r2, #40	; 0x28
 8005452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005456:	e015      	b.n	8005484 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005466:	d006      	beq.n	8005476 <I2C_ITError+0x6a>
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b60      	cmp	r3, #96	; 0x60
 800546c:	d003      	beq.n	8005476 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005492:	d162      	bne.n	800555a <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054a2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d020      	beq.n	80054f4 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b6:	4a6a      	ldr	r2, [pc, #424]	; (8005660 <I2C_ITError+0x254>)
 80054b8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fe f90a 	bl	80036d8 <HAL_DMA_Abort_IT>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 8089 	beq.w	80055de <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0201 	bic.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054ee:	4610      	mov	r0, r2
 80054f0:	4798      	blx	r3
 80054f2:	e074      	b.n	80055de <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	4a59      	ldr	r2, [pc, #356]	; (8005660 <I2C_ITError+0x254>)
 80054fa:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe f8e9 	bl	80036d8 <HAL_DMA_Abort_IT>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d068      	beq.n	80055de <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d10b      	bne.n	8005532 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 0201 	bic.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005554:	4610      	mov	r0, r2
 8005556:	4798      	blx	r3
 8005558:	e041      	b.n	80055de <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b60      	cmp	r3, #96	; 0x60
 8005564:	d125      	bne.n	80055b2 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2220      	movs	r2, #32
 800556a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d10b      	bne.n	800559a <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	691a      	ldr	r2, [r3, #16]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fe ffc9 	bl	8004542 <HAL_I2C_AbortCpltCallback>
 80055b0:	e015      	b.n	80055de <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055bc:	2b40      	cmp	r3, #64	; 0x40
 80055be:	d10b      	bne.n	80055d8 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7fe ffa9 	bl	8004530 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10e      	bne.n	800560c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800561a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005622:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b04      	cmp	r3, #4
 800562e:	d113      	bne.n	8005658 <I2C_ITError+0x24c>
 8005630:	7bfb      	ldrb	r3, [r7, #15]
 8005632:	2b28      	cmp	r3, #40	; 0x28
 8005634:	d110      	bne.n	8005658 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a0a      	ldr	r2, [pc, #40]	; (8005664 <I2C_ITError+0x258>)
 800563a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fe ff51 	bl	80044fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	08005669 	.word	0x08005669
 8005664:	ffff0000 	.word	0xffff0000

08005668 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568a:	2200      	movs	r2, #0
 800568c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569a:	2200      	movs	r2, #0
 800569c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c0:	2200      	movs	r2, #0
 80056c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	2200      	movs	r2, #0
 80056d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b60      	cmp	r3, #96	; 0x60
 80056ee:	d10e      	bne.n	800570e <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7fe ff1b 	bl	8004542 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800570c:	e027      	b.n	800575e <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005714:	2b28      	cmp	r3, #40	; 0x28
 8005716:	d117      	bne.n	8005748 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005736:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2228      	movs	r2, #40	; 0x28
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005746:	e007      	b.n	8005758 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7fe fee9 	bl	8004530 <HAL_I2C_ErrorCallback>
}
 800575e:	bf00      	nop
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005766:	b480      	push	{r7}
 8005768:	b083      	sub	sp, #12
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005776:	d103      	bne.n	8005780 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800577e:	e007      	b.n	8005790 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005788:	d102      	bne.n	8005790 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2208      	movs	r2, #8
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	bc80      	pop	{r7}
 8005798:	4770      	bx	lr
	...

0800579c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b090      	sub	sp, #64	; 0x40
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e253      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d050      	beq.n	800585c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ba:	4ba3      	ldr	r3, [pc, #652]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 030c 	and.w	r3, r3, #12
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d00c      	beq.n	80057e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057c6:	4ba0      	ldr	r3, [pc, #640]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d112      	bne.n	80057f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057d2:	4b9d      	ldr	r3, [pc, #628]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057de:	d10b      	bne.n	80057f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e0:	4b99      	ldr	r3, [pc, #612]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d036      	beq.n	800585a <HAL_RCC_OscConfig+0xbe>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d132      	bne.n	800585a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e22e      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	4b93      	ldr	r3, [pc, #588]	; (8005a4c <HAL_RCC_OscConfig+0x2b0>)
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d013      	beq.n	8005832 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800580a:	f7fd f9d1 	bl	8002bb0 <HAL_GetTick>
 800580e:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005812:	f7fd f9cd 	bl	8002bb0 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b64      	cmp	r3, #100	; 0x64
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e218      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005824:	4b88      	ldr	r3, [pc, #544]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x76>
 8005830:	e014      	b.n	800585c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005832:	f7fd f9bd 	bl	8002bb0 <HAL_GetTick>
 8005836:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800583a:	f7fd f9b9 	bl	8002bb0 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b64      	cmp	r3, #100	; 0x64
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e204      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800584c:	4b7e      	ldr	r3, [pc, #504]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f0      	bne.n	800583a <HAL_RCC_OscConfig+0x9e>
 8005858:	e000      	b.n	800585c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800585a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0302 	and.w	r3, r3, #2
 8005864:	2b00      	cmp	r3, #0
 8005866:	d077      	beq.n	8005958 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005868:	4b77      	ldr	r3, [pc, #476]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f003 030c 	and.w	r3, r3, #12
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005874:	4b74      	ldr	r3, [pc, #464]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800587c:	2b08      	cmp	r3, #8
 800587e:	d126      	bne.n	80058ce <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005880:	4b71      	ldr	r3, [pc, #452]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d120      	bne.n	80058ce <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800588c:	4b6e      	ldr	r3, [pc, #440]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_OscConfig+0x108>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d001      	beq.n	80058a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e1d8      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a4:	4b68      	ldr	r3, [pc, #416]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	21f8      	movs	r1, #248	; 0xf8
 80058b2:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058b6:	fa91 f1a1 	rbit	r1, r1
 80058ba:	62f9      	str	r1, [r7, #44]	; 0x2c
  return result;
 80058bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058be:	fab1 f181 	clz	r1, r1
 80058c2:	b2c9      	uxtb	r1, r1
 80058c4:	408b      	lsls	r3, r1
 80058c6:	4960      	ldr	r1, [pc, #384]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058cc:	e044      	b.n	8005958 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d02a      	beq.n	800592c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d6:	4b5e      	ldr	r3, [pc, #376]	; (8005a50 <HAL_RCC_OscConfig+0x2b4>)
 80058d8:	2201      	movs	r2, #1
 80058da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058dc:	f7fd f968 	bl	8002bb0 <HAL_GetTick>
 80058e0:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e2:	e008      	b.n	80058f6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058e4:	f7fd f964 	bl	8002bb0 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d901      	bls.n	80058f6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e1af      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f6:	4b54      	ldr	r3, [pc, #336]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f0      	beq.n	80058e4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005902:	4b51      	ldr	r3, [pc, #324]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	21f8      	movs	r1, #248	; 0xf8
 8005910:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005914:	fa91 f1a1 	rbit	r1, r1
 8005918:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800591a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800591c:	fab1 f181 	clz	r1, r1
 8005920:	b2c9      	uxtb	r1, r1
 8005922:	408b      	lsls	r3, r1
 8005924:	4948      	ldr	r1, [pc, #288]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 8005926:	4313      	orrs	r3, r2
 8005928:	600b      	str	r3, [r1, #0]
 800592a:	e015      	b.n	8005958 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800592c:	4b48      	ldr	r3, [pc, #288]	; (8005a50 <HAL_RCC_OscConfig+0x2b4>)
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005932:	f7fd f93d 	bl	8002bb0 <HAL_GetTick>
 8005936:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800593a:	f7fd f939 	bl	8002bb0 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e184      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594c:	4b3e      	ldr	r3, [pc, #248]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d030      	beq.n	80059c6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d016      	beq.n	800599a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800596c:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <HAL_RCC_OscConfig+0x2b8>)
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005972:	f7fd f91d 	bl	8002bb0 <HAL_GetTick>
 8005976:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800597a:	f7fd f919 	bl	8002bb0 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e164      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800598c:	4b2e      	ldr	r3, [pc, #184]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 800598e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCC_OscConfig+0x1de>
 8005998:	e015      	b.n	80059c6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800599a:	4b2e      	ldr	r3, [pc, #184]	; (8005a54 <HAL_RCC_OscConfig+0x2b8>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059a0:	f7fd f906 	bl	8002bb0 <HAL_GetTick>
 80059a4:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059a8:	f7fd f902 	bl	8002bb0 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e14d      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ba:	4b23      	ldr	r3, [pc, #140]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8088 	beq.w	8005ae4 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059da:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d110      	bne.n	8005a08 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059e6:	2300      	movs	r3, #0
 80059e8:	60bb      	str	r3, [r7, #8]
 80059ea:	4b17      	ldr	r3, [pc, #92]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	4a16      	ldr	r2, [pc, #88]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80059f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f4:	6413      	str	r3, [r2, #64]	; 0x40
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <HAL_RCC_OscConfig+0x2ac>)
 80059f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a02:	2301      	movs	r3, #1
 8005a04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a08:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <HAL_RCC_OscConfig+0x2bc>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a12      	ldr	r2, [pc, #72]	; (8005a58 <HAL_RCC_OscConfig+0x2bc>)
 8005a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a12:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <HAL_RCC_OscConfig+0x2bc>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d123      	bne.n	8005a68 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a20:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <HAL_RCC_OscConfig+0x2bc>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <HAL_RCC_OscConfig+0x2bc>)
 8005a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a2c:	f7fd f8c0 	bl	8002bb0 <HAL_GetTick>
 8005a30:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a32:	e013      	b.n	8005a5c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a34:	f7fd f8bc 	bl	8002bb0 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d90c      	bls.n	8005a5c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e107      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
 8005a46:	bf00      	nop
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40023802 	.word	0x40023802
 8005a50:	42470000 	.word	0x42470000
 8005a54:	42470e80 	.word	0x42470e80
 8005a58:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5c:	4b80      	ldr	r3, [pc, #512]	; (8005c60 <HAL_RCC_OscConfig+0x4c4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0e5      	beq.n	8005a34 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	4b7d      	ldr	r3, [pc, #500]	; (8005c64 <HAL_RCC_OscConfig+0x4c8>)
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d015      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a7a:	f7fd f899 	bl	8002bb0 <HAL_GetTick>
 8005a7e:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a80:	e00a      	b.n	8005a98 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a82:	f7fd f895 	bl	8002bb0 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e0de      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a98:	4b73      	ldr	r3, [pc, #460]	; (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0ee      	beq.n	8005a82 <HAL_RCC_OscConfig+0x2e6>
 8005aa4:	e014      	b.n	8005ad0 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aa6:	f7fd f883 	bl	8002bb0 <HAL_GetTick>
 8005aaa:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005aac:	e00a      	b.n	8005ac4 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aae:	f7fd f87f 	bl	8002bb0 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e0c8      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac4:	4b68      	ldr	r3, [pc, #416]	; (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1ee      	bne.n	8005aae <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ad0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d105      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ad8:	4b63      	ldr	r3, [pc, #396]	; (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	4a62      	ldr	r2, [pc, #392]	; (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 80b3 	beq.w	8005c54 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aee:	4b5e      	ldr	r3, [pc, #376]	; (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 030c 	and.w	r3, r3, #12
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d07d      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d162      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b02:	4b5a      	ldr	r3, [pc, #360]	; (8005c6c <HAL_RCC_OscConfig+0x4d0>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b08:	f7fd f852 	bl	8002bb0 <HAL_GetTick>
 8005b0c:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b10:	f7fd f84e 	bl	8002bb0 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	; 0x64
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e099      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b22:	4b51      	ldr	r3, [pc, #324]	; (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69da      	ldr	r2, [r3, #28]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005b40:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b42:	6939      	ldr	r1, [r7, #16]
 8005b44:	fa91 f1a1 	rbit	r1, r1
 8005b48:	60f9      	str	r1, [r7, #12]
  return result;
 8005b4a:	68f9      	ldr	r1, [r7, #12]
 8005b4c:	fab1 f181 	clz	r1, r1
 8005b50:	b2c9      	uxtb	r1, r1
 8005b52:	408b      	lsls	r3, r1
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8005b62:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b64:	69b9      	ldr	r1, [r7, #24]
 8005b66:	fa91 f1a1 	rbit	r1, r1
 8005b6a:	6179      	str	r1, [r7, #20]
  return result;
 8005b6c:	6979      	ldr	r1, [r7, #20]
 8005b6e:	fab1 f181 	clz	r1, r1
 8005b72:	b2c9      	uxtb	r1, r1
 8005b74:	408b      	lsls	r3, r1
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7c:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8005b80:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b82:	6a39      	ldr	r1, [r7, #32]
 8005b84:	fa91 f1a1 	rbit	r1, r1
 8005b88:	61f9      	str	r1, [r7, #28]
  return result;
 8005b8a:	69f9      	ldr	r1, [r7, #28]
 8005b8c:	fab1 f181 	clz	r1, r1
 8005b90:	b2c9      	uxtb	r1, r1
 8005b92:	408b      	lsls	r3, r1
 8005b94:	4934      	ldr	r1, [pc, #208]	; (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b9a:	4b34      	ldr	r3, [pc, #208]	; (8005c6c <HAL_RCC_OscConfig+0x4d0>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba0:	f7fd f806 	bl	8002bb0 <HAL_GetTick>
 8005ba4:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba8:	f7fd f802 	bl	8002bb0 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b64      	cmp	r3, #100	; 0x64
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e04d      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bba:	4b2b      	ldr	r3, [pc, #172]	; (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f0      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x40c>
 8005bc6:	e045      	b.n	8005c54 <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc8:	4b28      	ldr	r3, [pc, #160]	; (8005c6c <HAL_RCC_OscConfig+0x4d0>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bce:	f7fc ffef 	bl	8002bb0 <HAL_GetTick>
 8005bd2:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd6:	f7fc ffeb 	bl	8002bb0 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b64      	cmp	r3, #100	; 0x64
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e036      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be8:	4b1f      	ldr	r3, [pc, #124]	; (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f0      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x43a>
 8005bf4:	e02e      	b.n	8005c54 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e029      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005c02:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <HAL_RCC_OscConfig+0x4cc>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d11c      	bne.n	8005c50 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d115      	bne.n	8005c50 <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c26:	099b      	lsrs	r3, r3, #6
 8005c28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d10d      	bne.n	8005c50 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d106      	bne.n	8005c50 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d001      	beq.n	8005c54 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e000      	b.n	8005c56 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3740      	adds	r7, #64	; 0x40
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40007000 	.word	0x40007000
 8005c64:	40023870 	.word	0x40023870
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	42470060 	.word	0x42470060

08005c70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0d2      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c84:	4b6b      	ldr	r3, [pc, #428]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d90c      	bls.n	8005cac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c92:	4b68      	ldr	r3, [pc, #416]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b66      	ldr	r3, [pc, #408]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0be      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d020      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc4:	4b5c      	ldr	r3, [pc, #368]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4a5b      	ldr	r2, [pc, #364]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005cca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005cdc:	4b56      	ldr	r3, [pc, #344]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	4a55      	ldr	r2, [pc, #340]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005ce2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ce6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce8:	4b53      	ldr	r3, [pc, #332]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	4950      	ldr	r1, [pc, #320]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d040      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	4b4a      	ldr	r3, [pc, #296]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d115      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e085      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d107      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d26:	4b44      	ldr	r3, [pc, #272]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e079      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d36:	4b40      	ldr	r3, [pc, #256]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e071      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d46:	4b3c      	ldr	r3, [pc, #240]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f023 0203 	bic.w	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4939      	ldr	r1, [pc, #228]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d58:	f7fc ff2a 	bl	8002bb0 <HAL_GetTick>
 8005d5c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d60:	f7fc ff26 	bl	8002bb0 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e059      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d76:	4b30      	ldr	r3, [pc, #192]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 020c 	and.w	r2, r3, #12
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1eb      	bne.n	8005d60 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d88:	4b2a      	ldr	r3, [pc, #168]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d20c      	bcs.n	8005db0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b27      	ldr	r3, [pc, #156]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	b2d2      	uxtb	r2, r2
 8005d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9e:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <HAL_RCC_ClockConfig+0x1c4>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 030f 	and.w	r3, r3, #15
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d001      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e03c      	b.n	8005e2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dbc:	4b1e      	ldr	r3, [pc, #120]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	491b      	ldr	r1, [pc, #108]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dda:	4b17      	ldr	r3, [pc, #92]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	4913      	ldr	r1, [pc, #76]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005dee:	f000 f82b 	bl	8005e48 <HAL_RCC_GetSysClockFreq>
 8005df2:	4601      	mov	r1, r0
 8005df4:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <HAL_RCC_ClockConfig+0x1c8>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dfc:	22f0      	movs	r2, #240	; 0xf0
 8005dfe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	fa92 f2a2 	rbit	r2, r2
 8005e06:	60fa      	str	r2, [r7, #12]
  return result;
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	fab2 f282 	clz	r2, r2
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	40d3      	lsrs	r3, r2
 8005e12:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <HAL_RCC_ClockConfig+0x1cc>)
 8005e14:	5cd3      	ldrb	r3, [r2, r3]
 8005e16:	fa21 f303 	lsr.w	r3, r1, r3
 8005e1a:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <HAL_RCC_ClockConfig+0x1d0>)
 8005e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e1e:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <HAL_RCC_ClockConfig+0x1d4>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fc fe82 	bl	8002b2c <HAL_InitTick>

  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	40023c00 	.word	0x40023c00
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	08008bb0 	.word	0x08008bb0
 8005e40:	2000000c 	.word	0x2000000c
 8005e44:	20000010 	.word	0x20000010

08005e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e50:	2300      	movs	r3, #0
 8005e52:	607b      	str	r3, [r7, #4]
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e60:	4b67      	ldr	r3, [pc, #412]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f003 030c 	and.w	r3, r3, #12
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d00d      	beq.n	8005e88 <HAL_RCC_GetSysClockFreq+0x40>
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	f200 80bd 	bhi.w	8005fec <HAL_RCC_GetSysClockFreq+0x1a4>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq+0x34>
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d003      	beq.n	8005e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e7a:	e0b7      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e7c:	4b61      	ldr	r3, [pc, #388]	; (8006004 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e7e:	60bb      	str	r3, [r7, #8]
       break;
 8005e80:	e0b7      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e82:	4b61      	ldr	r3, [pc, #388]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005e84:	60bb      	str	r3, [r7, #8]
      break;
 8005e86:	e0b4      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e88:	4b5d      	ldr	r3, [pc, #372]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e92:	4b5b      	ldr	r3, [pc, #364]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d04d      	beq.n	8005f3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e9e:	4b58      	ldr	r3, [pc, #352]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	099b      	lsrs	r3, r3, #6
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005eae:	f04f 0100 	mov.w	r1, #0
 8005eb2:	ea02 0800 	and.w	r8, r2, r0
 8005eb6:	ea03 0901 	and.w	r9, r3, r1
 8005eba:	4640      	mov	r0, r8
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	f04f 0300 	mov.w	r3, #0
 8005ec6:	014b      	lsls	r3, r1, #5
 8005ec8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ecc:	0142      	lsls	r2, r0, #5
 8005ece:	4610      	mov	r0, r2
 8005ed0:	4619      	mov	r1, r3
 8005ed2:	ebb0 0008 	subs.w	r0, r0, r8
 8005ed6:	eb61 0109 	sbc.w	r1, r1, r9
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	018b      	lsls	r3, r1, #6
 8005ee4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ee8:	0182      	lsls	r2, r0, #6
 8005eea:	1a12      	subs	r2, r2, r0
 8005eec:	eb63 0301 	sbc.w	r3, r3, r1
 8005ef0:	f04f 0000 	mov.w	r0, #0
 8005ef4:	f04f 0100 	mov.w	r1, #0
 8005ef8:	00d9      	lsls	r1, r3, #3
 8005efa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005efe:	00d0      	lsls	r0, r2, #3
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	eb12 0208 	adds.w	r2, r2, r8
 8005f08:	eb43 0309 	adc.w	r3, r3, r9
 8005f0c:	f04f 0000 	mov.w	r0, #0
 8005f10:	f04f 0100 	mov.w	r1, #0
 8005f14:	0259      	lsls	r1, r3, #9
 8005f16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005f1a:	0250      	lsls	r0, r2, #9
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4610      	mov	r0, r2
 8005f22:	4619      	mov	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	f7fb f90e 	bl	800114c <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4613      	mov	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	e04a      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f3a:	4b31      	ldr	r3, [pc, #196]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	099b      	lsrs	r3, r3, #6
 8005f40:	461a      	mov	r2, r3
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005f4a:	f04f 0100 	mov.w	r1, #0
 8005f4e:	ea02 0400 	and.w	r4, r2, r0
 8005f52:	ea03 0501 	and.w	r5, r3, r1
 8005f56:	4620      	mov	r0, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	014b      	lsls	r3, r1, #5
 8005f64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005f68:	0142      	lsls	r2, r0, #5
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	1b00      	subs	r0, r0, r4
 8005f70:	eb61 0105 	sbc.w	r1, r1, r5
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	018b      	lsls	r3, r1, #6
 8005f7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f82:	0182      	lsls	r2, r0, #6
 8005f84:	1a12      	subs	r2, r2, r0
 8005f86:	eb63 0301 	sbc.w	r3, r3, r1
 8005f8a:	f04f 0000 	mov.w	r0, #0
 8005f8e:	f04f 0100 	mov.w	r1, #0
 8005f92:	00d9      	lsls	r1, r3, #3
 8005f94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f98:	00d0      	lsls	r0, r2, #3
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	1912      	adds	r2, r2, r4
 8005fa0:	eb45 0303 	adc.w	r3, r5, r3
 8005fa4:	f04f 0000 	mov.w	r0, #0
 8005fa8:	f04f 0100 	mov.w	r1, #0
 8005fac:	0299      	lsls	r1, r3, #10
 8005fae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005fb2:	0290      	lsls	r0, r2, #10
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	f7fb f8c2 	bl	800114c <__aeabi_uldivmod>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4613      	mov	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	3301      	adds	r3, #1
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe8:	60bb      	str	r3, [r7, #8]
      break;
 8005fea:	e002      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005fee:	60bb      	str	r3, [r7, #8]
      break;
 8005ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005ffe:	bf00      	nop
 8006000:	40023800 	.word	0x40023800
 8006004:	00f42400 	.word	0x00f42400
 8006008:	007a1200 	.word	0x007a1200

0800600c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800600c:	b480      	push	{r7}
 800600e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006010:	4b02      	ldr	r3, [pc, #8]	; (800601c <HAL_RCC_GetHCLKFreq+0x10>)
 8006012:	681b      	ldr	r3, [r3, #0]
}
 8006014:	4618      	mov	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr
 800601c:	2000000c 	.word	0x2000000c

08006020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006026:	f7ff fff1 	bl	800600c <HAL_RCC_GetHCLKFreq>
 800602a:	4601      	mov	r1, r0
 800602c:	4b0b      	ldr	r3, [pc, #44]	; (800605c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006034:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006038:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	fa92 f2a2 	rbit	r2, r2
 8006040:	603a      	str	r2, [r7, #0]
  return result;
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	fab2 f282 	clz	r2, r2
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	40d3      	lsrs	r3, r2
 800604c:	4a04      	ldr	r2, [pc, #16]	; (8006060 <HAL_RCC_GetPCLK1Freq+0x40>)
 800604e:	5cd3      	ldrb	r3, [r2, r3]
 8006050:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40023800 	.word	0x40023800
 8006060:	08008bc0 	.word	0x08008bc0

08006064 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800606a:	f7ff ffcf 	bl	800600c <HAL_RCC_GetHCLKFreq>
 800606e:	4601      	mov	r1, r0
 8006070:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006078:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800607c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	fa92 f2a2 	rbit	r2, r2
 8006084:	603a      	str	r2, [r7, #0]
  return result;
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	fab2 f282 	clz	r2, r2
 800608c:	b2d2      	uxtb	r2, r2
 800608e:	40d3      	lsrs	r3, r2
 8006090:	4a04      	ldr	r2, [pc, #16]	; (80060a4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006092:	5cd3      	ldrb	r3, [r2, r3]
 8006094:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40023800 	.word	0x40023800
 80060a4:	08008bc0 	.word	0x08008bc0

080060a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e01d      	b.n	80060f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fc fa98 	bl	8002604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3304      	adds	r3, #4
 80060e4:	4619      	mov	r1, r3
 80060e6:	4610      	mov	r0, r2
 80060e8:	f000 fcd2 	bl	8006a90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0201 	orr.w	r2, r2, #1
 8006114:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b06      	cmp	r3, #6
 8006126:	d007      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0201 	orr.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr

08006144 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e01d      	b.n	8006192 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800615c:	b2db      	uxtb	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f815 	bl	800619a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3304      	adds	r3, #4
 8006180:	4619      	mov	r1, r3
 8006182:	4610      	mov	r0, r2
 8006184:	f000 fc84 	bl	8006a90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bc80      	pop	{r7}
 80061aa:	4770      	bx	lr

080061ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e01d      	b.n	80061fa <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f815 	bl	8006202 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3304      	adds	r3, #4
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f000 fc50 	bl	8006a90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	bc80      	pop	{r7}
 8006212:	4770      	bx	lr

08006214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2201      	movs	r2, #1
 8006224:	6839      	ldr	r1, [r7, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 ff12 	bl	8007050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a15      	ldr	r2, [pc, #84]	; (8006288 <HAL_TIM_PWM_Start+0x74>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <HAL_TIM_PWM_Start+0x2c>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a14      	ldr	r2, [pc, #80]	; (800628c <HAL_TIM_PWM_Start+0x78>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d101      	bne.n	8006244 <HAL_TIM_PWM_Start+0x30>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_TIM_PWM_Start+0x32>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006258:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 0307 	and.w	r3, r3, #7
 8006264:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b06      	cmp	r3, #6
 800626a:	d007      	beq.n	800627c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f042 0201 	orr.w	r2, r2, #1
 800627a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	40010000 	.word	0x40010000
 800628c:	40010400 	.word	0x40010400

08006290 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2200      	movs	r2, #0
 80062a0:	6839      	ldr	r1, [r7, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fed4 	bl	8007050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a22      	ldr	r2, [pc, #136]	; (8006338 <HAL_TIM_PWM_Stop+0xa8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d004      	beq.n	80062bc <HAL_TIM_PWM_Stop+0x2c>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a21      	ldr	r2, [pc, #132]	; (800633c <HAL_TIM_PWM_Stop+0xac>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d101      	bne.n	80062c0 <HAL_TIM_PWM_Stop+0x30>
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <HAL_TIM_PWM_Stop+0x32>
 80062c0:	2300      	movs	r3, #0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d017      	beq.n	80062f6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6a1a      	ldr	r2, [r3, #32]
 80062cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80062d0:	4013      	ands	r3, r2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10f      	bne.n	80062f6 <HAL_TIM_PWM_Stop+0x66>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6a1a      	ldr	r2, [r3, #32]
 80062dc:	f240 4344 	movw	r3, #1092	; 0x444
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d107      	bne.n	80062f6 <HAL_TIM_PWM_Stop+0x66>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006300:	4013      	ands	r3, r2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10f      	bne.n	8006326 <HAL_TIM_PWM_Stop+0x96>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6a1a      	ldr	r2, [r3, #32]
 800630c:	f240 4344 	movw	r3, #1092	; 0x444
 8006310:	4013      	ands	r3, r2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d107      	bne.n	8006326 <HAL_TIM_PWM_Stop+0x96>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0201 	bic.w	r2, r2, #1
 8006324:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	40010000 	.word	0x40010000
 800633c:	40010400 	.word	0x40010400

08006340 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e083      	b.n	800645c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	d106      	bne.n	800636e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7fc f9af 	bl	80026cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2202      	movs	r2, #2
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006384:	f023 0307 	bic.w	r3, r3, #7
 8006388:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f000 fb7b 	bl	8006a90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c2:	f023 0303 	bic.w	r3, r3, #3
 80063c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	4313      	orrs	r3, r2
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80063e0:	f023 030c 	bic.w	r3, r3, #12
 80063e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	4313      	orrs	r3, r2
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	4313      	orrs	r3, r2
 8006402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	011a      	lsls	r2, r3, #4
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	031b      	lsls	r3, r3, #12
 8006410:	4313      	orrs	r3, r2
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800641e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006426:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	011b      	lsls	r3, r3, #4
 8006432:	4313      	orrs	r3, r2
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b02      	cmp	r3, #2
 8006478:	d122      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b02      	cmp	r3, #2
 8006486:	d11b      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0202 	mvn.w	r2, #2
 8006490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f003 0303 	and.w	r3, r3, #3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fad7 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 80064ac:	e005      	b.n	80064ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 faca 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fad9 	bl	8006a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0304 	and.w	r3, r3, #4
 80064ca:	2b04      	cmp	r3, #4
 80064cc:	d122      	bne.n	8006514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d11b      	bne.n	8006514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0204 	mvn.w	r2, #4
 80064e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2202      	movs	r2, #2
 80064ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d003      	beq.n	8006502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 faad 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 8006500:	e005      	b.n	800650e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 faa0 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 faaf 	bl	8006a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0308 	and.w	r3, r3, #8
 800651e:	2b08      	cmp	r3, #8
 8006520:	d122      	bne.n	8006568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0308 	and.w	r3, r3, #8
 800652c:	2b08      	cmp	r3, #8
 800652e:	d11b      	bne.n	8006568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0208 	mvn.w	r2, #8
 8006538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2204      	movs	r2, #4
 800653e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa83 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fa76 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fa85 	bl	8006a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b10      	cmp	r3, #16
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b10      	cmp	r3, #16
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0210 	mvn.w	r2, #16
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2208      	movs	r2, #8
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa59 	bl	8006a5a <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fa4c 	bl	8006a48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fa5b 	bl	8006a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d10e      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d107      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0201 	mvn.w	r2, #1
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fb fa2c 	bl	8001a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b80      	cmp	r3, #128	; 0x80
 80065f4:	d10e      	bne.n	8006614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006600:	2b80      	cmp	r3, #128	; 0x80
 8006602:	d107      	bne.n	8006614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800660c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fe4b 	bl	80072aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b40      	cmp	r3, #64	; 0x40
 8006620:	d10e      	bne.n	8006640 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d107      	bne.n	8006640 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fa1f 	bl	8006a7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b20      	cmp	r3, #32
 800664c:	d10e      	bne.n	800666c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0320 	and.w	r3, r3, #32
 8006658:	2b20      	cmp	r3, #32
 800665a:	d107      	bne.n	800666c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0220 	mvn.w	r2, #32
 8006664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fe16 	bl	8007298 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800666c:	bf00      	nop
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_TIM_OC_ConfigChannel+0x1a>
 800668a:	2302      	movs	r3, #2
 800668c:	e04e      	b.n	800672c <HAL_TIM_OC_ConfigChannel+0xb8>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2202      	movs	r2, #2
 800669a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b0c      	cmp	r3, #12
 80066a2:	d839      	bhi.n	8006718 <HAL_TIM_OC_ConfigChannel+0xa4>
 80066a4:	a201      	add	r2, pc, #4	; (adr r2, 80066ac <HAL_TIM_OC_ConfigChannel+0x38>)
 80066a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066aa:	bf00      	nop
 80066ac:	080066e1 	.word	0x080066e1
 80066b0:	08006719 	.word	0x08006719
 80066b4:	08006719 	.word	0x08006719
 80066b8:	08006719 	.word	0x08006719
 80066bc:	080066ef 	.word	0x080066ef
 80066c0:	08006719 	.word	0x08006719
 80066c4:	08006719 	.word	0x08006719
 80066c8:	08006719 	.word	0x08006719
 80066cc:	080066fd 	.word	0x080066fd
 80066d0:	08006719 	.word	0x08006719
 80066d4:	08006719 	.word	0x08006719
 80066d8:	08006719 	.word	0x08006719
 80066dc:	0800670b 	.word	0x0800670b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fa70 	bl	8006bcc <TIM_OC1_SetConfig>
      break;
 80066ec:	e015      	b.n	800671a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68b9      	ldr	r1, [r7, #8]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fad9 	bl	8006cac <TIM_OC2_SetConfig>
      break;
 80066fa:	e00e      	b.n	800671a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 fb46 	bl	8006d94 <TIM_OC3_SetConfig>
      break;
 8006708:	e007      	b.n	800671a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fbb3 	bl	8006e7c <TIM_OC4_SetConfig>
      break;
 8006716:	e000      	b.n	800671a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006718:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800674a:	2302      	movs	r3, #2
 800674c:	e0b4      	b.n	80068b8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b0c      	cmp	r3, #12
 8006762:	f200 809f 	bhi.w	80068a4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	080067a1 	.word	0x080067a1
 8006770:	080068a5 	.word	0x080068a5
 8006774:	080068a5 	.word	0x080068a5
 8006778:	080068a5 	.word	0x080068a5
 800677c:	080067e1 	.word	0x080067e1
 8006780:	080068a5 	.word	0x080068a5
 8006784:	080068a5 	.word	0x080068a5
 8006788:	080068a5 	.word	0x080068a5
 800678c:	08006823 	.word	0x08006823
 8006790:	080068a5 	.word	0x080068a5
 8006794:	080068a5 	.word	0x080068a5
 8006798:	080068a5 	.word	0x080068a5
 800679c:	08006863 	.word	0x08006863
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fa10 	bl	8006bcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699a      	ldr	r2, [r3, #24]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0208 	orr.w	r2, r2, #8
 80067ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	699a      	ldr	r2, [r3, #24]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0204 	bic.w	r2, r2, #4
 80067ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6999      	ldr	r1, [r3, #24]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	619a      	str	r2, [r3, #24]
      break;
 80067de:	e062      	b.n	80068a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fa60 	bl	8006cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800680a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6999      	ldr	r1, [r3, #24]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	021a      	lsls	r2, r3, #8
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	619a      	str	r2, [r3, #24]
      break;
 8006820:	e041      	b.n	80068a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68b9      	ldr	r1, [r7, #8]
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fab3 	bl	8006d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f042 0208 	orr.w	r2, r2, #8
 800683c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69da      	ldr	r2, [r3, #28]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0204 	bic.w	r2, r2, #4
 800684c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69d9      	ldr	r1, [r3, #28]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	61da      	str	r2, [r3, #28]
      break;
 8006860:	e021      	b.n	80068a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fb07 	bl	8006e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69da      	ldr	r2, [r3, #28]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800688c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69d9      	ldr	r1, [r3, #28]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	021a      	lsls	r2, r3, #8
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	61da      	str	r2, [r3, #28]
      break;
 80068a2:	e000      	b.n	80068a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80068a4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_TIM_ConfigClockSource+0x18>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e0b3      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x180>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006910:	d03e      	beq.n	8006990 <HAL_TIM_ConfigClockSource+0xd0>
 8006912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006916:	f200 8087 	bhi.w	8006a28 <HAL_TIM_ConfigClockSource+0x168>
 800691a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691e:	f000 8085 	beq.w	8006a2c <HAL_TIM_ConfigClockSource+0x16c>
 8006922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006926:	d87f      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x168>
 8006928:	2b70      	cmp	r3, #112	; 0x70
 800692a:	d01a      	beq.n	8006962 <HAL_TIM_ConfigClockSource+0xa2>
 800692c:	2b70      	cmp	r3, #112	; 0x70
 800692e:	d87b      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x168>
 8006930:	2b60      	cmp	r3, #96	; 0x60
 8006932:	d050      	beq.n	80069d6 <HAL_TIM_ConfigClockSource+0x116>
 8006934:	2b60      	cmp	r3, #96	; 0x60
 8006936:	d877      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x168>
 8006938:	2b50      	cmp	r3, #80	; 0x50
 800693a:	d03c      	beq.n	80069b6 <HAL_TIM_ConfigClockSource+0xf6>
 800693c:	2b50      	cmp	r3, #80	; 0x50
 800693e:	d873      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x168>
 8006940:	2b40      	cmp	r3, #64	; 0x40
 8006942:	d058      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x136>
 8006944:	2b40      	cmp	r3, #64	; 0x40
 8006946:	d86f      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x168>
 8006948:	2b30      	cmp	r3, #48	; 0x30
 800694a:	d064      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x156>
 800694c:	2b30      	cmp	r3, #48	; 0x30
 800694e:	d86b      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x168>
 8006950:	2b20      	cmp	r3, #32
 8006952:	d060      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x156>
 8006954:	2b20      	cmp	r3, #32
 8006956:	d867      	bhi.n	8006a28 <HAL_TIM_ConfigClockSource+0x168>
 8006958:	2b00      	cmp	r3, #0
 800695a:	d05c      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x156>
 800695c:	2b10      	cmp	r3, #16
 800695e:	d05a      	beq.n	8006a16 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006960:	e062      	b.n	8006a28 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6899      	ldr	r1, [r3, #8]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f000 fb4e 	bl	8007012 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006984:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	609a      	str	r2, [r3, #8]
      break;
 800698e:	e04e      	b.n	8006a2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	6899      	ldr	r1, [r3, #8]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f000 fb37 	bl	8007012 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069b2:	609a      	str	r2, [r3, #8]
      break;
 80069b4:	e03b      	b.n	8006a2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	6859      	ldr	r1, [r3, #4]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f000 faae 	bl	8006f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2150      	movs	r1, #80	; 0x50
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fb05 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 80069d4:	e02b      	b.n	8006a2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6859      	ldr	r1, [r3, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f000 facc 	bl	8006f80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2160      	movs	r1, #96	; 0x60
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 faf5 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 80069f4:	e01b      	b.n	8006a2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	6859      	ldr	r1, [r3, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f000 fa8e 	bl	8006f24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2140      	movs	r1, #64	; 0x40
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fae5 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 8006a14:	e00b      	b.n	8006a2e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	4610      	mov	r0, r2
 8006a22:	f000 fadc 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 8006a26:	e002      	b.n	8006a2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a28:	bf00      	nop
 8006a2a:	e000      	b.n	8006a2e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006a2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bc80      	pop	{r7}
 8006a6a:	4770      	bx	lr

08006a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a3f      	ldr	r2, [pc, #252]	; (8006ba0 <TIM_Base_SetConfig+0x110>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d013      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aae:	d00f      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a3c      	ldr	r2, [pc, #240]	; (8006ba4 <TIM_Base_SetConfig+0x114>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d00b      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a3b      	ldr	r2, [pc, #236]	; (8006ba8 <TIM_Base_SetConfig+0x118>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d007      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a3a      	ldr	r2, [pc, #232]	; (8006bac <TIM_Base_SetConfig+0x11c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d003      	beq.n	8006ad0 <TIM_Base_SetConfig+0x40>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a39      	ldr	r2, [pc, #228]	; (8006bb0 <TIM_Base_SetConfig+0x120>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d108      	bne.n	8006ae2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a2e      	ldr	r2, [pc, #184]	; (8006ba0 <TIM_Base_SetConfig+0x110>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d02b      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af0:	d027      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2b      	ldr	r2, [pc, #172]	; (8006ba4 <TIM_Base_SetConfig+0x114>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d023      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <TIM_Base_SetConfig+0x118>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d01f      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a29      	ldr	r2, [pc, #164]	; (8006bac <TIM_Base_SetConfig+0x11c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01b      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a28      	ldr	r2, [pc, #160]	; (8006bb0 <TIM_Base_SetConfig+0x120>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d017      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a27      	ldr	r2, [pc, #156]	; (8006bb4 <TIM_Base_SetConfig+0x124>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d013      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a26      	ldr	r2, [pc, #152]	; (8006bb8 <TIM_Base_SetConfig+0x128>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00f      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a25      	ldr	r2, [pc, #148]	; (8006bbc <TIM_Base_SetConfig+0x12c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00b      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a24      	ldr	r2, [pc, #144]	; (8006bc0 <TIM_Base_SetConfig+0x130>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d007      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a23      	ldr	r2, [pc, #140]	; (8006bc4 <TIM_Base_SetConfig+0x134>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d003      	beq.n	8006b42 <TIM_Base_SetConfig+0xb2>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a22      	ldr	r2, [pc, #136]	; (8006bc8 <TIM_Base_SetConfig+0x138>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d108      	bne.n	8006b54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a09      	ldr	r2, [pc, #36]	; (8006ba0 <TIM_Base_SetConfig+0x110>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d003      	beq.n	8006b88 <TIM_Base_SetConfig+0xf8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a0b      	ldr	r2, [pc, #44]	; (8006bb0 <TIM_Base_SetConfig+0x120>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d103      	bne.n	8006b90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	615a      	str	r2, [r3, #20]
}
 8006b96:	bf00      	nop
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bc80      	pop	{r7}
 8006b9e:	4770      	bx	lr
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40000400 	.word	0x40000400
 8006ba8:	40000800 	.word	0x40000800
 8006bac:	40000c00 	.word	0x40000c00
 8006bb0:	40010400 	.word	0x40010400
 8006bb4:	40014000 	.word	0x40014000
 8006bb8:	40014400 	.word	0x40014400
 8006bbc:	40014800 	.word	0x40014800
 8006bc0:	40001800 	.word	0x40001800
 8006bc4:	40001c00 	.word	0x40001c00
 8006bc8:	40002000 	.word	0x40002000

08006bcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f023 0201 	bic.w	r2, r3, #1
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0303 	bic.w	r3, r3, #3
 8006c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f023 0302 	bic.w	r3, r3, #2
 8006c14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a20      	ldr	r2, [pc, #128]	; (8006ca4 <TIM_OC1_SetConfig+0xd8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d003      	beq.n	8006c30 <TIM_OC1_SetConfig+0x64>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a1f      	ldr	r2, [pc, #124]	; (8006ca8 <TIM_OC1_SetConfig+0xdc>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d10c      	bne.n	8006c4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f023 0308 	bic.w	r3, r3, #8
 8006c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f023 0304 	bic.w	r3, r3, #4
 8006c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <TIM_OC1_SetConfig+0xd8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d003      	beq.n	8006c5a <TIM_OC1_SetConfig+0x8e>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a14      	ldr	r2, [pc, #80]	; (8006ca8 <TIM_OC1_SetConfig+0xdc>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d111      	bne.n	8006c7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	693a      	ldr	r2, [r7, #16]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	621a      	str	r2, [r3, #32]
}
 8006c98:	bf00      	nop
 8006c9a:	371c      	adds	r7, #28
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40010400 	.word	0x40010400

08006cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f023 0210 	bic.w	r2, r3, #16
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	021b      	lsls	r3, r3, #8
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f023 0320 	bic.w	r3, r3, #32
 8006cf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a21      	ldr	r2, [pc, #132]	; (8006d8c <TIM_OC2_SetConfig+0xe0>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d003      	beq.n	8006d14 <TIM_OC2_SetConfig+0x68>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <TIM_OC2_SetConfig+0xe4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d10d      	bne.n	8006d30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <TIM_OC2_SetConfig+0xe0>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_OC2_SetConfig+0x94>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a15      	ldr	r2, [pc, #84]	; (8006d90 <TIM_OC2_SetConfig+0xe4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d113      	bne.n	8006d68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	621a      	str	r2, [r3, #32]
}
 8006d82:	bf00      	nop
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40010400 	.word	0x40010400

08006d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0303 	bic.w	r3, r3, #3
 8006dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	021b      	lsls	r3, r3, #8
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a21      	ldr	r2, [pc, #132]	; (8006e74 <TIM_OC3_SetConfig+0xe0>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d003      	beq.n	8006dfa <TIM_OC3_SetConfig+0x66>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a20      	ldr	r2, [pc, #128]	; (8006e78 <TIM_OC3_SetConfig+0xe4>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d10d      	bne.n	8006e16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	021b      	lsls	r3, r3, #8
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a16      	ldr	r2, [pc, #88]	; (8006e74 <TIM_OC3_SetConfig+0xe0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d003      	beq.n	8006e26 <TIM_OC3_SetConfig+0x92>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a15      	ldr	r2, [pc, #84]	; (8006e78 <TIM_OC3_SetConfig+0xe4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d113      	bne.n	8006e4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	693a      	ldr	r2, [r7, #16]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	621a      	str	r2, [r3, #32]
}
 8006e68:	bf00      	nop
 8006e6a:	371c      	adds	r7, #28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	40010000 	.word	0x40010000
 8006e78:	40010400 	.word	0x40010400

08006e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a1b      	ldr	r3, [r3, #32]
 8006e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	021b      	lsls	r3, r3, #8
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	031b      	lsls	r3, r3, #12
 8006ece:	693a      	ldr	r2, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a11      	ldr	r2, [pc, #68]	; (8006f1c <TIM_OC4_SetConfig+0xa0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d003      	beq.n	8006ee4 <TIM_OC4_SetConfig+0x68>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4a10      	ldr	r2, [pc, #64]	; (8006f20 <TIM_OC4_SetConfig+0xa4>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d109      	bne.n	8006ef8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	019b      	lsls	r3, r3, #6
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bc80      	pop	{r7}
 8006f1a:	4770      	bx	lr
 8006f1c:	40010000 	.word	0x40010000
 8006f20:	40010400 	.word	0x40010400

08006f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6a1b      	ldr	r3, [r3, #32]
 8006f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	f023 0201 	bic.w	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	011b      	lsls	r3, r3, #4
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 030a 	bic.w	r3, r3, #10
 8006f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	693a      	ldr	r2, [r7, #16]
 8006f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	621a      	str	r2, [r3, #32]
}
 8006f76:	bf00      	nop
 8006f78:	371c      	adds	r7, #28
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr

08006f80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	f023 0210 	bic.w	r2, r3, #16
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006faa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	031b      	lsls	r3, r3, #12
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	621a      	str	r2, [r3, #32]
}
 8006fd4:	bf00      	nop
 8006fd6:	371c      	adds	r7, #28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr

08006fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b085      	sub	sp, #20
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f043 0307 	orr.w	r3, r3, #7
 8007000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	609a      	str	r2, [r3, #8]
}
 8007008:	bf00      	nop
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	bc80      	pop	{r7}
 8007010:	4770      	bx	lr

08007012 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007012:	b480      	push	{r7}
 8007014:	b087      	sub	sp, #28
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	607a      	str	r2, [r7, #4]
 800701e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800702c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	021a      	lsls	r2, r3, #8
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	431a      	orrs	r2, r3
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	4313      	orrs	r3, r2
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	609a      	str	r2, [r3, #8]
}
 8007046:	bf00      	nop
 8007048:	371c      	adds	r7, #28
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr

08007050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f003 031f 	and.w	r3, r3, #31
 8007062:	2201      	movs	r2, #1
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6a1a      	ldr	r2, [r3, #32]
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	43db      	mvns	r3, r3
 8007072:	401a      	ands	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 031f 	and.w	r3, r3, #31
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	fa01 f303 	lsl.w	r3, r1, r3
 8007088:	431a      	orrs	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr

08007098 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2204      	movs	r2, #4
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 f906 	bl	80072bc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b06      	cmp	r3, #6
 80070d0:	d007      	beq.n	80070e2 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f042 0201 	orr.w	r2, r2, #1
 80070e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2200      	movs	r2, #0
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	4618      	mov	r0, r3
 8007100:	f000 f8dc 	bl	80072bc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6a1a      	ldr	r2, [r3, #32]
 800710a:	f241 1311 	movw	r3, #4369	; 0x1111
 800710e:	4013      	ands	r3, r2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10f      	bne.n	8007134 <HAL_TIMEx_PWMN_Stop+0x48>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6a1a      	ldr	r2, [r3, #32]
 800711a:	f240 4344 	movw	r3, #1092	; 0x444
 800711e:	4013      	ands	r3, r2
 8007120:	2b00      	cmp	r3, #0
 8007122:	d107      	bne.n	8007134 <HAL_TIMEx_PWMN_Stop+0x48>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007132:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	f241 1311 	movw	r3, #4369	; 0x1111
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10f      	bne.n	8007164 <HAL_TIMEx_PWMN_Stop+0x78>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6a1a      	ldr	r2, [r3, #32]
 800714a:	f240 4344 	movw	r3, #1092	; 0x444
 800714e:	4013      	ands	r3, r2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d107      	bne.n	8007164 <HAL_TIMEx_PWMN_Stop+0x78>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0201 	bic.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800716e:	b480      	push	{r7}
 8007170:	b085      	sub	sp, #20
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007182:	2302      	movs	r3, #2
 8007184:	e032      	b.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071be:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bc80      	pop	{r7}
 80071f4:	4770      	bx	lr

080071f6 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071f6:	b480      	push	{r7}
 80071f8:	b085      	sub	sp, #20
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007200:	2300      	movs	r3, #0
 8007202:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800720e:	2302      	movs	r3, #2
 8007210:	e03d      	b.n	800728e <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	4313      	orrs	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	4313      	orrs	r3, r2
 800727a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr

08007298 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc80      	pop	{r7}
 80072a8:	4770      	bx	lr

080072aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072aa:	b480      	push	{r7}
 80072ac:	b083      	sub	sp, #12
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072b2:	bf00      	nop
 80072b4:	370c      	adds	r7, #12
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr

080072bc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2204      	movs	r2, #4
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1a      	ldr	r2, [r3, #32]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	43db      	mvns	r3, r3
 80072de:	401a      	ands	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	fa01 f303 	lsl.w	r3, r1, r3
 80072f4:	431a      	orrs	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr

08007304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d101      	bne.n	8007316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e03f      	b.n	8007396 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d106      	bne.n	8007330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fb faa0 	bl	8002870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2224      	movs	r2, #36	; 0x24
 8007334:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fa63 	bl	8007814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800735c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	695a      	ldr	r2, [r3, #20]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800736c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68da      	ldr	r2, [r3, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800737c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2220      	movs	r2, #32
 8007388:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b088      	sub	sp, #32
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80073c0:	2300      	movs	r3, #0
 80073c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10d      	bne.n	80073f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d008      	beq.n	80073f2 <HAL_UART_IRQHandler+0x52>
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	f003 0320 	and.w	r3, r3, #32
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f991 	bl	8007712 <UART_Receive_IT>
      return;
 80073f0:	e0d0      	b.n	8007594 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 80b0 	beq.w	800755a <HAL_UART_IRQHandler+0x1ba>
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	d105      	bne.n	8007410 <HAL_UART_IRQHandler+0x70>
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 80a5 	beq.w	800755a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <HAL_UART_IRQHandler+0x90>
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007428:	f043 0201 	orr.w	r2, r3, #1
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <HAL_UART_IRQHandler+0xb0>
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007448:	f043 0202 	orr.w	r2, r3, #2
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <HAL_UART_IRQHandler+0xd0>
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007468:	f043 0204 	orr.w	r2, r3, #4
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00f      	beq.n	800749a <HAL_UART_IRQHandler+0xfa>
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d104      	bne.n	800748e <HAL_UART_IRQHandler+0xee>
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d005      	beq.n	800749a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	f043 0208 	orr.w	r2, r3, #8
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d077      	beq.n	8007592 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	f003 0320 	and.w	r3, r3, #32
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d007      	beq.n	80074bc <HAL_UART_IRQHandler+0x11c>
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f92b 	bl	8007712 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	695b      	ldr	r3, [r3, #20]
 80074c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c6:	2b40      	cmp	r3, #64	; 0x40
 80074c8:	bf0c      	ite	eq
 80074ca:	2301      	moveq	r3, #1
 80074cc:	2300      	movne	r3, #0
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d102      	bne.n	80074e4 <HAL_UART_IRQHandler+0x144>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d031      	beq.n	8007548 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f876 	bl	80075d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f4:	2b40      	cmp	r3, #64	; 0x40
 80074f6:	d123      	bne.n	8007540 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	695a      	ldr	r2, [r3, #20]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007506:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800750c:	2b00      	cmp	r3, #0
 800750e:	d013      	beq.n	8007538 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007514:	4a21      	ldr	r2, [pc, #132]	; (800759c <HAL_UART_IRQHandler+0x1fc>)
 8007516:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751c:	4618      	mov	r0, r3
 800751e:	f7fc f8db 	bl	80036d8 <HAL_DMA_Abort_IT>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d016      	beq.n	8007556 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007532:	4610      	mov	r0, r2
 8007534:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007536:	e00e      	b.n	8007556 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f843 	bl	80075c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753e:	e00a      	b.n	8007556 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f83f 	bl	80075c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007546:	e006      	b.n	8007556 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 f83b 	bl	80075c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007554:	e01d      	b.n	8007592 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007556:	bf00      	nop
    return;
 8007558:	e01b      	b.n	8007592 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <HAL_UART_IRQHandler+0x1d6>
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f862 	bl	8007638 <UART_Transmit_IT>
    return;
 8007574:	e00e      	b.n	8007594 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <HAL_UART_IRQHandler+0x1f4>
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007586:	2b00      	cmp	r3, #0
 8007588:	d004      	beq.n	8007594 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f8a9 	bl	80076e2 <UART_EndTransmit_IT>
    return;
 8007590:	e000      	b.n	8007594 <HAL_UART_IRQHandler+0x1f4>
    return;
 8007592:	bf00      	nop
  }
}
 8007594:	3720      	adds	r7, #32
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	08007611 	.word	0x08007611

080075a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr

080075b2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr

080075c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bc80      	pop	{r7}
 80075d4:	4770      	bx	lr

080075d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075d6:	b480      	push	{r7}
 80075d8:	b083      	sub	sp, #12
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68da      	ldr	r2, [r3, #12]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	695a      	ldr	r2, [r3, #20]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0201 	bic.w	r2, r2, #1
 80075fc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	bc80      	pop	{r7}
 800760e:	4770      	bx	lr

08007610 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f7ff ffca 	bl	80075c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007630:	bf00      	nop
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b21      	cmp	r3, #33	; 0x21
 800764a:	d144      	bne.n	80076d6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007654:	d11a      	bne.n	800768c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6a1b      	ldr	r3, [r3, #32]
 800765a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800766a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d105      	bne.n	8007680 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	1c9a      	adds	r2, r3, #2
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	621a      	str	r2, [r3, #32]
 800767e:	e00e      	b.n	800769e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	621a      	str	r2, [r3, #32]
 800768a:	e008      	b.n	800769e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	1c59      	adds	r1, r3, #1
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	6211      	str	r1, [r2, #32]
 8007696:	781a      	ldrb	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	4619      	mov	r1, r3
 80076ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10f      	bne.n	80076d2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	e000      	b.n	80076d8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80076d6:	2302      	movs	r3, #2
  }
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	bc80      	pop	{r7}
 80076e0:	4770      	bx	lr

080076e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff ff4c 	bl	80075a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3708      	adds	r7, #8
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b084      	sub	sp, #16
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b22      	cmp	r3, #34	; 0x22
 8007724:	d171      	bne.n	800780a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800772e:	d123      	bne.n	8007778 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007734:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10e      	bne.n	800775c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	b29b      	uxth	r3, r3
 8007746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800774a:	b29a      	uxth	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007754:	1c9a      	adds	r2, r3, #2
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	629a      	str	r2, [r3, #40]	; 0x28
 800775a:	e029      	b.n	80077b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	b29b      	uxth	r3, r3
 8007764:	b2db      	uxtb	r3, r3
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	629a      	str	r2, [r3, #40]	; 0x28
 8007776:	e01b      	b.n	80077b0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10a      	bne.n	8007796 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6858      	ldr	r0, [r3, #4]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778a:	1c59      	adds	r1, r3, #1
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6291      	str	r1, [r2, #40]	; 0x28
 8007790:	b2c2      	uxtb	r2, r0
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	e00c      	b.n	80077b0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	b2da      	uxtb	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a2:	1c58      	adds	r0, r3, #1
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	6288      	str	r0, [r1, #40]	; 0x28
 80077a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077ac:	b2d2      	uxtb	r2, r2
 80077ae:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	4619      	mov	r1, r3
 80077be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d120      	bne.n	8007806 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f022 0220 	bic.w	r2, r2, #32
 80077d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	695a      	ldr	r2, [r3, #20]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 0201 	bic.w	r2, r2, #1
 80077f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff fed8 	bl	80075b2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	e002      	b.n	800780c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	e000      	b.n	800780c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800780a:	2302      	movs	r3, #2
  }
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	431a      	orrs	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	431a      	orrs	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007854:	f023 030c 	bic.w	r3, r3, #12
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6812      	ldr	r2, [r2, #0]
 800785c:	68f9      	ldr	r1, [r7, #12]
 800785e:	430b      	orrs	r3, r1
 8007860:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699a      	ldr	r2, [r3, #24]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	430a      	orrs	r2, r1
 8007876:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007880:	f040 80aa 	bne.w	80079d8 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4aa9      	ldr	r2, [pc, #676]	; (8007b30 <UART_SetConfig+0x31c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d004      	beq.n	8007898 <UART_SetConfig+0x84>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4aa8      	ldr	r2, [pc, #672]	; (8007b34 <UART_SetConfig+0x320>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d14f      	bne.n	8007938 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007898:	f7fe fbe4 	bl	8006064 <HAL_RCC_GetPCLK2Freq>
 800789c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009a      	lsls	r2, r3, #2
 80078a8:	441a      	add	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b4:	4aa0      	ldr	r2, [pc, #640]	; (8007b38 <UART_SetConfig+0x324>)
 80078b6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ba:	095b      	lsrs	r3, r3, #5
 80078bc:	0119      	lsls	r1, r3, #4
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	4613      	mov	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	009a      	lsls	r2, r3, #2
 80078c8:	441a      	add	r2, r3
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	005b      	lsls	r3, r3, #1
 80078d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80078d4:	4b98      	ldr	r3, [pc, #608]	; (8007b38 <UART_SetConfig+0x324>)
 80078d6:	fba3 0302 	umull	r0, r3, r3, r2
 80078da:	095b      	lsrs	r3, r3, #5
 80078dc:	2064      	movs	r0, #100	; 0x64
 80078de:	fb00 f303 	mul.w	r3, r0, r3
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	3332      	adds	r3, #50	; 0x32
 80078e8:	4a93      	ldr	r2, [pc, #588]	; (8007b38 <UART_SetConfig+0x324>)
 80078ea:	fba2 2303 	umull	r2, r3, r2, r3
 80078ee:	095b      	lsrs	r3, r3, #5
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078f6:	4419      	add	r1, r3
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	4613      	mov	r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4413      	add	r3, r2
 8007900:	009a      	lsls	r2, r3, #2
 8007902:	441a      	add	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	005b      	lsls	r3, r3, #1
 800790a:	fbb2 f2f3 	udiv	r2, r2, r3
 800790e:	4b8a      	ldr	r3, [pc, #552]	; (8007b38 <UART_SetConfig+0x324>)
 8007910:	fba3 0302 	umull	r0, r3, r3, r2
 8007914:	095b      	lsrs	r3, r3, #5
 8007916:	2064      	movs	r0, #100	; 0x64
 8007918:	fb00 f303 	mul.w	r3, r0, r3
 800791c:	1ad3      	subs	r3, r2, r3
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	3332      	adds	r3, #50	; 0x32
 8007922:	4a85      	ldr	r2, [pc, #532]	; (8007b38 <UART_SetConfig+0x324>)
 8007924:	fba2 2303 	umull	r2, r3, r2, r3
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	f003 0207 	and.w	r2, r3, #7
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	440a      	add	r2, r1
 8007934:	609a      	str	r2, [r3, #8]
 8007936:	e0f7      	b.n	8007b28 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007938:	f7fe fb72 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 800793c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009a      	lsls	r2, r3, #2
 8007948:	441a      	add	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	fbb2 f3f3 	udiv	r3, r2, r3
 8007954:	4a78      	ldr	r2, [pc, #480]	; (8007b38 <UART_SetConfig+0x324>)
 8007956:	fba2 2303 	umull	r2, r3, r2, r3
 800795a:	095b      	lsrs	r3, r3, #5
 800795c:	0119      	lsls	r1, r3, #4
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	4613      	mov	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	009a      	lsls	r2, r3, #2
 8007968:	441a      	add	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	fbb2 f2f3 	udiv	r2, r2, r3
 8007974:	4b70      	ldr	r3, [pc, #448]	; (8007b38 <UART_SetConfig+0x324>)
 8007976:	fba3 0302 	umull	r0, r3, r3, r2
 800797a:	095b      	lsrs	r3, r3, #5
 800797c:	2064      	movs	r0, #100	; 0x64
 800797e:	fb00 f303 	mul.w	r3, r0, r3
 8007982:	1ad3      	subs	r3, r2, r3
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	3332      	adds	r3, #50	; 0x32
 8007988:	4a6b      	ldr	r2, [pc, #428]	; (8007b38 <UART_SetConfig+0x324>)
 800798a:	fba2 2303 	umull	r2, r3, r2, r3
 800798e:	095b      	lsrs	r3, r3, #5
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007996:	4419      	add	r1, r3
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	4613      	mov	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4413      	add	r3, r2
 80079a0:	009a      	lsls	r2, r3, #2
 80079a2:	441a      	add	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80079ae:	4b62      	ldr	r3, [pc, #392]	; (8007b38 <UART_SetConfig+0x324>)
 80079b0:	fba3 0302 	umull	r0, r3, r3, r2
 80079b4:	095b      	lsrs	r3, r3, #5
 80079b6:	2064      	movs	r0, #100	; 0x64
 80079b8:	fb00 f303 	mul.w	r3, r0, r3
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	3332      	adds	r3, #50	; 0x32
 80079c2:	4a5d      	ldr	r2, [pc, #372]	; (8007b38 <UART_SetConfig+0x324>)
 80079c4:	fba2 2303 	umull	r2, r3, r2, r3
 80079c8:	095b      	lsrs	r3, r3, #5
 80079ca:	f003 0207 	and.w	r2, r3, #7
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	440a      	add	r2, r1
 80079d4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80079d6:	e0a7      	b.n	8007b28 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a54      	ldr	r2, [pc, #336]	; (8007b30 <UART_SetConfig+0x31c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d004      	beq.n	80079ec <UART_SetConfig+0x1d8>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a53      	ldr	r2, [pc, #332]	; (8007b34 <UART_SetConfig+0x320>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d14e      	bne.n	8007a8a <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 80079ec:	f7fe fb3a 	bl	8006064 <HAL_RCC_GetPCLK2Freq>
 80079f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	009a      	lsls	r2, r3, #2
 80079fc:	441a      	add	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a08:	4a4b      	ldr	r2, [pc, #300]	; (8007b38 <UART_SetConfig+0x324>)
 8007a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0e:	095b      	lsrs	r3, r3, #5
 8007a10:	0119      	lsls	r1, r3, #4
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	009a      	lsls	r2, r3, #2
 8007a1c:	441a      	add	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a28:	4b43      	ldr	r3, [pc, #268]	; (8007b38 <UART_SetConfig+0x324>)
 8007a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8007a2e:	095b      	lsrs	r3, r3, #5
 8007a30:	2064      	movs	r0, #100	; 0x64
 8007a32:	fb00 f303 	mul.w	r3, r0, r3
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	011b      	lsls	r3, r3, #4
 8007a3a:	3332      	adds	r3, #50	; 0x32
 8007a3c:	4a3e      	ldr	r2, [pc, #248]	; (8007b38 <UART_SetConfig+0x324>)
 8007a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a42:	095b      	lsrs	r3, r3, #5
 8007a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a48:	4419      	add	r1, r3
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	009a      	lsls	r2, r3, #2
 8007a54:	441a      	add	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a60:	4b35      	ldr	r3, [pc, #212]	; (8007b38 <UART_SetConfig+0x324>)
 8007a62:	fba3 0302 	umull	r0, r3, r3, r2
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	2064      	movs	r0, #100	; 0x64
 8007a6a:	fb00 f303 	mul.w	r3, r0, r3
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	3332      	adds	r3, #50	; 0x32
 8007a74:	4a30      	ldr	r2, [pc, #192]	; (8007b38 <UART_SetConfig+0x324>)
 8007a76:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	f003 020f 	and.w	r2, r3, #15
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	440a      	add	r2, r1
 8007a86:	609a      	str	r2, [r3, #8]
 8007a88:	e04e      	b.n	8007b28 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a8a:	f7fe fac9 	bl	8006020 <HAL_RCC_GetPCLK1Freq>
 8007a8e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009a      	lsls	r2, r3, #2
 8007a9a:	441a      	add	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa6:	4a24      	ldr	r2, [pc, #144]	; (8007b38 <UART_SetConfig+0x324>)
 8007aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aac:	095b      	lsrs	r3, r3, #5
 8007aae:	0119      	lsls	r1, r3, #4
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009a      	lsls	r2, r3, #2
 8007aba:	441a      	add	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ac6:	4b1c      	ldr	r3, [pc, #112]	; (8007b38 <UART_SetConfig+0x324>)
 8007ac8:	fba3 0302 	umull	r0, r3, r3, r2
 8007acc:	095b      	lsrs	r3, r3, #5
 8007ace:	2064      	movs	r0, #100	; 0x64
 8007ad0:	fb00 f303 	mul.w	r3, r0, r3
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	3332      	adds	r3, #50	; 0x32
 8007ada:	4a17      	ldr	r2, [pc, #92]	; (8007b38 <UART_SetConfig+0x324>)
 8007adc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae0:	095b      	lsrs	r3, r3, #5
 8007ae2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ae6:	4419      	add	r1, r3
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009a      	lsls	r2, r3, #2
 8007af2:	441a      	add	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	fbb2 f2f3 	udiv	r2, r2, r3
 8007afe:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <UART_SetConfig+0x324>)
 8007b00:	fba3 0302 	umull	r0, r3, r3, r2
 8007b04:	095b      	lsrs	r3, r3, #5
 8007b06:	2064      	movs	r0, #100	; 0x64
 8007b08:	fb00 f303 	mul.w	r3, r0, r3
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	3332      	adds	r3, #50	; 0x32
 8007b12:	4a09      	ldr	r2, [pc, #36]	; (8007b38 <UART_SetConfig+0x324>)
 8007b14:	fba2 2303 	umull	r2, r3, r2, r3
 8007b18:	095b      	lsrs	r3, r3, #5
 8007b1a:	f003 020f 	and.w	r2, r3, #15
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	440a      	add	r2, r1
 8007b24:	609a      	str	r2, [r3, #8]
}
 8007b26:	e7ff      	b.n	8007b28 <UART_SetConfig+0x314>
 8007b28:	bf00      	nop
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	40011000 	.word	0x40011000
 8007b34:	40011400 	.word	0x40011400
 8007b38:	51eb851f 	.word	0x51eb851f

08007b3c <__libc_init_array>:
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	2600      	movs	r6, #0
 8007b40:	4d0c      	ldr	r5, [pc, #48]	; (8007b74 <__libc_init_array+0x38>)
 8007b42:	4c0d      	ldr	r4, [pc, #52]	; (8007b78 <__libc_init_array+0x3c>)
 8007b44:	1b64      	subs	r4, r4, r5
 8007b46:	10a4      	asrs	r4, r4, #2
 8007b48:	42a6      	cmp	r6, r4
 8007b4a:	d109      	bne.n	8007b60 <__libc_init_array+0x24>
 8007b4c:	f001 f822 	bl	8008b94 <_init>
 8007b50:	2600      	movs	r6, #0
 8007b52:	4d0a      	ldr	r5, [pc, #40]	; (8007b7c <__libc_init_array+0x40>)
 8007b54:	4c0a      	ldr	r4, [pc, #40]	; (8007b80 <__libc_init_array+0x44>)
 8007b56:	1b64      	subs	r4, r4, r5
 8007b58:	10a4      	asrs	r4, r4, #2
 8007b5a:	42a6      	cmp	r6, r4
 8007b5c:	d105      	bne.n	8007b6a <__libc_init_array+0x2e>
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
 8007b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b64:	4798      	blx	r3
 8007b66:	3601      	adds	r6, #1
 8007b68:	e7ee      	b.n	8007b48 <__libc_init_array+0xc>
 8007b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b6e:	4798      	blx	r3
 8007b70:	3601      	adds	r6, #1
 8007b72:	e7f2      	b.n	8007b5a <__libc_init_array+0x1e>
 8007b74:	08008db0 	.word	0x08008db0
 8007b78:	08008db0 	.word	0x08008db0
 8007b7c:	08008db0 	.word	0x08008db0
 8007b80:	08008db4 	.word	0x08008db4

08007b84 <memset>:
 8007b84:	4603      	mov	r3, r0
 8007b86:	4402      	add	r2, r0
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d100      	bne.n	8007b8e <memset+0xa>
 8007b8c:	4770      	bx	lr
 8007b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b92:	e7f9      	b.n	8007b88 <memset+0x4>

08007b94 <sin>:
 8007b94:	b530      	push	{r4, r5, lr}
 8007b96:	4a20      	ldr	r2, [pc, #128]	; (8007c18 <sin+0x84>)
 8007b98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	dc06      	bgt.n	8007bb0 <sin+0x1c>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f000 fe31 	bl	8008810 <__kernel_sin>
 8007bae:	e006      	b.n	8007bbe <sin+0x2a>
 8007bb0:	4a1a      	ldr	r2, [pc, #104]	; (8007c1c <sin+0x88>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	dd05      	ble.n	8007bc2 <sin+0x2e>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	f7f8 fb09 	bl	80001d0 <__aeabi_dsub>
 8007bbe:	b007      	add	sp, #28
 8007bc0:	bd30      	pop	{r4, r5, pc}
 8007bc2:	aa02      	add	r2, sp, #8
 8007bc4:	f000 f82c 	bl	8007c20 <__ieee754_rem_pio2>
 8007bc8:	f000 0003 	and.w	r0, r0, #3
 8007bcc:	2801      	cmp	r0, #1
 8007bce:	d009      	beq.n	8007be4 <sin+0x50>
 8007bd0:	2802      	cmp	r0, #2
 8007bd2:	d00e      	beq.n	8007bf2 <sin+0x5e>
 8007bd4:	b9c0      	cbnz	r0, 8007c08 <sin+0x74>
 8007bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bda:	2301      	movs	r3, #1
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007be2:	e7e2      	b.n	8007baa <sin+0x16>
 8007be4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bec:	f000 fa08 	bl	8008000 <__kernel_cos>
 8007bf0:	e7e5      	b.n	8007bbe <sin+0x2a>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bfe:	f000 fe07 	bl	8008810 <__kernel_sin>
 8007c02:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007c06:	e7da      	b.n	8007bbe <sin+0x2a>
 8007c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c10:	f000 f9f6 	bl	8008000 <__kernel_cos>
 8007c14:	e7f5      	b.n	8007c02 <sin+0x6e>
 8007c16:	bf00      	nop
 8007c18:	3fe921fb 	.word	0x3fe921fb
 8007c1c:	7fefffff 	.word	0x7fefffff

08007c20 <__ieee754_rem_pio2>:
 8007c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c24:	4614      	mov	r4, r2
 8007c26:	4ac4      	ldr	r2, [pc, #784]	; (8007f38 <__ieee754_rem_pio2+0x318>)
 8007c28:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8007c2c:	b08d      	sub	sp, #52	; 0x34
 8007c2e:	4592      	cmp	sl, r2
 8007c30:	9104      	str	r1, [sp, #16]
 8007c32:	dc07      	bgt.n	8007c44 <__ieee754_rem_pio2+0x24>
 8007c34:	2200      	movs	r2, #0
 8007c36:	2300      	movs	r3, #0
 8007c38:	e9c4 0100 	strd	r0, r1, [r4]
 8007c3c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007c40:	2500      	movs	r5, #0
 8007c42:	e024      	b.n	8007c8e <__ieee754_rem_pio2+0x6e>
 8007c44:	4abd      	ldr	r2, [pc, #756]	; (8007f3c <__ieee754_rem_pio2+0x31c>)
 8007c46:	4592      	cmp	sl, r2
 8007c48:	dc72      	bgt.n	8007d30 <__ieee754_rem_pio2+0x110>
 8007c4a:	9b04      	ldr	r3, [sp, #16]
 8007c4c:	4dbc      	ldr	r5, [pc, #752]	; (8007f40 <__ieee754_rem_pio2+0x320>)
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	a3ab      	add	r3, pc, #684	; (adr r3, 8007f00 <__ieee754_rem_pio2+0x2e0>)
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	dd36      	ble.n	8007cc6 <__ieee754_rem_pio2+0xa6>
 8007c58:	f7f8 faba 	bl	80001d0 <__aeabi_dsub>
 8007c5c:	45aa      	cmp	sl, r5
 8007c5e:	4606      	mov	r6, r0
 8007c60:	460f      	mov	r7, r1
 8007c62:	d018      	beq.n	8007c96 <__ieee754_rem_pio2+0x76>
 8007c64:	a3a8      	add	r3, pc, #672	; (adr r3, 8007f08 <__ieee754_rem_pio2+0x2e8>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fab1 	bl	80001d0 <__aeabi_dsub>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4630      	mov	r0, r6
 8007c74:	e9c4 2300 	strd	r2, r3, [r4]
 8007c78:	4639      	mov	r1, r7
 8007c7a:	f7f8 faa9 	bl	80001d0 <__aeabi_dsub>
 8007c7e:	a3a2      	add	r3, pc, #648	; (adr r3, 8007f08 <__ieee754_rem_pio2+0x2e8>)
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	f7f8 faa4 	bl	80001d0 <__aeabi_dsub>
 8007c88:	2501      	movs	r5, #1
 8007c8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007c8e:	4628      	mov	r0, r5
 8007c90:	b00d      	add	sp, #52	; 0x34
 8007c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c96:	a39e      	add	r3, pc, #632	; (adr r3, 8007f10 <__ieee754_rem_pio2+0x2f0>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	f7f8 fa98 	bl	80001d0 <__aeabi_dsub>
 8007ca0:	a39d      	add	r3, pc, #628	; (adr r3, 8007f18 <__ieee754_rem_pio2+0x2f8>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	460f      	mov	r7, r1
 8007caa:	f7f8 fa91 	bl	80001d0 <__aeabi_dsub>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	e9c4 2300 	strd	r2, r3, [r4]
 8007cb8:	4639      	mov	r1, r7
 8007cba:	f7f8 fa89 	bl	80001d0 <__aeabi_dsub>
 8007cbe:	a396      	add	r3, pc, #600	; (adr r3, 8007f18 <__ieee754_rem_pio2+0x2f8>)
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	e7de      	b.n	8007c84 <__ieee754_rem_pio2+0x64>
 8007cc6:	f7f8 fa85 	bl	80001d4 <__adddf3>
 8007cca:	45aa      	cmp	sl, r5
 8007ccc:	4606      	mov	r6, r0
 8007cce:	460f      	mov	r7, r1
 8007cd0:	d016      	beq.n	8007d00 <__ieee754_rem_pio2+0xe0>
 8007cd2:	a38d      	add	r3, pc, #564	; (adr r3, 8007f08 <__ieee754_rem_pio2+0x2e8>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f7f8 fa7c 	bl	80001d4 <__adddf3>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	e9c4 2300 	strd	r2, r3, [r4]
 8007ce6:	4639      	mov	r1, r7
 8007ce8:	f7f8 fa72 	bl	80001d0 <__aeabi_dsub>
 8007cec:	a386      	add	r3, pc, #536	; (adr r3, 8007f08 <__ieee754_rem_pio2+0x2e8>)
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 fa6f 	bl	80001d4 <__adddf3>
 8007cf6:	f04f 35ff 	mov.w	r5, #4294967295
 8007cfa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007cfe:	e7c6      	b.n	8007c8e <__ieee754_rem_pio2+0x6e>
 8007d00:	a383      	add	r3, pc, #524	; (adr r3, 8007f10 <__ieee754_rem_pio2+0x2f0>)
 8007d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d06:	f7f8 fa65 	bl	80001d4 <__adddf3>
 8007d0a:	a383      	add	r3, pc, #524	; (adr r3, 8007f18 <__ieee754_rem_pio2+0x2f8>)
 8007d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d10:	4606      	mov	r6, r0
 8007d12:	460f      	mov	r7, r1
 8007d14:	f7f8 fa5e 	bl	80001d4 <__adddf3>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	e9c4 2300 	strd	r2, r3, [r4]
 8007d22:	4639      	mov	r1, r7
 8007d24:	f7f8 fa54 	bl	80001d0 <__aeabi_dsub>
 8007d28:	a37b      	add	r3, pc, #492	; (adr r3, 8007f18 <__ieee754_rem_pio2+0x2f8>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	e7e0      	b.n	8007cf2 <__ieee754_rem_pio2+0xd2>
 8007d30:	4a84      	ldr	r2, [pc, #528]	; (8007f44 <__ieee754_rem_pio2+0x324>)
 8007d32:	4592      	cmp	sl, r2
 8007d34:	f300 80d5 	bgt.w	8007ee2 <__ieee754_rem_pio2+0x2c2>
 8007d38:	f000 fe20 	bl	800897c <fabs>
 8007d3c:	a378      	add	r3, pc, #480	; (adr r3, 8007f20 <__ieee754_rem_pio2+0x300>)
 8007d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d42:	4606      	mov	r6, r0
 8007d44:	460f      	mov	r7, r1
 8007d46:	f7f8 fbfb 	bl	8000540 <__aeabi_dmul>
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	4b7e      	ldr	r3, [pc, #504]	; (8007f48 <__ieee754_rem_pio2+0x328>)
 8007d4e:	f7f8 fa41 	bl	80001d4 <__adddf3>
 8007d52:	f7f8 fe8f 	bl	8000a74 <__aeabi_d2iz>
 8007d56:	4605      	mov	r5, r0
 8007d58:	f7f8 fb88 	bl	800046c <__aeabi_i2d>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d64:	a366      	add	r3, pc, #408	; (adr r3, 8007f00 <__ieee754_rem_pio2+0x2e0>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f7f8 fbe9 	bl	8000540 <__aeabi_dmul>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4630      	mov	r0, r6
 8007d74:	4639      	mov	r1, r7
 8007d76:	f7f8 fa2b 	bl	80001d0 <__aeabi_dsub>
 8007d7a:	a363      	add	r3, pc, #396	; (adr r3, 8007f08 <__ieee754_rem_pio2+0x2e8>)
 8007d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d80:	4680      	mov	r8, r0
 8007d82:	4689      	mov	r9, r1
 8007d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d88:	f7f8 fbda 	bl	8000540 <__aeabi_dmul>
 8007d8c:	2d1f      	cmp	r5, #31
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460f      	mov	r7, r1
 8007d92:	dc0e      	bgt.n	8007db2 <__ieee754_rem_pio2+0x192>
 8007d94:	4b6d      	ldr	r3, [pc, #436]	; (8007f4c <__ieee754_rem_pio2+0x32c>)
 8007d96:	1e6a      	subs	r2, r5, #1
 8007d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9c:	4553      	cmp	r3, sl
 8007d9e:	d008      	beq.n	8007db2 <__ieee754_rem_pio2+0x192>
 8007da0:	4632      	mov	r2, r6
 8007da2:	463b      	mov	r3, r7
 8007da4:	4640      	mov	r0, r8
 8007da6:	4649      	mov	r1, r9
 8007da8:	f7f8 fa12 	bl	80001d0 <__aeabi_dsub>
 8007dac:	e9c4 0100 	strd	r0, r1, [r4]
 8007db0:	e013      	b.n	8007dda <__ieee754_rem_pio2+0x1ba>
 8007db2:	463b      	mov	r3, r7
 8007db4:	4632      	mov	r2, r6
 8007db6:	4640      	mov	r0, r8
 8007db8:	4649      	mov	r1, r9
 8007dba:	f7f8 fa09 	bl	80001d0 <__aeabi_dsub>
 8007dbe:	ea4f 532a 	mov.w	r3, sl, asr #20
 8007dc2:	9305      	str	r3, [sp, #20]
 8007dc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007dc8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8007dcc:	f1ba 0f10 	cmp.w	sl, #16
 8007dd0:	dc1f      	bgt.n	8007e12 <__ieee754_rem_pio2+0x1f2>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	e9c4 2300 	strd	r2, r3, [r4]
 8007dda:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8007dde:	4640      	mov	r0, r8
 8007de0:	4653      	mov	r3, sl
 8007de2:	4649      	mov	r1, r9
 8007de4:	f7f8 f9f4 	bl	80001d0 <__aeabi_dsub>
 8007de8:	4632      	mov	r2, r6
 8007dea:	463b      	mov	r3, r7
 8007dec:	f7f8 f9f0 	bl	80001d0 <__aeabi_dsub>
 8007df0:	460b      	mov	r3, r1
 8007df2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007df6:	9904      	ldr	r1, [sp, #16]
 8007df8:	4602      	mov	r2, r0
 8007dfa:	2900      	cmp	r1, #0
 8007dfc:	f6bf af47 	bge.w	8007c8e <__ieee754_rem_pio2+0x6e>
 8007e00:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8007e04:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007e08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007e0c:	60e3      	str	r3, [r4, #12]
 8007e0e:	426d      	negs	r5, r5
 8007e10:	e73d      	b.n	8007c8e <__ieee754_rem_pio2+0x6e>
 8007e12:	a33f      	add	r3, pc, #252	; (adr r3, 8007f10 <__ieee754_rem_pio2+0x2f0>)
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e1c:	f7f8 fb90 	bl	8000540 <__aeabi_dmul>
 8007e20:	4606      	mov	r6, r0
 8007e22:	460f      	mov	r7, r1
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	4640      	mov	r0, r8
 8007e2a:	4649      	mov	r1, r9
 8007e2c:	f7f8 f9d0 	bl	80001d0 <__aeabi_dsub>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	4682      	mov	sl, r0
 8007e36:	468b      	mov	fp, r1
 8007e38:	4640      	mov	r0, r8
 8007e3a:	4649      	mov	r1, r9
 8007e3c:	f7f8 f9c8 	bl	80001d0 <__aeabi_dsub>
 8007e40:	4632      	mov	r2, r6
 8007e42:	463b      	mov	r3, r7
 8007e44:	f7f8 f9c4 	bl	80001d0 <__aeabi_dsub>
 8007e48:	a333      	add	r3, pc, #204	; (adr r3, 8007f18 <__ieee754_rem_pio2+0x2f8>)
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460f      	mov	r7, r1
 8007e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e56:	f7f8 fb73 	bl	8000540 <__aeabi_dmul>
 8007e5a:	4632      	mov	r2, r6
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	f7f8 f9b7 	bl	80001d0 <__aeabi_dsub>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4606      	mov	r6, r0
 8007e68:	460f      	mov	r7, r1
 8007e6a:	4650      	mov	r0, sl
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	f7f8 f9af 	bl	80001d0 <__aeabi_dsub>
 8007e72:	9a05      	ldr	r2, [sp, #20]
 8007e74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b31      	cmp	r3, #49	; 0x31
 8007e7c:	dc06      	bgt.n	8007e8c <__ieee754_rem_pio2+0x26c>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	46d0      	mov	r8, sl
 8007e84:	46d9      	mov	r9, fp
 8007e86:	e9c4 2300 	strd	r2, r3, [r4]
 8007e8a:	e7a6      	b.n	8007dda <__ieee754_rem_pio2+0x1ba>
 8007e8c:	a326      	add	r3, pc, #152	; (adr r3, 8007f28 <__ieee754_rem_pio2+0x308>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e96:	f7f8 fb53 	bl	8000540 <__aeabi_dmul>
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	460f      	mov	r7, r1
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	4659      	mov	r1, fp
 8007ea6:	f7f8 f993 	bl	80001d0 <__aeabi_dsub>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4680      	mov	r8, r0
 8007eb0:	4689      	mov	r9, r1
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	f7f8 f98b 	bl	80001d0 <__aeabi_dsub>
 8007eba:	4632      	mov	r2, r6
 8007ebc:	463b      	mov	r3, r7
 8007ebe:	f7f8 f987 	bl	80001d0 <__aeabi_dsub>
 8007ec2:	a31b      	add	r3, pc, #108	; (adr r3, 8007f30 <__ieee754_rem_pio2+0x310>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	4606      	mov	r6, r0
 8007eca:	460f      	mov	r7, r1
 8007ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ed0:	f7f8 fb36 	bl	8000540 <__aeabi_dmul>
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	463b      	mov	r3, r7
 8007ed8:	f7f8 f97a 	bl	80001d0 <__aeabi_dsub>
 8007edc:	4606      	mov	r6, r0
 8007ede:	460f      	mov	r7, r1
 8007ee0:	e75e      	b.n	8007da0 <__ieee754_rem_pio2+0x180>
 8007ee2:	4a1b      	ldr	r2, [pc, #108]	; (8007f50 <__ieee754_rem_pio2+0x330>)
 8007ee4:	4592      	cmp	sl, r2
 8007ee6:	dd35      	ble.n	8007f54 <__ieee754_rem_pio2+0x334>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	f7f8 f970 	bl	80001d0 <__aeabi_dsub>
 8007ef0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ef4:	e9c4 0100 	strd	r0, r1, [r4]
 8007ef8:	e6a2      	b.n	8007c40 <__ieee754_rem_pio2+0x20>
 8007efa:	bf00      	nop
 8007efc:	f3af 8000 	nop.w
 8007f00:	54400000 	.word	0x54400000
 8007f04:	3ff921fb 	.word	0x3ff921fb
 8007f08:	1a626331 	.word	0x1a626331
 8007f0c:	3dd0b461 	.word	0x3dd0b461
 8007f10:	1a600000 	.word	0x1a600000
 8007f14:	3dd0b461 	.word	0x3dd0b461
 8007f18:	2e037073 	.word	0x2e037073
 8007f1c:	3ba3198a 	.word	0x3ba3198a
 8007f20:	6dc9c883 	.word	0x6dc9c883
 8007f24:	3fe45f30 	.word	0x3fe45f30
 8007f28:	2e000000 	.word	0x2e000000
 8007f2c:	3ba3198a 	.word	0x3ba3198a
 8007f30:	252049c1 	.word	0x252049c1
 8007f34:	397b839a 	.word	0x397b839a
 8007f38:	3fe921fb 	.word	0x3fe921fb
 8007f3c:	4002d97b 	.word	0x4002d97b
 8007f40:	3ff921fb 	.word	0x3ff921fb
 8007f44:	413921fb 	.word	0x413921fb
 8007f48:	3fe00000 	.word	0x3fe00000
 8007f4c:	08008bd0 	.word	0x08008bd0
 8007f50:	7fefffff 	.word	0x7fefffff
 8007f54:	ea4f 552a 	mov.w	r5, sl, asr #20
 8007f58:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8007f5c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8007f60:	460f      	mov	r7, r1
 8007f62:	4606      	mov	r6, r0
 8007f64:	f7f8 fd86 	bl	8000a74 <__aeabi_d2iz>
 8007f68:	f7f8 fa80 	bl	800046c <__aeabi_i2d>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4630      	mov	r0, r6
 8007f72:	4639      	mov	r1, r7
 8007f74:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f78:	f7f8 f92a 	bl	80001d0 <__aeabi_dsub>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	4b1e      	ldr	r3, [pc, #120]	; (8007ff8 <__ieee754_rem_pio2+0x3d8>)
 8007f80:	f7f8 fade 	bl	8000540 <__aeabi_dmul>
 8007f84:	460f      	mov	r7, r1
 8007f86:	4606      	mov	r6, r0
 8007f88:	f7f8 fd74 	bl	8000a74 <__aeabi_d2iz>
 8007f8c:	f7f8 fa6e 	bl	800046c <__aeabi_i2d>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f9c:	f7f8 f918 	bl	80001d0 <__aeabi_dsub>
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	4b15      	ldr	r3, [pc, #84]	; (8007ff8 <__ieee754_rem_pio2+0x3d8>)
 8007fa4:	f7f8 facc 	bl	8000540 <__aeabi_dmul>
 8007fa8:	f04f 0803 	mov.w	r8, #3
 8007fac:	2600      	movs	r6, #0
 8007fae:	2700      	movs	r7, #0
 8007fb0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fb4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8007fb8:	4632      	mov	r2, r6
 8007fba:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8007fbe:	463b      	mov	r3, r7
 8007fc0:	46c2      	mov	sl, r8
 8007fc2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fc6:	f7f8 fd23 	bl	8000a10 <__aeabi_dcmpeq>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d1f4      	bne.n	8007fb8 <__ieee754_rem_pio2+0x398>
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <__ieee754_rem_pio2+0x3dc>)
 8007fd0:	462a      	mov	r2, r5
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	4621      	mov	r1, r4
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	a806      	add	r0, sp, #24
 8007fdc:	4653      	mov	r3, sl
 8007fde:	f000 f8cd 	bl	800817c <__kernel_rem_pio2>
 8007fe2:	9b04      	ldr	r3, [sp, #16]
 8007fe4:	4605      	mov	r5, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f6bf ae51 	bge.w	8007c8e <__ieee754_rem_pio2+0x6e>
 8007fec:	6863      	ldr	r3, [r4, #4]
 8007fee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ff2:	6063      	str	r3, [r4, #4]
 8007ff4:	68e3      	ldr	r3, [r4, #12]
 8007ff6:	e707      	b.n	8007e08 <__ieee754_rem_pio2+0x1e8>
 8007ff8:	41700000 	.word	0x41700000
 8007ffc:	08008c50 	.word	0x08008c50

08008000 <__kernel_cos>:
 8008000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008008:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800800c:	4680      	mov	r8, r0
 800800e:	460f      	mov	r7, r1
 8008010:	e9cd 2300 	strd	r2, r3, [sp]
 8008014:	da04      	bge.n	8008020 <__kernel_cos+0x20>
 8008016:	f7f8 fd2d 	bl	8000a74 <__aeabi_d2iz>
 800801a:	2800      	cmp	r0, #0
 800801c:	f000 8086 	beq.w	800812c <__kernel_cos+0x12c>
 8008020:	4642      	mov	r2, r8
 8008022:	463b      	mov	r3, r7
 8008024:	4640      	mov	r0, r8
 8008026:	4639      	mov	r1, r7
 8008028:	f7f8 fa8a 	bl	8000540 <__aeabi_dmul>
 800802c:	2200      	movs	r2, #0
 800802e:	4b4e      	ldr	r3, [pc, #312]	; (8008168 <__kernel_cos+0x168>)
 8008030:	4604      	mov	r4, r0
 8008032:	460d      	mov	r5, r1
 8008034:	f7f8 fa84 	bl	8000540 <__aeabi_dmul>
 8008038:	a33f      	add	r3, pc, #252	; (adr r3, 8008138 <__kernel_cos+0x138>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	4682      	mov	sl, r0
 8008040:	468b      	mov	fp, r1
 8008042:	4620      	mov	r0, r4
 8008044:	4629      	mov	r1, r5
 8008046:	f7f8 fa7b 	bl	8000540 <__aeabi_dmul>
 800804a:	a33d      	add	r3, pc, #244	; (adr r3, 8008140 <__kernel_cos+0x140>)
 800804c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008050:	f7f8 f8c0 	bl	80001d4 <__adddf3>
 8008054:	4622      	mov	r2, r4
 8008056:	462b      	mov	r3, r5
 8008058:	f7f8 fa72 	bl	8000540 <__aeabi_dmul>
 800805c:	a33a      	add	r3, pc, #232	; (adr r3, 8008148 <__kernel_cos+0x148>)
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f7f8 f8b5 	bl	80001d0 <__aeabi_dsub>
 8008066:	4622      	mov	r2, r4
 8008068:	462b      	mov	r3, r5
 800806a:	f7f8 fa69 	bl	8000540 <__aeabi_dmul>
 800806e:	a338      	add	r3, pc, #224	; (adr r3, 8008150 <__kernel_cos+0x150>)
 8008070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008074:	f7f8 f8ae 	bl	80001d4 <__adddf3>
 8008078:	4622      	mov	r2, r4
 800807a:	462b      	mov	r3, r5
 800807c:	f7f8 fa60 	bl	8000540 <__aeabi_dmul>
 8008080:	a335      	add	r3, pc, #212	; (adr r3, 8008158 <__kernel_cos+0x158>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 f8a3 	bl	80001d0 <__aeabi_dsub>
 800808a:	4622      	mov	r2, r4
 800808c:	462b      	mov	r3, r5
 800808e:	f7f8 fa57 	bl	8000540 <__aeabi_dmul>
 8008092:	a333      	add	r3, pc, #204	; (adr r3, 8008160 <__kernel_cos+0x160>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f7f8 f89c 	bl	80001d4 <__adddf3>
 800809c:	4622      	mov	r2, r4
 800809e:	462b      	mov	r3, r5
 80080a0:	f7f8 fa4e 	bl	8000540 <__aeabi_dmul>
 80080a4:	4622      	mov	r2, r4
 80080a6:	462b      	mov	r3, r5
 80080a8:	f7f8 fa4a 	bl	8000540 <__aeabi_dmul>
 80080ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080b0:	4604      	mov	r4, r0
 80080b2:	460d      	mov	r5, r1
 80080b4:	4640      	mov	r0, r8
 80080b6:	4639      	mov	r1, r7
 80080b8:	f7f8 fa42 	bl	8000540 <__aeabi_dmul>
 80080bc:	460b      	mov	r3, r1
 80080be:	4602      	mov	r2, r0
 80080c0:	4629      	mov	r1, r5
 80080c2:	4620      	mov	r0, r4
 80080c4:	f7f8 f884 	bl	80001d0 <__aeabi_dsub>
 80080c8:	4b28      	ldr	r3, [pc, #160]	; (800816c <__kernel_cos+0x16c>)
 80080ca:	4680      	mov	r8, r0
 80080cc:	429e      	cmp	r6, r3
 80080ce:	4689      	mov	r9, r1
 80080d0:	dc0e      	bgt.n	80080f0 <__kernel_cos+0xf0>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4650      	mov	r0, sl
 80080d8:	4659      	mov	r1, fp
 80080da:	f7f8 f879 	bl	80001d0 <__aeabi_dsub>
 80080de:	4602      	mov	r2, r0
 80080e0:	2000      	movs	r0, #0
 80080e2:	460b      	mov	r3, r1
 80080e4:	4922      	ldr	r1, [pc, #136]	; (8008170 <__kernel_cos+0x170>)
 80080e6:	f7f8 f873 	bl	80001d0 <__aeabi_dsub>
 80080ea:	b003      	add	sp, #12
 80080ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f0:	2400      	movs	r4, #0
 80080f2:	4b20      	ldr	r3, [pc, #128]	; (8008174 <__kernel_cos+0x174>)
 80080f4:	4622      	mov	r2, r4
 80080f6:	429e      	cmp	r6, r3
 80080f8:	bfcc      	ite	gt
 80080fa:	4d1f      	ldrgt	r5, [pc, #124]	; (8008178 <__kernel_cos+0x178>)
 80080fc:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008100:	462b      	mov	r3, r5
 8008102:	2000      	movs	r0, #0
 8008104:	491a      	ldr	r1, [pc, #104]	; (8008170 <__kernel_cos+0x170>)
 8008106:	f7f8 f863 	bl	80001d0 <__aeabi_dsub>
 800810a:	4622      	mov	r2, r4
 800810c:	4606      	mov	r6, r0
 800810e:	460f      	mov	r7, r1
 8008110:	462b      	mov	r3, r5
 8008112:	4650      	mov	r0, sl
 8008114:	4659      	mov	r1, fp
 8008116:	f7f8 f85b 	bl	80001d0 <__aeabi_dsub>
 800811a:	4642      	mov	r2, r8
 800811c:	464b      	mov	r3, r9
 800811e:	f7f8 f857 	bl	80001d0 <__aeabi_dsub>
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	4630      	mov	r0, r6
 8008128:	4639      	mov	r1, r7
 800812a:	e7dc      	b.n	80080e6 <__kernel_cos+0xe6>
 800812c:	2000      	movs	r0, #0
 800812e:	4910      	ldr	r1, [pc, #64]	; (8008170 <__kernel_cos+0x170>)
 8008130:	e7db      	b.n	80080ea <__kernel_cos+0xea>
 8008132:	bf00      	nop
 8008134:	f3af 8000 	nop.w
 8008138:	be8838d4 	.word	0xbe8838d4
 800813c:	bda8fae9 	.word	0xbda8fae9
 8008140:	bdb4b1c4 	.word	0xbdb4b1c4
 8008144:	3e21ee9e 	.word	0x3e21ee9e
 8008148:	809c52ad 	.word	0x809c52ad
 800814c:	3e927e4f 	.word	0x3e927e4f
 8008150:	19cb1590 	.word	0x19cb1590
 8008154:	3efa01a0 	.word	0x3efa01a0
 8008158:	16c15177 	.word	0x16c15177
 800815c:	3f56c16c 	.word	0x3f56c16c
 8008160:	5555554c 	.word	0x5555554c
 8008164:	3fa55555 	.word	0x3fa55555
 8008168:	3fe00000 	.word	0x3fe00000
 800816c:	3fd33332 	.word	0x3fd33332
 8008170:	3ff00000 	.word	0x3ff00000
 8008174:	3fe90000 	.word	0x3fe90000
 8008178:	3fd20000 	.word	0x3fd20000

0800817c <__kernel_rem_pio2>:
 800817c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008180:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008184:	9308      	str	r3, [sp, #32]
 8008186:	9101      	str	r1, [sp, #4]
 8008188:	4bc0      	ldr	r3, [pc, #768]	; (800848c <__kernel_rem_pio2+0x310>)
 800818a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800818c:	f112 0f14 	cmn.w	r2, #20
 8008190:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008194:	bfa8      	it	ge
 8008196:	1ed4      	subge	r4, r2, #3
 8008198:	9304      	str	r3, [sp, #16]
 800819a:	9b08      	ldr	r3, [sp, #32]
 800819c:	bfb8      	it	lt
 800819e:	2400      	movlt	r4, #0
 80081a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80081a4:	9306      	str	r3, [sp, #24]
 80081a6:	bfa4      	itt	ge
 80081a8:	2318      	movge	r3, #24
 80081aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80081ae:	f06f 0317 	mvn.w	r3, #23
 80081b2:	fb04 3303 	mla	r3, r4, r3, r3
 80081b6:	eb03 0a02 	add.w	sl, r3, r2
 80081ba:	9a06      	ldr	r2, [sp, #24]
 80081bc:	9b04      	ldr	r3, [sp, #16]
 80081be:	1aa7      	subs	r7, r4, r2
 80081c0:	eb03 0802 	add.w	r8, r3, r2
 80081c4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80081c6:	2500      	movs	r5, #0
 80081c8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80081cc:	2200      	movs	r2, #0
 80081ce:	2300      	movs	r3, #0
 80081d0:	9009      	str	r0, [sp, #36]	; 0x24
 80081d2:	ae20      	add	r6, sp, #128	; 0x80
 80081d4:	4545      	cmp	r5, r8
 80081d6:	dd19      	ble.n	800820c <__kernel_rem_pio2+0x90>
 80081d8:	9b08      	ldr	r3, [sp, #32]
 80081da:	aa20      	add	r2, sp, #128	; 0x80
 80081dc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80081e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80081e4:	f1c3 0301 	rsb	r3, r3, #1
 80081e8:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80081ec:	9307      	str	r3, [sp, #28]
 80081ee:	9b07      	ldr	r3, [sp, #28]
 80081f0:	9a04      	ldr	r2, [sp, #16]
 80081f2:	4443      	add	r3, r8
 80081f4:	429a      	cmp	r2, r3
 80081f6:	db35      	blt.n	8008264 <__kernel_rem_pio2+0xe8>
 80081f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fa:	2200      	movs	r2, #0
 80081fc:	f1a3 0908 	sub.w	r9, r3, #8
 8008200:	2300      	movs	r3, #0
 8008202:	462f      	mov	r7, r5
 8008204:	2600      	movs	r6, #0
 8008206:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800820a:	e01f      	b.n	800824c <__kernel_rem_pio2+0xd0>
 800820c:	42ef      	cmn	r7, r5
 800820e:	d40b      	bmi.n	8008228 <__kernel_rem_pio2+0xac>
 8008210:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008218:	f7f8 f928 	bl	800046c <__aeabi_i2d>
 800821c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008220:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008224:	3501      	adds	r5, #1
 8008226:	e7d5      	b.n	80081d4 <__kernel_rem_pio2+0x58>
 8008228:	4610      	mov	r0, r2
 800822a:	4619      	mov	r1, r3
 800822c:	e7f8      	b.n	8008220 <__kernel_rem_pio2+0xa4>
 800822e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008232:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008236:	f7f8 f983 	bl	8000540 <__aeabi_dmul>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008242:	f7f7 ffc7 	bl	80001d4 <__adddf3>
 8008246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800824a:	3601      	adds	r6, #1
 800824c:	9b06      	ldr	r3, [sp, #24]
 800824e:	3f08      	subs	r7, #8
 8008250:	429e      	cmp	r6, r3
 8008252:	ddec      	ble.n	800822e <__kernel_rem_pio2+0xb2>
 8008254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008258:	3508      	adds	r5, #8
 800825a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800825e:	f108 0801 	add.w	r8, r8, #1
 8008262:	e7c4      	b.n	80081ee <__kernel_rem_pio2+0x72>
 8008264:	9b04      	ldr	r3, [sp, #16]
 8008266:	aa0c      	add	r2, sp, #48	; 0x30
 8008268:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800826c:	930b      	str	r3, [sp, #44]	; 0x2c
 800826e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008270:	9f04      	ldr	r7, [sp, #16]
 8008272:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008276:	930a      	str	r3, [sp, #40]	; 0x28
 8008278:	463e      	mov	r6, r7
 800827a:	ab98      	add	r3, sp, #608	; 0x260
 800827c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8008280:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008284:	f8cd b008 	str.w	fp, [sp, #8]
 8008288:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800828c:	2e00      	cmp	r6, #0
 800828e:	dc71      	bgt.n	8008374 <__kernel_rem_pio2+0x1f8>
 8008290:	4652      	mov	r2, sl
 8008292:	4620      	mov	r0, r4
 8008294:	4629      	mov	r1, r5
 8008296:	f000 fbf7 	bl	8008a88 <scalbn>
 800829a:	2200      	movs	r2, #0
 800829c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80082a0:	4604      	mov	r4, r0
 80082a2:	460d      	mov	r5, r1
 80082a4:	f7f8 f94c 	bl	8000540 <__aeabi_dmul>
 80082a8:	f000 fb6e 	bl	8008988 <floor>
 80082ac:	2200      	movs	r2, #0
 80082ae:	4b78      	ldr	r3, [pc, #480]	; (8008490 <__kernel_rem_pio2+0x314>)
 80082b0:	f7f8 f946 	bl	8000540 <__aeabi_dmul>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	4620      	mov	r0, r4
 80082ba:	4629      	mov	r1, r5
 80082bc:	f7f7 ff88 	bl	80001d0 <__aeabi_dsub>
 80082c0:	460d      	mov	r5, r1
 80082c2:	4604      	mov	r4, r0
 80082c4:	f7f8 fbd6 	bl	8000a74 <__aeabi_d2iz>
 80082c8:	9007      	str	r0, [sp, #28]
 80082ca:	f7f8 f8cf 	bl	800046c <__aeabi_i2d>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4620      	mov	r0, r4
 80082d4:	4629      	mov	r1, r5
 80082d6:	f7f7 ff7b 	bl	80001d0 <__aeabi_dsub>
 80082da:	f1ba 0f00 	cmp.w	sl, #0
 80082de:	4680      	mov	r8, r0
 80082e0:	4689      	mov	r9, r1
 80082e2:	dd70      	ble.n	80083c6 <__kernel_rem_pio2+0x24a>
 80082e4:	1e7a      	subs	r2, r7, #1
 80082e6:	ab0c      	add	r3, sp, #48	; 0x30
 80082e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80082ec:	9c07      	ldr	r4, [sp, #28]
 80082ee:	f1ca 0118 	rsb	r1, sl, #24
 80082f2:	fa40 f301 	asr.w	r3, r0, r1
 80082f6:	441c      	add	r4, r3
 80082f8:	408b      	lsls	r3, r1
 80082fa:	1ac0      	subs	r0, r0, r3
 80082fc:	ab0c      	add	r3, sp, #48	; 0x30
 80082fe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008302:	f1ca 0317 	rsb	r3, sl, #23
 8008306:	9407      	str	r4, [sp, #28]
 8008308:	fa40 f303 	asr.w	r3, r0, r3
 800830c:	9302      	str	r3, [sp, #8]
 800830e:	9b02      	ldr	r3, [sp, #8]
 8008310:	2b00      	cmp	r3, #0
 8008312:	dd66      	ble.n	80083e2 <__kernel_rem_pio2+0x266>
 8008314:	2200      	movs	r2, #0
 8008316:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800831a:	4614      	mov	r4, r2
 800831c:	9b07      	ldr	r3, [sp, #28]
 800831e:	3301      	adds	r3, #1
 8008320:	9307      	str	r3, [sp, #28]
 8008322:	4297      	cmp	r7, r2
 8008324:	f300 809f 	bgt.w	8008466 <__kernel_rem_pio2+0x2ea>
 8008328:	f1ba 0f00 	cmp.w	sl, #0
 800832c:	dd07      	ble.n	800833e <__kernel_rem_pio2+0x1c2>
 800832e:	f1ba 0f01 	cmp.w	sl, #1
 8008332:	f000 80b9 	beq.w	80084a8 <__kernel_rem_pio2+0x32c>
 8008336:	f1ba 0f02 	cmp.w	sl, #2
 800833a:	f000 80bf 	beq.w	80084bc <__kernel_rem_pio2+0x340>
 800833e:	9b02      	ldr	r3, [sp, #8]
 8008340:	2b02      	cmp	r3, #2
 8008342:	d14e      	bne.n	80083e2 <__kernel_rem_pio2+0x266>
 8008344:	4642      	mov	r2, r8
 8008346:	464b      	mov	r3, r9
 8008348:	2000      	movs	r0, #0
 800834a:	4952      	ldr	r1, [pc, #328]	; (8008494 <__kernel_rem_pio2+0x318>)
 800834c:	f7f7 ff40 	bl	80001d0 <__aeabi_dsub>
 8008350:	4680      	mov	r8, r0
 8008352:	4689      	mov	r9, r1
 8008354:	2c00      	cmp	r4, #0
 8008356:	d044      	beq.n	80083e2 <__kernel_rem_pio2+0x266>
 8008358:	4652      	mov	r2, sl
 800835a:	2000      	movs	r0, #0
 800835c:	494d      	ldr	r1, [pc, #308]	; (8008494 <__kernel_rem_pio2+0x318>)
 800835e:	f000 fb93 	bl	8008a88 <scalbn>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4640      	mov	r0, r8
 8008368:	4649      	mov	r1, r9
 800836a:	f7f7 ff31 	bl	80001d0 <__aeabi_dsub>
 800836e:	4680      	mov	r8, r0
 8008370:	4689      	mov	r9, r1
 8008372:	e036      	b.n	80083e2 <__kernel_rem_pio2+0x266>
 8008374:	2200      	movs	r2, #0
 8008376:	4b48      	ldr	r3, [pc, #288]	; (8008498 <__kernel_rem_pio2+0x31c>)
 8008378:	4620      	mov	r0, r4
 800837a:	4629      	mov	r1, r5
 800837c:	f7f8 f8e0 	bl	8000540 <__aeabi_dmul>
 8008380:	f7f8 fb78 	bl	8000a74 <__aeabi_d2iz>
 8008384:	f7f8 f872 	bl	800046c <__aeabi_i2d>
 8008388:	2200      	movs	r2, #0
 800838a:	4b44      	ldr	r3, [pc, #272]	; (800849c <__kernel_rem_pio2+0x320>)
 800838c:	4680      	mov	r8, r0
 800838e:	4689      	mov	r9, r1
 8008390:	f7f8 f8d6 	bl	8000540 <__aeabi_dmul>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
 8008398:	4620      	mov	r0, r4
 800839a:	4629      	mov	r1, r5
 800839c:	f7f7 ff18 	bl	80001d0 <__aeabi_dsub>
 80083a0:	f7f8 fb68 	bl	8000a74 <__aeabi_d2iz>
 80083a4:	9b02      	ldr	r3, [sp, #8]
 80083a6:	3e01      	subs	r6, #1
 80083a8:	f843 0b04 	str.w	r0, [r3], #4
 80083ac:	9302      	str	r3, [sp, #8]
 80083ae:	ab70      	add	r3, sp, #448	; 0x1c0
 80083b0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80083b4:	4640      	mov	r0, r8
 80083b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ba:	4649      	mov	r1, r9
 80083bc:	f7f7 ff0a 	bl	80001d4 <__adddf3>
 80083c0:	4604      	mov	r4, r0
 80083c2:	460d      	mov	r5, r1
 80083c4:	e762      	b.n	800828c <__kernel_rem_pio2+0x110>
 80083c6:	d105      	bne.n	80083d4 <__kernel_rem_pio2+0x258>
 80083c8:	1e7b      	subs	r3, r7, #1
 80083ca:	aa0c      	add	r2, sp, #48	; 0x30
 80083cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80083d0:	15c3      	asrs	r3, r0, #23
 80083d2:	e79b      	b.n	800830c <__kernel_rem_pio2+0x190>
 80083d4:	2200      	movs	r2, #0
 80083d6:	4b32      	ldr	r3, [pc, #200]	; (80084a0 <__kernel_rem_pio2+0x324>)
 80083d8:	f7f8 fb38 	bl	8000a4c <__aeabi_dcmpge>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d13f      	bne.n	8008460 <__kernel_rem_pio2+0x2e4>
 80083e0:	9002      	str	r0, [sp, #8]
 80083e2:	2200      	movs	r2, #0
 80083e4:	2300      	movs	r3, #0
 80083e6:	4640      	mov	r0, r8
 80083e8:	4649      	mov	r1, r9
 80083ea:	f7f8 fb11 	bl	8000a10 <__aeabi_dcmpeq>
 80083ee:	2800      	cmp	r0, #0
 80083f0:	f000 80b5 	beq.w	800855e <__kernel_rem_pio2+0x3e2>
 80083f4:	1e7c      	subs	r4, r7, #1
 80083f6:	4623      	mov	r3, r4
 80083f8:	2200      	movs	r2, #0
 80083fa:	9904      	ldr	r1, [sp, #16]
 80083fc:	428b      	cmp	r3, r1
 80083fe:	da64      	bge.n	80084ca <__kernel_rem_pio2+0x34e>
 8008400:	2a00      	cmp	r2, #0
 8008402:	d078      	beq.n	80084f6 <__kernel_rem_pio2+0x37a>
 8008404:	ab0c      	add	r3, sp, #48	; 0x30
 8008406:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800840a:	f1aa 0a18 	sub.w	sl, sl, #24
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 80a3 	beq.w	800855a <__kernel_rem_pio2+0x3de>
 8008414:	4652      	mov	r2, sl
 8008416:	2000      	movs	r0, #0
 8008418:	491e      	ldr	r1, [pc, #120]	; (8008494 <__kernel_rem_pio2+0x318>)
 800841a:	f000 fb35 	bl	8008a88 <scalbn>
 800841e:	46a2      	mov	sl, r4
 8008420:	4606      	mov	r6, r0
 8008422:	460f      	mov	r7, r1
 8008424:	f04f 0800 	mov.w	r8, #0
 8008428:	00e3      	lsls	r3, r4, #3
 800842a:	9306      	str	r3, [sp, #24]
 800842c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8008498 <__kernel_rem_pio2+0x31c>
 8008430:	ab70      	add	r3, sp, #448	; 0x1c0
 8008432:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8008436:	f1ba 0f00 	cmp.w	sl, #0
 800843a:	f280 80c6 	bge.w	80085ca <__kernel_rem_pio2+0x44e>
 800843e:	4627      	mov	r7, r4
 8008440:	f04f 0800 	mov.w	r8, #0
 8008444:	2f00      	cmp	r7, #0
 8008446:	f2c0 80f3 	blt.w	8008630 <__kernel_rem_pio2+0x4b4>
 800844a:	4b16      	ldr	r3, [pc, #88]	; (80084a4 <__kernel_rem_pio2+0x328>)
 800844c:	f04f 0a00 	mov.w	sl, #0
 8008450:	461d      	mov	r5, r3
 8008452:	ab70      	add	r3, sp, #448	; 0x1c0
 8008454:	f04f 0b00 	mov.w	fp, #0
 8008458:	2600      	movs	r6, #0
 800845a:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800845e:	e0d9      	b.n	8008614 <__kernel_rem_pio2+0x498>
 8008460:	2302      	movs	r3, #2
 8008462:	9302      	str	r3, [sp, #8]
 8008464:	e756      	b.n	8008314 <__kernel_rem_pio2+0x198>
 8008466:	f8db 3000 	ldr.w	r3, [fp]
 800846a:	b954      	cbnz	r4, 8008482 <__kernel_rem_pio2+0x306>
 800846c:	b123      	cbz	r3, 8008478 <__kernel_rem_pio2+0x2fc>
 800846e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008472:	f8cb 3000 	str.w	r3, [fp]
 8008476:	2301      	movs	r3, #1
 8008478:	461c      	mov	r4, r3
 800847a:	3201      	adds	r2, #1
 800847c:	f10b 0b04 	add.w	fp, fp, #4
 8008480:	e74f      	b.n	8008322 <__kernel_rem_pio2+0x1a6>
 8008482:	1acb      	subs	r3, r1, r3
 8008484:	f8cb 3000 	str.w	r3, [fp]
 8008488:	4623      	mov	r3, r4
 800848a:	e7f5      	b.n	8008478 <__kernel_rem_pio2+0x2fc>
 800848c:	08008d98 	.word	0x08008d98
 8008490:	40200000 	.word	0x40200000
 8008494:	3ff00000 	.word	0x3ff00000
 8008498:	3e700000 	.word	0x3e700000
 800849c:	41700000 	.word	0x41700000
 80084a0:	3fe00000 	.word	0x3fe00000
 80084a4:	08008d58 	.word	0x08008d58
 80084a8:	1e7a      	subs	r2, r7, #1
 80084aa:	ab0c      	add	r3, sp, #48	; 0x30
 80084ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084b0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80084b4:	a90c      	add	r1, sp, #48	; 0x30
 80084b6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80084ba:	e740      	b.n	800833e <__kernel_rem_pio2+0x1c2>
 80084bc:	1e7a      	subs	r2, r7, #1
 80084be:	ab0c      	add	r3, sp, #48	; 0x30
 80084c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80084c8:	e7f4      	b.n	80084b4 <__kernel_rem_pio2+0x338>
 80084ca:	a90c      	add	r1, sp, #48	; 0x30
 80084cc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	430a      	orrs	r2, r1
 80084d4:	e791      	b.n	80083fa <__kernel_rem_pio2+0x27e>
 80084d6:	3401      	adds	r4, #1
 80084d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80084dc:	2a00      	cmp	r2, #0
 80084de:	d0fa      	beq.n	80084d6 <__kernel_rem_pio2+0x35a>
 80084e0:	9b08      	ldr	r3, [sp, #32]
 80084e2:	1c7e      	adds	r6, r7, #1
 80084e4:	18fd      	adds	r5, r7, r3
 80084e6:	ab20      	add	r3, sp, #128	; 0x80
 80084e8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80084ec:	443c      	add	r4, r7
 80084ee:	42b4      	cmp	r4, r6
 80084f0:	da04      	bge.n	80084fc <__kernel_rem_pio2+0x380>
 80084f2:	4627      	mov	r7, r4
 80084f4:	e6c0      	b.n	8008278 <__kernel_rem_pio2+0xfc>
 80084f6:	2401      	movs	r4, #1
 80084f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084fa:	e7ed      	b.n	80084d8 <__kernel_rem_pio2+0x35c>
 80084fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fe:	462f      	mov	r7, r5
 8008500:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008504:	f7f7 ffb2 	bl	800046c <__aeabi_i2d>
 8008508:	f04f 0b00 	mov.w	fp, #0
 800850c:	f04f 0800 	mov.w	r8, #0
 8008510:	f04f 0900 	mov.w	r9, #0
 8008514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008516:	e8e7 0102 	strd	r0, r1, [r7], #8
 800851a:	3b08      	subs	r3, #8
 800851c:	9302      	str	r3, [sp, #8]
 800851e:	9b06      	ldr	r3, [sp, #24]
 8008520:	459b      	cmp	fp, r3
 8008522:	dd07      	ble.n	8008534 <__kernel_rem_pio2+0x3b8>
 8008524:	ab70      	add	r3, sp, #448	; 0x1c0
 8008526:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800852a:	463d      	mov	r5, r7
 800852c:	e9c3 8900 	strd	r8, r9, [r3]
 8008530:	3601      	adds	r6, #1
 8008532:	e7dc      	b.n	80084ee <__kernel_rem_pio2+0x372>
 8008534:	9902      	ldr	r1, [sp, #8]
 8008536:	f10b 0b01 	add.w	fp, fp, #1
 800853a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800853e:	9102      	str	r1, [sp, #8]
 8008540:	e875 0102 	ldrd	r0, r1, [r5], #-8
 8008544:	f7f7 fffc 	bl	8000540 <__aeabi_dmul>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4640      	mov	r0, r8
 800854e:	4649      	mov	r1, r9
 8008550:	f7f7 fe40 	bl	80001d4 <__adddf3>
 8008554:	4680      	mov	r8, r0
 8008556:	4689      	mov	r9, r1
 8008558:	e7e1      	b.n	800851e <__kernel_rem_pio2+0x3a2>
 800855a:	3c01      	subs	r4, #1
 800855c:	e752      	b.n	8008404 <__kernel_rem_pio2+0x288>
 800855e:	f1ca 0200 	rsb	r2, sl, #0
 8008562:	4640      	mov	r0, r8
 8008564:	4649      	mov	r1, r9
 8008566:	f000 fa8f 	bl	8008a88 <scalbn>
 800856a:	2200      	movs	r2, #0
 800856c:	4ba5      	ldr	r3, [pc, #660]	; (8008804 <__kernel_rem_pio2+0x688>)
 800856e:	4604      	mov	r4, r0
 8008570:	460d      	mov	r5, r1
 8008572:	f7f8 fa6b 	bl	8000a4c <__aeabi_dcmpge>
 8008576:	b1f8      	cbz	r0, 80085b8 <__kernel_rem_pio2+0x43c>
 8008578:	2200      	movs	r2, #0
 800857a:	4ba3      	ldr	r3, [pc, #652]	; (8008808 <__kernel_rem_pio2+0x68c>)
 800857c:	4620      	mov	r0, r4
 800857e:	4629      	mov	r1, r5
 8008580:	f7f7 ffde 	bl	8000540 <__aeabi_dmul>
 8008584:	f7f8 fa76 	bl	8000a74 <__aeabi_d2iz>
 8008588:	4606      	mov	r6, r0
 800858a:	f7f7 ff6f 	bl	800046c <__aeabi_i2d>
 800858e:	2200      	movs	r2, #0
 8008590:	4b9c      	ldr	r3, [pc, #624]	; (8008804 <__kernel_rem_pio2+0x688>)
 8008592:	f7f7 ffd5 	bl	8000540 <__aeabi_dmul>
 8008596:	460b      	mov	r3, r1
 8008598:	4602      	mov	r2, r0
 800859a:	4629      	mov	r1, r5
 800859c:	4620      	mov	r0, r4
 800859e:	f7f7 fe17 	bl	80001d0 <__aeabi_dsub>
 80085a2:	f7f8 fa67 	bl	8000a74 <__aeabi_d2iz>
 80085a6:	1c7c      	adds	r4, r7, #1
 80085a8:	ab0c      	add	r3, sp, #48	; 0x30
 80085aa:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80085ae:	f10a 0a18 	add.w	sl, sl, #24
 80085b2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80085b6:	e72d      	b.n	8008414 <__kernel_rem_pio2+0x298>
 80085b8:	4620      	mov	r0, r4
 80085ba:	4629      	mov	r1, r5
 80085bc:	f7f8 fa5a 	bl	8000a74 <__aeabi_d2iz>
 80085c0:	ab0c      	add	r3, sp, #48	; 0x30
 80085c2:	463c      	mov	r4, r7
 80085c4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80085c8:	e724      	b.n	8008414 <__kernel_rem_pio2+0x298>
 80085ca:	ab0c      	add	r3, sp, #48	; 0x30
 80085cc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80085d0:	f7f7 ff4c 	bl	800046c <__aeabi_i2d>
 80085d4:	4632      	mov	r2, r6
 80085d6:	463b      	mov	r3, r7
 80085d8:	f7f7 ffb2 	bl	8000540 <__aeabi_dmul>
 80085dc:	4642      	mov	r2, r8
 80085de:	e86b 0102 	strd	r0, r1, [fp], #-8
 80085e2:	464b      	mov	r3, r9
 80085e4:	4630      	mov	r0, r6
 80085e6:	4639      	mov	r1, r7
 80085e8:	f7f7 ffaa 	bl	8000540 <__aeabi_dmul>
 80085ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085f0:	4606      	mov	r6, r0
 80085f2:	460f      	mov	r7, r1
 80085f4:	e71f      	b.n	8008436 <__kernel_rem_pio2+0x2ba>
 80085f6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80085fa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80085fe:	f7f7 ff9f 	bl	8000540 <__aeabi_dmul>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	4650      	mov	r0, sl
 8008608:	4659      	mov	r1, fp
 800860a:	f7f7 fde3 	bl	80001d4 <__adddf3>
 800860e:	4682      	mov	sl, r0
 8008610:	468b      	mov	fp, r1
 8008612:	3601      	adds	r6, #1
 8008614:	9b04      	ldr	r3, [sp, #16]
 8008616:	429e      	cmp	r6, r3
 8008618:	dc01      	bgt.n	800861e <__kernel_rem_pio2+0x4a2>
 800861a:	45b0      	cmp	r8, r6
 800861c:	daeb      	bge.n	80085f6 <__kernel_rem_pio2+0x47a>
 800861e:	ab48      	add	r3, sp, #288	; 0x120
 8008620:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008624:	e9c3 ab00 	strd	sl, fp, [r3]
 8008628:	3f01      	subs	r7, #1
 800862a:	f108 0801 	add.w	r8, r8, #1
 800862e:	e709      	b.n	8008444 <__kernel_rem_pio2+0x2c8>
 8008630:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8008632:	2b02      	cmp	r3, #2
 8008634:	dc09      	bgt.n	800864a <__kernel_rem_pio2+0x4ce>
 8008636:	2b00      	cmp	r3, #0
 8008638:	dc34      	bgt.n	80086a4 <__kernel_rem_pio2+0x528>
 800863a:	d05e      	beq.n	80086fa <__kernel_rem_pio2+0x57e>
 800863c:	9b07      	ldr	r3, [sp, #28]
 800863e:	f003 0007 	and.w	r0, r3, #7
 8008642:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800864c:	2b03      	cmp	r3, #3
 800864e:	d1f5      	bne.n	800863c <__kernel_rem_pio2+0x4c0>
 8008650:	9a06      	ldr	r2, [sp, #24]
 8008652:	ab48      	add	r3, sp, #288	; 0x120
 8008654:	441a      	add	r2, r3
 8008656:	4615      	mov	r5, r2
 8008658:	4692      	mov	sl, r2
 800865a:	46a3      	mov	fp, r4
 800865c:	f1bb 0f00 	cmp.w	fp, #0
 8008660:	dc7a      	bgt.n	8008758 <__kernel_rem_pio2+0x5dc>
 8008662:	46aa      	mov	sl, r5
 8008664:	46a3      	mov	fp, r4
 8008666:	f1bb 0f01 	cmp.w	fp, #1
 800866a:	f300 8094 	bgt.w	8008796 <__kernel_rem_pio2+0x61a>
 800866e:	2700      	movs	r7, #0
 8008670:	463e      	mov	r6, r7
 8008672:	2c01      	cmp	r4, #1
 8008674:	f300 80ae 	bgt.w	80087d4 <__kernel_rem_pio2+0x658>
 8008678:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800867c:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8008680:	9b02      	ldr	r3, [sp, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	f040 80b0 	bne.w	80087e8 <__kernel_rem_pio2+0x66c>
 8008688:	4603      	mov	r3, r0
 800868a:	462a      	mov	r2, r5
 800868c:	9801      	ldr	r0, [sp, #4]
 800868e:	e9c0 2300 	strd	r2, r3, [r0]
 8008692:	4622      	mov	r2, r4
 8008694:	460b      	mov	r3, r1
 8008696:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800869a:	463a      	mov	r2, r7
 800869c:	4633      	mov	r3, r6
 800869e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80086a2:	e7cb      	b.n	800863c <__kernel_rem_pio2+0x4c0>
 80086a4:	2000      	movs	r0, #0
 80086a6:	9a06      	ldr	r2, [sp, #24]
 80086a8:	ab48      	add	r3, sp, #288	; 0x120
 80086aa:	441a      	add	r2, r3
 80086ac:	4615      	mov	r5, r2
 80086ae:	46a0      	mov	r8, r4
 80086b0:	4601      	mov	r1, r0
 80086b2:	f1b8 0f00 	cmp.w	r8, #0
 80086b6:	da3c      	bge.n	8008732 <__kernel_rem_pio2+0x5b6>
 80086b8:	9b02      	ldr	r3, [sp, #8]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d040      	beq.n	8008740 <__kernel_rem_pio2+0x5c4>
 80086be:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80086c2:	4602      	mov	r2, r0
 80086c4:	462b      	mov	r3, r5
 80086c6:	9d01      	ldr	r5, [sp, #4]
 80086c8:	2601      	movs	r6, #1
 80086ca:	e9c5 2300 	strd	r2, r3, [r5]
 80086ce:	460b      	mov	r3, r1
 80086d0:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80086d4:	f7f7 fd7c 	bl	80001d0 <__aeabi_dsub>
 80086d8:	4684      	mov	ip, r0
 80086da:	460f      	mov	r7, r1
 80086dc:	ad48      	add	r5, sp, #288	; 0x120
 80086de:	42b4      	cmp	r4, r6
 80086e0:	f105 0508 	add.w	r5, r5, #8
 80086e4:	da2e      	bge.n	8008744 <__kernel_rem_pio2+0x5c8>
 80086e6:	9b02      	ldr	r3, [sp, #8]
 80086e8:	b10b      	cbz	r3, 80086ee <__kernel_rem_pio2+0x572>
 80086ea:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80086ee:	4662      	mov	r2, ip
 80086f0:	463b      	mov	r3, r7
 80086f2:	9901      	ldr	r1, [sp, #4]
 80086f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80086f8:	e7a0      	b.n	800863c <__kernel_rem_pio2+0x4c0>
 80086fa:	9a06      	ldr	r2, [sp, #24]
 80086fc:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80086fe:	ab48      	add	r3, sp, #288	; 0x120
 8008700:	441a      	add	r2, r3
 8008702:	4615      	mov	r5, r2
 8008704:	4637      	mov	r7, r6
 8008706:	2c00      	cmp	r4, #0
 8008708:	da09      	bge.n	800871e <__kernel_rem_pio2+0x5a2>
 800870a:	9b02      	ldr	r3, [sp, #8]
 800870c:	b10b      	cbz	r3, 8008712 <__kernel_rem_pio2+0x596>
 800870e:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008712:	4632      	mov	r2, r6
 8008714:	463b      	mov	r3, r7
 8008716:	9901      	ldr	r1, [sp, #4]
 8008718:	e9c1 2300 	strd	r2, r3, [r1]
 800871c:	e78e      	b.n	800863c <__kernel_rem_pio2+0x4c0>
 800871e:	4630      	mov	r0, r6
 8008720:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008724:	4639      	mov	r1, r7
 8008726:	f7f7 fd55 	bl	80001d4 <__adddf3>
 800872a:	3c01      	subs	r4, #1
 800872c:	4606      	mov	r6, r0
 800872e:	460f      	mov	r7, r1
 8008730:	e7e9      	b.n	8008706 <__kernel_rem_pio2+0x58a>
 8008732:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008736:	f7f7 fd4d 	bl	80001d4 <__adddf3>
 800873a:	f108 38ff 	add.w	r8, r8, #4294967295
 800873e:	e7b8      	b.n	80086b2 <__kernel_rem_pio2+0x536>
 8008740:	460d      	mov	r5, r1
 8008742:	e7be      	b.n	80086c2 <__kernel_rem_pio2+0x546>
 8008744:	4660      	mov	r0, ip
 8008746:	e9d5 2300 	ldrd	r2, r3, [r5]
 800874a:	4639      	mov	r1, r7
 800874c:	f7f7 fd42 	bl	80001d4 <__adddf3>
 8008750:	3601      	adds	r6, #1
 8008752:	4684      	mov	ip, r0
 8008754:	460f      	mov	r7, r1
 8008756:	e7c2      	b.n	80086de <__kernel_rem_pio2+0x562>
 8008758:	e9da 6700 	ldrd	r6, r7, [sl]
 800875c:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8008760:	4632      	mov	r2, r6
 8008762:	463b      	mov	r3, r7
 8008764:	4640      	mov	r0, r8
 8008766:	4649      	mov	r1, r9
 8008768:	f7f7 fd34 	bl	80001d4 <__adddf3>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008774:	4640      	mov	r0, r8
 8008776:	4649      	mov	r1, r9
 8008778:	f7f7 fd2a 	bl	80001d0 <__aeabi_dsub>
 800877c:	4632      	mov	r2, r6
 800877e:	463b      	mov	r3, r7
 8008780:	f7f7 fd28 	bl	80001d4 <__adddf3>
 8008784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008788:	e86a 0102 	strd	r0, r1, [sl], #-8
 800878c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008790:	e9ca 2300 	strd	r2, r3, [sl]
 8008794:	e762      	b.n	800865c <__kernel_rem_pio2+0x4e0>
 8008796:	e9da 8900 	ldrd	r8, r9, [sl]
 800879a:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800879e:	4642      	mov	r2, r8
 80087a0:	464b      	mov	r3, r9
 80087a2:	4630      	mov	r0, r6
 80087a4:	4639      	mov	r1, r7
 80087a6:	f7f7 fd15 	bl	80001d4 <__adddf3>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087b2:	4630      	mov	r0, r6
 80087b4:	4639      	mov	r1, r7
 80087b6:	f7f7 fd0b 	bl	80001d0 <__aeabi_dsub>
 80087ba:	4642      	mov	r2, r8
 80087bc:	464b      	mov	r3, r9
 80087be:	f7f7 fd09 	bl	80001d4 <__adddf3>
 80087c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087c6:	e86a 0102 	strd	r0, r1, [sl], #-8
 80087ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087ce:	e9ca 2300 	strd	r2, r3, [sl]
 80087d2:	e748      	b.n	8008666 <__kernel_rem_pio2+0x4ea>
 80087d4:	4638      	mov	r0, r7
 80087d6:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80087da:	4631      	mov	r1, r6
 80087dc:	f7f7 fcfa 	bl	80001d4 <__adddf3>
 80087e0:	3c01      	subs	r4, #1
 80087e2:	4607      	mov	r7, r0
 80087e4:	460e      	mov	r6, r1
 80087e6:	e744      	b.n	8008672 <__kernel_rem_pio2+0x4f6>
 80087e8:	9b01      	ldr	r3, [sp, #4]
 80087ea:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80087ee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80087f2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80087f6:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80087fa:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80087fe:	601d      	str	r5, [r3, #0]
 8008800:	615e      	str	r6, [r3, #20]
 8008802:	e71b      	b.n	800863c <__kernel_rem_pio2+0x4c0>
 8008804:	41700000 	.word	0x41700000
 8008808:	3e700000 	.word	0x3e700000
 800880c:	00000000 	.word	0x00000000

08008810 <__kernel_sin>:
 8008810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008814:	b086      	sub	sp, #24
 8008816:	e9cd 2300 	strd	r2, r3, [sp]
 800881a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800881e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008822:	4682      	mov	sl, r0
 8008824:	460c      	mov	r4, r1
 8008826:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008828:	da03      	bge.n	8008832 <__kernel_sin+0x22>
 800882a:	f7f8 f923 	bl	8000a74 <__aeabi_d2iz>
 800882e:	2800      	cmp	r0, #0
 8008830:	d050      	beq.n	80088d4 <__kernel_sin+0xc4>
 8008832:	4652      	mov	r2, sl
 8008834:	4623      	mov	r3, r4
 8008836:	4650      	mov	r0, sl
 8008838:	4621      	mov	r1, r4
 800883a:	f7f7 fe81 	bl	8000540 <__aeabi_dmul>
 800883e:	4606      	mov	r6, r0
 8008840:	460f      	mov	r7, r1
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4650      	mov	r0, sl
 8008848:	4621      	mov	r1, r4
 800884a:	f7f7 fe79 	bl	8000540 <__aeabi_dmul>
 800884e:	a33e      	add	r3, pc, #248	; (adr r3, 8008948 <__kernel_sin+0x138>)
 8008850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008854:	4680      	mov	r8, r0
 8008856:	4689      	mov	r9, r1
 8008858:	4630      	mov	r0, r6
 800885a:	4639      	mov	r1, r7
 800885c:	f7f7 fe70 	bl	8000540 <__aeabi_dmul>
 8008860:	a33b      	add	r3, pc, #236	; (adr r3, 8008950 <__kernel_sin+0x140>)
 8008862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008866:	f7f7 fcb3 	bl	80001d0 <__aeabi_dsub>
 800886a:	4632      	mov	r2, r6
 800886c:	463b      	mov	r3, r7
 800886e:	f7f7 fe67 	bl	8000540 <__aeabi_dmul>
 8008872:	a339      	add	r3, pc, #228	; (adr r3, 8008958 <__kernel_sin+0x148>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f7f7 fcac 	bl	80001d4 <__adddf3>
 800887c:	4632      	mov	r2, r6
 800887e:	463b      	mov	r3, r7
 8008880:	f7f7 fe5e 	bl	8000540 <__aeabi_dmul>
 8008884:	a336      	add	r3, pc, #216	; (adr r3, 8008960 <__kernel_sin+0x150>)
 8008886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800888a:	f7f7 fca1 	bl	80001d0 <__aeabi_dsub>
 800888e:	4632      	mov	r2, r6
 8008890:	463b      	mov	r3, r7
 8008892:	f7f7 fe55 	bl	8000540 <__aeabi_dmul>
 8008896:	a334      	add	r3, pc, #208	; (adr r3, 8008968 <__kernel_sin+0x158>)
 8008898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889c:	f7f7 fc9a 	bl	80001d4 <__adddf3>
 80088a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088a4:	b9dd      	cbnz	r5, 80088de <__kernel_sin+0xce>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4630      	mov	r0, r6
 80088ac:	4639      	mov	r1, r7
 80088ae:	f7f7 fe47 	bl	8000540 <__aeabi_dmul>
 80088b2:	a32f      	add	r3, pc, #188	; (adr r3, 8008970 <__kernel_sin+0x160>)
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	f7f7 fc8a 	bl	80001d0 <__aeabi_dsub>
 80088bc:	4642      	mov	r2, r8
 80088be:	464b      	mov	r3, r9
 80088c0:	f7f7 fe3e 	bl	8000540 <__aeabi_dmul>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4650      	mov	r0, sl
 80088ca:	4621      	mov	r1, r4
 80088cc:	f7f7 fc82 	bl	80001d4 <__adddf3>
 80088d0:	4682      	mov	sl, r0
 80088d2:	460c      	mov	r4, r1
 80088d4:	4650      	mov	r0, sl
 80088d6:	4621      	mov	r1, r4
 80088d8:	b006      	add	sp, #24
 80088da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088de:	2200      	movs	r2, #0
 80088e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088e4:	4b24      	ldr	r3, [pc, #144]	; (8008978 <__kernel_sin+0x168>)
 80088e6:	f7f7 fe2b 	bl	8000540 <__aeabi_dmul>
 80088ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088f2:	4640      	mov	r0, r8
 80088f4:	4649      	mov	r1, r9
 80088f6:	f7f7 fe23 	bl	8000540 <__aeabi_dmul>
 80088fa:	4602      	mov	r2, r0
 80088fc:	460b      	mov	r3, r1
 80088fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008902:	f7f7 fc65 	bl	80001d0 <__aeabi_dsub>
 8008906:	4632      	mov	r2, r6
 8008908:	463b      	mov	r3, r7
 800890a:	f7f7 fe19 	bl	8000540 <__aeabi_dmul>
 800890e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008912:	f7f7 fc5d 	bl	80001d0 <__aeabi_dsub>
 8008916:	a316      	add	r3, pc, #88	; (adr r3, 8008970 <__kernel_sin+0x160>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	4606      	mov	r6, r0
 800891e:	460f      	mov	r7, r1
 8008920:	4640      	mov	r0, r8
 8008922:	4649      	mov	r1, r9
 8008924:	f7f7 fe0c 	bl	8000540 <__aeabi_dmul>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4630      	mov	r0, r6
 800892e:	4639      	mov	r1, r7
 8008930:	f7f7 fc50 	bl	80001d4 <__adddf3>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4650      	mov	r0, sl
 800893a:	4621      	mov	r1, r4
 800893c:	f7f7 fc48 	bl	80001d0 <__aeabi_dsub>
 8008940:	e7c6      	b.n	80088d0 <__kernel_sin+0xc0>
 8008942:	bf00      	nop
 8008944:	f3af 8000 	nop.w
 8008948:	5acfd57c 	.word	0x5acfd57c
 800894c:	3de5d93a 	.word	0x3de5d93a
 8008950:	8a2b9ceb 	.word	0x8a2b9ceb
 8008954:	3e5ae5e6 	.word	0x3e5ae5e6
 8008958:	57b1fe7d 	.word	0x57b1fe7d
 800895c:	3ec71de3 	.word	0x3ec71de3
 8008960:	19c161d5 	.word	0x19c161d5
 8008964:	3f2a01a0 	.word	0x3f2a01a0
 8008968:	1110f8a6 	.word	0x1110f8a6
 800896c:	3f811111 	.word	0x3f811111
 8008970:	55555549 	.word	0x55555549
 8008974:	3fc55555 	.word	0x3fc55555
 8008978:	3fe00000 	.word	0x3fe00000

0800897c <fabs>:
 800897c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008980:	4770      	bx	lr
 8008982:	0000      	movs	r0, r0
 8008984:	0000      	movs	r0, r0
	...

08008988 <floor>:
 8008988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800898c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008990:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008994:	2e13      	cmp	r6, #19
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	4607      	mov	r7, r0
 800899c:	460c      	mov	r4, r1
 800899e:	4605      	mov	r5, r0
 80089a0:	dc34      	bgt.n	8008a0c <floor+0x84>
 80089a2:	2e00      	cmp	r6, #0
 80089a4:	da15      	bge.n	80089d2 <floor+0x4a>
 80089a6:	a334      	add	r3, pc, #208	; (adr r3, 8008a78 <floor+0xf0>)
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	f7f7 fc12 	bl	80001d4 <__adddf3>
 80089b0:	2200      	movs	r2, #0
 80089b2:	2300      	movs	r3, #0
 80089b4:	f7f8 f854 	bl	8000a60 <__aeabi_dcmpgt>
 80089b8:	b140      	cbz	r0, 80089cc <floor+0x44>
 80089ba:	2c00      	cmp	r4, #0
 80089bc:	da59      	bge.n	8008a72 <floor+0xea>
 80089be:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80089c2:	ea57 0503 	orrs.w	r5, r7, r3
 80089c6:	d001      	beq.n	80089cc <floor+0x44>
 80089c8:	2500      	movs	r5, #0
 80089ca:	4c2d      	ldr	r4, [pc, #180]	; (8008a80 <floor+0xf8>)
 80089cc:	4623      	mov	r3, r4
 80089ce:	462f      	mov	r7, r5
 80089d0:	e025      	b.n	8008a1e <floor+0x96>
 80089d2:	4a2c      	ldr	r2, [pc, #176]	; (8008a84 <floor+0xfc>)
 80089d4:	fa42 f806 	asr.w	r8, r2, r6
 80089d8:	ea01 0208 	and.w	r2, r1, r8
 80089dc:	4302      	orrs	r2, r0
 80089de:	d01e      	beq.n	8008a1e <floor+0x96>
 80089e0:	a325      	add	r3, pc, #148	; (adr r3, 8008a78 <floor+0xf0>)
 80089e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e6:	f7f7 fbf5 	bl	80001d4 <__adddf3>
 80089ea:	2200      	movs	r2, #0
 80089ec:	2300      	movs	r3, #0
 80089ee:	f7f8 f837 	bl	8000a60 <__aeabi_dcmpgt>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d0ea      	beq.n	80089cc <floor+0x44>
 80089f6:	2c00      	cmp	r4, #0
 80089f8:	bfbe      	ittt	lt
 80089fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80089fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8008a02:	19a4      	addlt	r4, r4, r6
 8008a04:	2500      	movs	r5, #0
 8008a06:	ea24 0408 	bic.w	r4, r4, r8
 8008a0a:	e7df      	b.n	80089cc <floor+0x44>
 8008a0c:	2e33      	cmp	r6, #51	; 0x33
 8008a0e:	dd0a      	ble.n	8008a26 <floor+0x9e>
 8008a10:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008a14:	d103      	bne.n	8008a1e <floor+0x96>
 8008a16:	f7f7 fbdd 	bl	80001d4 <__adddf3>
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4638      	mov	r0, r7
 8008a20:	4619      	mov	r1, r3
 8008a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a26:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2a:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008a2e:	fa22 f808 	lsr.w	r8, r2, r8
 8008a32:	ea18 0f00 	tst.w	r8, r0
 8008a36:	d0f2      	beq.n	8008a1e <floor+0x96>
 8008a38:	a30f      	add	r3, pc, #60	; (adr r3, 8008a78 <floor+0xf0>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fbc9 	bl	80001d4 <__adddf3>
 8008a42:	2200      	movs	r2, #0
 8008a44:	2300      	movs	r3, #0
 8008a46:	f7f8 f80b 	bl	8000a60 <__aeabi_dcmpgt>
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0be      	beq.n	80089cc <floor+0x44>
 8008a4e:	2c00      	cmp	r4, #0
 8008a50:	da02      	bge.n	8008a58 <floor+0xd0>
 8008a52:	2e14      	cmp	r6, #20
 8008a54:	d103      	bne.n	8008a5e <floor+0xd6>
 8008a56:	3401      	adds	r4, #1
 8008a58:	ea25 0508 	bic.w	r5, r5, r8
 8008a5c:	e7b6      	b.n	80089cc <floor+0x44>
 8008a5e:	2301      	movs	r3, #1
 8008a60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008a64:	fa03 f606 	lsl.w	r6, r3, r6
 8008a68:	4435      	add	r5, r6
 8008a6a:	42bd      	cmp	r5, r7
 8008a6c:	bf38      	it	cc
 8008a6e:	18e4      	addcc	r4, r4, r3
 8008a70:	e7f2      	b.n	8008a58 <floor+0xd0>
 8008a72:	2500      	movs	r5, #0
 8008a74:	462c      	mov	r4, r5
 8008a76:	e7a9      	b.n	80089cc <floor+0x44>
 8008a78:	8800759c 	.word	0x8800759c
 8008a7c:	7e37e43c 	.word	0x7e37e43c
 8008a80:	bff00000 	.word	0xbff00000
 8008a84:	000fffff 	.word	0x000fffff

08008a88 <scalbn>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008a8e:	4604      	mov	r4, r0
 8008a90:	460d      	mov	r5, r1
 8008a92:	4617      	mov	r7, r2
 8008a94:	460b      	mov	r3, r1
 8008a96:	b996      	cbnz	r6, 8008abe <scalbn+0x36>
 8008a98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a9c:	4303      	orrs	r3, r0
 8008a9e:	d039      	beq.n	8008b14 <scalbn+0x8c>
 8008aa0:	4b35      	ldr	r3, [pc, #212]	; (8008b78 <scalbn+0xf0>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f7f7 fd4c 	bl	8000540 <__aeabi_dmul>
 8008aa8:	4b34      	ldr	r3, [pc, #208]	; (8008b7c <scalbn+0xf4>)
 8008aaa:	4604      	mov	r4, r0
 8008aac:	429f      	cmp	r7, r3
 8008aae:	460d      	mov	r5, r1
 8008ab0:	da0f      	bge.n	8008ad2 <scalbn+0x4a>
 8008ab2:	a32d      	add	r3, pc, #180	; (adr r3, 8008b68 <scalbn+0xe0>)
 8008ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab8:	f7f7 fd42 	bl	8000540 <__aeabi_dmul>
 8008abc:	e006      	b.n	8008acc <scalbn+0x44>
 8008abe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008ac2:	4296      	cmp	r6, r2
 8008ac4:	d10a      	bne.n	8008adc <scalbn+0x54>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	f7f7 fb84 	bl	80001d4 <__adddf3>
 8008acc:	4604      	mov	r4, r0
 8008ace:	460d      	mov	r5, r1
 8008ad0:	e020      	b.n	8008b14 <scalbn+0x8c>
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008ad8:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008adc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008ae0:	19b9      	adds	r1, r7, r6
 8008ae2:	4291      	cmp	r1, r2
 8008ae4:	dd0e      	ble.n	8008b04 <scalbn+0x7c>
 8008ae6:	a322      	add	r3, pc, #136	; (adr r3, 8008b70 <scalbn+0xe8>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008af0:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008af4:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008af8:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008afc:	4820      	ldr	r0, [pc, #128]	; (8008b80 <scalbn+0xf8>)
 8008afe:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008b02:	e7d9      	b.n	8008ab8 <scalbn+0x30>
 8008b04:	2900      	cmp	r1, #0
 8008b06:	dd08      	ble.n	8008b1a <scalbn+0x92>
 8008b08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b10:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008b14:	4620      	mov	r0, r4
 8008b16:	4629      	mov	r1, r5
 8008b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b1a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008b1e:	da16      	bge.n	8008b4e <scalbn+0xc6>
 8008b20:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b24:	429f      	cmp	r7, r3
 8008b26:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008b2a:	dd08      	ble.n	8008b3e <scalbn+0xb6>
 8008b2c:	4c15      	ldr	r4, [pc, #84]	; (8008b84 <scalbn+0xfc>)
 8008b2e:	4814      	ldr	r0, [pc, #80]	; (8008b80 <scalbn+0xf8>)
 8008b30:	f363 74df 	bfi	r4, r3, #31, #1
 8008b34:	a30e      	add	r3, pc, #56	; (adr r3, 8008b70 <scalbn+0xe8>)
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	e7bc      	b.n	8008ab8 <scalbn+0x30>
 8008b3e:	4c12      	ldr	r4, [pc, #72]	; (8008b88 <scalbn+0x100>)
 8008b40:	4812      	ldr	r0, [pc, #72]	; (8008b8c <scalbn+0x104>)
 8008b42:	f363 74df 	bfi	r4, r3, #31, #1
 8008b46:	a308      	add	r3, pc, #32	; (adr r3, 8008b68 <scalbn+0xe0>)
 8008b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4c:	e7f5      	b.n	8008b3a <scalbn+0xb2>
 8008b4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b52:	3136      	adds	r1, #54	; 0x36
 8008b54:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b58:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	4629      	mov	r1, r5
 8008b60:	2200      	movs	r2, #0
 8008b62:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <scalbn+0x108>)
 8008b64:	e7a8      	b.n	8008ab8 <scalbn+0x30>
 8008b66:	bf00      	nop
 8008b68:	c2f8f359 	.word	0xc2f8f359
 8008b6c:	01a56e1f 	.word	0x01a56e1f
 8008b70:	8800759c 	.word	0x8800759c
 8008b74:	7e37e43c 	.word	0x7e37e43c
 8008b78:	43500000 	.word	0x43500000
 8008b7c:	ffff3cb0 	.word	0xffff3cb0
 8008b80:	8800759c 	.word	0x8800759c
 8008b84:	7e37e43c 	.word	0x7e37e43c
 8008b88:	01a56e1f 	.word	0x01a56e1f
 8008b8c:	c2f8f359 	.word	0xc2f8f359
 8008b90:	3c900000 	.word	0x3c900000

08008b94 <_init>:
 8008b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b96:	bf00      	nop
 8008b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b9a:	bc08      	pop	{r3}
 8008b9c:	469e      	mov	lr, r3
 8008b9e:	4770      	bx	lr

08008ba0 <_fini>:
 8008ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ba2:	bf00      	nop
 8008ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ba6:	bc08      	pop	{r3}
 8008ba8:	469e      	mov	lr, r3
 8008baa:	4770      	bx	lr
