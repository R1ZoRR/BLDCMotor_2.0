
BLDCMotor_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000764c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080077d4  080077d4  000177d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f4  080077f4  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080077f4  080077f4  000177f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077fc  080077fc  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077fc  080077fc  000177fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007800  08007800  00017800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08007804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000018  0800781c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  0800781c  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012629  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002567  00000000  00000000  0003266a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00034bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff0  00000000  00000000  00035cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209c7  00000000  00000000  00036ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d5f  00000000  00000000  00057667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c83a1  00000000  00000000  000693c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131767  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a38  00000000  00000000  001317bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080077bc 	.word	0x080077bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	080077bc 	.word	0x080077bc

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_frsub>:
 8000834:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000838:	e002      	b.n	8000840 <__addsf3>
 800083a:	bf00      	nop

0800083c <__aeabi_fsub>:
 800083c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000840 <__addsf3>:
 8000840:	0042      	lsls	r2, r0, #1
 8000842:	bf1f      	itttt	ne
 8000844:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000848:	ea92 0f03 	teqne	r2, r3
 800084c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000850:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000854:	d06a      	beq.n	800092c <__addsf3+0xec>
 8000856:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800085a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800085e:	bfc1      	itttt	gt
 8000860:	18d2      	addgt	r2, r2, r3
 8000862:	4041      	eorgt	r1, r0
 8000864:	4048      	eorgt	r0, r1
 8000866:	4041      	eorgt	r1, r0
 8000868:	bfb8      	it	lt
 800086a:	425b      	neglt	r3, r3
 800086c:	2b19      	cmp	r3, #25
 800086e:	bf88      	it	hi
 8000870:	4770      	bxhi	lr
 8000872:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000876:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800087a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800087e:	bf18      	it	ne
 8000880:	4240      	negne	r0, r0
 8000882:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000886:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800088a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800088e:	bf18      	it	ne
 8000890:	4249      	negne	r1, r1
 8000892:	ea92 0f03 	teq	r2, r3
 8000896:	d03f      	beq.n	8000918 <__addsf3+0xd8>
 8000898:	f1a2 0201 	sub.w	r2, r2, #1
 800089c:	fa41 fc03 	asr.w	ip, r1, r3
 80008a0:	eb10 000c 	adds.w	r0, r0, ip
 80008a4:	f1c3 0320 	rsb	r3, r3, #32
 80008a8:	fa01 f103 	lsl.w	r1, r1, r3
 80008ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008b0:	d502      	bpl.n	80008b8 <__addsf3+0x78>
 80008b2:	4249      	negs	r1, r1
 80008b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80008bc:	d313      	bcc.n	80008e6 <__addsf3+0xa6>
 80008be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008c2:	d306      	bcc.n	80008d2 <__addsf3+0x92>
 80008c4:	0840      	lsrs	r0, r0, #1
 80008c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80008ca:	f102 0201 	add.w	r2, r2, #1
 80008ce:	2afe      	cmp	r2, #254	; 0xfe
 80008d0:	d251      	bcs.n	8000976 <__addsf3+0x136>
 80008d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	ea40 0003 	orr.w	r0, r0, r3
 80008e4:	4770      	bx	lr
 80008e6:	0049      	lsls	r1, r1, #1
 80008e8:	eb40 0000 	adc.w	r0, r0, r0
 80008ec:	3a01      	subs	r2, #1
 80008ee:	bf28      	it	cs
 80008f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80008f4:	d2ed      	bcs.n	80008d2 <__addsf3+0x92>
 80008f6:	fab0 fc80 	clz	ip, r0
 80008fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80008fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000902:	fa00 f00c 	lsl.w	r0, r0, ip
 8000906:	bfaa      	itet	ge
 8000908:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800090c:	4252      	neglt	r2, r2
 800090e:	4318      	orrge	r0, r3
 8000910:	bfbc      	itt	lt
 8000912:	40d0      	lsrlt	r0, r2
 8000914:	4318      	orrlt	r0, r3
 8000916:	4770      	bx	lr
 8000918:	f092 0f00 	teq	r2, #0
 800091c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000920:	bf06      	itte	eq
 8000922:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000926:	3201      	addeq	r2, #1
 8000928:	3b01      	subne	r3, #1
 800092a:	e7b5      	b.n	8000898 <__addsf3+0x58>
 800092c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000930:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000934:	bf18      	it	ne
 8000936:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800093a:	d021      	beq.n	8000980 <__addsf3+0x140>
 800093c:	ea92 0f03 	teq	r2, r3
 8000940:	d004      	beq.n	800094c <__addsf3+0x10c>
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	bf08      	it	eq
 8000948:	4608      	moveq	r0, r1
 800094a:	4770      	bx	lr
 800094c:	ea90 0f01 	teq	r0, r1
 8000950:	bf1c      	itt	ne
 8000952:	2000      	movne	r0, #0
 8000954:	4770      	bxne	lr
 8000956:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800095a:	d104      	bne.n	8000966 <__addsf3+0x126>
 800095c:	0040      	lsls	r0, r0, #1
 800095e:	bf28      	it	cs
 8000960:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000964:	4770      	bx	lr
 8000966:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800096a:	bf3c      	itt	cc
 800096c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000970:	4770      	bxcc	lr
 8000972:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000976:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800097a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800097e:	4770      	bx	lr
 8000980:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000984:	bf16      	itet	ne
 8000986:	4608      	movne	r0, r1
 8000988:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800098c:	4601      	movne	r1, r0
 800098e:	0242      	lsls	r2, r0, #9
 8000990:	bf06      	itte	eq
 8000992:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000996:	ea90 0f01 	teqeq	r0, r1
 800099a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800099e:	4770      	bx	lr

080009a0 <__aeabi_ui2f>:
 80009a0:	f04f 0300 	mov.w	r3, #0
 80009a4:	e004      	b.n	80009b0 <__aeabi_i2f+0x8>
 80009a6:	bf00      	nop

080009a8 <__aeabi_i2f>:
 80009a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80009ac:	bf48      	it	mi
 80009ae:	4240      	negmi	r0, r0
 80009b0:	ea5f 0c00 	movs.w	ip, r0
 80009b4:	bf08      	it	eq
 80009b6:	4770      	bxeq	lr
 80009b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80009bc:	4601      	mov	r1, r0
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	e01c      	b.n	80009fe <__aeabi_l2f+0x2a>

080009c4 <__aeabi_ul2f>:
 80009c4:	ea50 0201 	orrs.w	r2, r0, r1
 80009c8:	bf08      	it	eq
 80009ca:	4770      	bxeq	lr
 80009cc:	f04f 0300 	mov.w	r3, #0
 80009d0:	e00a      	b.n	80009e8 <__aeabi_l2f+0x14>
 80009d2:	bf00      	nop

080009d4 <__aeabi_l2f>:
 80009d4:	ea50 0201 	orrs.w	r2, r0, r1
 80009d8:	bf08      	it	eq
 80009da:	4770      	bxeq	lr
 80009dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009e0:	d502      	bpl.n	80009e8 <__aeabi_l2f+0x14>
 80009e2:	4240      	negs	r0, r0
 80009e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009e8:	ea5f 0c01 	movs.w	ip, r1
 80009ec:	bf02      	ittt	eq
 80009ee:	4684      	moveq	ip, r0
 80009f0:	4601      	moveq	r1, r0
 80009f2:	2000      	moveq	r0, #0
 80009f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80009f8:	bf08      	it	eq
 80009fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80009fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a02:	fabc f28c 	clz	r2, ip
 8000a06:	3a08      	subs	r2, #8
 8000a08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a0c:	db10      	blt.n	8000a30 <__aeabi_l2f+0x5c>
 8000a0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a12:	4463      	add	r3, ip
 8000a14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a18:	f1c2 0220 	rsb	r2, r2, #32
 8000a1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a20:	fa20 f202 	lsr.w	r2, r0, r2
 8000a24:	eb43 0002 	adc.w	r0, r3, r2
 8000a28:	bf08      	it	eq
 8000a2a:	f020 0001 	biceq.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	f102 0220 	add.w	r2, r2, #32
 8000a34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a38:	f1c2 0220 	rsb	r2, r2, #32
 8000a3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a40:	fa21 f202 	lsr.w	r2, r1, r2
 8000a44:	eb43 0002 	adc.w	r0, r3, r2
 8000a48:	bf08      	it	eq
 8000a4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a4e:	4770      	bx	lr

08000a50 <__aeabi_fmul>:
 8000a50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a58:	bf1e      	ittt	ne
 8000a5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a5e:	ea92 0f0c 	teqne	r2, ip
 8000a62:	ea93 0f0c 	teqne	r3, ip
 8000a66:	d06f      	beq.n	8000b48 <__aeabi_fmul+0xf8>
 8000a68:	441a      	add	r2, r3
 8000a6a:	ea80 0c01 	eor.w	ip, r0, r1
 8000a6e:	0240      	lsls	r0, r0, #9
 8000a70:	bf18      	it	ne
 8000a72:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000a76:	d01e      	beq.n	8000ab6 <__aeabi_fmul+0x66>
 8000a78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a7c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a80:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a84:	fba0 3101 	umull	r3, r1, r0, r1
 8000a88:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a8c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a90:	bf3e      	ittt	cc
 8000a92:	0049      	lslcc	r1, r1, #1
 8000a94:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a98:	005b      	lslcc	r3, r3, #1
 8000a9a:	ea40 0001 	orr.w	r0, r0, r1
 8000a9e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000aa2:	2afd      	cmp	r2, #253	; 0xfd
 8000aa4:	d81d      	bhi.n	8000ae2 <__aeabi_fmul+0x92>
 8000aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000aaa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000aae:	bf08      	it	eq
 8000ab0:	f020 0001 	biceq.w	r0, r0, #1
 8000ab4:	4770      	bx	lr
 8000ab6:	f090 0f00 	teq	r0, #0
 8000aba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000abe:	bf08      	it	eq
 8000ac0:	0249      	lsleq	r1, r1, #9
 8000ac2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ac6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000aca:	3a7f      	subs	r2, #127	; 0x7f
 8000acc:	bfc2      	ittt	gt
 8000ace:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ad2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ad6:	4770      	bxgt	lr
 8000ad8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000adc:	f04f 0300 	mov.w	r3, #0
 8000ae0:	3a01      	subs	r2, #1
 8000ae2:	dc5d      	bgt.n	8000ba0 <__aeabi_fmul+0x150>
 8000ae4:	f112 0f19 	cmn.w	r2, #25
 8000ae8:	bfdc      	itt	le
 8000aea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000aee:	4770      	bxle	lr
 8000af0:	f1c2 0200 	rsb	r2, r2, #0
 8000af4:	0041      	lsls	r1, r0, #1
 8000af6:	fa21 f102 	lsr.w	r1, r1, r2
 8000afa:	f1c2 0220 	rsb	r2, r2, #32
 8000afe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b02:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b06:	f140 0000 	adc.w	r0, r0, #0
 8000b0a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b0e:	bf08      	it	eq
 8000b10:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b14:	4770      	bx	lr
 8000b16:	f092 0f00 	teq	r2, #0
 8000b1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b1e:	bf02      	ittt	eq
 8000b20:	0040      	lsleq	r0, r0, #1
 8000b22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b26:	3a01      	subeq	r2, #1
 8000b28:	d0f9      	beq.n	8000b1e <__aeabi_fmul+0xce>
 8000b2a:	ea40 000c 	orr.w	r0, r0, ip
 8000b2e:	f093 0f00 	teq	r3, #0
 8000b32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b36:	bf02      	ittt	eq
 8000b38:	0049      	lsleq	r1, r1, #1
 8000b3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b3e:	3b01      	subeq	r3, #1
 8000b40:	d0f9      	beq.n	8000b36 <__aeabi_fmul+0xe6>
 8000b42:	ea41 010c 	orr.w	r1, r1, ip
 8000b46:	e78f      	b.n	8000a68 <__aeabi_fmul+0x18>
 8000b48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b4c:	ea92 0f0c 	teq	r2, ip
 8000b50:	bf18      	it	ne
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d00a      	beq.n	8000b6e <__aeabi_fmul+0x11e>
 8000b58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b5c:	bf18      	it	ne
 8000b5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b62:	d1d8      	bne.n	8000b16 <__aeabi_fmul+0xc6>
 8000b64:	ea80 0001 	eor.w	r0, r0, r1
 8000b68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	4770      	bx	lr
 8000b6e:	f090 0f00 	teq	r0, #0
 8000b72:	bf17      	itett	ne
 8000b74:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b78:	4608      	moveq	r0, r1
 8000b7a:	f091 0f00 	teqne	r1, #0
 8000b7e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b82:	d014      	beq.n	8000bae <__aeabi_fmul+0x15e>
 8000b84:	ea92 0f0c 	teq	r2, ip
 8000b88:	d101      	bne.n	8000b8e <__aeabi_fmul+0x13e>
 8000b8a:	0242      	lsls	r2, r0, #9
 8000b8c:	d10f      	bne.n	8000bae <__aeabi_fmul+0x15e>
 8000b8e:	ea93 0f0c 	teq	r3, ip
 8000b92:	d103      	bne.n	8000b9c <__aeabi_fmul+0x14c>
 8000b94:	024b      	lsls	r3, r1, #9
 8000b96:	bf18      	it	ne
 8000b98:	4608      	movne	r0, r1
 8000b9a:	d108      	bne.n	8000bae <__aeabi_fmul+0x15e>
 8000b9c:	ea80 0001 	eor.w	r0, r0, r1
 8000ba0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fdiv>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d069      	beq.n	8000ca4 <__aeabi_fdiv+0xec>
 8000bd0:	eba2 0203 	sub.w	r2, r2, r3
 8000bd4:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd8:	0249      	lsls	r1, r1, #9
 8000bda:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000bde:	d037      	beq.n	8000c50 <__aeabi_fdiv+0x98>
 8000be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000be4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000be8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000bec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	bf38      	it	cc
 8000bf4:	005b      	lslcc	r3, r3, #1
 8000bf6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000bfa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	bf24      	itt	cs
 8000c02:	1a5b      	subcs	r3, r3, r1
 8000c04:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c08:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c0c:	bf24      	itt	cs
 8000c0e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c12:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c16:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c1a:	bf24      	itt	cs
 8000c1c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c20:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c24:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c28:	bf24      	itt	cs
 8000c2a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c2e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	bf18      	it	ne
 8000c36:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c3a:	d1e0      	bne.n	8000bfe <__aeabi_fdiv+0x46>
 8000c3c:	2afd      	cmp	r2, #253	; 0xfd
 8000c3e:	f63f af50 	bhi.w	8000ae2 <__aeabi_fmul+0x92>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c48:	bf08      	it	eq
 8000c4a:	f020 0001 	biceq.w	r0, r0, #1
 8000c4e:	4770      	bx	lr
 8000c50:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c54:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c58:	327f      	adds	r2, #127	; 0x7f
 8000c5a:	bfc2      	ittt	gt
 8000c5c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c60:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c64:	4770      	bxgt	lr
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	f04f 0300 	mov.w	r3, #0
 8000c6e:	3a01      	subs	r2, #1
 8000c70:	e737      	b.n	8000ae2 <__aeabi_fmul+0x92>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c7a:	bf02      	ittt	eq
 8000c7c:	0040      	lsleq	r0, r0, #1
 8000c7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c82:	3a01      	subeq	r2, #1
 8000c84:	d0f9      	beq.n	8000c7a <__aeabi_fdiv+0xc2>
 8000c86:	ea40 000c 	orr.w	r0, r0, ip
 8000c8a:	f093 0f00 	teq	r3, #0
 8000c8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c92:	bf02      	ittt	eq
 8000c94:	0049      	lsleq	r1, r1, #1
 8000c96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c9a:	3b01      	subeq	r3, #1
 8000c9c:	d0f9      	beq.n	8000c92 <__aeabi_fdiv+0xda>
 8000c9e:	ea41 010c 	orr.w	r1, r1, ip
 8000ca2:	e795      	b.n	8000bd0 <__aeabi_fdiv+0x18>
 8000ca4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca8:	ea92 0f0c 	teq	r2, ip
 8000cac:	d108      	bne.n	8000cc0 <__aeabi_fdiv+0x108>
 8000cae:	0242      	lsls	r2, r0, #9
 8000cb0:	f47f af7d 	bne.w	8000bae <__aeabi_fmul+0x15e>
 8000cb4:	ea93 0f0c 	teq	r3, ip
 8000cb8:	f47f af70 	bne.w	8000b9c <__aeabi_fmul+0x14c>
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e776      	b.n	8000bae <__aeabi_fmul+0x15e>
 8000cc0:	ea93 0f0c 	teq	r3, ip
 8000cc4:	d104      	bne.n	8000cd0 <__aeabi_fdiv+0x118>
 8000cc6:	024b      	lsls	r3, r1, #9
 8000cc8:	f43f af4c 	beq.w	8000b64 <__aeabi_fmul+0x114>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	e76e      	b.n	8000bae <__aeabi_fmul+0x15e>
 8000cd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd4:	bf18      	it	ne
 8000cd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cda:	d1ca      	bne.n	8000c72 <__aeabi_fdiv+0xba>
 8000cdc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ce0:	f47f af5c 	bne.w	8000b9c <__aeabi_fmul+0x14c>
 8000ce4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	f47f af3c 	bne.w	8000b64 <__aeabi_fmul+0x114>
 8000cec:	e75f      	b.n	8000bae <__aeabi_fmul+0x15e>
 8000cee:	bf00      	nop

08000cf0 <__gesf2>:
 8000cf0:	f04f 3cff 	mov.w	ip, #4294967295
 8000cf4:	e006      	b.n	8000d04 <__cmpsf2+0x4>
 8000cf6:	bf00      	nop

08000cf8 <__lesf2>:
 8000cf8:	f04f 0c01 	mov.w	ip, #1
 8000cfc:	e002      	b.n	8000d04 <__cmpsf2+0x4>
 8000cfe:	bf00      	nop

08000d00 <__cmpsf2>:
 8000d00:	f04f 0c01 	mov.w	ip, #1
 8000d04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d14:	bf18      	it	ne
 8000d16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d1a:	d011      	beq.n	8000d40 <__cmpsf2+0x40>
 8000d1c:	b001      	add	sp, #4
 8000d1e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d22:	bf18      	it	ne
 8000d24:	ea90 0f01 	teqne	r0, r1
 8000d28:	bf58      	it	pl
 8000d2a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d2e:	bf88      	it	hi
 8000d30:	17c8      	asrhi	r0, r1, #31
 8000d32:	bf38      	it	cc
 8000d34:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d38:	bf18      	it	ne
 8000d3a:	f040 0001 	orrne.w	r0, r0, #1
 8000d3e:	4770      	bx	lr
 8000d40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d44:	d102      	bne.n	8000d4c <__cmpsf2+0x4c>
 8000d46:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d4a:	d105      	bne.n	8000d58 <__cmpsf2+0x58>
 8000d4c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d50:	d1e4      	bne.n	8000d1c <__cmpsf2+0x1c>
 8000d52:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d56:	d0e1      	beq.n	8000d1c <__cmpsf2+0x1c>
 8000d58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <__aeabi_cfrcmple>:
 8000d60:	4684      	mov	ip, r0
 8000d62:	4608      	mov	r0, r1
 8000d64:	4661      	mov	r1, ip
 8000d66:	e7ff      	b.n	8000d68 <__aeabi_cfcmpeq>

08000d68 <__aeabi_cfcmpeq>:
 8000d68:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d6a:	f7ff ffc9 	bl	8000d00 <__cmpsf2>
 8000d6e:	2800      	cmp	r0, #0
 8000d70:	bf48      	it	mi
 8000d72:	f110 0f00 	cmnmi.w	r0, #0
 8000d76:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d78 <__aeabi_fcmpeq>:
 8000d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d7c:	f7ff fff4 	bl	8000d68 <__aeabi_cfcmpeq>
 8000d80:	bf0c      	ite	eq
 8000d82:	2001      	moveq	r0, #1
 8000d84:	2000      	movne	r0, #0
 8000d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8a:	bf00      	nop

08000d8c <__aeabi_fcmplt>:
 8000d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d90:	f7ff ffea 	bl	8000d68 <__aeabi_cfcmpeq>
 8000d94:	bf34      	ite	cc
 8000d96:	2001      	movcc	r0, #1
 8000d98:	2000      	movcs	r0, #0
 8000d9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9e:	bf00      	nop

08000da0 <__aeabi_fcmple>:
 8000da0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da4:	f7ff ffe0 	bl	8000d68 <__aeabi_cfcmpeq>
 8000da8:	bf94      	ite	ls
 8000daa:	2001      	movls	r0, #1
 8000dac:	2000      	movhi	r0, #0
 8000dae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db2:	bf00      	nop

08000db4 <__aeabi_fcmpge>:
 8000db4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db8:	f7ff ffd2 	bl	8000d60 <__aeabi_cfrcmple>
 8000dbc:	bf94      	ite	ls
 8000dbe:	2001      	movls	r0, #1
 8000dc0:	2000      	movhi	r0, #0
 8000dc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_fcmpgt>:
 8000dc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dcc:	f7ff ffc8 	bl	8000d60 <__aeabi_cfrcmple>
 8000dd0:	bf34      	ite	cc
 8000dd2:	2001      	movcc	r0, #1
 8000dd4:	2000      	movcs	r0, #0
 8000dd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dda:	bf00      	nop

08000ddc <__aeabi_f2uiz>:
 8000ddc:	0042      	lsls	r2, r0, #1
 8000dde:	d20e      	bcs.n	8000dfe <__aeabi_f2uiz+0x22>
 8000de0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000de4:	d30b      	bcc.n	8000dfe <__aeabi_f2uiz+0x22>
 8000de6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dee:	d409      	bmi.n	8000e04 <__aeabi_f2uiz+0x28>
 8000df0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000df8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dfc:	4770      	bx	lr
 8000dfe:	f04f 0000 	mov.w	r0, #0
 8000e02:	4770      	bx	lr
 8000e04:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e08:	d101      	bne.n	8000e0e <__aeabi_f2uiz+0x32>
 8000e0a:	0242      	lsls	r2, r0, #9
 8000e0c:	d102      	bne.n	8000e14 <__aeabi_f2uiz+0x38>
 8000e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e12:	4770      	bx	lr
 8000e14:	f04f 0000 	mov.w	r0, #0
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <__aeabi_uldivmod>:
 8000e1c:	b953      	cbnz	r3, 8000e34 <__aeabi_uldivmod+0x18>
 8000e1e:	b94a      	cbnz	r2, 8000e34 <__aeabi_uldivmod+0x18>
 8000e20:	2900      	cmp	r1, #0
 8000e22:	bf08      	it	eq
 8000e24:	2800      	cmpeq	r0, #0
 8000e26:	bf1c      	itt	ne
 8000e28:	f04f 31ff 	movne.w	r1, #4294967295
 8000e2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000e30:	f000 b96e 	b.w	8001110 <__aeabi_idiv0>
 8000e34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e3c:	f000 f806 	bl	8000e4c <__udivmoddi4>
 8000e40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e48:	b004      	add	sp, #16
 8000e4a:	4770      	bx	lr

08000e4c <__udivmoddi4>:
 8000e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e50:	9e08      	ldr	r6, [sp, #32]
 8000e52:	460d      	mov	r5, r1
 8000e54:	4604      	mov	r4, r0
 8000e56:	468e      	mov	lr, r1
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f040 8083 	bne.w	8000f64 <__udivmoddi4+0x118>
 8000e5e:	428a      	cmp	r2, r1
 8000e60:	4617      	mov	r7, r2
 8000e62:	d947      	bls.n	8000ef4 <__udivmoddi4+0xa8>
 8000e64:	fab2 f382 	clz	r3, r2
 8000e68:	b14b      	cbz	r3, 8000e7e <__udivmoddi4+0x32>
 8000e6a:	f1c3 0120 	rsb	r1, r3, #32
 8000e6e:	fa05 fe03 	lsl.w	lr, r5, r3
 8000e72:	fa20 f101 	lsr.w	r1, r0, r1
 8000e76:	409f      	lsls	r7, r3
 8000e78:	ea41 0e0e 	orr.w	lr, r1, lr
 8000e7c:	409c      	lsls	r4, r3
 8000e7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e82:	fbbe fcf8 	udiv	ip, lr, r8
 8000e86:	fa1f f987 	uxth.w	r9, r7
 8000e8a:	fb08 e21c 	mls	r2, r8, ip, lr
 8000e8e:	fb0c f009 	mul.w	r0, ip, r9
 8000e92:	0c21      	lsrs	r1, r4, #16
 8000e94:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000e98:	4290      	cmp	r0, r2
 8000e9a:	d90a      	bls.n	8000eb2 <__udivmoddi4+0x66>
 8000e9c:	18ba      	adds	r2, r7, r2
 8000e9e:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000ea2:	f080 8118 	bcs.w	80010d6 <__udivmoddi4+0x28a>
 8000ea6:	4290      	cmp	r0, r2
 8000ea8:	f240 8115 	bls.w	80010d6 <__udivmoddi4+0x28a>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	443a      	add	r2, r7
 8000eb2:	1a12      	subs	r2, r2, r0
 8000eb4:	fbb2 f0f8 	udiv	r0, r2, r8
 8000eb8:	fb08 2210 	mls	r2, r8, r0, r2
 8000ebc:	fb00 f109 	mul.w	r1, r0, r9
 8000ec0:	b2a4      	uxth	r4, r4
 8000ec2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	d909      	bls.n	8000ede <__udivmoddi4+0x92>
 8000eca:	193c      	adds	r4, r7, r4
 8000ecc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ed0:	f080 8103 	bcs.w	80010da <__udivmoddi4+0x28e>
 8000ed4:	42a1      	cmp	r1, r4
 8000ed6:	f240 8100 	bls.w	80010da <__udivmoddi4+0x28e>
 8000eda:	3802      	subs	r0, #2
 8000edc:	443c      	add	r4, r7
 8000ede:	1a64      	subs	r4, r4, r1
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ee6:	b11e      	cbz	r6, 8000ef0 <__udivmoddi4+0xa4>
 8000ee8:	2200      	movs	r2, #0
 8000eea:	40dc      	lsrs	r4, r3
 8000eec:	e9c6 4200 	strd	r4, r2, [r6]
 8000ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef4:	b902      	cbnz	r2, 8000ef8 <__udivmoddi4+0xac>
 8000ef6:	deff      	udf	#255	; 0xff
 8000ef8:	fab2 f382 	clz	r3, r2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d14f      	bne.n	8000fa0 <__udivmoddi4+0x154>
 8000f00:	1a8d      	subs	r5, r1, r2
 8000f02:	2101      	movs	r1, #1
 8000f04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000f08:	fa1f f882 	uxth.w	r8, r2
 8000f0c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000f10:	fb0e 551c 	mls	r5, lr, ip, r5
 8000f14:	fb08 f00c 	mul.w	r0, r8, ip
 8000f18:	0c22      	lsrs	r2, r4, #16
 8000f1a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000f1e:	42a8      	cmp	r0, r5
 8000f20:	d907      	bls.n	8000f32 <__udivmoddi4+0xe6>
 8000f22:	197d      	adds	r5, r7, r5
 8000f24:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000f28:	d202      	bcs.n	8000f30 <__udivmoddi4+0xe4>
 8000f2a:	42a8      	cmp	r0, r5
 8000f2c:	f200 80e9 	bhi.w	8001102 <__udivmoddi4+0x2b6>
 8000f30:	4694      	mov	ip, r2
 8000f32:	1a2d      	subs	r5, r5, r0
 8000f34:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f38:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f3c:	fb08 f800 	mul.w	r8, r8, r0
 8000f40:	b2a4      	uxth	r4, r4
 8000f42:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f46:	45a0      	cmp	r8, r4
 8000f48:	d907      	bls.n	8000f5a <__udivmoddi4+0x10e>
 8000f4a:	193c      	adds	r4, r7, r4
 8000f4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f50:	d202      	bcs.n	8000f58 <__udivmoddi4+0x10c>
 8000f52:	45a0      	cmp	r8, r4
 8000f54:	f200 80d9 	bhi.w	800110a <__udivmoddi4+0x2be>
 8000f58:	4610      	mov	r0, r2
 8000f5a:	eba4 0408 	sub.w	r4, r4, r8
 8000f5e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f62:	e7c0      	b.n	8000ee6 <__udivmoddi4+0x9a>
 8000f64:	428b      	cmp	r3, r1
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x12e>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	f000 80b1 	beq.w	80010d0 <__udivmoddi4+0x284>
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e9c6 0500 	strd	r0, r5, [r6]
 8000f74:	4608      	mov	r0, r1
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	fab3 f183 	clz	r1, r3
 8000f7e:	2900      	cmp	r1, #0
 8000f80:	d14b      	bne.n	800101a <__udivmoddi4+0x1ce>
 8000f82:	42ab      	cmp	r3, r5
 8000f84:	d302      	bcc.n	8000f8c <__udivmoddi4+0x140>
 8000f86:	4282      	cmp	r2, r0
 8000f88:	f200 80b9 	bhi.w	80010fe <__udivmoddi4+0x2b2>
 8000f8c:	1a84      	subs	r4, r0, r2
 8000f8e:	eb65 0303 	sbc.w	r3, r5, r3
 8000f92:	2001      	movs	r0, #1
 8000f94:	469e      	mov	lr, r3
 8000f96:	2e00      	cmp	r6, #0
 8000f98:	d0aa      	beq.n	8000ef0 <__udivmoddi4+0xa4>
 8000f9a:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f9e:	e7a7      	b.n	8000ef0 <__udivmoddi4+0xa4>
 8000fa0:	409f      	lsls	r7, r3
 8000fa2:	f1c3 0220 	rsb	r2, r3, #32
 8000fa6:	40d1      	lsrs	r1, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fb0:	fa1f f887 	uxth.w	r8, r7
 8000fb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fb8:	fa24 f202 	lsr.w	r2, r4, r2
 8000fbc:	409d      	lsls	r5, r3
 8000fbe:	fb00 fc08 	mul.w	ip, r0, r8
 8000fc2:	432a      	orrs	r2, r5
 8000fc4:	0c15      	lsrs	r5, r2, #16
 8000fc6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000fca:	45ac      	cmp	ip, r5
 8000fcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000fd0:	d909      	bls.n	8000fe6 <__udivmoddi4+0x19a>
 8000fd2:	197d      	adds	r5, r7, r5
 8000fd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fd8:	f080 808f 	bcs.w	80010fa <__udivmoddi4+0x2ae>
 8000fdc:	45ac      	cmp	ip, r5
 8000fde:	f240 808c 	bls.w	80010fa <__udivmoddi4+0x2ae>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	443d      	add	r5, r7
 8000fe6:	eba5 050c 	sub.w	r5, r5, ip
 8000fea:	fbb5 f1fe 	udiv	r1, r5, lr
 8000fee:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000ff2:	fb01 f908 	mul.w	r9, r1, r8
 8000ff6:	b295      	uxth	r5, r2
 8000ff8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ffc:	45a9      	cmp	r9, r5
 8000ffe:	d907      	bls.n	8001010 <__udivmoddi4+0x1c4>
 8001000:	197d      	adds	r5, r7, r5
 8001002:	f101 32ff 	add.w	r2, r1, #4294967295
 8001006:	d274      	bcs.n	80010f2 <__udivmoddi4+0x2a6>
 8001008:	45a9      	cmp	r9, r5
 800100a:	d972      	bls.n	80010f2 <__udivmoddi4+0x2a6>
 800100c:	3902      	subs	r1, #2
 800100e:	443d      	add	r5, r7
 8001010:	eba5 0509 	sub.w	r5, r5, r9
 8001014:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001018:	e778      	b.n	8000f0c <__udivmoddi4+0xc0>
 800101a:	f1c1 0720 	rsb	r7, r1, #32
 800101e:	408b      	lsls	r3, r1
 8001020:	fa22 fc07 	lsr.w	ip, r2, r7
 8001024:	ea4c 0c03 	orr.w	ip, ip, r3
 8001028:	fa25 f407 	lsr.w	r4, r5, r7
 800102c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001030:	fbb4 f9fe 	udiv	r9, r4, lr
 8001034:	fa1f f88c 	uxth.w	r8, ip
 8001038:	fb0e 4419 	mls	r4, lr, r9, r4
 800103c:	fa20 f307 	lsr.w	r3, r0, r7
 8001040:	fb09 fa08 	mul.w	sl, r9, r8
 8001044:	408d      	lsls	r5, r1
 8001046:	431d      	orrs	r5, r3
 8001048:	0c2b      	lsrs	r3, r5, #16
 800104a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800104e:	45a2      	cmp	sl, r4
 8001050:	fa02 f201 	lsl.w	r2, r2, r1
 8001054:	fa00 f301 	lsl.w	r3, r0, r1
 8001058:	d909      	bls.n	800106e <__udivmoddi4+0x222>
 800105a:	eb1c 0404 	adds.w	r4, ip, r4
 800105e:	f109 30ff 	add.w	r0, r9, #4294967295
 8001062:	d248      	bcs.n	80010f6 <__udivmoddi4+0x2aa>
 8001064:	45a2      	cmp	sl, r4
 8001066:	d946      	bls.n	80010f6 <__udivmoddi4+0x2aa>
 8001068:	f1a9 0902 	sub.w	r9, r9, #2
 800106c:	4464      	add	r4, ip
 800106e:	eba4 040a 	sub.w	r4, r4, sl
 8001072:	fbb4 f0fe 	udiv	r0, r4, lr
 8001076:	fb0e 4410 	mls	r4, lr, r0, r4
 800107a:	fb00 fa08 	mul.w	sl, r0, r8
 800107e:	b2ad      	uxth	r5, r5
 8001080:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001084:	45a2      	cmp	sl, r4
 8001086:	d908      	bls.n	800109a <__udivmoddi4+0x24e>
 8001088:	eb1c 0404 	adds.w	r4, ip, r4
 800108c:	f100 35ff 	add.w	r5, r0, #4294967295
 8001090:	d22d      	bcs.n	80010ee <__udivmoddi4+0x2a2>
 8001092:	45a2      	cmp	sl, r4
 8001094:	d92b      	bls.n	80010ee <__udivmoddi4+0x2a2>
 8001096:	3802      	subs	r0, #2
 8001098:	4464      	add	r4, ip
 800109a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800109e:	fba0 8902 	umull	r8, r9, r0, r2
 80010a2:	eba4 040a 	sub.w	r4, r4, sl
 80010a6:	454c      	cmp	r4, r9
 80010a8:	46c6      	mov	lr, r8
 80010aa:	464d      	mov	r5, r9
 80010ac:	d319      	bcc.n	80010e2 <__udivmoddi4+0x296>
 80010ae:	d016      	beq.n	80010de <__udivmoddi4+0x292>
 80010b0:	b15e      	cbz	r6, 80010ca <__udivmoddi4+0x27e>
 80010b2:	ebb3 020e 	subs.w	r2, r3, lr
 80010b6:	eb64 0405 	sbc.w	r4, r4, r5
 80010ba:	fa04 f707 	lsl.w	r7, r4, r7
 80010be:	fa22 f301 	lsr.w	r3, r2, r1
 80010c2:	431f      	orrs	r7, r3
 80010c4:	40cc      	lsrs	r4, r1
 80010c6:	e9c6 7400 	strd	r7, r4, [r6]
 80010ca:	2100      	movs	r1, #0
 80010cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d0:	4631      	mov	r1, r6
 80010d2:	4630      	mov	r0, r6
 80010d4:	e70c      	b.n	8000ef0 <__udivmoddi4+0xa4>
 80010d6:	468c      	mov	ip, r1
 80010d8:	e6eb      	b.n	8000eb2 <__udivmoddi4+0x66>
 80010da:	4610      	mov	r0, r2
 80010dc:	e6ff      	b.n	8000ede <__udivmoddi4+0x92>
 80010de:	4543      	cmp	r3, r8
 80010e0:	d2e6      	bcs.n	80010b0 <__udivmoddi4+0x264>
 80010e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80010e6:	eb69 050c 	sbc.w	r5, r9, ip
 80010ea:	3801      	subs	r0, #1
 80010ec:	e7e0      	b.n	80010b0 <__udivmoddi4+0x264>
 80010ee:	4628      	mov	r0, r5
 80010f0:	e7d3      	b.n	800109a <__udivmoddi4+0x24e>
 80010f2:	4611      	mov	r1, r2
 80010f4:	e78c      	b.n	8001010 <__udivmoddi4+0x1c4>
 80010f6:	4681      	mov	r9, r0
 80010f8:	e7b9      	b.n	800106e <__udivmoddi4+0x222>
 80010fa:	4608      	mov	r0, r1
 80010fc:	e773      	b.n	8000fe6 <__udivmoddi4+0x19a>
 80010fe:	4608      	mov	r0, r1
 8001100:	e749      	b.n	8000f96 <__udivmoddi4+0x14a>
 8001102:	f1ac 0c02 	sub.w	ip, ip, #2
 8001106:	443d      	add	r5, r7
 8001108:	e713      	b.n	8000f32 <__udivmoddi4+0xe6>
 800110a:	3802      	subs	r0, #2
 800110c:	443c      	add	r4, r7
 800110e:	e724      	b.n	8000f5a <__udivmoddi4+0x10e>

08001110 <__aeabi_idiv0>:
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	0000      	movs	r0, r0
	...

08001118 <initialize_PID_constants>:
float error, lastError;
float integral, derivative;

float time_50_ms = 0;

void initialize_PID_constants() {
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	Kp = 0.6 * K;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <initialize_PID_constants+0x78>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fadf 	bl	80006e4 <__aeabi_f2d>
 8001126:	a318      	add	r3, pc, #96	; (adr r3, 8001188 <initialize_PID_constants+0x70>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff f84c 	bl	80001c8 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fb2c 	bl	8000794 <__aeabi_d2f>
 800113c:	4603      	mov	r3, r0
 800113e:	4a15      	ldr	r2, [pc, #84]	; (8001194 <initialize_PID_constants+0x7c>)
 8001140:	6013      	str	r3, [r2, #0]
	Ki = (2 * Kp) / TIME_INTERVAL_MS;
 8001142:	4b14      	ldr	r3, [pc, #80]	; (8001194 <initialize_PID_constants+0x7c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4619      	mov	r1, r3
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fb79 	bl	8000840 <__addsf3>
 800114e:	4603      	mov	r3, r0
 8001150:	4911      	ldr	r1, [pc, #68]	; (8001198 <initialize_PID_constants+0x80>)
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fd30 	bl	8000bb8 <__aeabi_fdiv>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <initialize_PID_constants+0x84>)
 800115e:	601a      	str	r2, [r3, #0]
    Kd = (Kp * TIME_INTERVAL_MS) / 8;
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <initialize_PID_constants+0x7c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	490c      	ldr	r1, [pc, #48]	; (8001198 <initialize_PID_constants+0x80>)
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fc72 	bl	8000a50 <__aeabi_fmul>
 800116c:	4603      	mov	r3, r0
 800116e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fd20 	bl	8000bb8 <__aeabi_fdiv>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <initialize_PID_constants+0x88>)
 800117e:	601a      	str	r2, [r3, #0]
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	f3af 8000 	nop.w
 8001188:	33333333 	.word	0x33333333
 800118c:	3fe33333 	.word	0x3fe33333
 8001190:	20000004 	.word	0x20000004
 8001194:	20000070 	.word	0x20000070
 8001198:	42480000 	.word	0x42480000
 800119c:	20000048 	.word	0x20000048
 80011a0:	20000068 	.word	0x20000068

080011a4 <coil_AC>:
uint16_t cnt_hall = 0;		//счетчик сработанного датчика Холла
uint16_t cnt_hall_last = 0;

/////////////////////////////////

void coil_AC(uint16_t pwm) { //1
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80011ae:	2104      	movs	r1, #4
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <coil_AC+0x44>)
 80011b2:	f004 fe81 	bl	8005eb8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80011b6:	2104      	movs	r1, #4
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <coil_AC+0x44>)
 80011ba:	f005 fdab 	bl	8006d14 <HAL_TIMEx_PWMN_Stop>

	TIM1->CCR1 = pwm/2;
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	085b      	lsrs	r3, r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <coil_AC+0x48>)
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011c8:	2100      	movs	r1, #0
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <coil_AC+0x44>)
 80011cc:	f004 fe36 	bl	8005e3c <HAL_TIM_PWM_Start>

	TIM8->CCR1 = pwm;
 80011d0:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <coil_AC+0x4c>)
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 80011d6:	2100      	movs	r1, #0
 80011d8:	4806      	ldr	r0, [pc, #24]	; (80011f4 <coil_AC+0x50>)
 80011da:	f005 fd71 	bl	8006cc0 <HAL_TIMEx_PWMN_Start>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000298 	.word	0x20000298
 80011ec:	40010000 	.word	0x40010000
 80011f0:	40010400 	.word	0x40010400
 80011f4:	20000130 	.word	0x20000130

080011f8 <coil_AB>:
void coil_AB(uint16_t pwm) { //2
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
	TIM1->CCR1 = pwm;
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <coil_AB+0x44>)
 8001204:	88fb      	ldrh	r3, [r7, #6]
 8001206:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001208:	2100      	movs	r1, #0
 800120a:	480d      	ldr	r0, [pc, #52]	; (8001240 <coil_AB+0x48>)
 800120c:	f004 fe16 	bl	8005e3c <HAL_TIM_PWM_Start>

	TIM1->CCR2 = pwm/2;
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	085b      	lsrs	r3, r3, #1
 8001214:	b29a      	uxth	r2, r3
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <coil_AB+0x44>)
 8001218:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800121a:	2104      	movs	r1, #4
 800121c:	4808      	ldr	r0, [pc, #32]	; (8001240 <coil_AB+0x48>)
 800121e:	f005 fd4f 	bl	8006cc0 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001222:	2100      	movs	r1, #0
 8001224:	4807      	ldr	r0, [pc, #28]	; (8001244 <coil_AB+0x4c>)
 8001226:	f004 fe47 	bl	8005eb8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 800122a:	2100      	movs	r1, #0
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <coil_AB+0x4c>)
 800122e:	f005 fd71 	bl	8006d14 <HAL_TIMEx_PWMN_Stop>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40010000 	.word	0x40010000
 8001240:	20000298 	.word	0x20000298
 8001244:	20000130 	.word	0x20000130

08001248 <coil_CB>:
void coil_CB(uint16_t pwm) { //3
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001252:	2100      	movs	r1, #0
 8001254:	480d      	ldr	r0, [pc, #52]	; (800128c <coil_CB+0x44>)
 8001256:	f004 fe2f 	bl	8005eb8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800125a:	2100      	movs	r1, #0
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <coil_CB+0x44>)
 800125e:	f005 fd59 	bl	8006d14 <HAL_TIMEx_PWMN_Stop>

	TIM1->CCR2 = pwm;
 8001262:	4a0b      	ldr	r2, [pc, #44]	; (8001290 <coil_CB+0x48>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001268:	2104      	movs	r1, #4
 800126a:	4808      	ldr	r0, [pc, #32]	; (800128c <coil_CB+0x44>)
 800126c:	f005 fd28 	bl	8006cc0 <HAL_TIMEx_PWMN_Start>

	TIM8->CCR1 = pwm/2;
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	085b      	lsrs	r3, r3, #1
 8001274:	b29a      	uxth	r2, r3
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <coil_CB+0x4c>)
 8001278:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800127a:	2100      	movs	r1, #0
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <coil_CB+0x50>)
 800127e:	f004 fddd 	bl	8005e3c <HAL_TIM_PWM_Start>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000298 	.word	0x20000298
 8001290:	40010000 	.word	0x40010000
 8001294:	40010400 	.word	0x40010400
 8001298:	20000130 	.word	0x20000130

0800129c <coil_CA>:
void coil_CA(uint16_t pwm) { //4
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
	TIM1->CCR1 = pwm/2;
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	085b      	lsrs	r3, r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <coil_CA+0x44>)
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80012b0:	2100      	movs	r1, #0
 80012b2:	480c      	ldr	r0, [pc, #48]	; (80012e4 <coil_CA+0x48>)
 80012b4:	f005 fd04 	bl	8006cc0 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80012b8:	2104      	movs	r1, #4
 80012ba:	480a      	ldr	r0, [pc, #40]	; (80012e4 <coil_CA+0x48>)
 80012bc:	f004 fdfc 	bl	8005eb8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80012c0:	2104      	movs	r1, #4
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <coil_CA+0x48>)
 80012c4:	f005 fd26 	bl	8006d14 <HAL_TIMEx_PWMN_Stop>

	TIM8->CCR1 = pwm;
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <coil_CA+0x4c>)
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80012ce:	2100      	movs	r1, #0
 80012d0:	4806      	ldr	r0, [pc, #24]	; (80012ec <coil_CA+0x50>)
 80012d2:	f004 fdb3 	bl	8005e3c <HAL_TIM_PWM_Start>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40010000 	.word	0x40010000
 80012e4:	20000298 	.word	0x20000298
 80012e8:	40010400 	.word	0x40010400
 80012ec:	20000130 	.word	0x20000130

080012f0 <coil_BA>:
void coil_BA(uint16_t pwm) { //5
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	80fb      	strh	r3, [r7, #6]
	TIM1->CCR1 = pwm;
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <coil_BA+0x44>)
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001300:	2100      	movs	r1, #0
 8001302:	480d      	ldr	r0, [pc, #52]	; (8001338 <coil_BA+0x48>)
 8001304:	f005 fcdc 	bl	8006cc0 <HAL_TIMEx_PWMN_Start>

	TIM1->CCR2 = pwm/2;
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	085b      	lsrs	r3, r3, #1
 800130c:	b29a      	uxth	r2, r3
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <coil_BA+0x44>)
 8001310:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001312:	2104      	movs	r1, #4
 8001314:	4808      	ldr	r0, [pc, #32]	; (8001338 <coil_BA+0x48>)
 8001316:	f004 fd91 	bl	8005e3c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800131a:	2100      	movs	r1, #0
 800131c:	4807      	ldr	r0, [pc, #28]	; (800133c <coil_BA+0x4c>)
 800131e:	f004 fdcb 	bl	8005eb8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001322:	2100      	movs	r1, #0
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <coil_BA+0x4c>)
 8001326:	f005 fcf5 	bl	8006d14 <HAL_TIMEx_PWMN_Stop>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40010000 	.word	0x40010000
 8001338:	20000298 	.word	0x20000298
 800133c:	20000130 	.word	0x20000130

08001340 <coil_BC>:
void coil_BC(uint16_t pwm) { //6
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800134a:	2100      	movs	r1, #0
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <coil_BC+0x44>)
 800134e:	f004 fdb3 	bl	8005eb8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001352:	2100      	movs	r1, #0
 8001354:	480b      	ldr	r0, [pc, #44]	; (8001384 <coil_BC+0x44>)
 8001356:	f005 fcdd 	bl	8006d14 <HAL_TIMEx_PWMN_Stop>

	TIM1->CCR2 = pwm;
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <coil_BC+0x48>)
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	6393      	str	r3, [r2, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001360:	2104      	movs	r1, #4
 8001362:	4808      	ldr	r0, [pc, #32]	; (8001384 <coil_BC+0x44>)
 8001364:	f004 fd6a 	bl	8005e3c <HAL_TIM_PWM_Start>

	TIM8->CCR1 = pwm/2;
 8001368:	88fb      	ldrh	r3, [r7, #6]
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <coil_BC+0x4c>)
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 8001372:	2100      	movs	r1, #0
 8001374:	4806      	ldr	r0, [pc, #24]	; (8001390 <coil_BC+0x50>)
 8001376:	f005 fca3 	bl	8006cc0 <HAL_TIMEx_PWMN_Start>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000298 	.word	0x20000298
 8001388:	40010000 	.word	0x40010000
 800138c:	40010400 	.word	0x40010400
 8001390:	20000130 	.word	0x20000130

08001394 <motor_control>:

void motor_control(uint8_t command, uint16_t pwm) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	460a      	mov	r2, r1
 800139e:	71fb      	strb	r3, [r7, #7]
 80013a0:	4613      	mov	r3, r2
 80013a2:	80bb      	strh	r3, [r7, #4]
	switch (command) {
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d036      	beq.n	8001418 <motor_control+0x84>
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d14d      	bne.n	800144a <motor_control+0xb6>
		case Eright:
			switch (step) {
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <motor_control+0xc0>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	2b05      	cmp	r3, #5
 80013b6:	d82d      	bhi.n	8001414 <motor_control+0x80>
 80013b8:	a201      	add	r2, pc, #4	; (adr r2, 80013c0 <motor_control+0x2c>)
 80013ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013be:	bf00      	nop
 80013c0:	080013ed 	.word	0x080013ed
 80013c4:	08001401 	.word	0x08001401
 80013c8:	080013f7 	.word	0x080013f7
 80013cc:	080013d9 	.word	0x080013d9
 80013d0:	080013e3 	.word	0x080013e3
 80013d4:	0800140b 	.word	0x0800140b
			case 0b100:
				coil_BC(pwm); 	// A+1 B-0.5 C0
 80013d8:	88bb      	ldrh	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ffb0 	bl	8001340 <coil_BC>
				break;
 80013e0:	e019      	b.n	8001416 <motor_control+0x82>
			case 0b101:
				coil_BA(pwm);	// A+0.5 B0 C-1
 80013e2:	88bb      	ldrh	r3, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff83 	bl	80012f0 <coil_BA>
				break;
 80013ea:	e014      	b.n	8001416 <motor_control+0x82>
			case 0b001:
				coil_CA(pwm); 	// A0 B+1 C-0.5
 80013ec:	88bb      	ldrh	r3, [r7, #4]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff54 	bl	800129c <coil_CA>
				break;
 80013f4:	e00f      	b.n	8001416 <motor_control+0x82>
			case 0b011:
				coil_CB(pwm);	// A-1 B+0.5 C0
 80013f6:	88bb      	ldrh	r3, [r7, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff25 	bl	8001248 <coil_CB>
				break;
 80013fe:	e00a      	b.n	8001416 <motor_control+0x82>
			case 0b010:
				coil_AB(pwm); 	// A-0.5 B0 C+1
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fef8 	bl	80011f8 <coil_AB>
				break;
 8001408:	e005      	b.n	8001416 <motor_control+0x82>
			case 0b110:
				coil_AC(pwm); 	// A0 B-1 C+0.5
 800140a:	88bb      	ldrh	r3, [r7, #4]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fec9 	bl	80011a4 <coil_AC>
				break;
 8001412:	e000      	b.n	8001416 <motor_control+0x82>
			default:
				break;
 8001414:	bf00      	nop
			}
			break;
 8001416:	e019      	b.n	800144c <motor_control+0xb8>

		case Estop:
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001418:	2100      	movs	r1, #0
 800141a:	480f      	ldr	r0, [pc, #60]	; (8001458 <motor_control+0xc4>)
 800141c:	f004 fd4c 	bl	8005eb8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001420:	2100      	movs	r1, #0
 8001422:	480d      	ldr	r0, [pc, #52]	; (8001458 <motor_control+0xc4>)
 8001424:	f005 fc76 	bl	8006d14 <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001428:	2104      	movs	r1, #4
 800142a:	480b      	ldr	r0, [pc, #44]	; (8001458 <motor_control+0xc4>)
 800142c:	f004 fd44 	bl	8005eb8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001430:	2104      	movs	r1, #4
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <motor_control+0xc4>)
 8001434:	f005 fc6e 	bl	8006d14 <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001438:	2100      	movs	r1, #0
 800143a:	4808      	ldr	r0, [pc, #32]	; (800145c <motor_control+0xc8>)
 800143c:	f004 fd3c 	bl	8005eb8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001440:	2100      	movs	r1, #0
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <motor_control+0xc8>)
 8001444:	f005 fc66 	bl	8006d14 <HAL_TIMEx_PWMN_Stop>
			break;
 8001448:	e000      	b.n	800144c <motor_control+0xb8>
//			}
//
//			break;

		default:
			break;
 800144a:	bf00      	nop
	}
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000034 	.word	0x20000034
 8001458:	20000298 	.word	0x20000298
 800145c:	20000130 	.word	0x20000130

08001460 <cur_sector>:

void cur_sector() {
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	hal_U = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 8001464:	2120      	movs	r1, #32
 8001466:	4815      	ldr	r0, [pc, #84]	; (80014bc <cur_sector+0x5c>)
 8001468:	f002 fb50 	bl	8003b0c <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <cur_sector+0x60>)
 8001472:	701a      	strb	r2, [r3, #0]
	hal_V = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8001474:	2101      	movs	r1, #1
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <cur_sector+0x5c>)
 8001478:	f002 fb48 	bl	8003b0c <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <cur_sector+0x64>)
 8001482:	701a      	strb	r2, [r3, #0]
	hal_W = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 8001484:	2102      	movs	r1, #2
 8001486:	480d      	ldr	r0, [pc, #52]	; (80014bc <cur_sector+0x5c>)
 8001488:	f002 fb40 	bl	8003b0c <HAL_GPIO_ReadPin>
 800148c:	4603      	mov	r3, r0
 800148e:	461a      	mov	r2, r3
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <cur_sector+0x68>)
 8001492:	701a      	strb	r2, [r3, #0]

	step = (hal_W) | (hal_V << 1) | (hal_U << 2);
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <cur_sector+0x64>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	b25a      	sxtb	r2, r3
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <cur_sector+0x68>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b25a      	sxtb	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <cur_sector+0x60>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <cur_sector+0x6c>)
 80014b6:	701a      	strb	r2, [r3, #0]
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40020000 	.word	0x40020000
 80014c0:	20000054 	.word	0x20000054
 80014c4:	2000005c 	.word	0x2000005c
 80014c8:	20000064 	.word	0x20000064
 80014cc:	20000034 	.word	0x20000034

080014d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	dc02      	bgt.n	80014e6 <HAL_GPIO_EXTI_Callback+0x16>
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	dc02      	bgt.n	80014ea <HAL_GPIO_EXTI_Callback+0x1a>
			cur_sector();
			motor_control(Eright, pwm);
		}
		break;
	}
}
 80014e4:	e014      	b.n	8001510 <HAL_GPIO_EXTI_Callback+0x40>
	switch(GPIO_Pin) {
 80014e6:	2b20      	cmp	r3, #32
 80014e8:	d112      	bne.n	8001510 <HAL_GPIO_EXTI_Callback+0x40>
		if (START_FLAG!=0){
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_GPIO_EXTI_Callback+0x48>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_EXTI_Callback+0x3e>
			cnt_hall += 1;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_GPIO_EXTI_Callback+0x4c>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_GPIO_EXTI_Callback+0x4c>)
 80014fc:	801a      	strh	r2, [r3, #0]
			cur_sector();
 80014fe:	f7ff ffaf 	bl	8001460 <cur_sector>
			motor_control(Eright, pwm);
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <HAL_GPIO_EXTI_Callback+0x50>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	4619      	mov	r1, r3
 8001508:	2002      	movs	r0, #2
 800150a:	f7ff ff43 	bl	8001394 <motor_control>
		break;
 800150e:	bf00      	nop
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000035 	.word	0x20000035
 800151c:	20000040 	.word	0x20000040
 8001520:	20000000 	.word	0x20000000
 8001524:	00000000 	.word	0x00000000

08001528 <calculateSpeed>:
#define PULSES_PER_REVOLUTION 	6
#define GEAR_RATIO 				28 // Передаточное число
#define STEPS_REDUCER 			2
#define REDUCER_LENGTH 			47.4 // Длина ротора?

void calculateSpeed() {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
//	currentSpeed = (cnt_hall * 60.0 * GEAR_RATIO) / (PULSES_PER_REVOLUTION * REDUCER_LENGTH); // Текущая скорость в об/мин
//	currentSpeed = (cnt_hall * 60.0 * REDUCER_LENGTH) / (PULSES_PER_REVOLUTION * GEAR_RATIO);
	currentSpeed = cnt_hall * 3.571428; // 3.571428 = 60 / 16.8, где 16.8 - кол-во прерываний датчика холла за 0.05 с, для вращения со скоростью 1 об/с
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <calculateSpeed+0x40>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f8c5 	bl	80006c0 <__aeabi_i2d>
 8001536:	a30a      	add	r3, pc, #40	; (adr r3, 8001560 <calculateSpeed+0x38>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7fe fe44 	bl	80001c8 <__aeabi_dmul>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff f924 	bl	8000794 <__aeabi_d2f>
 800154c:	4603      	mov	r3, r0
 800154e:	4a07      	ldr	r2, [pc, #28]	; (800156c <calculateSpeed+0x44>)
 8001550:	6013      	str	r3, [r2, #0]
	cnt_hall = 0; // Сброс счетчика импульсов
 8001552:	4b05      	ldr	r3, [pc, #20]	; (8001568 <calculateSpeed+0x40>)
 8001554:	2200      	movs	r2, #0
 8001556:	801a      	strh	r2, [r3, #0]
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	f3af 8000 	nop.w
 8001560:	d7e02646 	.word	0xd7e02646
 8001564:	400c9248 	.word	0x400c9248
 8001568:	20000040 	.word	0x20000040
 800156c:	20000038 	.word	0x20000038

08001570 <calculatePID>:

void calculatePID() {
 8001570:	b598      	push	{r3, r4, r7, lr}
 8001572:	af00      	add	r7, sp, #0
    error = targetRPM - currentSpeed;
 8001574:	4b30      	ldr	r3, [pc, #192]	; (8001638 <calculatePID+0xc8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a30      	ldr	r2, [pc, #192]	; (800163c <calculatePID+0xcc>)
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f95c 	bl	800083c <__aeabi_fsub>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <calculatePID+0xd0>)
 800158a:	601a      	str	r2, [r3, #0]
    integral += error;
 800158c:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <calculatePID+0xd4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2b      	ldr	r2, [pc, #172]	; (8001640 <calculatePID+0xd0>)
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff f952 	bl	8000840 <__addsf3>
 800159c:	4603      	mov	r3, r0
 800159e:	461a      	mov	r2, r3
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <calculatePID+0xd4>)
 80015a2:	601a      	str	r2, [r3, #0]
    derivative = error - lastError;
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <calculatePID+0xd0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a27      	ldr	r2, [pc, #156]	; (8001648 <calculatePID+0xd8>)
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff f944 	bl	800083c <__aeabi_fsub>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <calculatePID+0xdc>)
 80015ba:	601a      	str	r2, [r3, #0]

    pwm = Kp*error + Ki*integral + Kd*derivative;
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <calculatePID+0xe0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <calculatePID+0xd0>)
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fa42 	bl	8000a50 <__aeabi_fmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461c      	mov	r4, r3
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <calculatePID+0xe4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1b      	ldr	r2, [pc, #108]	; (8001644 <calculatePID+0xd4>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fa38 	bl	8000a50 <__aeabi_fmul>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4619      	mov	r1, r3
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff f92b 	bl	8000840 <__addsf3>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461c      	mov	r4, r3
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <calculatePID+0xe8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a16      	ldr	r2, [pc, #88]	; (800164c <calculatePID+0xdc>)
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fa29 	bl	8000a50 <__aeabi_fmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	4619      	mov	r1, r3
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff f91c 	bl	8000840 <__addsf3>
 8001608:	4603      	mov	r3, r0
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fbe6 	bl	8000ddc <__aeabi_f2uiz>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <calculatePID+0xec>)
 8001616:	801a      	strh	r2, [r3, #0]
    if (pwm > 3751) pwm = 3751;
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <calculatePID+0xec>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	f640 62a7 	movw	r2, #3751	; 0xea7
 8001620:	4293      	cmp	r3, r2
 8001622:	d903      	bls.n	800162c <calculatePID+0xbc>
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <calculatePID+0xec>)
 8001626:	f640 62a7 	movw	r2, #3751	; 0xea7
 800162a:	801a      	strh	r2, [r3, #0]
    if (pwm < 0) pwm = 2700;
    lastError = error;
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <calculatePID+0xd0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a05      	ldr	r2, [pc, #20]	; (8001648 <calculatePID+0xd8>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	bd98      	pop	{r3, r4, r7, pc}
 8001638:	20000008 	.word	0x20000008
 800163c:	20000038 	.word	0x20000038
 8001640:	2000006c 	.word	0x2000006c
 8001644:	20000078 	.word	0x20000078
 8001648:	20000060 	.word	0x20000060
 800164c:	20000044 	.word	0x20000044
 8001650:	20000070 	.word	0x20000070
 8001654:	20000048 	.word	0x20000048
 8001658:	20000068 	.word	0x20000068
 800165c:	20000000 	.word	0x20000000

08001660 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]


	if (htim == &htim14) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d11c      	bne.n	80016aa <HAL_TIM_PeriodElapsedCallback+0x4a>
		time_50_ms += 0.5; // 0.5 мс - период таймера 14. Расчет: 1/ (TIM_FREQ / (TIM_ARR * TIM_PSC)) = 1 / (60 000 000 / ((499+1) * (59+1))) = 1/2000 = 0.5 мс
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff f8e1 	bl	8000840 <__addsf3>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001684:	601a      	str	r2, [r3, #0]
//		cur_sector();
		if (time_50_ms >= TIME_INTERVAL_MS) {
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	490c      	ldr	r1, [pc, #48]	; (80016bc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fb91 	bl	8000db4 <__aeabi_fcmpge>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d100      	bne.n	800169a <HAL_TIM_PeriodElapsedCallback+0x3a>
		}
//		motor_control(Eright, pwm);


	}
}
 8001698:	e007      	b.n	80016aa <HAL_TIM_PeriodElapsedCallback+0x4a>
			calculateSpeed();
 800169a:	f7ff ff45 	bl	8001528 <calculateSpeed>
			calculatePID();
 800169e:	f7ff ff67 	bl	8001570 <calculatePID>
			time_50_ms = 0;
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200002d8 	.word	0x200002d8
 80016b8:	2000003c 	.word	0x2000003c
 80016bc:	42480000 	.word	0x42480000

080016c0 <loop>:

void loop(){
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
//	if(pwm < 3700) {
//		pwm += 2;
//		HAL_Delay(100);
//	}
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <start>:

void start(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
//	coil_BA(pwm);
//	HAL_Delay(100);
//	coil_CA(pwm);
//	HAL_Delay(100);
//	cnt_hall=0;
	START_FLAG=1;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <start+0x34>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim14);
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <start+0x38>)
 80016d8:	f004 fb25 	bl	8005d26 <HAL_TIM_Base_Start_IT>
	coil_BA(pwm);
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <start+0x3c>)
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fe05 	bl	80012f0 <coil_BA>
	HAL_Delay(100);
 80016e6:	2064      	movs	r0, #100	; 0x64
 80016e8:	f001 f85c 	bl	80027a4 <HAL_Delay>
	coil_CA(pwm);
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <start+0x3c>)
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fdd3 	bl	800129c <coil_CA>
	HAL_Delay(100);
 80016f6:	2064      	movs	r0, #100	; 0x64
 80016f8:	f001 f854 	bl	80027a4 <HAL_Delay>

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000035 	.word	0x20000035
 8001704:	200002d8 	.word	0x200002d8
 8001708:	20000000 	.word	0x20000000

0800170c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001710:	f000 ffda 	bl	80026c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001714:	f000 f819 	bl	800174a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001718:	f000 fb40 	bl	8001d9c <MX_GPIO_Init>
  MX_DMA_Init();
 800171c:	f000 fb08 	bl	8001d30 <MX_DMA_Init>
  MX_ADC1_Init();
 8001720:	f000 f85a 	bl	80017d8 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001724:	f000 f8c2 	bl	80018ac <MX_I2C3_Init>
  MX_TIM1_Init();
 8001728:	f000 f8ee 	bl	8001908 <MX_TIM1_Init>
  MX_TIM8_Init();
 800172c:	f000 f9ec 	bl	8001b08 <MX_TIM8_Init>
  MX_TIM14_Init();
 8001730:	f000 fa8a 	bl	8001c48 <MX_TIM14_Init>
  MX_USART3_UART_Init();
 8001734:	f000 fad2 	bl	8001cdc <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001738:	f000 f992 	bl	8001a60 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  initialize_PID_constants();
 800173c:	f7ff fcec 	bl	8001118 <initialize_PID_constants>
  start();
 8001740:	f7ff ffc4 	bl	80016cc <start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001744:	f7ff ffbc 	bl	80016c0 <loop>
 8001748:	e7fc      	b.n	8001744 <main+0x38>

0800174a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b092      	sub	sp, #72	; 0x48
 800174e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001750:	f107 0318 	add.w	r3, r7, #24
 8001754:	2230      	movs	r2, #48	; 0x30
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f006 f827 	bl	80077ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800176c:	2301      	movs	r3, #1
 800176e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001770:	2301      	movs	r3, #1
 8001772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001774:	2302      	movs	r3, #2
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001778:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800177c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 800177e:	2308      	movs	r3, #8
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001782:	23f0      	movs	r3, #240	; 0xf0
 8001784:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001786:	2302      	movs	r3, #2
 8001788:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800178a:	2304      	movs	r3, #4
 800178c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800178e:	f107 0318 	add.w	r3, r7, #24
 8001792:	4618      	mov	r0, r3
 8001794:	f003 fe16 	bl	80053c4 <HAL_RCC_OscConfig>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800179e:	f000 fb99 	bl	8001ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a2:	230f      	movs	r3, #15
 80017a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017a6:	2302      	movs	r3, #2
 80017a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2103      	movs	r1, #3
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 f86a 	bl	8005898 <HAL_RCC_ClockConfig>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017ca:	f000 fb83 	bl	8001ed4 <Error_Handler>
  }
}
 80017ce:	bf00      	nop
 80017d0:	3748      	adds	r7, #72	; 0x48
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017de:	463b      	mov	r3, r7
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80017ea:	4b2d      	ldr	r3, [pc, #180]	; (80018a0 <MX_ADC1_Init+0xc8>)
 80017ec:	4a2d      	ldr	r2, [pc, #180]	; (80018a4 <MX_ADC1_Init+0xcc>)
 80017ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <MX_ADC1_Init+0xc8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <MX_ADC1_Init+0xc8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <MX_ADC1_Init+0xc8>)
 80017fe:	2201      	movs	r2, #1
 8001800:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <MX_ADC1_Init+0xc8>)
 8001804:	2201      	movs	r2, #1
 8001806:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <MX_ADC1_Init+0xc8>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <MX_ADC1_Init+0xc8>)
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001814:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <MX_ADC1_Init+0xc8>)
 8001816:	4a24      	ldr	r2, [pc, #144]	; (80018a8 <MX_ADC1_Init+0xd0>)
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181a:	4b21      	ldr	r3, [pc, #132]	; (80018a0 <MX_ADC1_Init+0xc8>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001820:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <MX_ADC1_Init+0xc8>)
 8001822:	2203      	movs	r2, #3
 8001824:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <MX_ADC1_Init+0xc8>)
 8001828:	2201      	movs	r2, #1
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800182c:	4b1c      	ldr	r3, [pc, #112]	; (80018a0 <MX_ADC1_Init+0xc8>)
 800182e:	2201      	movs	r2, #1
 8001830:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001832:	481b      	ldr	r0, [pc, #108]	; (80018a0 <MX_ADC1_Init+0xc8>)
 8001834:	f000 ffda 	bl	80027ec <HAL_ADC_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 800183e:	f000 fb49 	bl	8001ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001842:	2304      	movs	r3, #4
 8001844:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800184e:	463b      	mov	r3, r7
 8001850:	4619      	mov	r1, r3
 8001852:	4813      	ldr	r0, [pc, #76]	; (80018a0 <MX_ADC1_Init+0xc8>)
 8001854:	f001 f96a 	bl	8002b2c <HAL_ADC_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800185e:	f000 fb39 	bl	8001ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001862:	2303      	movs	r3, #3
 8001864:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001866:	2302      	movs	r3, #2
 8001868:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	4619      	mov	r1, r3
 800186e:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_ADC1_Init+0xc8>)
 8001870:	f001 f95c 	bl	8002b2c <HAL_ADC_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800187a:	f000 fb2b 	bl	8001ed4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800187e:	2303      	movs	r3, #3
 8001880:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001882:	463b      	mov	r3, r7
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	; (80018a0 <MX_ADC1_Init+0xc8>)
 8001888:	f001 f950 	bl	8002b2c <HAL_ADC_ConfigChannel>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8001892:	f000 fb1f 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200001f0 	.word	0x200001f0
 80018a4:	40012000 	.word	0x40012000
 80018a8:	0f000001 	.word	0x0f000001

080018ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_I2C3_Init+0x50>)
 80018b2:	4a13      	ldr	r2, [pc, #76]	; (8001900 <MX_I2C3_Init+0x54>)
 80018b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_I2C3_Init+0x50>)
 80018b8:	4a12      	ldr	r2, [pc, #72]	; (8001904 <MX_I2C3_Init+0x58>)
 80018ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_I2C3_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_I2C3_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_I2C3_Init+0x50>)
 80018ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ce:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <MX_I2C3_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_I2C3_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <MX_I2C3_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_I2C3_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_I2C3_Init+0x50>)
 80018ea:	f002 f93f 	bl	8003b6c <HAL_I2C_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80018f4:	f000 faee 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200000dc 	.word	0x200000dc
 8001900:	40005c00 	.word	0x40005c00
 8001904:	000186a0 	.word	0x000186a0

08001908 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b096      	sub	sp, #88	; 0x58
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800190e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	611a      	str	r2, [r3, #16]
 8001936:	615a      	str	r2, [r3, #20]
 8001938:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2220      	movs	r2, #32
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f005 ff33 	bl	80077ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001946:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <MX_TIM1_Init+0x150>)
 8001948:	4a44      	ldr	r2, [pc, #272]	; (8001a5c <MX_TIM1_Init+0x154>)
 800194a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800194c:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <MX_TIM1_Init+0x150>)
 800194e:	2200      	movs	r2, #0
 8001950:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001952:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <MX_TIM1_Init+0x150>)
 8001954:	2220      	movs	r2, #32
 8001956:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3750;
 8001958:	4b3f      	ldr	r3, [pc, #252]	; (8001a58 <MX_TIM1_Init+0x150>)
 800195a:	f640 62a6 	movw	r2, #3750	; 0xea6
 800195e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001960:	4b3d      	ldr	r3, [pc, #244]	; (8001a58 <MX_TIM1_Init+0x150>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001966:	4b3c      	ldr	r3, [pc, #240]	; (8001a58 <MX_TIM1_Init+0x150>)
 8001968:	2200      	movs	r2, #0
 800196a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800196c:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <MX_TIM1_Init+0x150>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001972:	4839      	ldr	r0, [pc, #228]	; (8001a58 <MX_TIM1_Init+0x150>)
 8001974:	f004 f9ac 	bl	8005cd0 <HAL_TIM_Base_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800197e:	f000 faa9 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001986:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001988:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800198c:	4619      	mov	r1, r3
 800198e:	4832      	ldr	r0, [pc, #200]	; (8001a58 <MX_TIM1_Init+0x150>)
 8001990:	f004 fdaa 	bl	80064e8 <HAL_TIM_ConfigClockSource>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800199a:	f000 fa9b 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800199e:	482e      	ldr	r0, [pc, #184]	; (8001a58 <MX_TIM1_Init+0x150>)
 80019a0:	f004 fa18 	bl	8005dd4 <HAL_TIM_PWM_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80019aa:	f000 fa93 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019ba:	4619      	mov	r1, r3
 80019bc:	4826      	ldr	r0, [pc, #152]	; (8001a58 <MX_TIM1_Init+0x150>)
 80019be:	f005 f9ea 	bl	8006d96 <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80019c8:	f000 fa84 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019cc:	2360      	movs	r3, #96	; 0x60
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d8:	2300      	movs	r3, #0
 80019da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ec:	2200      	movs	r2, #0
 80019ee:	4619      	mov	r1, r3
 80019f0:	4819      	ldr	r0, [pc, #100]	; (8001a58 <MX_TIM1_Init+0x150>)
 80019f2:	f004 fcb3 	bl	800635c <HAL_TIM_PWM_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019fc:	f000 fa6a 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	2204      	movs	r2, #4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <MX_TIM1_Init+0x150>)
 8001a0a:	f004 fca7 	bl	800635c <HAL_TIM_PWM_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001a14:	f000 fa5e 	bl	8001ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a30:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4807      	ldr	r0, [pc, #28]	; (8001a58 <MX_TIM1_Init+0x150>)
 8001a3c:	f005 f9ef 	bl	8006e1e <HAL_TIMEx_ConfigBreakDeadTime>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001a46:	f000 fa45 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <MX_TIM1_Init+0x150>)
 8001a4c:	f000 fc7e 	bl	800234c <HAL_TIM_MspPostInit>

}
 8001a50:	bf00      	nop
 8001a52:	3758      	adds	r7, #88	; 0x58
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000298 	.word	0x20000298
 8001a5c:	40010000 	.word	0x40010000

08001a60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08c      	sub	sp, #48	; 0x30
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	2224      	movs	r2, #36	; 0x24
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f005 fe9c 	bl	80077ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	1d3b      	adds	r3, r7, #4
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a7c:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <MX_TIM4_Init+0xa0>)
 8001a7e:	4a21      	ldr	r2, [pc, #132]	; (8001b04 <MX_TIM4_Init+0xa4>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <MX_TIM4_Init+0xa0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <MX_TIM4_Init+0xa0>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <MX_TIM4_Init+0xa0>)
 8001a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <MX_TIM4_Init+0xa0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <MX_TIM4_Init+0xa0>)
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aba:	2301      	movs	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001ac2:	230a      	movs	r3, #10
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	4619      	mov	r1, r3
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <MX_TIM4_Init+0xa0>)
 8001ace:	f004 fa4b 	bl	8005f68 <HAL_TIM_Encoder_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ad8:	f000 f9fc 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_TIM4_Init+0xa0>)
 8001aea:	f005 f954 	bl	8006d96 <HAL_TIMEx_MasterConfigSynchronization>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001af4:	f000 f9ee 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001af8:	bf00      	nop
 8001afa:	3730      	adds	r7, #48	; 0x30
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000170 	.word	0x20000170
 8001b04:	40000800 	.word	0x40000800

08001b08 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b096      	sub	sp, #88	; 0x58
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	611a      	str	r2, [r3, #16]
 8001b36:	615a      	str	r2, [r3, #20]
 8001b38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f005 fe33 	bl	80077ac <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b46:	4b3e      	ldr	r3, [pc, #248]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001b48:	4a3e      	ldr	r2, [pc, #248]	; (8001c44 <MX_TIM8_Init+0x13c>)
 8001b4a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b4c:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001b54:	2220      	movs	r2, #32
 8001b56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3750;
 8001b58:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001b5a:	f640 62a6 	movw	r2, #3750	; 0xea6
 8001b5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b60:	4b37      	ldr	r3, [pc, #220]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b66:	4b36      	ldr	r3, [pc, #216]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b34      	ldr	r3, [pc, #208]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b72:	4833      	ldr	r0, [pc, #204]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001b74:	f004 f8ac 	bl	8005cd0 <HAL_TIM_Base_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001b7e:	f000 f9a9 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b88:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	482c      	ldr	r0, [pc, #176]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001b90:	f004 fcaa 	bl	80064e8 <HAL_TIM_ConfigClockSource>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b9a:	f000 f99b 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b9e:	4828      	ldr	r0, [pc, #160]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001ba0:	f004 f918 	bl	8005dd4 <HAL_TIM_PWM_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001baa:	f000 f993 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4820      	ldr	r0, [pc, #128]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001bbe:	f005 f8ea 	bl	8006d96 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001bc8:	f000 f984 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bcc:	2360      	movs	r3, #96	; 0x60
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bec:	2200      	movs	r2, #0
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4813      	ldr	r0, [pc, #76]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001bf2:	f004 fbb3 	bl	800635c <HAL_TIM_PWM_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001bfc:	f000 f96a 	bl	8001ed4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c18:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4807      	ldr	r0, [pc, #28]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001c24:	f005 f8fb 	bl	8006e1e <HAL_TIMEx_ConfigBreakDeadTime>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8001c2e:	f000 f951 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c32:	4803      	ldr	r0, [pc, #12]	; (8001c40 <MX_TIM8_Init+0x138>)
 8001c34:	f000 fb8a 	bl	800234c <HAL_TIM_MspPostInit>

}
 8001c38:	bf00      	nop
 8001c3a:	3758      	adds	r7, #88	; 0x58
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000130 	.word	0x20000130
 8001c44:	40010400 	.word	0x40010400

08001c48 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
 8001c5c:	615a      	str	r2, [r3, #20]
 8001c5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001c60:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <MX_TIM14_Init+0x8c>)
 8001c62:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <MX_TIM14_Init+0x90>)
 8001c64:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 59;
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <MX_TIM14_Init+0x8c>)
 8001c68:	223b      	movs	r2, #59	; 0x3b
 8001c6a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <MX_TIM14_Init+0x8c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 499;
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <MX_TIM14_Init+0x8c>)
 8001c74:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001c78:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_TIM14_Init+0x8c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_TIM14_Init+0x8c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001c86:	4813      	ldr	r0, [pc, #76]	; (8001cd4 <MX_TIM14_Init+0x8c>)
 8001c88:	f004 f822 	bl	8005cd0 <HAL_TIM_Base_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001c92:	f000 f91f 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001c96:	480f      	ldr	r0, [pc, #60]	; (8001cd4 <MX_TIM14_Init+0x8c>)
 8001c98:	f004 f868 	bl	8005d6c <HAL_TIM_OC_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001ca2:	f000 f917 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <MX_TIM14_Init+0x8c>)
 8001cbe:	f004 faed 	bl	800629c <HAL_TIM_OC_ConfigChannel>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001cc8:	f000 f904 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001ccc:	bf00      	nop
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200002d8 	.word	0x200002d8
 8001cd8:	40002000 	.word	0x40002000

08001cdc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_USART3_UART_Init+0x4c>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <MX_USART3_UART_Init+0x50>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <MX_USART3_UART_Init+0x4c>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_USART3_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_USART3_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <MX_USART3_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_USART3_UART_Init+0x4c>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <MX_USART3_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_USART3_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_USART3_UART_Init+0x4c>)
 8001d14:	f005 f90a 	bl	8006f2c <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d1e:	f000 f8d9 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200001b0 	.word	0x200001b0
 8001d2c:	40004800 	.word	0x40004800

08001d30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <MX_DMA_Init+0x68>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <MX_DMA_Init+0x68>)
 8001d40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <MX_DMA_Init+0x68>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <MX_DMA_Init+0x68>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <MX_DMA_Init+0x68>)
 8001d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <MX_DMA_Init+0x68>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2100      	movs	r1, #0
 8001d72:	200f      	movs	r0, #15
 8001d74:	f001 f9df 	bl	8003136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001d78:	200f      	movs	r0, #15
 8001d7a:	f001 f9f8 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	2038      	movs	r0, #56	; 0x38
 8001d84:	f001 f9d7 	bl	8003136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001d88:	2038      	movs	r0, #56	; 0x38
 8001d8a:	f001 f9f0 	bl	800316e <HAL_NVIC_EnableIRQ>

}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800

08001d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	; 0x30
 8001da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da2:	f107 031c 	add.w	r3, r7, #28
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	4b43      	ldr	r3, [pc, #268]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a42      	ldr	r2, [pc, #264]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b40      	ldr	r3, [pc, #256]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	61bb      	str	r3, [r7, #24]
 8001dcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	4b3c      	ldr	r3, [pc, #240]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a3b      	ldr	r2, [pc, #236]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a34      	ldr	r2, [pc, #208]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a2d      	ldr	r2, [pc, #180]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b2b      	ldr	r3, [pc, #172]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a26      	ldr	r2, [pc, #152]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	4b20      	ldr	r3, [pc, #128]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <MX_GPIO_Init+0x128>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8001e5a:	2323      	movs	r3, #35	; 0x23
 8001e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_GPIO_Init+0x12c>)
 8001e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 031c 	add.w	r3, r7, #28
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4817      	ldr	r0, [pc, #92]	; (8001ecc <MX_GPIO_Init+0x130>)
 8001e6e:	f001 fcaf 	bl	80037d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_GPIO_Init+0x12c>)
 8001e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7e:	f107 031c 	add.w	r3, r7, #28
 8001e82:	4619      	mov	r1, r3
 8001e84:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <MX_GPIO_Init+0x134>)
 8001e86:	f001 fca3 	bl	80037d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	2006      	movs	r0, #6
 8001e90:	f001 f951 	bl	8003136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001e94:	2006      	movs	r0, #6
 8001e96:	f001 f96a 	bl	800316e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2007      	movs	r0, #7
 8001ea0:	f001 f949 	bl	8003136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ea4:	2007      	movs	r0, #7
 8001ea6:	f001 f962 	bl	800316e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2017      	movs	r0, #23
 8001eb0:	f001 f941 	bl	8003136 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eb4:	2017      	movs	r0, #23
 8001eb6:	f001 f95a 	bl	800316e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eba:	bf00      	nop
 8001ebc:	3730      	adds	r7, #48	; 0x30
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	10310000 	.word	0x10310000
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	40020800 	.word	0x40020800

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001edc:	e7fe      	b.n	8001edc <Error_Handler+0x8>
	...

08001ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <HAL_MspInit+0x48>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_MspInit+0x48>)
 8001ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_MspInit+0x48>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001efe:	607b      	str	r3, [r7, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <HAL_MspInit+0x48>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a07      	ldr	r2, [pc, #28]	; (8001f28 <HAL_MspInit+0x48>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_MspInit+0x48>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bc80      	pop	{r7}
 8001f26:	4770      	bx	lr
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a4d      	ldr	r2, [pc, #308]	; (8002080 <HAL_ADC_MspInit+0x154>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	f040 8094 	bne.w	8002078 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f50:	2300      	movs	r3, #0
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	4a4a      	ldr	r2, [pc, #296]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001f60:	4b48      	ldr	r3, [pc, #288]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	4b44      	ldr	r3, [pc, #272]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	4a43      	ldr	r2, [pc, #268]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7c:	4b41      	ldr	r3, [pc, #260]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	4a3c      	ldr	r2, [pc, #240]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6313      	str	r3, [r2, #48]	; 0x30
 8001f98:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	4b36      	ldr	r3, [pc, #216]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	4a35      	ldr	r2, [pc, #212]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001fae:	f043 0302 	orr.w	r3, r3, #2
 8001fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb4:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_ADC_MspInit+0x158>)
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001fc0:	2338      	movs	r3, #56	; 0x38
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	482d      	ldr	r0, [pc, #180]	; (8002088 <HAL_ADC_MspInit+0x15c>)
 8001fd4:	f001 fbfc 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001fd8:	2318      	movs	r3, #24
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 031c 	add.w	r3, r7, #28
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4828      	ldr	r0, [pc, #160]	; (800208c <HAL_ADC_MspInit+0x160>)
 8001fec:	f001 fbf0 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffc:	f107 031c 	add.w	r3, r7, #28
 8002000:	4619      	mov	r1, r3
 8002002:	4823      	ldr	r0, [pc, #140]	; (8002090 <HAL_ADC_MspInit+0x164>)
 8002004:	f001 fbe4 	bl	80037d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_ADC_MspInit+0x168>)
 800200a:	4a23      	ldr	r2, [pc, #140]	; (8002098 <HAL_ADC_MspInit+0x16c>)
 800200c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800200e:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_ADC_MspInit+0x168>)
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_ADC_MspInit+0x168>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <HAL_ADC_MspInit+0x168>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_ADC_MspInit+0x168>)
 8002022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002026:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <HAL_ADC_MspInit+0x168>)
 800202a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800202e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002030:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_ADC_MspInit+0x168>)
 8002032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002036:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_ADC_MspInit+0x168>)
 800203a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800203e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_ADC_MspInit+0x168>)
 8002042:	2200      	movs	r2, #0
 8002044:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_ADC_MspInit+0x168>)
 8002048:	2200      	movs	r2, #0
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800204c:	4811      	ldr	r0, [pc, #68]	; (8002094 <HAL_ADC_MspInit+0x168>)
 800204e:	f001 f8a9 	bl	80031a4 <HAL_DMA_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002058:	f7ff ff3c 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_ADC_MspInit+0x168>)
 8002060:	639a      	str	r2, [r3, #56]	; 0x38
 8002062:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <HAL_ADC_MspInit+0x168>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002068:	2200      	movs	r2, #0
 800206a:	2100      	movs	r1, #0
 800206c:	2012      	movs	r0, #18
 800206e:	f001 f862 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002072:	2012      	movs	r0, #18
 8002074:	f001 f87b 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002078:	bf00      	nop
 800207a:	3730      	adds	r7, #48	; 0x30
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40012000 	.word	0x40012000
 8002084:	40023800 	.word	0x40023800
 8002088:	40020800 	.word	0x40020800
 800208c:	40020000 	.word	0x40020000
 8002090:	40020400 	.word	0x40020400
 8002094:	20000238 	.word	0x20000238
 8002098:	40026410 	.word	0x40026410

0800209c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a44      	ldr	r2, [pc, #272]	; (80021cc <HAL_I2C_MspInit+0x130>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	f040 8082 	bne.w	80021c4 <HAL_I2C_MspInit+0x128>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <HAL_I2C_MspInit+0x134>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c8:	4a41      	ldr	r2, [pc, #260]	; (80021d0 <HAL_I2C_MspInit+0x134>)
 80020ca:	f043 0304 	orr.w	r3, r3, #4
 80020ce:	6313      	str	r3, [r2, #48]	; 0x30
 80020d0:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <HAL_I2C_MspInit+0x134>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_I2C_MspInit+0x134>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4a3a      	ldr	r2, [pc, #232]	; (80021d0 <HAL_I2C_MspInit+0x134>)
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	6313      	str	r3, [r2, #48]	; 0x30
 80020ec:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <HAL_I2C_MspInit+0x134>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fe:	2312      	movs	r3, #18
 8002100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800210a:	2304      	movs	r3, #4
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	482f      	ldr	r0, [pc, #188]	; (80021d4 <HAL_I2C_MspInit+0x138>)
 8002116:	f001 fb5b 	bl	80037d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800211a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800211e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002120:	2312      	movs	r3, #18
 8002122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002128:	2303      	movs	r3, #3
 800212a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800212c:	2304      	movs	r3, #4
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	4828      	ldr	r0, [pc, #160]	; (80021d8 <HAL_I2C_MspInit+0x13c>)
 8002138:	f001 fb4a 	bl	80037d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <HAL_I2C_MspInit+0x134>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <HAL_I2C_MspInit+0x134>)
 8002146:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_I2C_MspInit+0x134>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 DMA Init */
    /* I2C3_TX Init */
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8002158:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_I2C_MspInit+0x140>)
 800215a:	4a21      	ldr	r2, [pc, #132]	; (80021e0 <HAL_I2C_MspInit+0x144>)
 800215c:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 800215e:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <HAL_I2C_MspInit+0x140>)
 8002160:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002164:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_I2C_MspInit+0x140>)
 8002168:	2240      	movs	r2, #64	; 0x40
 800216a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_I2C_MspInit+0x140>)
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <HAL_I2C_MspInit+0x140>)
 8002174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002178:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_I2C_MspInit+0x140>)
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002180:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_I2C_MspInit+0x140>)
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_I2C_MspInit+0x140>)
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_I2C_MspInit+0x140>)
 800218e:	2200      	movs	r2, #0
 8002190:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_I2C_MspInit+0x140>)
 8002194:	2200      	movs	r2, #0
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8002198:	4810      	ldr	r0, [pc, #64]	; (80021dc <HAL_I2C_MspInit+0x140>)
 800219a:	f001 f803 	bl	80031a4 <HAL_DMA_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_I2C_MspInit+0x10c>
    {
      Error_Handler();
 80021a4:	f7ff fe96 	bl	8001ed4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <HAL_I2C_MspInit+0x140>)
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
 80021ae:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_I2C_MspInit+0x140>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	2048      	movs	r0, #72	; 0x48
 80021ba:	f000 ffbc 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80021be:	2048      	movs	r0, #72	; 0x48
 80021c0:	f000 ffd5 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80021c4:	bf00      	nop
 80021c6:	3728      	adds	r7, #40	; 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40005c00 	.word	0x40005c00
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020000 	.word	0x40020000
 80021dc:	2000007c 	.word	0x2000007c
 80021e0:	40026070 	.word	0x40026070

080021e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2a      	ldr	r2, [pc, #168]	; (800229c <HAL_TIM_Base_MspInit+0xb8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d116      	bne.n	8002224 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_TIM_Base_MspInit+0xbc>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fe:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <HAL_TIM_Base_MspInit+0xbc>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6453      	str	r3, [r2, #68]	; 0x44
 8002206:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_TIM_Base_MspInit+0xbc>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002212:	2200      	movs	r2, #0
 8002214:	2100      	movs	r1, #0
 8002216:	2019      	movs	r0, #25
 8002218:	f000 ff8d 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800221c:	2019      	movs	r0, #25
 800221e:	f000 ffa6 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002222:	e036      	b.n	8002292 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1e      	ldr	r2, [pc, #120]	; (80022a4 <HAL_TIM_Base_MspInit+0xc0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d116      	bne.n	800225c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	4b1b      	ldr	r3, [pc, #108]	; (80022a0 <HAL_TIM_Base_MspInit+0xbc>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a1a      	ldr	r2, [pc, #104]	; (80022a0 <HAL_TIM_Base_MspInit+0xbc>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_TIM_Base_MspInit+0xbc>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	202d      	movs	r0, #45	; 0x2d
 8002250:	f000 ff71 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002254:	202d      	movs	r0, #45	; 0x2d
 8002256:	f000 ff8a 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 800225a:	e01a      	b.n	8002292 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM14)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <HAL_TIM_Base_MspInit+0xc4>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d115      	bne.n	8002292 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_TIM_Base_MspInit+0xbc>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	4a0c      	ldr	r2, [pc, #48]	; (80022a0 <HAL_TIM_Base_MspInit+0xbc>)
 8002270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002274:	6413      	str	r3, [r2, #64]	; 0x40
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_TIM_Base_MspInit+0xbc>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	202d      	movs	r0, #45	; 0x2d
 8002288:	f000 ff55 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800228c:	202d      	movs	r0, #45	; 0x2d
 800228e:	f000 ff6e 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40010000 	.word	0x40010000
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40010400 	.word	0x40010400
 80022a8:	40002000 	.word	0x40002000

080022ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	; 0x28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_TIM_Encoder_MspInit+0x94>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d134      	bne.n	8002338 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_TIM_Encoder_MspInit+0x98>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_TIM_Encoder_MspInit+0x98>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6413      	str	r3, [r2, #64]	; 0x40
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_TIM_Encoder_MspInit+0x98>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_TIM_Encoder_MspInit+0x98>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_TIM_Encoder_MspInit+0x98>)
 80022f4:	f043 0308 	orr.w	r3, r3, #8
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_TIM_Encoder_MspInit+0x98>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002306:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800230a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002310:	2301      	movs	r3, #1
 8002312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002318:	2302      	movs	r3, #2
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4619      	mov	r1, r3
 8002322:	4809      	ldr	r0, [pc, #36]	; (8002348 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002324:	f001 fa54 	bl	80037d0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002328:	2200      	movs	r2, #0
 800232a:	2100      	movs	r1, #0
 800232c:	201e      	movs	r0, #30
 800232e:	f000 ff02 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002332:	201e      	movs	r0, #30
 8002334:	f000 ff1b 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002338:	bf00      	nop
 800233a:	3728      	adds	r7, #40	; 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40000800 	.word	0x40000800
 8002344:	40023800 	.word	0x40023800
 8002348:	40020c00 	.word	0x40020c00

0800234c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a33      	ldr	r2, [pc, #204]	; (8002438 <HAL_TIM_MspPostInit+0xec>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d11f      	bne.n	80023ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b32      	ldr	r3, [pc, #200]	; (800243c <HAL_TIM_MspPostInit+0xf0>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a31      	ldr	r2, [pc, #196]	; (800243c <HAL_TIM_MspPostInit+0xf0>)
 8002378:	f043 0310 	orr.w	r3, r3, #16
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_TIM_MspPostInit+0xf0>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800238a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800239c:	2301      	movs	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	4826      	ldr	r0, [pc, #152]	; (8002440 <HAL_TIM_MspPostInit+0xf4>)
 80023a8:	f001 fa12 	bl	80037d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80023ac:	e040      	b.n	8002430 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a24      	ldr	r2, [pc, #144]	; (8002444 <HAL_TIM_MspPostInit+0xf8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d13b      	bne.n	8002430 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <HAL_TIM_MspPostInit+0xf0>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <HAL_TIM_MspPostInit+0xf0>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6313      	str	r3, [r2, #48]	; 0x30
 80023c8:	4b1c      	ldr	r3, [pc, #112]	; (800243c <HAL_TIM_MspPostInit+0xf0>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d4:	2300      	movs	r3, #0
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_TIM_MspPostInit+0xf0>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	4a17      	ldr	r2, [pc, #92]	; (800243c <HAL_TIM_MspPostInit+0xf0>)
 80023de:	f043 0304 	orr.w	r3, r3, #4
 80023e2:	6313      	str	r3, [r2, #48]	; 0x30
 80023e4:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_TIM_MspPostInit+0xf0>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2300      	movs	r3, #0
 80023fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002400:	2303      	movs	r3, #3
 8002402:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	480f      	ldr	r0, [pc, #60]	; (8002448 <HAL_TIM_MspPostInit+0xfc>)
 800240c:	f001 f9e0 	bl	80037d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002410:	2340      	movs	r3, #64	; 0x40
 8002412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241c:	2300      	movs	r3, #0
 800241e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002420:	2303      	movs	r3, #3
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	4808      	ldr	r0, [pc, #32]	; (800244c <HAL_TIM_MspPostInit+0x100>)
 800242c:	f001 f9d0 	bl	80037d0 <HAL_GPIO_Init>
}
 8002430:	bf00      	nop
 8002432:	3728      	adds	r7, #40	; 0x28
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40010000 	.word	0x40010000
 800243c:	40023800 	.word	0x40023800
 8002440:	40021000 	.word	0x40021000
 8002444:	40010400 	.word	0x40010400
 8002448:	40020000 	.word	0x40020000
 800244c:	40020800 	.word	0x40020800

08002450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	; 0x28
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 0314 	add.w	r3, r7, #20
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_UART_MspInit+0x94>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d134      	bne.n	80024dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <HAL_UART_MspInit+0x98>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <HAL_UART_MspInit+0x98>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_UART_MspInit+0x98>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_UART_MspInit+0x98>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_UART_MspInit+0x98>)
 8002498:	f043 0308 	orr.w	r3, r3, #8
 800249c:	6313      	str	r3, [r2, #48]	; 0x30
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_UART_MspInit+0x98>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	2302      	movs	r3, #2
 80024b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b8:	2303      	movs	r3, #3
 80024ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024bc:	2307      	movs	r3, #7
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	4619      	mov	r1, r3
 80024c6:	4809      	ldr	r0, [pc, #36]	; (80024ec <HAL_UART_MspInit+0x9c>)
 80024c8:	f001 f982 	bl	80037d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80024cc:	2200      	movs	r2, #0
 80024ce:	2100      	movs	r1, #0
 80024d0:	2027      	movs	r0, #39	; 0x27
 80024d2:	f000 fe30 	bl	8003136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024d6:	2027      	movs	r0, #39	; 0x27
 80024d8:	f000 fe49 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024dc:	bf00      	nop
 80024de:	3728      	adds	r7, #40	; 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40004800 	.word	0x40004800
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40020c00 	.word	0x40020c00

080024f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <NMI_Handler+0x4>

080024f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024fa:	e7fe      	b.n	80024fa <HardFault_Handler+0x4>

080024fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <MemManage_Handler+0x4>

08002502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002506:	e7fe      	b.n	8002506 <BusFault_Handler+0x4>

08002508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800250c:	e7fe      	b.n	800250c <UsageFault_Handler+0x4>

0800250e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002536:	f000 f919 	bl	800276c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}

0800253e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002542:	2001      	movs	r0, #1
 8002544:	f001 fafa 	bl	8003b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002550:	2002      	movs	r0, #2
 8002552:	f001 faf3 	bl	8003b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <DMA1_Stream4_IRQHandler+0x10>)
 8002562:	f000 feef 	bl	8003344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	2000007c 	.word	0x2000007c

08002570 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <ADC_IRQHandler+0x10>)
 8002576:	f000 f97c 	bl	8002872 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200001f0 	.word	0x200001f0

08002584 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002588:	2020      	movs	r0, #32
 800258a:	f001 fad7 	bl	8003b3c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800258e:	2080      	movs	r0, #128	; 0x80
 8002590:	f001 fad4 	bl	8003b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800259e:	f003 fd75 	bl	800608c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000298 	.word	0x20000298

080025ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <TIM4_IRQHandler+0x10>)
 80025b2:	f003 fd6b 	bl	800608c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000170 	.word	0x20000170

080025c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <USART3_IRQHandler+0x10>)
 80025c6:	f004 fcff 	bl	8006fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200001b0 	.word	0x200001b0

080025d4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80025d8:	4803      	ldr	r0, [pc, #12]	; (80025e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 80025da:	f003 fd57 	bl	800608c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80025de:	4803      	ldr	r0, [pc, #12]	; (80025ec <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 80025e0:	f003 fd54 	bl	800608c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000130 	.word	0x20000130
 80025ec:	200002d8 	.word	0x200002d8

080025f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025f4:	4802      	ldr	r0, [pc, #8]	; (8002600 <DMA2_Stream0_IRQHandler+0x10>)
 80025f6:	f000 fea5 	bl	8003344 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000238 	.word	0x20000238

08002604 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <I2C3_EV_IRQHandler+0x10>)
 800260a:	f001 fbf3 	bl	8003df4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200000dc 	.word	0x200000dc

08002618 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <SystemInit+0x50>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a11      	ldr	r2, [pc, #68]	; (8002668 <SystemInit+0x50>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002628:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <SystemInit+0x50>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <SystemInit+0x50>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a0d      	ldr	r2, [pc, #52]	; (8002668 <SystemInit+0x50>)
 8002634:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <SystemInit+0x50>)
 8002640:	4a0a      	ldr	r2, [pc, #40]	; (800266c <SystemInit+0x54>)
 8002642:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <SystemInit+0x50>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a07      	ldr	r2, [pc, #28]	; (8002668 <SystemInit+0x50>)
 800264a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <SystemInit+0x50>)
 8002652:	2200      	movs	r2, #0
 8002654:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <SystemInit+0x58>)
 8002658:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800265c:	609a      	str	r2, [r3, #8]
#endif
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	40023800 	.word	0x40023800
 800266c:	24003010 	.word	0x24003010
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002678:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800267a:	e003      	b.n	8002684 <LoopCopyDataInit>

0800267c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800267e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002680:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002682:	3104      	adds	r1, #4

08002684 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002684:	480b      	ldr	r0, [pc, #44]	; (80026b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002688:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800268a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800268c:	d3f6      	bcc.n	800267c <CopyDataInit>
  ldr  r2, =_sbss
 800268e:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002690:	e002      	b.n	8002698 <LoopFillZerobss>

08002692 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002692:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002694:	f842 3b04 	str.w	r3, [r2], #4

08002698 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800269a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800269c:	d3f9      	bcc.n	8002692 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800269e:	f7ff ffbb 	bl	8002618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026a2:	f005 f85f 	bl	8007764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026a6:	f7ff f831 	bl	800170c <main>
  bx  lr
 80026aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80026b0:	08007804 	.word	0x08007804
  ldr  r0, =_sdata
 80026b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026b8:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80026bc:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80026c0:	2000031c 	.word	0x2000031c

080026c4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026c4:	e7fe      	b.n	80026c4 <CAN1_RX0_IRQHandler>
	...

080026c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026cc:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_Init+0x40>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0d      	ldr	r2, [pc, #52]	; (8002708 <HAL_Init+0x40>)
 80026d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_Init+0x40>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <HAL_Init+0x40>)
 80026de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026e4:	4b08      	ldr	r3, [pc, #32]	; (8002708 <HAL_Init+0x40>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a07      	ldr	r2, [pc, #28]	; (8002708 <HAL_Init+0x40>)
 80026ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026f0:	2003      	movs	r0, #3
 80026f2:	f000 fd15 	bl	8003120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026f6:	200f      	movs	r0, #15
 80026f8:	f000 f808 	bl	800270c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80026fc:	f7ff fbf0 	bl	8001ee0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40023c00 	.word	0x40023c00

0800270c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002714:	4b12      	ldr	r3, [pc, #72]	; (8002760 <HAL_InitTick+0x54>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <HAL_InitTick+0x58>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4619      	mov	r1, r3
 800271e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002722:	fbb3 f3f1 	udiv	r3, r3, r1
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	4618      	mov	r0, r3
 800272c:	f000 fd2d 	bl	800318a <HAL_SYSTICK_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e00e      	b.n	8002758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b0f      	cmp	r3, #15
 800273e:	d80a      	bhi.n	8002756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002740:	2200      	movs	r2, #0
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	f000 fcf5 	bl	8003136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800274c:	4a06      	ldr	r2, [pc, #24]	; (8002768 <HAL_InitTick+0x5c>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	e000      	b.n	8002758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
}
 8002758:	4618      	mov	r0, r3
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	2000000c 	.word	0x2000000c
 8002764:	20000014 	.word	0x20000014
 8002768:	20000010 	.word	0x20000010

0800276c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_IncTick+0x1c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_IncTick+0x20>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4413      	add	r3, r2
 800277c:	4a03      	ldr	r2, [pc, #12]	; (800278c <HAL_IncTick+0x20>)
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	20000014 	.word	0x20000014
 800278c:	20000318 	.word	0x20000318

08002790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return uwTick;
 8002794:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <HAL_GetTick+0x10>)
 8002796:	681b      	ldr	r3, [r3, #0]
}
 8002798:	4618      	mov	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	20000318 	.word	0x20000318

080027a4 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ac:	f7ff fff0 	bl	8002790 <HAL_GetTick>
 80027b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d005      	beq.n	80027ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_Delay+0x44>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ca:	bf00      	nop
 80027cc:	f7ff ffe0 	bl	8002790 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d8f7      	bhi.n	80027cc <HAL_Delay+0x28>
  {
  }
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000014 	.word	0x20000014

080027ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e033      	b.n	800286a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fb8e 	bl	8001f2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002832:	f023 0302 	bic.w	r3, r3, #2
 8002836:	f043 0202 	orr.w	r2, r3, #2
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 fa94 	bl	8002d6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	f043 0201 	orr.w	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
 800285a:	e001      	b.n	8002860 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002868:	7bfb      	ldrb	r3, [r7, #15]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b02      	cmp	r3, #2
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0320 	and.w	r3, r3, #32
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	bf0c      	ite	eq
 80028a6:	2301      	moveq	r3, #1
 80028a8:	2300      	movne	r3, #0
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d049      	beq.n	8002948 <HAL_ADC_IRQHandler+0xd6>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d046      	beq.n	8002948 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d105      	bne.n	80028d2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d12b      	bne.n	8002938 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d127      	bne.n	8002938 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002900:	2b00      	cmp	r3, #0
 8002902:	d119      	bne.n	8002938 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0220 	bic.w	r2, r2, #32
 8002912:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d105      	bne.n	8002938 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f043 0201 	orr.w	r2, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f8db 	bl	8002af4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f06f 0212 	mvn.w	r2, #18
 8002946:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b04      	cmp	r3, #4
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002968:	2b80      	cmp	r3, #128	; 0x80
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d057      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x1b8>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d054      	beq.n	8002a2a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	2b00      	cmp	r3, #0
 800298a:	d105      	bne.n	8002998 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d139      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d12b      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d124      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d11d      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d119      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 faaa 	bl	8002f74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 020c 	mvn.w	r2, #12
 8002a28:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	bf0c      	ite	eq
 8002a4e:	2301      	moveq	r3, #1
 8002a50:	2300      	movne	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d017      	beq.n	8002a8c <HAL_ADC_IRQHandler+0x21a>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d014      	beq.n	8002a8c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d10d      	bne.n	8002a8c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f842 	bl	8002b06 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f06f 0201 	mvn.w	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d015      	beq.n	8002aec <HAL_ADC_IRQHandler+0x27a>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f043 0202 	orr.w	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0220 	mvn.w	r2, #32
 8002ada:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f81b 	bl	8002b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f06f 0220 	mvn.w	r2, #32
 8002aea:	601a      	str	r2, [r3, #0]
  }
}
 8002aec:	bf00      	nop
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
	...

08002b2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1c>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e103      	b.n	8002d50 <HAL_ADC_ConfigChannel+0x224>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b09      	cmp	r3, #9
 8002b56:	d925      	bls.n	8002ba4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68d9      	ldr	r1, [r3, #12]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	461a      	mov	r2, r3
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3b1e      	subs	r3, #30
 8002b6e:	2207      	movs	r2, #7
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	43da      	mvns	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68d9      	ldr	r1, [r3, #12]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	4603      	mov	r3, r0
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4403      	add	r3, r0
 8002b96:	3b1e      	subs	r3, #30
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	e022      	b.n	8002bea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6919      	ldr	r1, [r3, #16]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	2207      	movs	r2, #7
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6919      	ldr	r1, [r3, #16]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	4618      	mov	r0, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4403      	add	r3, r0
 8002be0:	409a      	lsls	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b06      	cmp	r3, #6
 8002bf0:	d824      	bhi.n	8002c3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	3b05      	subs	r3, #5
 8002c04:	221f      	movs	r2, #31
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	400a      	ands	r2, r1
 8002c12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	4618      	mov	r0, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b05      	subs	r3, #5
 8002c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	635a      	str	r2, [r3, #52]	; 0x34
 8002c3a:	e04c      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b0c      	cmp	r3, #12
 8002c42:	d824      	bhi.n	8002c8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	3b23      	subs	r3, #35	; 0x23
 8002c56:	221f      	movs	r2, #31
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	400a      	ands	r2, r1
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	4618      	mov	r0, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b23      	subs	r3, #35	; 0x23
 8002c80:	fa00 f203 	lsl.w	r2, r0, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c8c:	e023      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b41      	subs	r3, #65	; 0x41
 8002ca0:	221f      	movs	r2, #31
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43da      	mvns	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	400a      	ands	r2, r1
 8002cae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3b41      	subs	r3, #65	; 0x41
 8002cca:	fa00 f203 	lsl.w	r2, r0, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a20      	ldr	r2, [pc, #128]	; (8002d5c <HAL_ADC_ConfigChannel+0x230>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d109      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1c8>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b12      	cmp	r3, #18
 8002ce6:	d105      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002ce8:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <HAL_ADC_ConfigChannel+0x234>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	4a1c      	ldr	r2, [pc, #112]	; (8002d60 <HAL_ADC_ConfigChannel+0x234>)
 8002cee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cf2:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <HAL_ADC_ConfigChannel+0x230>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d123      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x21a>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2b10      	cmp	r3, #16
 8002d04:	d003      	beq.n	8002d0e <HAL_ADC_ConfigChannel+0x1e2>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b11      	cmp	r3, #17
 8002d0c:	d11b      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002d0e:	4b14      	ldr	r3, [pc, #80]	; (8002d60 <HAL_ADC_ConfigChannel+0x234>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <HAL_ADC_ConfigChannel+0x234>)
 8002d14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d18:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d111      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d22:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_ADC_ConfigChannel+0x238>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a10      	ldr	r2, [pc, #64]	; (8002d68 <HAL_ADC_ConfigChannel+0x23c>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	0c9a      	lsrs	r2, r3, #18
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002d38:	e002      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f9      	bne.n	8002d3a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40012000 	.word	0x40012000
 8002d60:	40012300 	.word	0x40012300
 8002d64:	2000000c 	.word	0x2000000c
 8002d68:	431bde83 	.word	0x431bde83

08002d6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002d74:	4b7d      	ldr	r3, [pc, #500]	; (8002f6c <ADC_Init+0x200>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a7c      	ldr	r2, [pc, #496]	; (8002f6c <ADC_Init+0x200>)
 8002d7a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002d7e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002d80:	4b7a      	ldr	r3, [pc, #488]	; (8002f6c <ADC_Init+0x200>)
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4978      	ldr	r1, [pc, #480]	; (8002f6c <ADC_Init+0x200>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6859      	ldr	r1, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	021a      	lsls	r2, r3, #8
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002de2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6899      	ldr	r1, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	4a5d      	ldr	r2, [pc, #372]	; (8002f70 <ADC_Init+0x204>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d022      	beq.n	8002e46 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6899      	ldr	r1, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	e00f      	b.n	8002e66 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0202 	bic.w	r2, r2, #2
 8002e74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6899      	ldr	r1, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	005a      	lsls	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d027      	beq.n	8002ee2 <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ea0:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002eb0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002ebc:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	fa92 f2a2 	rbit	r2, r2
 8002ec4:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	fab2 f282 	clz	r2, r2
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	fa03 f102 	lsl.w	r1, r3, r2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	e007      	b.n	8002ef2 <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	051a      	lsls	r2, r3, #20
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6899      	ldr	r1, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	025a      	lsls	r2, r3, #9
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6899      	ldr	r1, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	029a      	lsls	r2, r3, #10
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40012300 	.word	0x40012300
 8002f70:	0f000001 	.word	0x0f000001

08002f74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr
	...

08002f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fba:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <__NVIC_SetPriorityGrouping+0x44>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	60d3      	str	r3, [r2, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	f003 0307 	and.w	r3, r3, #7
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	db0b      	blt.n	8003016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	f003 021f 	and.w	r2, r3, #31
 8003004:	4906      	ldr	r1, [pc, #24]	; (8003020 <__NVIC_EnableIRQ+0x34>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	095b      	lsrs	r3, r3, #5
 800300c:	2001      	movs	r0, #1
 800300e:	fa00 f202 	lsl.w	r2, r0, r2
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr
 8003020:	e000e100 	.word	0xe000e100

08003024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	4603      	mov	r3, r0
 800302c:	6039      	str	r1, [r7, #0]
 800302e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	2b00      	cmp	r3, #0
 8003036:	db0a      	blt.n	800304e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	490c      	ldr	r1, [pc, #48]	; (8003070 <__NVIC_SetPriority+0x4c>)
 800303e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003042:	0112      	lsls	r2, r2, #4
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	440b      	add	r3, r1
 8003048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800304c:	e00a      	b.n	8003064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	4908      	ldr	r1, [pc, #32]	; (8003074 <__NVIC_SetPriority+0x50>)
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	3b04      	subs	r3, #4
 800305c:	0112      	lsls	r2, r2, #4
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	440b      	add	r3, r1
 8003062:	761a      	strb	r2, [r3, #24]
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000e100 	.word	0xe000e100
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f1c3 0307 	rsb	r3, r3, #7
 8003092:	2b04      	cmp	r3, #4
 8003094:	bf28      	it	cs
 8003096:	2304      	movcs	r3, #4
 8003098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3304      	adds	r3, #4
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d902      	bls.n	80030a8 <NVIC_EncodePriority+0x30>
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3b03      	subs	r3, #3
 80030a6:	e000      	b.n	80030aa <NVIC_EncodePriority+0x32>
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	fa02 f303 	lsl.w	r3, r2, r3
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	401a      	ands	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c0:	f04f 31ff 	mov.w	r1, #4294967295
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43d9      	mvns	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	4313      	orrs	r3, r2
         );
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3724      	adds	r7, #36	; 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ec:	d301      	bcc.n	80030f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ee:	2301      	movs	r3, #1
 80030f0:	e00f      	b.n	8003112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <SysTick_Config+0x40>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030fa:	210f      	movs	r1, #15
 80030fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003100:	f7ff ff90 	bl	8003024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <SysTick_Config+0x40>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <SysTick_Config+0x40>)
 800310c:	2207      	movs	r2, #7
 800310e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	e000e010 	.word	0xe000e010

08003120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff ff2d 	bl	8002f88 <__NVIC_SetPriorityGrouping>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	4603      	mov	r3, r0
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
 8003142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003148:	f7ff ff42 	bl	8002fd0 <__NVIC_GetPriorityGrouping>
 800314c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	6978      	ldr	r0, [r7, #20]
 8003154:	f7ff ff90 	bl	8003078 <NVIC_EncodePriority>
 8003158:	4602      	mov	r2, r0
 800315a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800315e:	4611      	mov	r1, r2
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff ff5f 	bl	8003024 <__NVIC_SetPriority>
}
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff ff35 	bl	8002fec <__NVIC_EnableIRQ>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b082      	sub	sp, #8
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff ffa2 	bl	80030dc <SysTick_Config>
 8003198:	4603      	mov	r3, r0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031b0:	f7ff faee 	bl	8002790 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e099      	b.n	80032f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e0:	e00f      	b.n	8003202 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e2:	f7ff fad5 	bl	8002790 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	d908      	bls.n	8003202 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2203      	movs	r2, #3
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e078      	b.n	80032f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1e8      	bne.n	80031e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_DMA_Init+0x158>)
 800321c:	4013      	ands	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800322e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800323a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	2b04      	cmp	r3, #4
 800325a:	d107      	bne.n	800326c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	4313      	orrs	r3, r2
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f023 0307 	bic.w	r3, r3, #7
 8003282:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2b04      	cmp	r3, #4
 8003294:	d117      	bne.n	80032c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fa17 	bl	80036dc <DMA_CheckFifoParam>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2240      	movs	r2, #64	; 0x40
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032c2:	2301      	movs	r3, #1
 80032c4:	e016      	b.n	80032f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f9d0 	bl	8003674 <DMA_CalcBaseAndBitshift>
 80032d4:	4603      	mov	r3, r0
 80032d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	223f      	movs	r2, #63	; 0x3f
 80032de:	409a      	lsls	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	f010803f 	.word	0xf010803f

08003300 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d004      	beq.n	800331e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e00c      	b.n	8003338 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2205      	movs	r2, #5
 8003322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr
	...

08003344 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003350:	4b92      	ldr	r3, [pc, #584]	; (800359c <HAL_DMA_IRQHandler+0x258>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a92      	ldr	r2, [pc, #584]	; (80035a0 <HAL_DMA_IRQHandler+0x25c>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0a9b      	lsrs	r3, r3, #10
 800335c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003362:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336e:	2208      	movs	r2, #8
 8003370:	409a      	lsls	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01a      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d013      	beq.n	80033b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f022 0204 	bic.w	r2, r2, #4
 8003396:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339c:	2208      	movs	r2, #8
 800339e:	409a      	lsls	r2, r3
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a8:	f043 0201 	orr.w	r2, r3, #1
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	2201      	movs	r2, #1
 80033b6:	409a      	lsls	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d012      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	2201      	movs	r2, #1
 80033d4:	409a      	lsls	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033de:	f043 0202 	orr.w	r2, r3, #2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	2204      	movs	r2, #4
 80033ec:	409a      	lsls	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00b      	beq.n	800341c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003408:	2204      	movs	r2, #4
 800340a:	409a      	lsls	r2, r3
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003414:	f043 0204 	orr.w	r2, r3, #4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003420:	2210      	movs	r2, #16
 8003422:	409a      	lsls	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4013      	ands	r3, r2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d043      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d03c      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	2210      	movs	r2, #16
 8003440:	409a      	lsls	r2, r3
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d018      	beq.n	8003486 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d108      	bne.n	8003474 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d024      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
 8003472:	e01f      	b.n	80034b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01b      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
 8003484:	e016      	b.n	80034b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0208 	bic.w	r2, r2, #8
 80034a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	2220      	movs	r2, #32
 80034ba:	409a      	lsls	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f000 808e 	beq.w	80035e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8086 	beq.w	80035e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	2220      	movs	r2, #32
 80034dc:	409a      	lsls	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d136      	bne.n	800355c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0216 	bic.w	r2, r2, #22
 80034fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695a      	ldr	r2, [r3, #20]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800350c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_DMA_IRQHandler+0x1da>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800351a:	2b00      	cmp	r3, #0
 800351c:	d007      	beq.n	800352e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0208 	bic.w	r2, r2, #8
 800352c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	223f      	movs	r2, #63	; 0x3f
 8003534:	409a      	lsls	r2, r3
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800354e:	2b00      	cmp	r3, #0
 8003550:	d07d      	beq.n	800364e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
        }
        return;
 800355a:	e078      	b.n	800364e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d01c      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d108      	bne.n	800358a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	2b00      	cmp	r3, #0
 800357e:	d030      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
 8003588:	e02b      	b.n	80035e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d027      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
 800359a:	e022      	b.n	80035e2 <HAL_DMA_IRQHandler+0x29e>
 800359c:	2000000c 	.word	0x2000000c
 80035a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0210 	bic.w	r2, r2, #16
 80035c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d032      	beq.n	8003650 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d022      	beq.n	800363c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2205      	movs	r2, #5
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3301      	adds	r3, #1
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	429a      	cmp	r2, r3
 8003618:	d307      	bcc.n	800362a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f2      	bne.n	800360e <HAL_DMA_IRQHandler+0x2ca>
 8003628:	e000      	b.n	800362c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800362a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4798      	blx	r3
 800364c:	e000      	b.n	8003650 <HAL_DMA_IRQHandler+0x30c>
        return;
 800364e:	bf00      	nop
    }
  }
}
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop

08003658 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003666:	b2db      	uxtb	r3, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
	...

08003674 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	3b10      	subs	r3, #16
 8003684:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <DMA_CalcBaseAndBitshift+0x60>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d909      	bls.n	80036b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036aa:	f023 0303 	bic.w	r3, r3, #3
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	659a      	str	r2, [r3, #88]	; 0x58
 80036b4:	e007      	b.n	80036c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bc80      	pop	{r7}
 80036d2:	4770      	bx	lr
 80036d4:	aaaaaaab 	.word	0xaaaaaaab
 80036d8:	080077ec 	.word	0x080077ec

080036dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d11f      	bne.n	8003736 <DMA_CheckFifoParam+0x5a>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d856      	bhi.n	80037aa <DMA_CheckFifoParam+0xce>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <DMA_CheckFifoParam+0x28>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003715 	.word	0x08003715
 8003708:	08003727 	.word	0x08003727
 800370c:	08003715 	.word	0x08003715
 8003710:	080037ab 	.word	0x080037ab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d046      	beq.n	80037ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003724:	e043      	b.n	80037ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800372e:	d140      	bne.n	80037b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003734:	e03d      	b.n	80037b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373e:	d121      	bne.n	8003784 <DMA_CheckFifoParam+0xa8>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b03      	cmp	r3, #3
 8003744:	d837      	bhi.n	80037b6 <DMA_CheckFifoParam+0xda>
 8003746:	a201      	add	r2, pc, #4	; (adr r2, 800374c <DMA_CheckFifoParam+0x70>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	0800375d 	.word	0x0800375d
 8003750:	08003763 	.word	0x08003763
 8003754:	0800375d 	.word	0x0800375d
 8003758:	08003775 	.word	0x08003775
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e030      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d025      	beq.n	80037ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003772:	e022      	b.n	80037ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800377c:	d11f      	bne.n	80037be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003782:	e01c      	b.n	80037be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d903      	bls.n	8003792 <DMA_CheckFifoParam+0xb6>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d003      	beq.n	8003798 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003790:	e018      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
      break;
 8003796:	e015      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00e      	beq.n	80037c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      break;
 80037a8:	e00b      	b.n	80037c2 <DMA_CheckFifoParam+0xe6>
      break;
 80037aa:	bf00      	nop
 80037ac:	e00a      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
 80037b0:	e008      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
 80037b4:	e006      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
 80037b8:	e004      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
 80037bc:	e002      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80037be:	bf00      	nop
 80037c0:	e000      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037c2:	bf00      	nop
    }
  } 
  
  return status; 
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037de:	e16f      	b.n	8003ac0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ec:	4013      	ands	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8161 	beq.w	8003aba <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d00b      	beq.n	8003818 <HAL_GPIO_Init+0x48>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d007      	beq.n	8003818 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800380c:	2b11      	cmp	r3, #17
 800380e:	d003      	beq.n	8003818 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b12      	cmp	r3, #18
 8003816:	d130      	bne.n	800387a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	2203      	movs	r2, #3
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800384e:	2201      	movs	r2, #1
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa02 f303 	lsl.w	r3, r2, r3
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 0201 	and.w	r2, r3, #1
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	2203      	movs	r2, #3
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0xea>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b12      	cmp	r3, #18
 80038b8:	d123      	bne.n	8003902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	08da      	lsrs	r2, r3, #3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	3208      	adds	r2, #8
 80038c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	220f      	movs	r2, #15
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43db      	mvns	r3, r3
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4013      	ands	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	08da      	lsrs	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3208      	adds	r2, #8
 80038fc:	6939      	ldr	r1, [r7, #16]
 80038fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	2203      	movs	r2, #3
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	4013      	ands	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 80bb 	beq.w	8003aba <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	4b64      	ldr	r3, [pc, #400]	; (8003adc <HAL_GPIO_Init+0x30c>)
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	4a63      	ldr	r2, [pc, #396]	; (8003adc <HAL_GPIO_Init+0x30c>)
 800394e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003952:	6453      	str	r3, [r2, #68]	; 0x44
 8003954:	4b61      	ldr	r3, [pc, #388]	; (8003adc <HAL_GPIO_Init+0x30c>)
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003960:	4a5f      	ldr	r2, [pc, #380]	; (8003ae0 <HAL_GPIO_Init+0x310>)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	089b      	lsrs	r3, r3, #2
 8003966:	3302      	adds	r3, #2
 8003968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	220f      	movs	r2, #15
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a57      	ldr	r2, [pc, #348]	; (8003ae4 <HAL_GPIO_Init+0x314>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d031      	beq.n	80039f0 <HAL_GPIO_Init+0x220>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a56      	ldr	r2, [pc, #344]	; (8003ae8 <HAL_GPIO_Init+0x318>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d02b      	beq.n	80039ec <HAL_GPIO_Init+0x21c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a55      	ldr	r2, [pc, #340]	; (8003aec <HAL_GPIO_Init+0x31c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d025      	beq.n	80039e8 <HAL_GPIO_Init+0x218>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a54      	ldr	r2, [pc, #336]	; (8003af0 <HAL_GPIO_Init+0x320>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d01f      	beq.n	80039e4 <HAL_GPIO_Init+0x214>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a53      	ldr	r2, [pc, #332]	; (8003af4 <HAL_GPIO_Init+0x324>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d019      	beq.n	80039e0 <HAL_GPIO_Init+0x210>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_GPIO_Init+0x328>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d013      	beq.n	80039dc <HAL_GPIO_Init+0x20c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a51      	ldr	r2, [pc, #324]	; (8003afc <HAL_GPIO_Init+0x32c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00d      	beq.n	80039d8 <HAL_GPIO_Init+0x208>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a50      	ldr	r2, [pc, #320]	; (8003b00 <HAL_GPIO_Init+0x330>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d007      	beq.n	80039d4 <HAL_GPIO_Init+0x204>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a4f      	ldr	r2, [pc, #316]	; (8003b04 <HAL_GPIO_Init+0x334>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_GPIO_Init+0x200>
 80039cc:	2308      	movs	r3, #8
 80039ce:	e010      	b.n	80039f2 <HAL_GPIO_Init+0x222>
 80039d0:	2309      	movs	r3, #9
 80039d2:	e00e      	b.n	80039f2 <HAL_GPIO_Init+0x222>
 80039d4:	2307      	movs	r3, #7
 80039d6:	e00c      	b.n	80039f2 <HAL_GPIO_Init+0x222>
 80039d8:	2306      	movs	r3, #6
 80039da:	e00a      	b.n	80039f2 <HAL_GPIO_Init+0x222>
 80039dc:	2305      	movs	r3, #5
 80039de:	e008      	b.n	80039f2 <HAL_GPIO_Init+0x222>
 80039e0:	2304      	movs	r3, #4
 80039e2:	e006      	b.n	80039f2 <HAL_GPIO_Init+0x222>
 80039e4:	2303      	movs	r3, #3
 80039e6:	e004      	b.n	80039f2 <HAL_GPIO_Init+0x222>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e002      	b.n	80039f2 <HAL_GPIO_Init+0x222>
 80039ec:	2301      	movs	r3, #1
 80039ee:	e000      	b.n	80039f2 <HAL_GPIO_Init+0x222>
 80039f0:	2300      	movs	r3, #0
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	f002 0203 	and.w	r2, r2, #3
 80039f8:	0092      	lsls	r2, r2, #2
 80039fa:	4093      	lsls	r3, r2
 80039fc:	461a      	mov	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a04:	4936      	ldr	r1, [pc, #216]	; (8003ae0 <HAL_GPIO_Init+0x310>)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	089b      	lsrs	r3, r3, #2
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a12:	4b3d      	ldr	r3, [pc, #244]	; (8003b08 <HAL_GPIO_Init+0x338>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a36:	4a34      	ldr	r2, [pc, #208]	; (8003b08 <HAL_GPIO_Init+0x338>)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003a3c:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <HAL_GPIO_Init+0x338>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a60:	4a29      	ldr	r2, [pc, #164]	; (8003b08 <HAL_GPIO_Init+0x338>)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a66:	4b28      	ldr	r3, [pc, #160]	; (8003b08 <HAL_GPIO_Init+0x338>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4013      	ands	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a8a:	4a1f      	ldr	r2, [pc, #124]	; (8003b08 <HAL_GPIO_Init+0x338>)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <HAL_GPIO_Init+0x338>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <HAL_GPIO_Init+0x338>)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	3301      	adds	r3, #1
 8003abe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f47f ae88 	bne.w	80037e0 <HAL_GPIO_Init+0x10>
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	40020000 	.word	0x40020000
 8003ae8:	40020400 	.word	0x40020400
 8003aec:	40020800 	.word	0x40020800
 8003af0:	40020c00 	.word	0x40020c00
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40021400 	.word	0x40021400
 8003afc:	40021800 	.word	0x40021800
 8003b00:	40021c00 	.word	0x40021c00
 8003b04:	40022000 	.word	0x40022000
 8003b08:	40013c00 	.word	0x40013c00

08003b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	887b      	ldrh	r3, [r7, #2]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
 8003b28:	e001      	b.n	8003b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
	...

08003b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b46:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	88fb      	ldrh	r3, [r7, #6]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b52:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b58:	88fb      	ldrh	r3, [r7, #6]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd fcb8 	bl	80014d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b60:	bf00      	nop
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40013c00 	.word	0x40013c00

08003b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e12b      	b.n	8003dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe fa82 	bl	800209c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f002 f83a 	bl	8005c48 <HAL_RCC_GetPCLK1Freq>
 8003bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a81      	ldr	r2, [pc, #516]	; (8003de0 <HAL_I2C_Init+0x274>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d807      	bhi.n	8003bf0 <HAL_I2C_Init+0x84>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4a80      	ldr	r2, [pc, #512]	; (8003de4 <HAL_I2C_Init+0x278>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	bf94      	ite	ls
 8003be8:	2301      	movls	r3, #1
 8003bea:	2300      	movhi	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e006      	b.n	8003bfe <HAL_I2C_Init+0x92>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a7d      	ldr	r2, [pc, #500]	; (8003de8 <HAL_I2C_Init+0x27c>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bf94      	ite	ls
 8003bf8:	2301      	movls	r3, #1
 8003bfa:	2300      	movhi	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e0e7      	b.n	8003dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a78      	ldr	r2, [pc, #480]	; (8003dec <HAL_I2C_Init+0x280>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	0c9b      	lsrs	r3, r3, #18
 8003c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a6a      	ldr	r2, [pc, #424]	; (8003de0 <HAL_I2C_Init+0x274>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d802      	bhi.n	8003c40 <HAL_I2C_Init+0xd4>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	e009      	b.n	8003c54 <HAL_I2C_Init+0xe8>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c46:	fb02 f303 	mul.w	r3, r2, r3
 8003c4a:	4a69      	ldr	r2, [pc, #420]	; (8003df0 <HAL_I2C_Init+0x284>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	3301      	adds	r3, #1
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	495c      	ldr	r1, [pc, #368]	; (8003de0 <HAL_I2C_Init+0x274>)
 8003c70:	428b      	cmp	r3, r1
 8003c72:	d819      	bhi.n	8003ca8 <HAL_I2C_Init+0x13c>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	1e59      	subs	r1, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c82:	1c59      	adds	r1, r3, #1
 8003c84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c88:	400b      	ands	r3, r1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_I2C_Init+0x138>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1e59      	subs	r1, r3, #1
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca2:	e051      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	e04f      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d111      	bne.n	8003cd4 <HAL_I2C_Init+0x168>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	440b      	add	r3, r1
 8003cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf0c      	ite	eq
 8003ccc:	2301      	moveq	r3, #1
 8003cce:	2300      	movne	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e012      	b.n	8003cfa <HAL_I2C_Init+0x18e>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1e58      	subs	r0, r3, #1
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6859      	ldr	r1, [r3, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	0099      	lsls	r1, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cea:	3301      	adds	r3, #1
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	bf0c      	ite	eq
 8003cf4:	2301      	moveq	r3, #1
 8003cf6:	2300      	movne	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Init+0x196>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e022      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10e      	bne.n	8003d28 <HAL_I2C_Init+0x1bc>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1e58      	subs	r0, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	440b      	add	r3, r1
 8003d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d26:	e00f      	b.n	8003d48 <HAL_I2C_Init+0x1dc>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e58      	subs	r0, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	0099      	lsls	r1, r3, #2
 8003d38:	440b      	add	r3, r1
 8003d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	6809      	ldr	r1, [r1, #0]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6911      	ldr	r1, [r2, #16]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68d2      	ldr	r2, [r2, #12]
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695a      	ldr	r2, [r3, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	000186a0 	.word	0x000186a0
 8003de4:	001e847f 	.word	0x001e847f
 8003de8:	003d08ff 	.word	0x003d08ff
 8003dec:	431bde83 	.word	0x431bde83
 8003df0:	10624dd3 	.word	0x10624dd3

08003df4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e14:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	2b10      	cmp	r3, #16
 8003e22:	d003      	beq.n	8003e2c <HAL_I2C_EV_IRQHandler+0x38>
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	f040 80b6 	bne.w	8003f98 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10d      	bne.n	8003e62 <HAL_I2C_EV_IRQHandler+0x6e>
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003e4c:	d003      	beq.n	8003e56 <HAL_I2C_EV_IRQHandler+0x62>
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e54:	d101      	bne.n	8003e5a <HAL_I2C_EV_IRQHandler+0x66>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_I2C_EV_IRQHandler+0x68>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	f000 8127 	beq.w	80040b0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00c      	beq.n	8003e86 <HAL_I2C_EV_IRQHandler+0x92>
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	0a5b      	lsrs	r3, r3, #9
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d006      	beq.n	8003e86 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f001 fa88 	bl	800538e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fc6a 	bl	8004758 <I2C_Master_SB>
 8003e84:	e087      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	08db      	lsrs	r3, r3, #3
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_I2C_EV_IRQHandler+0xb2>
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	0a5b      	lsrs	r3, r3, #9
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fcdf 	bl	8004862 <I2C_Master_ADD10>
 8003ea4:	e077      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_I2C_EV_IRQHandler+0xd2>
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	0a5b      	lsrs	r3, r3, #9
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fcf8 	bl	80048b4 <I2C_Master_ADDR>
 8003ec4:	e067      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	089b      	lsrs	r3, r3, #2
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d030      	beq.n	8003f34 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ee0:	f000 80e8 	beq.w	80040b4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	09db      	lsrs	r3, r3, #7
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00f      	beq.n	8003f10 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	0a9b      	lsrs	r3, r3, #10
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_I2C_EV_IRQHandler+0x11c>
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f937 	bl	800417c <I2C_MasterTransmit_TXE>
 8003f0e:	e042      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	089b      	lsrs	r3, r3, #2
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80cb 	beq.w	80040b4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	0a5b      	lsrs	r3, r3, #9
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80c4 	beq.w	80040b4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f9c1 	bl	80042b4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f32:	e0bf      	b.n	80040b4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f42:	f000 80b7 	beq.w	80040b4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	099b      	lsrs	r3, r3, #6
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00f      	beq.n	8003f72 <HAL_I2C_EV_IRQHandler+0x17e>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	0a9b      	lsrs	r3, r3, #10
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <HAL_I2C_EV_IRQHandler+0x17e>
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fa88 	bl	8004480 <I2C_MasterReceive_RXNE>
 8003f70:	e011      	b.n	8003f96 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 809a 	beq.w	80040b4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	0a5b      	lsrs	r3, r3, #9
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8093 	beq.w	80040b4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 faf8 	bl	8004584 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f94:	e08e      	b.n	80040b4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003f96:	e08d      	b.n	80040b4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d004      	beq.n	8003faa <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	e007      	b.n	8003fba <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d012      	beq.n	8003fec <HAL_I2C_EV_IRQHandler+0x1f8>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	0a5b      	lsrs	r3, r3, #9
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00c      	beq.n	8003fec <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003fe2:	69b9      	ldr	r1, [r7, #24]
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 feb1 	bl	8004d4c <I2C_Slave_ADDR>
 8003fea:	e066      	b.n	80040ba <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	091b      	lsrs	r3, r3, #4
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <HAL_I2C_EV_IRQHandler+0x218>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	0a5b      	lsrs	r3, r3, #9
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fee5 	bl	8004dd4 <I2C_Slave_STOPF>
 800400a:	e056      	b.n	80040ba <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800400c:	7bbb      	ldrb	r3, [r7, #14]
 800400e:	2b21      	cmp	r3, #33	; 0x21
 8004010:	d002      	beq.n	8004018 <HAL_I2C_EV_IRQHandler+0x224>
 8004012:	7bbb      	ldrb	r3, [r7, #14]
 8004014:	2b29      	cmp	r3, #41	; 0x29
 8004016:	d125      	bne.n	8004064 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	09db      	lsrs	r3, r3, #7
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00f      	beq.n	8004044 <HAL_I2C_EV_IRQHandler+0x250>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	0a9b      	lsrs	r3, r3, #10
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d009      	beq.n	8004044 <HAL_I2C_EV_IRQHandler+0x250>
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d103      	bne.n	8004044 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fdc9 	bl	8004bd4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004042:	e039      	b.n	80040b8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d033      	beq.n	80040b8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	0a5b      	lsrs	r3, r3, #9
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02d      	beq.n	80040b8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fdf6 	bl	8004c4e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004062:	e029      	b.n	80040b8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00f      	beq.n	8004090 <HAL_I2C_EV_IRQHandler+0x29c>
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	0a9b      	lsrs	r3, r3, #10
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <HAL_I2C_EV_IRQHandler+0x29c>
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d103      	bne.n	8004090 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fe00 	bl	8004c8e <I2C_SlaveReceive_RXNE>
 800408e:	e014      	b.n	80040ba <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	089b      	lsrs	r3, r3, #2
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00e      	beq.n	80040ba <HAL_I2C_EV_IRQHandler+0x2c6>
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	0a5b      	lsrs	r3, r3, #9
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fe2e 	bl	8004d0a <I2C_SlaveReceive_BTF>
 80040ae:	e004      	b.n	80040ba <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80040b0:	bf00      	nop
 80040b2:	e002      	b.n	80040ba <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040b8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]
 8004114:	4613      	mov	r3, r2
 8004116:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	bc80      	pop	{r7}
 8004132:	4770      	bx	lr

08004134 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr

08004146 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr

08004158 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800418a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004192:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d150      	bne.n	8004244 <I2C_MasterTransmit_TXE+0xc8>
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	2b21      	cmp	r3, #33	; 0x21
 80041a6:	d14d      	bne.n	8004244 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d01d      	beq.n	80041ea <I2C_MasterTransmit_TXE+0x6e>
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d01a      	beq.n	80041ea <I2C_MasterTransmit_TXE+0x6e>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041ba:	d016      	beq.n	80041ea <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041ca:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2211      	movs	r2, #17
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff ff6c 	bl	80040c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041e8:	e060      	b.n	80042ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041f8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004208:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d107      	bne.n	8004234 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ff81 	bl	8004134 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004232:	e03b      	b.n	80042ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff ff3f 	bl	80040c0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004242:	e033      	b.n	80042ac <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b21      	cmp	r3, #33	; 0x21
 8004248:	d005      	beq.n	8004256 <I2C_MasterTransmit_TXE+0xda>
 800424a:	7bbb      	ldrb	r3, [r7, #14]
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d12d      	bne.n	80042ac <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b22      	cmp	r3, #34	; 0x22
 8004254:	d12a      	bne.n	80042ac <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d108      	bne.n	8004272 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800426e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004270:	e01c      	b.n	80042ac <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b40      	cmp	r3, #64	; 0x40
 800427c:	d103      	bne.n	8004286 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f898 	bl	80043b4 <I2C_MemoryTransmit_TXE_BTF>
}
 8004284:	e012      	b.n	80042ac <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	781a      	ldrb	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042aa:	e7ff      	b.n	80042ac <I2C_MasterTransmit_TXE+0x130>
 80042ac:	bf00      	nop
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b21      	cmp	r3, #33	; 0x21
 80042cc:	d165      	bne.n	800439a <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d012      	beq.n	80042fe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	781a      	ldrb	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80042fc:	e056      	b.n	80043ac <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b08      	cmp	r3, #8
 8004302:	d01d      	beq.n	8004340 <I2C_MasterTransmit_BTF+0x8c>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b20      	cmp	r3, #32
 8004308:	d01a      	beq.n	8004340 <I2C_MasterTransmit_BTF+0x8c>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004310:	d016      	beq.n	8004340 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004320:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2211      	movs	r2, #17
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff fec1 	bl	80040c0 <HAL_I2C_MasterTxCpltCallback>
}
 800433e:	e035      	b.n	80043ac <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800434e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	d107      	bne.n	800438a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7ff fed6 	bl	8004134 <HAL_I2C_MemTxCpltCallback>
}
 8004388:	e010      	b.n	80043ac <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff fe94 	bl	80040c0 <HAL_I2C_MasterTxCpltCallback>
}
 8004398:	e008      	b.n	80043ac <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d102      	bne.n	80043ac <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f804 	bl	80043b4 <I2C_MemoryTransmit_TXE_BTF>
}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11d      	bne.n	8004400 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d10b      	bne.n	80043e4 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043dc:	1c9a      	adds	r2, r3, #2
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80043e2:	e048      	b.n	8004476 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	121b      	asrs	r3, r3, #8
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80043fe:	e03a      	b.n	8004476 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10b      	bne.n	8004420 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440c:	b2da      	uxtb	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800441e:	e02a      	b.n	8004476 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004424:	2b02      	cmp	r3, #2
 8004426:	d126      	bne.n	8004476 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b22      	cmp	r3, #34	; 0x22
 8004432:	d108      	bne.n	8004446 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004442:	601a      	str	r2, [r3, #0]
}
 8004444:	e017      	b.n	8004476 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b21      	cmp	r3, #33	; 0x21
 8004450:	d111      	bne.n	8004476 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	781a      	ldrb	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b01      	subs	r3, #1
 8004470:	b29a      	uxth	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b22      	cmp	r3, #34	; 0x22
 8004492:	d173      	bne.n	800457c <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d920      	bls.n	80044e4 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d154      	bne.n	800457c <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044e0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80044e2:	e04b      	b.n	800457c <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d047      	beq.n	800457c <I2C_MasterReceive_RXNE+0xfc>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d002      	beq.n	80044f8 <I2C_MasterReceive_RXNE+0x78>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d141      	bne.n	800457c <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004506:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004516:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b40      	cmp	r3, #64	; 0x40
 8004550:	d10a      	bne.n	8004568 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff fdf0 	bl	8004146 <HAL_I2C_MemRxCpltCallback>
}
 8004566:	e009      	b.n	800457c <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2212      	movs	r2, #18
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7ff fdab 	bl	80040d2 <HAL_I2C_MasterRxCpltCallback>
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b04      	cmp	r3, #4
 800459a:	d11b      	bne.n	80045d4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045aa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80045d2:	e0bd      	b.n	8004750 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d129      	bne.n	8004632 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d00a      	beq.n	800460a <I2C_MasterReceive_BTF+0x86>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d007      	beq.n	800460a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004608:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004630:	e08e      	b.n	8004750 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d176      	bne.n	800472a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d002      	beq.n	8004648 <I2C_MasterReceive_BTF+0xc4>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b10      	cmp	r3, #16
 8004646:	d108      	bne.n	800465a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	e019      	b.n	800468e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b04      	cmp	r3, #4
 800465e:	d002      	beq.n	8004666 <I2C_MasterReceive_BTF+0xe2>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d108      	bne.n	8004678 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	e00a      	b.n	800468e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2b10      	cmp	r3, #16
 800467c:	d007      	beq.n	800468e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800468c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80046e8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b40      	cmp	r3, #64	; 0x40
 80046fc:	d10a      	bne.n	8004714 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff fd1a 	bl	8004146 <HAL_I2C_MemRxCpltCallback>
}
 8004712:	e01d      	b.n	8004750 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2212      	movs	r2, #18
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff fcd5 	bl	80040d2 <HAL_I2C_MasterRxCpltCallback>
}
 8004728:	e012      	b.n	8004750 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	b2d2      	uxtb	r2, r2
 8004736:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d117      	bne.n	800479c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004770:	2b00      	cmp	r3, #0
 8004772:	d109      	bne.n	8004788 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004778:	b2db      	uxtb	r3, r3
 800477a:	461a      	mov	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004784:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004786:	e067      	b.n	8004858 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478c:	b2db      	uxtb	r3, r3
 800478e:	f043 0301 	orr.w	r3, r3, #1
 8004792:	b2da      	uxtb	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	611a      	str	r2, [r3, #16]
}
 800479a:	e05d      	b.n	8004858 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a4:	d133      	bne.n	800480e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b21      	cmp	r3, #33	; 0x21
 80047b0:	d109      	bne.n	80047c6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047c2:	611a      	str	r2, [r3, #16]
 80047c4:	e008      	b.n	80047d8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <I2C_Master_SB+0x92>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d108      	bne.n	80047fc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d032      	beq.n	8004858 <I2C_Master_SB+0x100>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d02d      	beq.n	8004858 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800480a:	605a      	str	r2, [r3, #4]
}
 800480c:	e024      	b.n	8004858 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10e      	bne.n	8004834 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	b29b      	uxth	r3, r3
 800481c:	11db      	asrs	r3, r3, #7
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 0306 	and.w	r3, r3, #6
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f063 030f 	orn	r3, r3, #15
 800482a:	b2da      	uxtb	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	611a      	str	r2, [r3, #16]
}
 8004832:	e011      	b.n	8004858 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004838:	2b01      	cmp	r3, #1
 800483a:	d10d      	bne.n	8004858 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004840:	b29b      	uxth	r3, r3
 8004842:	11db      	asrs	r3, r3, #7
 8004844:	b2db      	uxtb	r3, r3
 8004846:	f003 0306 	and.w	r3, r3, #6
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f063 030e 	orn	r3, r3, #14
 8004850:	b2da      	uxtb	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	611a      	str	r2, [r3, #16]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr

08004862 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	b2da      	uxtb	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	2b00      	cmp	r3, #0
 800487c:	d103      	bne.n	8004886 <I2C_Master_ADD10+0x24>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	2b00      	cmp	r3, #0
 8004884:	d011      	beq.n	80048aa <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <I2C_Master_ADD10+0x38>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a8:	605a      	str	r2, [r3, #4]
    }
  }
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bc80      	pop	{r7}
 80048b2:	4770      	bx	lr

080048b4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b091      	sub	sp, #68	; 0x44
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b22      	cmp	r3, #34	; 0x22
 80048dc:	f040 8169 	bne.w	8004bb2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10f      	bne.n	8004908 <I2C_Master_ADDR+0x54>
 80048e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80048ec:	2b40      	cmp	r3, #64	; 0x40
 80048ee:	d10b      	bne.n	8004908 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f0:	2300      	movs	r3, #0
 80048f2:	633b      	str	r3, [r7, #48]	; 0x30
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695b      	ldr	r3, [r3, #20]
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	633b      	str	r3, [r7, #48]	; 0x30
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	e160      	b.n	8004bca <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800490c:	2b00      	cmp	r3, #0
 800490e:	d11d      	bne.n	800494c <I2C_Master_ADDR+0x98>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004918:	d118      	bne.n	800494c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800491a:	2300      	movs	r3, #0
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800493e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	651a      	str	r2, [r3, #80]	; 0x50
 800494a:	e13e      	b.n	8004bca <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d113      	bne.n	800497e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004956:	2300      	movs	r3, #0
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	62bb      	str	r3, [r7, #40]	; 0x28
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e115      	b.n	8004baa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	f040 808a 	bne.w	8004a9e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004990:	d137      	bne.n	8004a02 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b0:	d113      	bne.n	80049da <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049c0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c2:	2300      	movs	r3, #0
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	e0e7      	b.n	8004baa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049da:	2300      	movs	r3, #0
 80049dc:	623b      	str	r3, [r7, #32]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	623b      	str	r3, [r7, #32]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	623b      	str	r3, [r7, #32]
 80049ee:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e0d3      	b.n	8004baa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d02e      	beq.n	8004a66 <I2C_Master_ADDR+0x1b2>
 8004a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d02b      	beq.n	8004a66 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a10:	2b12      	cmp	r3, #18
 8004a12:	d102      	bne.n	8004a1a <I2C_Master_ADDR+0x166>
 8004a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d125      	bne.n	8004a66 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d00e      	beq.n	8004a3e <I2C_Master_ADDR+0x18a>
 8004a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d00b      	beq.n	8004a3e <I2C_Master_ADDR+0x18a>
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d008      	beq.n	8004a3e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e007      	b.n	8004a4e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	e0a1      	b.n	8004baa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a74:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e085      	b.n	8004baa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d14d      	bne.n	8004b44 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d016      	beq.n	8004adc <I2C_Master_ADDR+0x228>
 8004aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d013      	beq.n	8004adc <I2C_Master_ADDR+0x228>
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d010      	beq.n	8004adc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	e007      	b.n	8004aec <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aea:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004afa:	d117      	bne.n	8004b2c <I2C_Master_ADDR+0x278>
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b02:	d00b      	beq.n	8004b1c <I2C_Master_ADDR+0x268>
 8004b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d008      	beq.n	8004b1c <I2C_Master_ADDR+0x268>
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d005      	beq.n	8004b1c <I2C_Master_ADDR+0x268>
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	2b10      	cmp	r3, #16
 8004b14:	d002      	beq.n	8004b1c <I2C_Master_ADDR+0x268>
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d107      	bne.n	8004b2c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b2a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	e032      	b.n	8004baa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b52:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b62:	d117      	bne.n	8004b94 <I2C_Master_ADDR+0x2e0>
 8004b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b6a:	d00b      	beq.n	8004b84 <I2C_Master_ADDR+0x2d0>
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d008      	beq.n	8004b84 <I2C_Master_ADDR+0x2d0>
 8004b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d005      	beq.n	8004b84 <I2C_Master_ADDR+0x2d0>
 8004b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7a:	2b10      	cmp	r3, #16
 8004b7c:	d002      	beq.n	8004b84 <I2C_Master_ADDR+0x2d0>
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d107      	bne.n	8004b94 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b92:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b94:	2300      	movs	r3, #0
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	613b      	str	r3, [r7, #16]
 8004ba8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004bb0:	e00b      	b.n	8004bca <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
}
 8004bc8:	e7ff      	b.n	8004bca <I2C_Master_ADDR+0x316>
 8004bca:	bf00      	nop
 8004bcc:	3744      	adds	r7, #68	; 0x44
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr

08004bd4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d02b      	beq.n	8004c46 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	781a      	ldrb	r2, [r3, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d114      	bne.n	8004c46 <I2C_SlaveTransmit_TXE+0x72>
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b29      	cmp	r3, #41	; 0x29
 8004c20:	d111      	bne.n	8004c46 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c30:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2221      	movs	r2, #33	; 0x21
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2228      	movs	r2, #40	; 0x28
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff fa4f 	bl	80040e4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c46:	bf00      	nop
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b083      	sub	sp, #12
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d011      	beq.n	8004c84 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	1c5a      	adds	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr

08004c8e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d02c      	beq.n	8004d02 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d114      	bne.n	8004d02 <I2C_SlaveReceive_RXNE+0x74>
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b2a      	cmp	r3, #42	; 0x2a
 8004cdc:	d111      	bne.n	8004d02 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2222      	movs	r2, #34	; 0x22
 8004cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2228      	movs	r2, #40	; 0x28
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff f9fa 	bl	80040f6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d012      	beq.n	8004d42 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691a      	ldr	r2, [r3, #16]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d66:	2b28      	cmp	r3, #40	; 0x28
 8004d68:	d127      	bne.n	8004dba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d78:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	089b      	lsrs	r3, r3, #2
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004d86:	2301      	movs	r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	09db      	lsrs	r3, r3, #7
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d103      	bne.n	8004d9e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	81bb      	strh	r3, [r7, #12]
 8004d9c:	e002      	b.n	8004da4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699b      	ldr	r3, [r3, #24]
 8004da2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004dac:	89ba      	ldrh	r2, [r7, #12]
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	4619      	mov	r1, r3
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff f9a8 	bl	8004108 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004db8:	e008      	b.n	8004dcc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f06f 0202 	mvn.w	r2, #2
 8004dc2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004dcc:	bf00      	nop
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004df2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004df4:	2300      	movs	r3, #0
 8004df6:	60bb      	str	r3, [r7, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	60bb      	str	r3, [r7, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e20:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e30:	d172      	bne.n	8004f18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b22      	cmp	r3, #34	; 0x22
 8004e36:	d002      	beq.n	8004e3e <I2C_Slave_STOPF+0x6a>
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e3c:	d135      	bne.n	8004eaa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f043 0204 	orr.w	r2, r3, #4
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe fbee 	bl	8003658 <HAL_DMA_GetState>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d049      	beq.n	8004f16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	4a69      	ldr	r2, [pc, #420]	; (800502c <I2C_Slave_STOPF+0x258>)
 8004e88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe fa36 	bl	8003300 <HAL_DMA_Abort_IT>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d03d      	beq.n	8004f16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ea8:	e035      	b.n	8004f16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f043 0204 	orr.w	r2, r3, #4
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004edc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fbb8 	bl	8003658 <HAL_DMA_GetState>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d014      	beq.n	8004f18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef2:	4a4e      	ldr	r2, [pc, #312]	; (800502c <I2C_Slave_STOPF+0x258>)
 8004ef4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7fe fa00 	bl	8003300 <HAL_DMA_Abort_IT>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f10:	4610      	mov	r0, r2
 8004f12:	4798      	blx	r3
 8004f14:	e000      	b.n	8004f18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d03e      	beq.n	8004fa0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d112      	bne.n	8004f56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	691a      	ldr	r2, [r3, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d112      	bne.n	8004f8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d005      	beq.n	8004fa0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	f043 0204 	orr.w	r2, r3, #4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f843 	bl	8005034 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004fae:	e039      	b.n	8005024 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004fb4:	d109      	bne.n	8004fca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2228      	movs	r2, #40	; 0x28
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff f896 	bl	80040f6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b28      	cmp	r3, #40	; 0x28
 8004fd4:	d111      	bne.n	8004ffa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a15      	ldr	r2, [pc, #84]	; (8005030 <I2C_Slave_STOPF+0x25c>)
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff f895 	bl	8004122 <HAL_I2C_ListenCpltCallback>
}
 8004ff8:	e014      	b.n	8005024 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	2b22      	cmp	r3, #34	; 0x22
 8005000:	d002      	beq.n	8005008 <I2C_Slave_STOPF+0x234>
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b22      	cmp	r3, #34	; 0x22
 8005006:	d10d      	bne.n	8005024 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff f869 	bl	80040f6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	08005291 	.word	0x08005291
 8005030:	ffff0000 	.word	0xffff0000

08005034 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005042:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b10      	cmp	r3, #16
 800504e:	d10a      	bne.n	8005066 <I2C_ITError+0x32>
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	2b22      	cmp	r3, #34	; 0x22
 8005054:	d107      	bne.n	8005066 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005064:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800506c:	2b28      	cmp	r3, #40	; 0x28
 800506e:	d107      	bne.n	8005080 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2228      	movs	r2, #40	; 0x28
 800507a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800507e:	e015      	b.n	80050ac <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800508a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800508e:	d006      	beq.n	800509e <I2C_ITError+0x6a>
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b60      	cmp	r3, #96	; 0x60
 8005094:	d003      	beq.n	800509e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ba:	d162      	bne.n	8005182 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d020      	beq.n	800511c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050de:	4a6a      	ldr	r2, [pc, #424]	; (8005288 <I2C_ITError+0x254>)
 80050e0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe f90a 	bl	8003300 <HAL_DMA_Abort_IT>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8089 	beq.w	8005206 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0201 	bic.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005116:	4610      	mov	r0, r2
 8005118:	4798      	blx	r3
 800511a:	e074      	b.n	8005206 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	4a59      	ldr	r2, [pc, #356]	; (8005288 <I2C_ITError+0x254>)
 8005122:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe f8e9 	bl	8003300 <HAL_DMA_Abort_IT>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d068      	beq.n	8005206 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b40      	cmp	r3, #64	; 0x40
 8005140:	d10b      	bne.n	800515a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800517c:	4610      	mov	r0, r2
 800517e:	4798      	blx	r3
 8005180:	e041      	b.n	8005206 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b60      	cmp	r3, #96	; 0x60
 800518c:	d125      	bne.n	80051da <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b40      	cmp	r3, #64	; 0x40
 80051a8:	d10b      	bne.n	80051c2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fe ffc9 	bl	800416a <HAL_I2C_AbortCpltCallback>
 80051d8:	e015      	b.n	8005206 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d10b      	bne.n	8005200 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fe ffa9 	bl	8004158 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10e      	bne.n	8005234 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005226:	2b00      	cmp	r3, #0
 8005228:	d104      	bne.n	8005234 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005242:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800524a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b04      	cmp	r3, #4
 8005256:	d113      	bne.n	8005280 <I2C_ITError+0x24c>
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	2b28      	cmp	r3, #40	; 0x28
 800525c:	d110      	bne.n	8005280 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a0a      	ldr	r2, [pc, #40]	; (800528c <I2C_ITError+0x258>)
 8005262:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fe ff51 	bl	8004122 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	08005291 	.word	0x08005291
 800528c:	ffff0000 	.word	0xffff0000

08005290 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a4:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b2:	2200      	movs	r2, #0
 80052b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c2:	2200      	movs	r2, #0
 80052c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d003      	beq.n	80052ec <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e8:	2200      	movs	r2, #0
 80052ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	2200      	movs	r2, #0
 80052fa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b60      	cmp	r3, #96	; 0x60
 8005316:	d10e      	bne.n	8005336 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2220      	movs	r2, #32
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f7fe ff1b 	bl	800416a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005334:	e027      	b.n	8005386 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005336:	7afb      	ldrb	r3, [r7, #11]
 8005338:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800533c:	2b28      	cmp	r3, #40	; 0x28
 800533e:	d117      	bne.n	8005370 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800535e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2228      	movs	r2, #40	; 0x28
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800536e:	e007      	b.n	8005380 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7fe fee9 	bl	8004158 <HAL_I2C_ErrorCallback>
}
 8005386:	bf00      	nop
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800538e:	b480      	push	{r7}
 8005390:	b083      	sub	sp, #12
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800539e:	d103      	bne.n	80053a8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80053a6:	e007      	b.n	80053b8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80053b0:	d102      	bne.n	80053b8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2208      	movs	r2, #8
 80053b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
	...

080053c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b090      	sub	sp, #64	; 0x40
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e253      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d050      	beq.n	8005484 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053e2:	4ba3      	ldr	r3, [pc, #652]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d00c      	beq.n	8005408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ee:	4ba0      	ldr	r3, [pc, #640]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d112      	bne.n	8005420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053fa:	4b9d      	ldr	r3, [pc, #628]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005406:	d10b      	bne.n	8005420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005408:	4b99      	ldr	r3, [pc, #612]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d036      	beq.n	8005482 <HAL_RCC_OscConfig+0xbe>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d132      	bne.n	8005482 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e22e      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	4b93      	ldr	r3, [pc, #588]	; (8005674 <HAL_RCC_OscConfig+0x2b0>)
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d013      	beq.n	800545a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005432:	f7fd f9ad 	bl	8002790 <HAL_GetTick>
 8005436:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800543a:	f7fd f9a9 	bl	8002790 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b64      	cmp	r3, #100	; 0x64
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e218      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544c:	4b88      	ldr	r3, [pc, #544]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x76>
 8005458:	e014      	b.n	8005484 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545a:	f7fd f999 	bl	8002790 <HAL_GetTick>
 800545e:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005462:	f7fd f995 	bl	8002790 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b64      	cmp	r3, #100	; 0x64
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e204      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005474:	4b7e      	ldr	r3, [pc, #504]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1f0      	bne.n	8005462 <HAL_RCC_OscConfig+0x9e>
 8005480:	e000      	b.n	8005484 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005482:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d077      	beq.n	8005580 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005490:	4b77      	ldr	r3, [pc, #476]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 030c 	and.w	r3, r3, #12
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800549c:	4b74      	ldr	r3, [pc, #464]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d126      	bne.n	80054f6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a8:	4b71      	ldr	r3, [pc, #452]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d120      	bne.n	80054f6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b4:	4b6e      	ldr	r3, [pc, #440]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_OscConfig+0x108>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d001      	beq.n	80054cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e1d8      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054cc:	4b68      	ldr	r3, [pc, #416]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	21f8      	movs	r1, #248	; 0xf8
 80054da:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054de:	fa91 f1a1 	rbit	r1, r1
 80054e2:	62f9      	str	r1, [r7, #44]	; 0x2c
  return result;
 80054e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054e6:	fab1 f181 	clz	r1, r1
 80054ea:	b2c9      	uxtb	r1, r1
 80054ec:	408b      	lsls	r3, r1
 80054ee:	4960      	ldr	r1, [pc, #384]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054f4:	e044      	b.n	8005580 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d02a      	beq.n	8005554 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054fe:	4b5e      	ldr	r3, [pc, #376]	; (8005678 <HAL_RCC_OscConfig+0x2b4>)
 8005500:	2201      	movs	r2, #1
 8005502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fd f944 	bl	8002790 <HAL_GetTick>
 8005508:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800550a:	e008      	b.n	800551e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800550c:	f7fd f940 	bl	8002790 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	2b02      	cmp	r3, #2
 8005518:	d901      	bls.n	800551e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e1af      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800551e:	4b54      	ldr	r3, [pc, #336]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0f0      	beq.n	800550c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800552a:	4b51      	ldr	r3, [pc, #324]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	21f8      	movs	r1, #248	; 0xf8
 8005538:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800553c:	fa91 f1a1 	rbit	r1, r1
 8005540:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8005542:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005544:	fab1 f181 	clz	r1, r1
 8005548:	b2c9      	uxtb	r1, r1
 800554a:	408b      	lsls	r3, r1
 800554c:	4948      	ldr	r1, [pc, #288]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 800554e:	4313      	orrs	r3, r2
 8005550:	600b      	str	r3, [r1, #0]
 8005552:	e015      	b.n	8005580 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005554:	4b48      	ldr	r3, [pc, #288]	; (8005678 <HAL_RCC_OscConfig+0x2b4>)
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800555a:	f7fd f919 	bl	8002790 <HAL_GetTick>
 800555e:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005562:	f7fd f915 	bl	8002790 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e184      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005574:	4b3e      	ldr	r3, [pc, #248]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d1f0      	bne.n	8005562 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d030      	beq.n	80055ee <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d016      	beq.n	80055c2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005594:	4b39      	ldr	r3, [pc, #228]	; (800567c <HAL_RCC_OscConfig+0x2b8>)
 8005596:	2201      	movs	r2, #1
 8005598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800559a:	f7fd f8f9 	bl	8002790 <HAL_GetTick>
 800559e:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055a2:	f7fd f8f5 	bl	8002790 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e164      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b4:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 80055b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x1de>
 80055c0:	e015      	b.n	80055ee <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c2:	4b2e      	ldr	r3, [pc, #184]	; (800567c <HAL_RCC_OscConfig+0x2b8>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c8:	f7fd f8e2 	bl	8002790 <HAL_GetTick>
 80055cc:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055d0:	f7fd f8de 	bl	8002790 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e14d      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e2:	4b23      	ldr	r3, [pc, #140]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f0      	bne.n	80055d0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 8088 	beq.w	800570c <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005602:	4b1b      	ldr	r3, [pc, #108]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d110      	bne.n	8005630 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800560e:	2300      	movs	r3, #0
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	4b17      	ldr	r3, [pc, #92]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	4a16      	ldr	r2, [pc, #88]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561c:	6413      	str	r3, [r2, #64]	; 0x40
 800561e:	4b14      	ldr	r3, [pc, #80]	; (8005670 <HAL_RCC_OscConfig+0x2ac>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005630:	4b13      	ldr	r3, [pc, #76]	; (8005680 <HAL_RCC_OscConfig+0x2bc>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a12      	ldr	r2, [pc, #72]	; (8005680 <HAL_RCC_OscConfig+0x2bc>)
 8005636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800563a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563c:	4b10      	ldr	r3, [pc, #64]	; (8005680 <HAL_RCC_OscConfig+0x2bc>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005644:	2b00      	cmp	r3, #0
 8005646:	d123      	bne.n	8005690 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <HAL_RCC_OscConfig+0x2bc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a0c      	ldr	r2, [pc, #48]	; (8005680 <HAL_RCC_OscConfig+0x2bc>)
 800564e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005654:	f7fd f89c 	bl	8002790 <HAL_GetTick>
 8005658:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565a:	e013      	b.n	8005684 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565c:	f7fd f898 	bl	8002790 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d90c      	bls.n	8005684 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e107      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
 800566e:	bf00      	nop
 8005670:	40023800 	.word	0x40023800
 8005674:	40023802 	.word	0x40023802
 8005678:	42470000 	.word	0x42470000
 800567c:	42470e80 	.word	0x42470e80
 8005680:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005684:	4b80      	ldr	r3, [pc, #512]	; (8005888 <HAL_RCC_OscConfig+0x4c4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0e5      	beq.n	800565c <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	4b7d      	ldr	r3, [pc, #500]	; (800588c <HAL_RCC_OscConfig+0x4c8>)
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d015      	beq.n	80056ce <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a2:	f7fd f875 	bl	8002790 <HAL_GetTick>
 80056a6:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a8:	e00a      	b.n	80056c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056aa:	f7fd f871 	bl	8002790 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e0de      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c0:	4b73      	ldr	r3, [pc, #460]	; (8005890 <HAL_RCC_OscConfig+0x4cc>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ee      	beq.n	80056aa <HAL_RCC_OscConfig+0x2e6>
 80056cc:	e014      	b.n	80056f8 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ce:	f7fd f85f 	bl	8002790 <HAL_GetTick>
 80056d2:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d4:	e00a      	b.n	80056ec <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d6:	f7fd f85b 	bl	8002790 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e0c8      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056ec:	4b68      	ldr	r3, [pc, #416]	; (8005890 <HAL_RCC_OscConfig+0x4cc>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1ee      	bne.n	80056d6 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d105      	bne.n	800570c <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005700:	4b63      	ldr	r3, [pc, #396]	; (8005890 <HAL_RCC_OscConfig+0x4cc>)
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	4a62      	ldr	r2, [pc, #392]	; (8005890 <HAL_RCC_OscConfig+0x4cc>)
 8005706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800570a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80b3 	beq.w	800587c <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005716:	4b5e      	ldr	r3, [pc, #376]	; (8005890 <HAL_RCC_OscConfig+0x4cc>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 030c 	and.w	r3, r3, #12
 800571e:	2b08      	cmp	r3, #8
 8005720:	d07d      	beq.n	800581e <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d162      	bne.n	80057f0 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572a:	4b5a      	ldr	r3, [pc, #360]	; (8005894 <HAL_RCC_OscConfig+0x4d0>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005730:	f7fd f82e 	bl	8002790 <HAL_GetTick>
 8005734:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005738:	f7fd f82a 	bl	8002790 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b64      	cmp	r3, #100	; 0x64
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e099      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574a:	4b51      	ldr	r3, [pc, #324]	; (8005890 <HAL_RCC_OscConfig+0x4cc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f0      	bne.n	8005738 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69da      	ldr	r2, [r3, #28]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8005768:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800576a:	6939      	ldr	r1, [r7, #16]
 800576c:	fa91 f1a1 	rbit	r1, r1
 8005770:	60f9      	str	r1, [r7, #12]
  return result;
 8005772:	68f9      	ldr	r1, [r7, #12]
 8005774:	fab1 f181 	clz	r1, r1
 8005778:	b2c9      	uxtb	r1, r1
 800577a:	408b      	lsls	r3, r1
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	085b      	lsrs	r3, r3, #1
 8005784:	3b01      	subs	r3, #1
 8005786:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800578a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578c:	69b9      	ldr	r1, [r7, #24]
 800578e:	fa91 f1a1 	rbit	r1, r1
 8005792:	6179      	str	r1, [r7, #20]
  return result;
 8005794:	6979      	ldr	r1, [r7, #20]
 8005796:	fab1 f181 	clz	r1, r1
 800579a:	b2c9      	uxtb	r1, r1
 800579c:	408b      	lsls	r3, r1
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80057a8:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057aa:	6a39      	ldr	r1, [r7, #32]
 80057ac:	fa91 f1a1 	rbit	r1, r1
 80057b0:	61f9      	str	r1, [r7, #28]
  return result;
 80057b2:	69f9      	ldr	r1, [r7, #28]
 80057b4:	fab1 f181 	clz	r1, r1
 80057b8:	b2c9      	uxtb	r1, r1
 80057ba:	408b      	lsls	r3, r1
 80057bc:	4934      	ldr	r1, [pc, #208]	; (8005890 <HAL_RCC_OscConfig+0x4cc>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c2:	4b34      	ldr	r3, [pc, #208]	; (8005894 <HAL_RCC_OscConfig+0x4d0>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c8:	f7fc ffe2 	bl	8002790 <HAL_GetTick>
 80057cc:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d0:	f7fc ffde 	bl	8002790 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b64      	cmp	r3, #100	; 0x64
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e04d      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e2:	4b2b      	ldr	r3, [pc, #172]	; (8005890 <HAL_RCC_OscConfig+0x4cc>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0f0      	beq.n	80057d0 <HAL_RCC_OscConfig+0x40c>
 80057ee:	e045      	b.n	800587c <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f0:	4b28      	ldr	r3, [pc, #160]	; (8005894 <HAL_RCC_OscConfig+0x4d0>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f6:	f7fc ffcb 	bl	8002790 <HAL_GetTick>
 80057fa:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fe:	f7fc ffc7 	bl	8002790 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b64      	cmp	r3, #100	; 0x64
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e036      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005810:	4b1f      	ldr	r3, [pc, #124]	; (8005890 <HAL_RCC_OscConfig+0x4cc>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1f0      	bne.n	80057fe <HAL_RCC_OscConfig+0x43a>
 800581c:	e02e      	b.n	800587c <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e029      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800582a:	4b19      	ldr	r3, [pc, #100]	; (8005890 <HAL_RCC_OscConfig+0x4cc>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005832:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	429a      	cmp	r2, r3
 800583c:	d11c      	bne.n	8005878 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d115      	bne.n	8005878 <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	099b      	lsrs	r3, r3, #6
 8005850:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d10d      	bne.n	8005878 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005866:	429a      	cmp	r2, r3
 8005868:	d106      	bne.n	8005878 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800586a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3740      	adds	r7, #64	; 0x40
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40007000 	.word	0x40007000
 800588c:	40023870 	.word	0x40023870
 8005890:	40023800 	.word	0x40023800
 8005894:	42470060 	.word	0x42470060

08005898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0d2      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058ac:	4b6b      	ldr	r3, [pc, #428]	; (8005a5c <HAL_RCC_ClockConfig+0x1c4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d90c      	bls.n	80058d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ba:	4b68      	ldr	r3, [pc, #416]	; (8005a5c <HAL_RCC_ClockConfig+0x1c4>)
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c2:	4b66      	ldr	r3, [pc, #408]	; (8005a5c <HAL_RCC_ClockConfig+0x1c4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d001      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0be      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d020      	beq.n	8005922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ec:	4b5c      	ldr	r3, [pc, #368]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a5b      	ldr	r2, [pc, #364]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 80058f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005904:	4b56      	ldr	r3, [pc, #344]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4a55      	ldr	r2, [pc, #340]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 800590a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800590e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005910:	4b53      	ldr	r3, [pc, #332]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4950      	ldr	r1, [pc, #320]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d040      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d107      	bne.n	8005946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005936:	4b4a      	ldr	r3, [pc, #296]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d115      	bne.n	800596e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e085      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d107      	bne.n	800595e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594e:	4b44      	ldr	r3, [pc, #272]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e079      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595e:	4b40      	ldr	r3, [pc, #256]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e071      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800596e:	4b3c      	ldr	r3, [pc, #240]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4939      	ldr	r1, [pc, #228]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005980:	f7fc ff06 	bl	8002790 <HAL_GetTick>
 8005984:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	e00a      	b.n	800599e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005988:	f7fc ff02 	bl	8002790 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	; 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e059      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	4b30      	ldr	r3, [pc, #192]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 020c 	and.w	r2, r3, #12
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1eb      	bne.n	8005988 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059b0:	4b2a      	ldr	r3, [pc, #168]	; (8005a5c <HAL_RCC_ClockConfig+0x1c4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d20c      	bcs.n	80059d8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b27      	ldr	r3, [pc, #156]	; (8005a5c <HAL_RCC_ClockConfig+0x1c4>)
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c6:	4b25      	ldr	r3, [pc, #148]	; (8005a5c <HAL_RCC_ClockConfig+0x1c4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e03c      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e4:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	491b      	ldr	r1, [pc, #108]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a02:	4b17      	ldr	r3, [pc, #92]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	4913      	ldr	r1, [pc, #76]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005a16:	f000 f82b 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8005a1a:	4601      	mov	r1, r0
 8005a1c:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a24:	22f0      	movs	r2, #240	; 0xf0
 8005a26:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	fa92 f2a2 	rbit	r2, r2
 8005a2e:	60fa      	str	r2, [r7, #12]
  return result;
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	fab2 f282 	clz	r2, r2
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	40d3      	lsrs	r3, r2
 8005a3a:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <HAL_RCC_ClockConfig+0x1cc>)
 8005a3c:	5cd3      	ldrb	r3, [r2, r3]
 8005a3e:	fa21 f303 	lsr.w	r3, r1, r3
 8005a42:	4a09      	ldr	r2, [pc, #36]	; (8005a68 <HAL_RCC_ClockConfig+0x1d0>)
 8005a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a46:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <HAL_RCC_ClockConfig+0x1d4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fc fe5e 	bl	800270c <HAL_InitTick>

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3718      	adds	r7, #24
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	40023c00 	.word	0x40023c00
 8005a60:	40023800 	.word	0x40023800
 8005a64:	080077d4 	.word	0x080077d4
 8005a68:	2000000c 	.word	0x2000000c
 8005a6c:	20000010 	.word	0x20000010

08005a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	607b      	str	r3, [r7, #4]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	2300      	movs	r3, #0
 8005a82:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a88:	4b67      	ldr	r3, [pc, #412]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d00d      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	f200 80bd 	bhi.w	8005c14 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d003      	beq.n	8005aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8005aa2:	e0b7      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005aa4:	4b61      	ldr	r3, [pc, #388]	; (8005c2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005aa6:	60bb      	str	r3, [r7, #8]
       break;
 8005aa8:	e0b7      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005aaa:	4b61      	ldr	r3, [pc, #388]	; (8005c30 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005aac:	60bb      	str	r3, [r7, #8]
      break;
 8005aae:	e0b4      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ab0:	4b5d      	ldr	r3, [pc, #372]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ab8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aba:	4b5b      	ldr	r3, [pc, #364]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d04d      	beq.n	8005b62 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ac6:	4b58      	ldr	r3, [pc, #352]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	099b      	lsrs	r3, r3, #6
 8005acc:	461a      	mov	r2, r3
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ad6:	f04f 0100 	mov.w	r1, #0
 8005ada:	ea02 0800 	and.w	r8, r2, r0
 8005ade:	ea03 0901 	and.w	r9, r3, r1
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	f04f 0300 	mov.w	r3, #0
 8005aee:	014b      	lsls	r3, r1, #5
 8005af0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005af4:	0142      	lsls	r2, r0, #5
 8005af6:	4610      	mov	r0, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	ebb0 0008 	subs.w	r0, r0, r8
 8005afe:	eb61 0109 	sbc.w	r1, r1, r9
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	018b      	lsls	r3, r1, #6
 8005b0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b10:	0182      	lsls	r2, r0, #6
 8005b12:	1a12      	subs	r2, r2, r0
 8005b14:	eb63 0301 	sbc.w	r3, r3, r1
 8005b18:	f04f 0000 	mov.w	r0, #0
 8005b1c:	f04f 0100 	mov.w	r1, #0
 8005b20:	00d9      	lsls	r1, r3, #3
 8005b22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b26:	00d0      	lsls	r0, r2, #3
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	eb12 0208 	adds.w	r2, r2, r8
 8005b30:	eb43 0309 	adc.w	r3, r3, r9
 8005b34:	f04f 0000 	mov.w	r0, #0
 8005b38:	f04f 0100 	mov.w	r1, #0
 8005b3c:	0259      	lsls	r1, r3, #9
 8005b3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005b42:	0250      	lsls	r0, r2, #9
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	f7fb f962 	bl	8000e1c <__aeabi_uldivmod>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e04a      	b.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b62:	4b31      	ldr	r3, [pc, #196]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	099b      	lsrs	r3, r3, #6
 8005b68:	461a      	mov	r2, r3
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b72:	f04f 0100 	mov.w	r1, #0
 8005b76:	ea02 0400 	and.w	r4, r2, r0
 8005b7a:	ea03 0501 	and.w	r5, r3, r1
 8005b7e:	4620      	mov	r0, r4
 8005b80:	4629      	mov	r1, r5
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	014b      	lsls	r3, r1, #5
 8005b8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b90:	0142      	lsls	r2, r0, #5
 8005b92:	4610      	mov	r0, r2
 8005b94:	4619      	mov	r1, r3
 8005b96:	1b00      	subs	r0, r0, r4
 8005b98:	eb61 0105 	sbc.w	r1, r1, r5
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	018b      	lsls	r3, r1, #6
 8005ba6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005baa:	0182      	lsls	r2, r0, #6
 8005bac:	1a12      	subs	r2, r2, r0
 8005bae:	eb63 0301 	sbc.w	r3, r3, r1
 8005bb2:	f04f 0000 	mov.w	r0, #0
 8005bb6:	f04f 0100 	mov.w	r1, #0
 8005bba:	00d9      	lsls	r1, r3, #3
 8005bbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bc0:	00d0      	lsls	r0, r2, #3
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	1912      	adds	r2, r2, r4
 8005bc8:	eb45 0303 	adc.w	r3, r5, r3
 8005bcc:	f04f 0000 	mov.w	r0, #0
 8005bd0:	f04f 0100 	mov.w	r1, #0
 8005bd4:	0299      	lsls	r1, r3, #10
 8005bd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005bda:	0290      	lsls	r0, r2, #10
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4610      	mov	r0, r2
 8005be2:	4619      	mov	r1, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	f7fb f916 	bl	8000e1c <__aeabi_uldivmod>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bf8:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	3301      	adds	r3, #1
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c10:	60bb      	str	r3, [r7, #8]
      break;
 8005c12:	e002      	b.n	8005c1a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c16:	60bb      	str	r3, [r7, #8]
      break;
 8005c18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c26:	bf00      	nop
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	00f42400 	.word	0x00f42400
 8005c30:	007a1200 	.word	0x007a1200

08005c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c38:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <HAL_RCC_GetHCLKFreq+0x10>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bc80      	pop	{r7}
 8005c42:	4770      	bx	lr
 8005c44:	2000000c 	.word	0x2000000c

08005c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005c4e:	f7ff fff1 	bl	8005c34 <HAL_RCC_GetHCLKFreq>
 8005c52:	4601      	mov	r1, r0
 8005c54:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005c5c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8005c60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	fa92 f2a2 	rbit	r2, r2
 8005c68:	603a      	str	r2, [r7, #0]
  return result;
 8005c6a:	683a      	ldr	r2, [r7, #0]
 8005c6c:	fab2 f282 	clz	r2, r2
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	40d3      	lsrs	r3, r2
 8005c74:	4a04      	ldr	r2, [pc, #16]	; (8005c88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005c76:	5cd3      	ldrb	r3, [r2, r3]
 8005c78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40023800 	.word	0x40023800
 8005c88:	080077e4 	.word	0x080077e4

08005c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8005c92:	f7ff ffcf 	bl	8005c34 <HAL_RCC_GetHCLKFreq>
 8005c96:	4601      	mov	r1, r0
 8005c98:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005ca0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8005ca4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	fa92 f2a2 	rbit	r2, r2
 8005cac:	603a      	str	r2, [r7, #0]
  return result;
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	fab2 f282 	clz	r2, r2
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	40d3      	lsrs	r3, r2
 8005cb8:	4a04      	ldr	r2, [pc, #16]	; (8005ccc <HAL_RCC_GetPCLK2Freq+0x40>)
 8005cba:	5cd3      	ldrb	r3, [r2, r3]
 8005cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	080077e4 	.word	0x080077e4

08005cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e01d      	b.n	8005d1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fc fa74 	bl	80021e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f000 fcd2 	bl	80066b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b085      	sub	sp, #20
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68da      	ldr	r2, [r3, #12]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f042 0201 	orr.w	r2, r2, #1
 8005d3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2b06      	cmp	r3, #6
 8005d4e:	d007      	beq.n	8005d60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e01d      	b.n	8005dba <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f815 	bl	8005dc2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f000 fc84 	bl	80066b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bc80      	pop	{r7}
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e01d      	b.n	8005e22 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f815 	bl	8005e2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f000 fc50 	bl	80066b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 ff12 	bl	8006c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <HAL_TIM_PWM_Start+0x74>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d004      	beq.n	8005e68 <HAL_TIM_PWM_Start+0x2c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a14      	ldr	r2, [pc, #80]	; (8005eb4 <HAL_TIM_PWM_Start+0x78>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d101      	bne.n	8005e6c <HAL_TIM_PWM_Start+0x30>
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <HAL_TIM_PWM_Start+0x32>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d007      	beq.n	8005e82 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b06      	cmp	r3, #6
 8005e92:	d007      	beq.n	8005ea4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f042 0201 	orr.w	r2, r2, #1
 8005ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40010000 	.word	0x40010000
 8005eb4:	40010400 	.word	0x40010400

08005eb8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	6839      	ldr	r1, [r7, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fed4 	bl	8006c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a22      	ldr	r2, [pc, #136]	; (8005f60 <HAL_TIM_PWM_Stop+0xa8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d004      	beq.n	8005ee4 <HAL_TIM_PWM_Stop+0x2c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a21      	ldr	r2, [pc, #132]	; (8005f64 <HAL_TIM_PWM_Stop+0xac>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIM_PWM_Stop+0x30>
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e000      	b.n	8005eea <HAL_TIM_PWM_Stop+0x32>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d017      	beq.n	8005f1e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6a1a      	ldr	r2, [r3, #32]
 8005ef4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10f      	bne.n	8005f1e <HAL_TIM_PWM_Stop+0x66>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	f240 4344 	movw	r3, #1092	; 0x444
 8005f08:	4013      	ands	r3, r2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d107      	bne.n	8005f1e <HAL_TIM_PWM_Stop+0x66>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a1a      	ldr	r2, [r3, #32]
 8005f24:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f28:	4013      	ands	r3, r2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10f      	bne.n	8005f4e <HAL_TIM_PWM_Stop+0x96>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6a1a      	ldr	r2, [r3, #32]
 8005f34:	f240 4344 	movw	r3, #1092	; 0x444
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d107      	bne.n	8005f4e <HAL_TIM_PWM_Stop+0x96>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0201 	bic.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40010000 	.word	0x40010000
 8005f64:	40010400 	.word	0x40010400

08005f68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e083      	b.n	8006084 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d106      	bne.n	8005f96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7fc f98b 	bl	80022ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f000 fb7b 	bl	80066b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006008:	f023 030c 	bic.w	r3, r3, #12
 800600c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006018:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68da      	ldr	r2, [r3, #12]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	4313      	orrs	r3, r2
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	011a      	lsls	r2, r3, #4
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	031b      	lsls	r3, r3, #12
 8006038:	4313      	orrs	r3, r2
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006046:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	4313      	orrs	r3, r2
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d122      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d11b      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0202 	mvn.w	r2, #2
 80060b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fad7 	bl	8006682 <HAL_TIM_IC_CaptureCallback>
 80060d4:	e005      	b.n	80060e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 faca 	bl	8006670 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fad9 	bl	8006694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0304 	and.w	r3, r3, #4
 80060f2:	2b04      	cmp	r3, #4
 80060f4:	d122      	bne.n	800613c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b04      	cmp	r3, #4
 8006102:	d11b      	bne.n	800613c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0204 	mvn.w	r2, #4
 800610c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2202      	movs	r2, #2
 8006112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 faad 	bl	8006682 <HAL_TIM_IC_CaptureCallback>
 8006128:	e005      	b.n	8006136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 faa0 	bl	8006670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 faaf 	bl	8006694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0308 	and.w	r3, r3, #8
 8006146:	2b08      	cmp	r3, #8
 8006148:	d122      	bne.n	8006190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0308 	and.w	r3, r3, #8
 8006154:	2b08      	cmp	r3, #8
 8006156:	d11b      	bne.n	8006190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0208 	mvn.w	r2, #8
 8006160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2204      	movs	r2, #4
 8006166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fa83 	bl	8006682 <HAL_TIM_IC_CaptureCallback>
 800617c:	e005      	b.n	800618a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa76 	bl	8006670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa85 	bl	8006694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	f003 0310 	and.w	r3, r3, #16
 800619a:	2b10      	cmp	r3, #16
 800619c:	d122      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f003 0310 	and.w	r3, r3, #16
 80061a8:	2b10      	cmp	r3, #16
 80061aa:	d11b      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f06f 0210 	mvn.w	r2, #16
 80061b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2208      	movs	r2, #8
 80061ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fa59 	bl	8006682 <HAL_TIM_IC_CaptureCallback>
 80061d0:	e005      	b.n	80061de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fa4c 	bl	8006670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fa5b 	bl	8006694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d10e      	bne.n	8006210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d107      	bne.n	8006210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0201 	mvn.w	r2, #1
 8006208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f7fb fa28 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621a:	2b80      	cmp	r3, #128	; 0x80
 800621c:	d10e      	bne.n	800623c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006228:	2b80      	cmp	r3, #128	; 0x80
 800622a:	d107      	bne.n	800623c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fe4b 	bl	8006ed2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	d10e      	bne.n	8006268 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006254:	2b40      	cmp	r3, #64	; 0x40
 8006256:	d107      	bne.n	8006268 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fa1f 	bl	80066a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	f003 0320 	and.w	r3, r3, #32
 8006272:	2b20      	cmp	r3, #32
 8006274:	d10e      	bne.n	8006294 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b20      	cmp	r3, #32
 8006282:	d107      	bne.n	8006294 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f06f 0220 	mvn.w	r2, #32
 800628c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fe16 	bl	8006ec0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006294:	bf00      	nop
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_TIM_OC_ConfigChannel+0x1a>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e04e      	b.n	8006354 <HAL_TIM_OC_ConfigChannel+0xb8>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b0c      	cmp	r3, #12
 80062ca:	d839      	bhi.n	8006340 <HAL_TIM_OC_ConfigChannel+0xa4>
 80062cc:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <HAL_TIM_OC_ConfigChannel+0x38>)
 80062ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d2:	bf00      	nop
 80062d4:	08006309 	.word	0x08006309
 80062d8:	08006341 	.word	0x08006341
 80062dc:	08006341 	.word	0x08006341
 80062e0:	08006341 	.word	0x08006341
 80062e4:	08006317 	.word	0x08006317
 80062e8:	08006341 	.word	0x08006341
 80062ec:	08006341 	.word	0x08006341
 80062f0:	08006341 	.word	0x08006341
 80062f4:	08006325 	.word	0x08006325
 80062f8:	08006341 	.word	0x08006341
 80062fc:	08006341 	.word	0x08006341
 8006300:	08006341 	.word	0x08006341
 8006304:	08006333 	.word	0x08006333
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fa70 	bl	80067f4 <TIM_OC1_SetConfig>
      break;
 8006314:	e015      	b.n	8006342 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68b9      	ldr	r1, [r7, #8]
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fad9 	bl	80068d4 <TIM_OC2_SetConfig>
      break;
 8006322:	e00e      	b.n	8006342 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fb46 	bl	80069bc <TIM_OC3_SetConfig>
      break;
 8006330:	e007      	b.n	8006342 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fbb3 	bl	8006aa4 <TIM_OC4_SetConfig>
      break;
 800633e:	e000      	b.n	8006342 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006340:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006372:	2302      	movs	r3, #2
 8006374:	e0b4      	b.n	80064e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2202      	movs	r2, #2
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b0c      	cmp	r3, #12
 800638a:	f200 809f 	bhi.w	80064cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800638e:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006394:	080063c9 	.word	0x080063c9
 8006398:	080064cd 	.word	0x080064cd
 800639c:	080064cd 	.word	0x080064cd
 80063a0:	080064cd 	.word	0x080064cd
 80063a4:	08006409 	.word	0x08006409
 80063a8:	080064cd 	.word	0x080064cd
 80063ac:	080064cd 	.word	0x080064cd
 80063b0:	080064cd 	.word	0x080064cd
 80063b4:	0800644b 	.word	0x0800644b
 80063b8:	080064cd 	.word	0x080064cd
 80063bc:	080064cd 	.word	0x080064cd
 80063c0:	080064cd 	.word	0x080064cd
 80063c4:	0800648b 	.word	0x0800648b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68b9      	ldr	r1, [r7, #8]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fa10 	bl	80067f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699a      	ldr	r2, [r3, #24]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0208 	orr.w	r2, r2, #8
 80063e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0204 	bic.w	r2, r2, #4
 80063f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6999      	ldr	r1, [r3, #24]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	619a      	str	r2, [r3, #24]
      break;
 8006406:	e062      	b.n	80064ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fa60 	bl	80068d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699a      	ldr	r2, [r3, #24]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6999      	ldr	r1, [r3, #24]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	021a      	lsls	r2, r3, #8
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	619a      	str	r2, [r3, #24]
      break;
 8006448:	e041      	b.n	80064ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fab3 	bl	80069bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0208 	orr.w	r2, r2, #8
 8006464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0204 	bic.w	r2, r2, #4
 8006474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69d9      	ldr	r1, [r3, #28]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	61da      	str	r2, [r3, #28]
      break;
 8006488:	e021      	b.n	80064ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	4618      	mov	r0, r3
 8006492:	f000 fb07 	bl	8006aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	69da      	ldr	r2, [r3, #28]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69da      	ldr	r2, [r3, #28]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69d9      	ldr	r1, [r3, #28]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	021a      	lsls	r2, r3, #8
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	61da      	str	r2, [r3, #28]
      break;
 80064ca:	e000      	b.n	80064ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80064cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d101      	bne.n	8006500 <HAL_TIM_ConfigClockSource+0x18>
 80064fc:	2302      	movs	r3, #2
 80064fe:	e0b3      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x180>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2202      	movs	r2, #2
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800651e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006526:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006538:	d03e      	beq.n	80065b8 <HAL_TIM_ConfigClockSource+0xd0>
 800653a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653e:	f200 8087 	bhi.w	8006650 <HAL_TIM_ConfigClockSource+0x168>
 8006542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006546:	f000 8085 	beq.w	8006654 <HAL_TIM_ConfigClockSource+0x16c>
 800654a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654e:	d87f      	bhi.n	8006650 <HAL_TIM_ConfigClockSource+0x168>
 8006550:	2b70      	cmp	r3, #112	; 0x70
 8006552:	d01a      	beq.n	800658a <HAL_TIM_ConfigClockSource+0xa2>
 8006554:	2b70      	cmp	r3, #112	; 0x70
 8006556:	d87b      	bhi.n	8006650 <HAL_TIM_ConfigClockSource+0x168>
 8006558:	2b60      	cmp	r3, #96	; 0x60
 800655a:	d050      	beq.n	80065fe <HAL_TIM_ConfigClockSource+0x116>
 800655c:	2b60      	cmp	r3, #96	; 0x60
 800655e:	d877      	bhi.n	8006650 <HAL_TIM_ConfigClockSource+0x168>
 8006560:	2b50      	cmp	r3, #80	; 0x50
 8006562:	d03c      	beq.n	80065de <HAL_TIM_ConfigClockSource+0xf6>
 8006564:	2b50      	cmp	r3, #80	; 0x50
 8006566:	d873      	bhi.n	8006650 <HAL_TIM_ConfigClockSource+0x168>
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	d058      	beq.n	800661e <HAL_TIM_ConfigClockSource+0x136>
 800656c:	2b40      	cmp	r3, #64	; 0x40
 800656e:	d86f      	bhi.n	8006650 <HAL_TIM_ConfigClockSource+0x168>
 8006570:	2b30      	cmp	r3, #48	; 0x30
 8006572:	d064      	beq.n	800663e <HAL_TIM_ConfigClockSource+0x156>
 8006574:	2b30      	cmp	r3, #48	; 0x30
 8006576:	d86b      	bhi.n	8006650 <HAL_TIM_ConfigClockSource+0x168>
 8006578:	2b20      	cmp	r3, #32
 800657a:	d060      	beq.n	800663e <HAL_TIM_ConfigClockSource+0x156>
 800657c:	2b20      	cmp	r3, #32
 800657e:	d867      	bhi.n	8006650 <HAL_TIM_ConfigClockSource+0x168>
 8006580:	2b00      	cmp	r3, #0
 8006582:	d05c      	beq.n	800663e <HAL_TIM_ConfigClockSource+0x156>
 8006584:	2b10      	cmp	r3, #16
 8006586:	d05a      	beq.n	800663e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006588:	e062      	b.n	8006650 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6899      	ldr	r1, [r3, #8]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f000 fb4e 	bl	8006c3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80065ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	609a      	str	r2, [r3, #8]
      break;
 80065b6:	e04e      	b.n	8006656 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	6899      	ldr	r1, [r3, #8]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f000 fb37 	bl	8006c3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065da:	609a      	str	r2, [r3, #8]
      break;
 80065dc:	e03b      	b.n	8006656 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	6859      	ldr	r1, [r3, #4]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	461a      	mov	r2, r3
 80065ec:	f000 faae 	bl	8006b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2150      	movs	r1, #80	; 0x50
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fb05 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80065fc:	e02b      	b.n	8006656 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6859      	ldr	r1, [r3, #4]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	461a      	mov	r2, r3
 800660c:	f000 facc 	bl	8006ba8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2160      	movs	r1, #96	; 0x60
 8006616:	4618      	mov	r0, r3
 8006618:	f000 faf5 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 800661c:	e01b      	b.n	8006656 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	6859      	ldr	r1, [r3, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	461a      	mov	r2, r3
 800662c:	f000 fa8e 	bl	8006b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2140      	movs	r1, #64	; 0x40
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fae5 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 800663c:	e00b      	b.n	8006656 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4619      	mov	r1, r3
 8006648:	4610      	mov	r0, r2
 800664a:	f000 fadc 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 800664e:	e002      	b.n	8006656 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006650:	bf00      	nop
 8006652:	e000      	b.n	8006656 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006654:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	bc80      	pop	{r7}
 8006680:	4770      	bx	lr

08006682 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr

08006694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr

080066a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a3f      	ldr	r2, [pc, #252]	; (80067c8 <TIM_Base_SetConfig+0x110>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d013      	beq.n	80066f8 <TIM_Base_SetConfig+0x40>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066d6:	d00f      	beq.n	80066f8 <TIM_Base_SetConfig+0x40>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a3c      	ldr	r2, [pc, #240]	; (80067cc <TIM_Base_SetConfig+0x114>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d00b      	beq.n	80066f8 <TIM_Base_SetConfig+0x40>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a3b      	ldr	r2, [pc, #236]	; (80067d0 <TIM_Base_SetConfig+0x118>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d007      	beq.n	80066f8 <TIM_Base_SetConfig+0x40>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a3a      	ldr	r2, [pc, #232]	; (80067d4 <TIM_Base_SetConfig+0x11c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d003      	beq.n	80066f8 <TIM_Base_SetConfig+0x40>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a39      	ldr	r2, [pc, #228]	; (80067d8 <TIM_Base_SetConfig+0x120>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d108      	bne.n	800670a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a2e      	ldr	r2, [pc, #184]	; (80067c8 <TIM_Base_SetConfig+0x110>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d02b      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006718:	d027      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a2b      	ldr	r2, [pc, #172]	; (80067cc <TIM_Base_SetConfig+0x114>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d023      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2a      	ldr	r2, [pc, #168]	; (80067d0 <TIM_Base_SetConfig+0x118>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d01f      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a29      	ldr	r2, [pc, #164]	; (80067d4 <TIM_Base_SetConfig+0x11c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d01b      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a28      	ldr	r2, [pc, #160]	; (80067d8 <TIM_Base_SetConfig+0x120>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d017      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a27      	ldr	r2, [pc, #156]	; (80067dc <TIM_Base_SetConfig+0x124>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d013      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a26      	ldr	r2, [pc, #152]	; (80067e0 <TIM_Base_SetConfig+0x128>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d00f      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a25      	ldr	r2, [pc, #148]	; (80067e4 <TIM_Base_SetConfig+0x12c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d00b      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a24      	ldr	r2, [pc, #144]	; (80067e8 <TIM_Base_SetConfig+0x130>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d007      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a23      	ldr	r2, [pc, #140]	; (80067ec <TIM_Base_SetConfig+0x134>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d003      	beq.n	800676a <TIM_Base_SetConfig+0xb2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a22      	ldr	r2, [pc, #136]	; (80067f0 <TIM_Base_SetConfig+0x138>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d108      	bne.n	800677c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	4313      	orrs	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	689a      	ldr	r2, [r3, #8]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a09      	ldr	r2, [pc, #36]	; (80067c8 <TIM_Base_SetConfig+0x110>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_Base_SetConfig+0xf8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a0b      	ldr	r2, [pc, #44]	; (80067d8 <TIM_Base_SetConfig+0x120>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d103      	bne.n	80067b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	615a      	str	r2, [r3, #20]
}
 80067be:	bf00      	nop
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bc80      	pop	{r7}
 80067c6:	4770      	bx	lr
 80067c8:	40010000 	.word	0x40010000
 80067cc:	40000400 	.word	0x40000400
 80067d0:	40000800 	.word	0x40000800
 80067d4:	40000c00 	.word	0x40000c00
 80067d8:	40010400 	.word	0x40010400
 80067dc:	40014000 	.word	0x40014000
 80067e0:	40014400 	.word	0x40014400
 80067e4:	40014800 	.word	0x40014800
 80067e8:	40001800 	.word	0x40001800
 80067ec:	40001c00 	.word	0x40001c00
 80067f0:	40002000 	.word	0x40002000

080067f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f023 0201 	bic.w	r2, r3, #1
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0303 	bic.w	r3, r3, #3
 800682a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f023 0302 	bic.w	r3, r3, #2
 800683c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a20      	ldr	r2, [pc, #128]	; (80068cc <TIM_OC1_SetConfig+0xd8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_OC1_SetConfig+0x64>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a1f      	ldr	r2, [pc, #124]	; (80068d0 <TIM_OC1_SetConfig+0xdc>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d10c      	bne.n	8006872 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f023 0308 	bic.w	r3, r3, #8
 800685e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4313      	orrs	r3, r2
 8006868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f023 0304 	bic.w	r3, r3, #4
 8006870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a15      	ldr	r2, [pc, #84]	; (80068cc <TIM_OC1_SetConfig+0xd8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d003      	beq.n	8006882 <TIM_OC1_SetConfig+0x8e>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a14      	ldr	r2, [pc, #80]	; (80068d0 <TIM_OC1_SetConfig+0xdc>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d111      	bne.n	80068a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	621a      	str	r2, [r3, #32]
}
 80068c0:	bf00      	nop
 80068c2:	371c      	adds	r7, #28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bc80      	pop	{r7}
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40010000 	.word	0x40010000
 80068d0:	40010400 	.word	0x40010400

080068d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	f023 0210 	bic.w	r2, r3, #16
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f023 0320 	bic.w	r3, r3, #32
 800691e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	011b      	lsls	r3, r3, #4
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a21      	ldr	r2, [pc, #132]	; (80069b4 <TIM_OC2_SetConfig+0xe0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_OC2_SetConfig+0x68>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a20      	ldr	r2, [pc, #128]	; (80069b8 <TIM_OC2_SetConfig+0xe4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d10d      	bne.n	8006958 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	4313      	orrs	r3, r2
 800694e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006956:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a16      	ldr	r2, [pc, #88]	; (80069b4 <TIM_OC2_SetConfig+0xe0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d003      	beq.n	8006968 <TIM_OC2_SetConfig+0x94>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <TIM_OC2_SetConfig+0xe4>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d113      	bne.n	8006990 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800696e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006976:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4313      	orrs	r3, r2
 800698e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bc80      	pop	{r7}
 80069b2:	4770      	bx	lr
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40010400 	.word	0x40010400

080069bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0303 	bic.w	r3, r3, #3
 80069f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	021b      	lsls	r3, r3, #8
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a21      	ldr	r2, [pc, #132]	; (8006a9c <TIM_OC3_SetConfig+0xe0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d003      	beq.n	8006a22 <TIM_OC3_SetConfig+0x66>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a20      	ldr	r2, [pc, #128]	; (8006aa0 <TIM_OC3_SetConfig+0xe4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d10d      	bne.n	8006a3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	021b      	lsls	r3, r3, #8
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a16      	ldr	r2, [pc, #88]	; (8006a9c <TIM_OC3_SetConfig+0xe0>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d003      	beq.n	8006a4e <TIM_OC3_SetConfig+0x92>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a15      	ldr	r2, [pc, #84]	; (8006aa0 <TIM_OC3_SetConfig+0xe4>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d113      	bne.n	8006a76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	621a      	str	r2, [r3, #32]
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bc80      	pop	{r7}
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	40010000 	.word	0x40010000
 8006aa0:	40010400 	.word	0x40010400

08006aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	031b      	lsls	r3, r3, #12
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a11      	ldr	r2, [pc, #68]	; (8006b44 <TIM_OC4_SetConfig+0xa0>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_OC4_SetConfig+0x68>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a10      	ldr	r2, [pc, #64]	; (8006b48 <TIM_OC4_SetConfig+0xa4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d109      	bne.n	8006b20 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	695b      	ldr	r3, [r3, #20]
 8006b18:	019b      	lsls	r3, r3, #6
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bc80      	pop	{r7}
 8006b42:	4770      	bx	lr
 8006b44:	40010000 	.word	0x40010000
 8006b48:	40010400 	.word	0x40010400

08006b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	f023 0201 	bic.w	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f023 030a 	bic.w	r3, r3, #10
 8006b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr

08006ba8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f023 0210 	bic.w	r2, r3, #16
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	031b      	lsls	r3, r3, #12
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006be4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	621a      	str	r2, [r3, #32]
}
 8006bfc:	bf00      	nop
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bc80      	pop	{r7}
 8006c04:	4770      	bx	lr

08006c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f043 0307 	orr.w	r3, r3, #7
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
}
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr

08006c3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b087      	sub	sp, #28
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	607a      	str	r2, [r7, #4]
 8006c46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	021a      	lsls	r2, r3, #8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	609a      	str	r2, [r3, #8]
}
 8006c6e:	bf00      	nop
 8006c70:	371c      	adds	r7, #28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr

08006c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b087      	sub	sp, #28
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f003 031f 	and.w	r3, r3, #31
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6a1a      	ldr	r2, [r3, #32]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	401a      	ands	r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a1a      	ldr	r2, [r3, #32]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f003 031f 	and.w	r3, r3, #31
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	fa01 f303 	lsl.w	r3, r1, r3
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bc80      	pop	{r7}
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2204      	movs	r2, #4
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 f906 	bl	8006ee4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ce6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b06      	cmp	r3, #6
 8006cf8:	d007      	beq.n	8006d0a <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f042 0201 	orr.w	r2, r2, #1
 8006d08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f000 f8dc 	bl	8006ee4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6a1a      	ldr	r2, [r3, #32]
 8006d32:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d36:	4013      	ands	r3, r2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10f      	bne.n	8006d5c <HAL_TIMEx_PWMN_Stop+0x48>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6a1a      	ldr	r2, [r3, #32]
 8006d42:	f240 4344 	movw	r3, #1092	; 0x444
 8006d46:	4013      	ands	r3, r2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d107      	bne.n	8006d5c <HAL_TIMEx_PWMN_Stop+0x48>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a1a      	ldr	r2, [r3, #32]
 8006d62:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d66:	4013      	ands	r3, r2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10f      	bne.n	8006d8c <HAL_TIMEx_PWMN_Stop+0x78>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	f240 4344 	movw	r3, #1092	; 0x444
 8006d76:	4013      	ands	r3, r2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d107      	bne.n	8006d8c <HAL_TIMEx_PWMN_Stop+0x78>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0201 	bic.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d101      	bne.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006daa:	2302      	movs	r3, #2
 8006dac:	e032      	b.n	8006e14 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2202      	movs	r2, #2
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bc80      	pop	{r7}
 8006e1c:	4770      	bx	lr

08006e1e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b085      	sub	sp, #20
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d101      	bne.n	8006e3a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e03d      	b.n	8006eb6 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr

08006ed2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bc80      	pop	{r7}
 8006ee2:	4770      	bx	lr

08006ee4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f003 031f 	and.w	r3, r3, #31
 8006ef6:	2204      	movs	r2, #4
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	43db      	mvns	r3, r3
 8006f06:	401a      	ands	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a1a      	ldr	r2, [r3, #32]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 031f 	and.w	r3, r3, #31
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	621a      	str	r2, [r3, #32]
}
 8006f22:	bf00      	nop
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bc80      	pop	{r7}
 8006f2a:	4770      	bx	lr

08006f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e03f      	b.n	8006fbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fb fa7c 	bl	8002450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2224      	movs	r2, #36	; 0x24
 8006f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fa63 	bl	800743c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	695a      	ldr	r2, [r3, #20]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10d      	bne.n	800701a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b00      	cmp	r3, #0
 8007006:	d008      	beq.n	800701a <HAL_UART_IRQHandler+0x52>
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	f003 0320 	and.w	r3, r3, #32
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f991 	bl	800733a <UART_Receive_IT>
      return;
 8007018:	e0d0      	b.n	80071bc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80b0 	beq.w	8007182 <HAL_UART_IRQHandler+0x1ba>
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d105      	bne.n	8007038 <HAL_UART_IRQHandler+0x70>
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 80a5 	beq.w	8007182 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00a      	beq.n	8007058 <HAL_UART_IRQHandler+0x90>
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007050:	f043 0201 	orr.w	r2, r3, #1
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f003 0304 	and.w	r3, r3, #4
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <HAL_UART_IRQHandler+0xb0>
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007070:	f043 0202 	orr.w	r2, r3, #2
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <HAL_UART_IRQHandler+0xd0>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007090:	f043 0204 	orr.w	r2, r3, #4
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f003 0308 	and.w	r3, r3, #8
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00f      	beq.n	80070c2 <HAL_UART_IRQHandler+0xfa>
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	f003 0320 	and.w	r3, r3, #32
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d104      	bne.n	80070b6 <HAL_UART_IRQHandler+0xee>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d005      	beq.n	80070c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ba:	f043 0208 	orr.w	r2, r3, #8
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d077      	beq.n	80071ba <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d007      	beq.n	80070e4 <HAL_UART_IRQHandler+0x11c>
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f92b 	bl	800733a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	695b      	ldr	r3, [r3, #20]
 80070ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ee:	2b40      	cmp	r3, #64	; 0x40
 80070f0:	bf0c      	ite	eq
 80070f2:	2301      	moveq	r3, #1
 80070f4:	2300      	movne	r3, #0
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fe:	f003 0308 	and.w	r3, r3, #8
 8007102:	2b00      	cmp	r3, #0
 8007104:	d102      	bne.n	800710c <HAL_UART_IRQHandler+0x144>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d031      	beq.n	8007170 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f876 	bl	80071fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711c:	2b40      	cmp	r3, #64	; 0x40
 800711e:	d123      	bne.n	8007168 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	695a      	ldr	r2, [r3, #20]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800712e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007134:	2b00      	cmp	r3, #0
 8007136:	d013      	beq.n	8007160 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800713c:	4a21      	ldr	r2, [pc, #132]	; (80071c4 <HAL_UART_IRQHandler+0x1fc>)
 800713e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007144:	4618      	mov	r0, r3
 8007146:	f7fc f8db 	bl	8003300 <HAL_DMA_Abort_IT>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d016      	beq.n	800717e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800715a:	4610      	mov	r0, r2
 800715c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800715e:	e00e      	b.n	800717e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f843 	bl	80071ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007166:	e00a      	b.n	800717e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f83f 	bl	80071ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800716e:	e006      	b.n	800717e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f83b 	bl	80071ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800717c:	e01d      	b.n	80071ba <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717e:	bf00      	nop
    return;
 8007180:	e01b      	b.n	80071ba <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007188:	2b00      	cmp	r3, #0
 800718a:	d008      	beq.n	800719e <HAL_UART_IRQHandler+0x1d6>
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f862 	bl	8007260 <UART_Transmit_IT>
    return;
 800719c:	e00e      	b.n	80071bc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d009      	beq.n	80071bc <HAL_UART_IRQHandler+0x1f4>
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d004      	beq.n	80071bc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 f8a9 	bl	800730a <UART_EndTransmit_IT>
    return;
 80071b8:	e000      	b.n	80071bc <HAL_UART_IRQHandler+0x1f4>
    return;
 80071ba:	bf00      	nop
  }
}
 80071bc:	3720      	adds	r7, #32
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	08007239 	.word	0x08007239

080071c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bc80      	pop	{r7}
 80071d8:	4770      	bx	lr

080071da <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr

080071ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr

080071fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007214:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695a      	ldr	r2, [r3, #20]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0201 	bic.w	r2, r2, #1
 8007224:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr

08007238 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007244:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f7ff ffca 	bl	80071ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b21      	cmp	r3, #33	; 0x21
 8007272:	d144      	bne.n	80072fe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800727c:	d11a      	bne.n	80072b4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	461a      	mov	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007292:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d105      	bne.n	80072a8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a1b      	ldr	r3, [r3, #32]
 80072a0:	1c9a      	adds	r2, r3, #2
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	621a      	str	r2, [r3, #32]
 80072a6:	e00e      	b.n	80072c6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	621a      	str	r2, [r3, #32]
 80072b2:	e008      	b.n	80072c6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	1c59      	adds	r1, r3, #1
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6211      	str	r1, [r2, #32]
 80072be:	781a      	ldrb	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	3b01      	subs	r3, #1
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	4619      	mov	r1, r3
 80072d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d10f      	bne.n	80072fa <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072fa:	2300      	movs	r3, #0
 80072fc:	e000      	b.n	8007300 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80072fe:	2302      	movs	r3, #2
  }
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	bc80      	pop	{r7}
 8007308:	4770      	bx	lr

0800730a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007320:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7ff ff4c 	bl	80071c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b084      	sub	sp, #16
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b22      	cmp	r3, #34	; 0x22
 800734c:	d171      	bne.n	8007432 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007356:	d123      	bne.n	80073a0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10e      	bne.n	8007384 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737c:	1c9a      	adds	r2, r3, #2
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	629a      	str	r2, [r3, #40]	; 0x28
 8007382:	e029      	b.n	80073d8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	b29b      	uxth	r3, r3
 800738c:	b2db      	uxtb	r3, r3
 800738e:	b29a      	uxth	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	629a      	str	r2, [r3, #40]	; 0x28
 800739e:	e01b      	b.n	80073d8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6858      	ldr	r0, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b2:	1c59      	adds	r1, r3, #1
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6291      	str	r1, [r2, #40]	; 0x28
 80073b8:	b2c2      	uxtb	r2, r0
 80073ba:	701a      	strb	r2, [r3, #0]
 80073bc:	e00c      	b.n	80073d8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	b2da      	uxtb	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	1c58      	adds	r0, r3, #1
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	6288      	str	r0, [r1, #40]	; 0x28
 80073d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073d4:	b2d2      	uxtb	r2, r2
 80073d6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	4619      	mov	r1, r3
 80073e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d120      	bne.n	800742e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0220 	bic.w	r2, r2, #32
 80073fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800740a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	695a      	ldr	r2, [r3, #20]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0201 	bic.w	r2, r2, #1
 800741a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fed8 	bl	80071da <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	e002      	b.n	8007434 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	e000      	b.n	8007434 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007432:	2302      	movs	r3, #2
  }
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	4313      	orrs	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800747c:	f023 030c 	bic.w	r3, r3, #12
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	68f9      	ldr	r1, [r7, #12]
 8007486:	430b      	orrs	r3, r1
 8007488:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	699a      	ldr	r2, [r3, #24]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a8:	f040 80aa 	bne.w	8007600 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4aa9      	ldr	r2, [pc, #676]	; (8007758 <UART_SetConfig+0x31c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d004      	beq.n	80074c0 <UART_SetConfig+0x84>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4aa8      	ldr	r2, [pc, #672]	; (800775c <UART_SetConfig+0x320>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d14f      	bne.n	8007560 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074c0:	f7fe fbe4 	bl	8005c8c <HAL_RCC_GetPCLK2Freq>
 80074c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	4613      	mov	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	009a      	lsls	r2, r3, #2
 80074d0:	441a      	add	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074dc:	4aa0      	ldr	r2, [pc, #640]	; (8007760 <UART_SetConfig+0x324>)
 80074de:	fba2 2303 	umull	r2, r3, r2, r3
 80074e2:	095b      	lsrs	r3, r3, #5
 80074e4:	0119      	lsls	r1, r3, #4
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009a      	lsls	r2, r3, #2
 80074f0:	441a      	add	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80074fc:	4b98      	ldr	r3, [pc, #608]	; (8007760 <UART_SetConfig+0x324>)
 80074fe:	fba3 0302 	umull	r0, r3, r3, r2
 8007502:	095b      	lsrs	r3, r3, #5
 8007504:	2064      	movs	r0, #100	; 0x64
 8007506:	fb00 f303 	mul.w	r3, r0, r3
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	3332      	adds	r3, #50	; 0x32
 8007510:	4a93      	ldr	r2, [pc, #588]	; (8007760 <UART_SetConfig+0x324>)
 8007512:	fba2 2303 	umull	r2, r3, r2, r3
 8007516:	095b      	lsrs	r3, r3, #5
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800751e:	4419      	add	r1, r3
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009a      	lsls	r2, r3, #2
 800752a:	441a      	add	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	fbb2 f2f3 	udiv	r2, r2, r3
 8007536:	4b8a      	ldr	r3, [pc, #552]	; (8007760 <UART_SetConfig+0x324>)
 8007538:	fba3 0302 	umull	r0, r3, r3, r2
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	2064      	movs	r0, #100	; 0x64
 8007540:	fb00 f303 	mul.w	r3, r0, r3
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	00db      	lsls	r3, r3, #3
 8007548:	3332      	adds	r3, #50	; 0x32
 800754a:	4a85      	ldr	r2, [pc, #532]	; (8007760 <UART_SetConfig+0x324>)
 800754c:	fba2 2303 	umull	r2, r3, r2, r3
 8007550:	095b      	lsrs	r3, r3, #5
 8007552:	f003 0207 	and.w	r2, r3, #7
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	440a      	add	r2, r1
 800755c:	609a      	str	r2, [r3, #8]
 800755e:	e0f7      	b.n	8007750 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007560:	f7fe fb72 	bl	8005c48 <HAL_RCC_GetPCLK1Freq>
 8007564:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	4613      	mov	r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	009a      	lsls	r2, r3, #2
 8007570:	441a      	add	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	fbb2 f3f3 	udiv	r3, r2, r3
 800757c:	4a78      	ldr	r2, [pc, #480]	; (8007760 <UART_SetConfig+0x324>)
 800757e:	fba2 2303 	umull	r2, r3, r2, r3
 8007582:	095b      	lsrs	r3, r3, #5
 8007584:	0119      	lsls	r1, r3, #4
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009a      	lsls	r2, r3, #2
 8007590:	441a      	add	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	fbb2 f2f3 	udiv	r2, r2, r3
 800759c:	4b70      	ldr	r3, [pc, #448]	; (8007760 <UART_SetConfig+0x324>)
 800759e:	fba3 0302 	umull	r0, r3, r3, r2
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	2064      	movs	r0, #100	; 0x64
 80075a6:	fb00 f303 	mul.w	r3, r0, r3
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	00db      	lsls	r3, r3, #3
 80075ae:	3332      	adds	r3, #50	; 0x32
 80075b0:	4a6b      	ldr	r2, [pc, #428]	; (8007760 <UART_SetConfig+0x324>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	095b      	lsrs	r3, r3, #5
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075be:	4419      	add	r1, r3
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009a      	lsls	r2, r3, #2
 80075ca:	441a      	add	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80075d6:	4b62      	ldr	r3, [pc, #392]	; (8007760 <UART_SetConfig+0x324>)
 80075d8:	fba3 0302 	umull	r0, r3, r3, r2
 80075dc:	095b      	lsrs	r3, r3, #5
 80075de:	2064      	movs	r0, #100	; 0x64
 80075e0:	fb00 f303 	mul.w	r3, r0, r3
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	3332      	adds	r3, #50	; 0x32
 80075ea:	4a5d      	ldr	r2, [pc, #372]	; (8007760 <UART_SetConfig+0x324>)
 80075ec:	fba2 2303 	umull	r2, r3, r2, r3
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	f003 0207 	and.w	r2, r3, #7
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	440a      	add	r2, r1
 80075fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80075fe:	e0a7      	b.n	8007750 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a54      	ldr	r2, [pc, #336]	; (8007758 <UART_SetConfig+0x31c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d004      	beq.n	8007614 <UART_SetConfig+0x1d8>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a53      	ldr	r2, [pc, #332]	; (800775c <UART_SetConfig+0x320>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d14e      	bne.n	80076b2 <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007614:	f7fe fb3a 	bl	8005c8c <HAL_RCC_GetPCLK2Freq>
 8007618:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	4613      	mov	r3, r2
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	4413      	add	r3, r2
 8007622:	009a      	lsls	r2, r3, #2
 8007624:	441a      	add	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007630:	4a4b      	ldr	r2, [pc, #300]	; (8007760 <UART_SetConfig+0x324>)
 8007632:	fba2 2303 	umull	r2, r3, r2, r3
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	0119      	lsls	r1, r3, #4
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	4613      	mov	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	009a      	lsls	r2, r3, #2
 8007644:	441a      	add	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007650:	4b43      	ldr	r3, [pc, #268]	; (8007760 <UART_SetConfig+0x324>)
 8007652:	fba3 0302 	umull	r0, r3, r3, r2
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	2064      	movs	r0, #100	; 0x64
 800765a:	fb00 f303 	mul.w	r3, r0, r3
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	3332      	adds	r3, #50	; 0x32
 8007664:	4a3e      	ldr	r2, [pc, #248]	; (8007760 <UART_SetConfig+0x324>)
 8007666:	fba2 2303 	umull	r2, r3, r2, r3
 800766a:	095b      	lsrs	r3, r3, #5
 800766c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007670:	4419      	add	r1, r3
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009a      	lsls	r2, r3, #2
 800767c:	441a      	add	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	fbb2 f2f3 	udiv	r2, r2, r3
 8007688:	4b35      	ldr	r3, [pc, #212]	; (8007760 <UART_SetConfig+0x324>)
 800768a:	fba3 0302 	umull	r0, r3, r3, r2
 800768e:	095b      	lsrs	r3, r3, #5
 8007690:	2064      	movs	r0, #100	; 0x64
 8007692:	fb00 f303 	mul.w	r3, r0, r3
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	3332      	adds	r3, #50	; 0x32
 800769c:	4a30      	ldr	r2, [pc, #192]	; (8007760 <UART_SetConfig+0x324>)
 800769e:	fba2 2303 	umull	r2, r3, r2, r3
 80076a2:	095b      	lsrs	r3, r3, #5
 80076a4:	f003 020f 	and.w	r2, r3, #15
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	440a      	add	r2, r1
 80076ae:	609a      	str	r2, [r3, #8]
 80076b0:	e04e      	b.n	8007750 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 80076b2:	f7fe fac9 	bl	8005c48 <HAL_RCC_GetPCLK1Freq>
 80076b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009a      	lsls	r2, r3, #2
 80076c2:	441a      	add	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ce:	4a24      	ldr	r2, [pc, #144]	; (8007760 <UART_SetConfig+0x324>)
 80076d0:	fba2 2303 	umull	r2, r3, r2, r3
 80076d4:	095b      	lsrs	r3, r3, #5
 80076d6:	0119      	lsls	r1, r3, #4
 80076d8:	68ba      	ldr	r2, [r7, #8]
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009a      	lsls	r2, r3, #2
 80076e2:	441a      	add	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80076ee:	4b1c      	ldr	r3, [pc, #112]	; (8007760 <UART_SetConfig+0x324>)
 80076f0:	fba3 0302 	umull	r0, r3, r3, r2
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	2064      	movs	r0, #100	; 0x64
 80076f8:	fb00 f303 	mul.w	r3, r0, r3
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	3332      	adds	r3, #50	; 0x32
 8007702:	4a17      	ldr	r2, [pc, #92]	; (8007760 <UART_SetConfig+0x324>)
 8007704:	fba2 2303 	umull	r2, r3, r2, r3
 8007708:	095b      	lsrs	r3, r3, #5
 800770a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800770e:	4419      	add	r1, r3
 8007710:	68ba      	ldr	r2, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	009a      	lsls	r2, r3, #2
 800771a:	441a      	add	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	fbb2 f2f3 	udiv	r2, r2, r3
 8007726:	4b0e      	ldr	r3, [pc, #56]	; (8007760 <UART_SetConfig+0x324>)
 8007728:	fba3 0302 	umull	r0, r3, r3, r2
 800772c:	095b      	lsrs	r3, r3, #5
 800772e:	2064      	movs	r0, #100	; 0x64
 8007730:	fb00 f303 	mul.w	r3, r0, r3
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	011b      	lsls	r3, r3, #4
 8007738:	3332      	adds	r3, #50	; 0x32
 800773a:	4a09      	ldr	r2, [pc, #36]	; (8007760 <UART_SetConfig+0x324>)
 800773c:	fba2 2303 	umull	r2, r3, r2, r3
 8007740:	095b      	lsrs	r3, r3, #5
 8007742:	f003 020f 	and.w	r2, r3, #15
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	440a      	add	r2, r1
 800774c:	609a      	str	r2, [r3, #8]
}
 800774e:	e7ff      	b.n	8007750 <UART_SetConfig+0x314>
 8007750:	bf00      	nop
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	40011000 	.word	0x40011000
 800775c:	40011400 	.word	0x40011400
 8007760:	51eb851f 	.word	0x51eb851f

08007764 <__libc_init_array>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	2600      	movs	r6, #0
 8007768:	4d0c      	ldr	r5, [pc, #48]	; (800779c <__libc_init_array+0x38>)
 800776a:	4c0d      	ldr	r4, [pc, #52]	; (80077a0 <__libc_init_array+0x3c>)
 800776c:	1b64      	subs	r4, r4, r5
 800776e:	10a4      	asrs	r4, r4, #2
 8007770:	42a6      	cmp	r6, r4
 8007772:	d109      	bne.n	8007788 <__libc_init_array+0x24>
 8007774:	f000 f822 	bl	80077bc <_init>
 8007778:	2600      	movs	r6, #0
 800777a:	4d0a      	ldr	r5, [pc, #40]	; (80077a4 <__libc_init_array+0x40>)
 800777c:	4c0a      	ldr	r4, [pc, #40]	; (80077a8 <__libc_init_array+0x44>)
 800777e:	1b64      	subs	r4, r4, r5
 8007780:	10a4      	asrs	r4, r4, #2
 8007782:	42a6      	cmp	r6, r4
 8007784:	d105      	bne.n	8007792 <__libc_init_array+0x2e>
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	f855 3b04 	ldr.w	r3, [r5], #4
 800778c:	4798      	blx	r3
 800778e:	3601      	adds	r6, #1
 8007790:	e7ee      	b.n	8007770 <__libc_init_array+0xc>
 8007792:	f855 3b04 	ldr.w	r3, [r5], #4
 8007796:	4798      	blx	r3
 8007798:	3601      	adds	r6, #1
 800779a:	e7f2      	b.n	8007782 <__libc_init_array+0x1e>
 800779c:	080077fc 	.word	0x080077fc
 80077a0:	080077fc 	.word	0x080077fc
 80077a4:	080077fc 	.word	0x080077fc
 80077a8:	08007800 	.word	0x08007800

080077ac <memset>:
 80077ac:	4603      	mov	r3, r0
 80077ae:	4402      	add	r2, r0
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d100      	bne.n	80077b6 <memset+0xa>
 80077b4:	4770      	bx	lr
 80077b6:	f803 1b01 	strb.w	r1, [r3], #1
 80077ba:	e7f9      	b.n	80077b0 <memset+0x4>

080077bc <_init>:
 80077bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077be:	bf00      	nop
 80077c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077c2:	bc08      	pop	{r3}
 80077c4:	469e      	mov	lr, r3
 80077c6:	4770      	bx	lr

080077c8 <_fini>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	bf00      	nop
 80077cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ce:	bc08      	pop	{r3}
 80077d0:	469e      	mov	lr, r3
 80077d2:	4770      	bx	lr
