
BLDCMotor_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000750c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08007698  08007698  00017698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007890  08007890  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007890  08007890  00017890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007898  08007898  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007898  08007898  00017898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800789c  0800789c  0001789c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080078a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b58  20000088  08007928  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be0  08007928  00020be0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e264  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b7  00000000  00000000  0002e315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  000303d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b30  00000000  00000000  00030fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff73  00000000  00000000  00031b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc01  00000000  00000000  00051a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3a22  00000000  00000000  0005e68c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001220ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003818  00000000  00000000  00122104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800767c 	.word	0x0800767c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	0800767c 	.word	0x0800767c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	; 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd2:	2afd      	cmp	r2, #253	; 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	; 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	; 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	; 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmpun>:
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001114:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001118:	d102      	bne.n	8001120 <__aeabi_fcmpun+0x14>
 800111a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800111e:	d108      	bne.n	8001132 <__aeabi_fcmpun+0x26>
 8001120:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001124:	d102      	bne.n	800112c <__aeabi_fcmpun+0x20>
 8001126:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112a:	d102      	bne.n	8001132 <__aeabi_fcmpun+0x26>
 800112c:	f04f 0000 	mov.w	r0, #0
 8001130:	4770      	bx	lr
 8001132:	f04f 0001 	mov.w	r0, #1
 8001136:	4770      	bx	lr

08001138 <__aeabi_f2iz>:
 8001138:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800113c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001140:	d30f      	bcc.n	8001162 <__aeabi_f2iz+0x2a>
 8001142:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001146:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114a:	d90d      	bls.n	8001168 <__aeabi_f2iz+0x30>
 800114c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001154:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	bf18      	it	ne
 800115e:	4240      	negne	r0, r0
 8001160:	4770      	bx	lr
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	4770      	bx	lr
 8001168:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800116c:	d101      	bne.n	8001172 <__aeabi_f2iz+0x3a>
 800116e:	0242      	lsls	r2, r0, #9
 8001170:	d105      	bne.n	800117e <__aeabi_f2iz+0x46>
 8001172:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001176:	bf08      	it	eq
 8001178:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr

08001184 <__aeabi_f2uiz>:
 8001184:	0042      	lsls	r2, r0, #1
 8001186:	d20e      	bcs.n	80011a6 <__aeabi_f2uiz+0x22>
 8001188:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800118c:	d30b      	bcc.n	80011a6 <__aeabi_f2uiz+0x22>
 800118e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001192:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001196:	d409      	bmi.n	80011ac <__aeabi_f2uiz+0x28>
 8001198:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800119c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a0:	fa23 f002 	lsr.w	r0, r3, r2
 80011a4:	4770      	bx	lr
 80011a6:	f04f 0000 	mov.w	r0, #0
 80011aa:	4770      	bx	lr
 80011ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011b0:	d101      	bne.n	80011b6 <__aeabi_f2uiz+0x32>
 80011b2:	0242      	lsls	r2, r0, #9
 80011b4:	d102      	bne.n	80011bc <__aeabi_f2uiz+0x38>
 80011b6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ba:	4770      	bx	lr
 80011bc:	f04f 0000 	mov.w	r0, #0
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <__aeabi_uldivmod>:
 80011c4:	b953      	cbnz	r3, 80011dc <__aeabi_uldivmod+0x18>
 80011c6:	b94a      	cbnz	r2, 80011dc <__aeabi_uldivmod+0x18>
 80011c8:	2900      	cmp	r1, #0
 80011ca:	bf08      	it	eq
 80011cc:	2800      	cmpeq	r0, #0
 80011ce:	bf1c      	itt	ne
 80011d0:	f04f 31ff 	movne.w	r1, #4294967295
 80011d4:	f04f 30ff 	movne.w	r0, #4294967295
 80011d8:	f000 b96e 	b.w	80014b8 <__aeabi_idiv0>
 80011dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80011e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011e4:	f000 f806 	bl	80011f4 <__udivmoddi4>
 80011e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f0:	b004      	add	sp, #16
 80011f2:	4770      	bx	lr

080011f4 <__udivmoddi4>:
 80011f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011f8:	9e08      	ldr	r6, [sp, #32]
 80011fa:	460d      	mov	r5, r1
 80011fc:	4604      	mov	r4, r0
 80011fe:	468e      	mov	lr, r1
 8001200:	2b00      	cmp	r3, #0
 8001202:	f040 8083 	bne.w	800130c <__udivmoddi4+0x118>
 8001206:	428a      	cmp	r2, r1
 8001208:	4617      	mov	r7, r2
 800120a:	d947      	bls.n	800129c <__udivmoddi4+0xa8>
 800120c:	fab2 f382 	clz	r3, r2
 8001210:	b14b      	cbz	r3, 8001226 <__udivmoddi4+0x32>
 8001212:	f1c3 0120 	rsb	r1, r3, #32
 8001216:	fa05 fe03 	lsl.w	lr, r5, r3
 800121a:	fa20 f101 	lsr.w	r1, r0, r1
 800121e:	409f      	lsls	r7, r3
 8001220:	ea41 0e0e 	orr.w	lr, r1, lr
 8001224:	409c      	lsls	r4, r3
 8001226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800122a:	fbbe fcf8 	udiv	ip, lr, r8
 800122e:	fa1f f987 	uxth.w	r9, r7
 8001232:	fb08 e21c 	mls	r2, r8, ip, lr
 8001236:	fb0c f009 	mul.w	r0, ip, r9
 800123a:	0c21      	lsrs	r1, r4, #16
 800123c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8001240:	4290      	cmp	r0, r2
 8001242:	d90a      	bls.n	800125a <__udivmoddi4+0x66>
 8001244:	18ba      	adds	r2, r7, r2
 8001246:	f10c 31ff 	add.w	r1, ip, #4294967295
 800124a:	f080 8118 	bcs.w	800147e <__udivmoddi4+0x28a>
 800124e:	4290      	cmp	r0, r2
 8001250:	f240 8115 	bls.w	800147e <__udivmoddi4+0x28a>
 8001254:	f1ac 0c02 	sub.w	ip, ip, #2
 8001258:	443a      	add	r2, r7
 800125a:	1a12      	subs	r2, r2, r0
 800125c:	fbb2 f0f8 	udiv	r0, r2, r8
 8001260:	fb08 2210 	mls	r2, r8, r0, r2
 8001264:	fb00 f109 	mul.w	r1, r0, r9
 8001268:	b2a4      	uxth	r4, r4
 800126a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800126e:	42a1      	cmp	r1, r4
 8001270:	d909      	bls.n	8001286 <__udivmoddi4+0x92>
 8001272:	193c      	adds	r4, r7, r4
 8001274:	f100 32ff 	add.w	r2, r0, #4294967295
 8001278:	f080 8103 	bcs.w	8001482 <__udivmoddi4+0x28e>
 800127c:	42a1      	cmp	r1, r4
 800127e:	f240 8100 	bls.w	8001482 <__udivmoddi4+0x28e>
 8001282:	3802      	subs	r0, #2
 8001284:	443c      	add	r4, r7
 8001286:	1a64      	subs	r4, r4, r1
 8001288:	2100      	movs	r1, #0
 800128a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800128e:	b11e      	cbz	r6, 8001298 <__udivmoddi4+0xa4>
 8001290:	2200      	movs	r2, #0
 8001292:	40dc      	lsrs	r4, r3
 8001294:	e9c6 4200 	strd	r4, r2, [r6]
 8001298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xac>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f382 	clz	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d14f      	bne.n	8001348 <__udivmoddi4+0x154>
 80012a8:	1a8d      	subs	r5, r1, r2
 80012aa:	2101      	movs	r1, #1
 80012ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80012b0:	fa1f f882 	uxth.w	r8, r2
 80012b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80012b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80012bc:	fb08 f00c 	mul.w	r0, r8, ip
 80012c0:	0c22      	lsrs	r2, r4, #16
 80012c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80012c6:	42a8      	cmp	r0, r5
 80012c8:	d907      	bls.n	80012da <__udivmoddi4+0xe6>
 80012ca:	197d      	adds	r5, r7, r5
 80012cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80012d0:	d202      	bcs.n	80012d8 <__udivmoddi4+0xe4>
 80012d2:	42a8      	cmp	r0, r5
 80012d4:	f200 80e9 	bhi.w	80014aa <__udivmoddi4+0x2b6>
 80012d8:	4694      	mov	ip, r2
 80012da:	1a2d      	subs	r5, r5, r0
 80012dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80012e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80012e4:	fb08 f800 	mul.w	r8, r8, r0
 80012e8:	b2a4      	uxth	r4, r4
 80012ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012ee:	45a0      	cmp	r8, r4
 80012f0:	d907      	bls.n	8001302 <__udivmoddi4+0x10e>
 80012f2:	193c      	adds	r4, r7, r4
 80012f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80012f8:	d202      	bcs.n	8001300 <__udivmoddi4+0x10c>
 80012fa:	45a0      	cmp	r8, r4
 80012fc:	f200 80d9 	bhi.w	80014b2 <__udivmoddi4+0x2be>
 8001300:	4610      	mov	r0, r2
 8001302:	eba4 0408 	sub.w	r4, r4, r8
 8001306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800130a:	e7c0      	b.n	800128e <__udivmoddi4+0x9a>
 800130c:	428b      	cmp	r3, r1
 800130e:	d908      	bls.n	8001322 <__udivmoddi4+0x12e>
 8001310:	2e00      	cmp	r6, #0
 8001312:	f000 80b1 	beq.w	8001478 <__udivmoddi4+0x284>
 8001316:	2100      	movs	r1, #0
 8001318:	e9c6 0500 	strd	r0, r5, [r6]
 800131c:	4608      	mov	r0, r1
 800131e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001322:	fab3 f183 	clz	r1, r3
 8001326:	2900      	cmp	r1, #0
 8001328:	d14b      	bne.n	80013c2 <__udivmoddi4+0x1ce>
 800132a:	42ab      	cmp	r3, r5
 800132c:	d302      	bcc.n	8001334 <__udivmoddi4+0x140>
 800132e:	4282      	cmp	r2, r0
 8001330:	f200 80b9 	bhi.w	80014a6 <__udivmoddi4+0x2b2>
 8001334:	1a84      	subs	r4, r0, r2
 8001336:	eb65 0303 	sbc.w	r3, r5, r3
 800133a:	2001      	movs	r0, #1
 800133c:	469e      	mov	lr, r3
 800133e:	2e00      	cmp	r6, #0
 8001340:	d0aa      	beq.n	8001298 <__udivmoddi4+0xa4>
 8001342:	e9c6 4e00 	strd	r4, lr, [r6]
 8001346:	e7a7      	b.n	8001298 <__udivmoddi4+0xa4>
 8001348:	409f      	lsls	r7, r3
 800134a:	f1c3 0220 	rsb	r2, r3, #32
 800134e:	40d1      	lsrs	r1, r2
 8001350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001354:	fbb1 f0fe 	udiv	r0, r1, lr
 8001358:	fa1f f887 	uxth.w	r8, r7
 800135c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001360:	fa24 f202 	lsr.w	r2, r4, r2
 8001364:	409d      	lsls	r5, r3
 8001366:	fb00 fc08 	mul.w	ip, r0, r8
 800136a:	432a      	orrs	r2, r5
 800136c:	0c15      	lsrs	r5, r2, #16
 800136e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8001372:	45ac      	cmp	ip, r5
 8001374:	fa04 f403 	lsl.w	r4, r4, r3
 8001378:	d909      	bls.n	800138e <__udivmoddi4+0x19a>
 800137a:	197d      	adds	r5, r7, r5
 800137c:	f100 31ff 	add.w	r1, r0, #4294967295
 8001380:	f080 808f 	bcs.w	80014a2 <__udivmoddi4+0x2ae>
 8001384:	45ac      	cmp	ip, r5
 8001386:	f240 808c 	bls.w	80014a2 <__udivmoddi4+0x2ae>
 800138a:	3802      	subs	r0, #2
 800138c:	443d      	add	r5, r7
 800138e:	eba5 050c 	sub.w	r5, r5, ip
 8001392:	fbb5 f1fe 	udiv	r1, r5, lr
 8001396:	fb0e 5c11 	mls	ip, lr, r1, r5
 800139a:	fb01 f908 	mul.w	r9, r1, r8
 800139e:	b295      	uxth	r5, r2
 80013a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80013a4:	45a9      	cmp	r9, r5
 80013a6:	d907      	bls.n	80013b8 <__udivmoddi4+0x1c4>
 80013a8:	197d      	adds	r5, r7, r5
 80013aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80013ae:	d274      	bcs.n	800149a <__udivmoddi4+0x2a6>
 80013b0:	45a9      	cmp	r9, r5
 80013b2:	d972      	bls.n	800149a <__udivmoddi4+0x2a6>
 80013b4:	3902      	subs	r1, #2
 80013b6:	443d      	add	r5, r7
 80013b8:	eba5 0509 	sub.w	r5, r5, r9
 80013bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013c0:	e778      	b.n	80012b4 <__udivmoddi4+0xc0>
 80013c2:	f1c1 0720 	rsb	r7, r1, #32
 80013c6:	408b      	lsls	r3, r1
 80013c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80013cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80013d0:	fa25 f407 	lsr.w	r4, r5, r7
 80013d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80013d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80013dc:	fa1f f88c 	uxth.w	r8, ip
 80013e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80013e4:	fa20 f307 	lsr.w	r3, r0, r7
 80013e8:	fb09 fa08 	mul.w	sl, r9, r8
 80013ec:	408d      	lsls	r5, r1
 80013ee:	431d      	orrs	r5, r3
 80013f0:	0c2b      	lsrs	r3, r5, #16
 80013f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013f6:	45a2      	cmp	sl, r4
 80013f8:	fa02 f201 	lsl.w	r2, r2, r1
 80013fc:	fa00 f301 	lsl.w	r3, r0, r1
 8001400:	d909      	bls.n	8001416 <__udivmoddi4+0x222>
 8001402:	eb1c 0404 	adds.w	r4, ip, r4
 8001406:	f109 30ff 	add.w	r0, r9, #4294967295
 800140a:	d248      	bcs.n	800149e <__udivmoddi4+0x2aa>
 800140c:	45a2      	cmp	sl, r4
 800140e:	d946      	bls.n	800149e <__udivmoddi4+0x2aa>
 8001410:	f1a9 0902 	sub.w	r9, r9, #2
 8001414:	4464      	add	r4, ip
 8001416:	eba4 040a 	sub.w	r4, r4, sl
 800141a:	fbb4 f0fe 	udiv	r0, r4, lr
 800141e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001422:	fb00 fa08 	mul.w	sl, r0, r8
 8001426:	b2ad      	uxth	r5, r5
 8001428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800142c:	45a2      	cmp	sl, r4
 800142e:	d908      	bls.n	8001442 <__udivmoddi4+0x24e>
 8001430:	eb1c 0404 	adds.w	r4, ip, r4
 8001434:	f100 35ff 	add.w	r5, r0, #4294967295
 8001438:	d22d      	bcs.n	8001496 <__udivmoddi4+0x2a2>
 800143a:	45a2      	cmp	sl, r4
 800143c:	d92b      	bls.n	8001496 <__udivmoddi4+0x2a2>
 800143e:	3802      	subs	r0, #2
 8001440:	4464      	add	r4, ip
 8001442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001446:	fba0 8902 	umull	r8, r9, r0, r2
 800144a:	eba4 040a 	sub.w	r4, r4, sl
 800144e:	454c      	cmp	r4, r9
 8001450:	46c6      	mov	lr, r8
 8001452:	464d      	mov	r5, r9
 8001454:	d319      	bcc.n	800148a <__udivmoddi4+0x296>
 8001456:	d016      	beq.n	8001486 <__udivmoddi4+0x292>
 8001458:	b15e      	cbz	r6, 8001472 <__udivmoddi4+0x27e>
 800145a:	ebb3 020e 	subs.w	r2, r3, lr
 800145e:	eb64 0405 	sbc.w	r4, r4, r5
 8001462:	fa04 f707 	lsl.w	r7, r4, r7
 8001466:	fa22 f301 	lsr.w	r3, r2, r1
 800146a:	431f      	orrs	r7, r3
 800146c:	40cc      	lsrs	r4, r1
 800146e:	e9c6 7400 	strd	r7, r4, [r6]
 8001472:	2100      	movs	r1, #0
 8001474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001478:	4631      	mov	r1, r6
 800147a:	4630      	mov	r0, r6
 800147c:	e70c      	b.n	8001298 <__udivmoddi4+0xa4>
 800147e:	468c      	mov	ip, r1
 8001480:	e6eb      	b.n	800125a <__udivmoddi4+0x66>
 8001482:	4610      	mov	r0, r2
 8001484:	e6ff      	b.n	8001286 <__udivmoddi4+0x92>
 8001486:	4543      	cmp	r3, r8
 8001488:	d2e6      	bcs.n	8001458 <__udivmoddi4+0x264>
 800148a:	ebb8 0e02 	subs.w	lr, r8, r2
 800148e:	eb69 050c 	sbc.w	r5, r9, ip
 8001492:	3801      	subs	r0, #1
 8001494:	e7e0      	b.n	8001458 <__udivmoddi4+0x264>
 8001496:	4628      	mov	r0, r5
 8001498:	e7d3      	b.n	8001442 <__udivmoddi4+0x24e>
 800149a:	4611      	mov	r1, r2
 800149c:	e78c      	b.n	80013b8 <__udivmoddi4+0x1c4>
 800149e:	4681      	mov	r9, r0
 80014a0:	e7b9      	b.n	8001416 <__udivmoddi4+0x222>
 80014a2:	4608      	mov	r0, r1
 80014a4:	e773      	b.n	800138e <__udivmoddi4+0x19a>
 80014a6:	4608      	mov	r0, r1
 80014a8:	e749      	b.n	800133e <__udivmoddi4+0x14a>
 80014aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80014ae:	443d      	add	r5, r7
 80014b0:	e713      	b.n	80012da <__udivmoddi4+0xe6>
 80014b2:	3802      	subs	r0, #2
 80014b4:	443c      	add	r4, r7
 80014b6:	e724      	b.n	8001302 <__udivmoddi4+0x10e>

080014b8 <__aeabi_idiv0>:
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop

080014bc <initialize_PID_constants>:
float I_beta = 0;
float I_d = 0;
float I_q = 0;
float summ = 0;

void initialize_PID_constants() {
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
	Kp = 0.001;
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <initialize_PID_constants+0x20>)
 80014c2:	4a07      	ldr	r2, [pc, #28]	; (80014e0 <initialize_PID_constants+0x24>)
 80014c4:	601a      	str	r2, [r3, #0]
	Ki = 2;
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <initialize_PID_constants+0x28>)
 80014c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014cc:	601a      	str	r2, [r3, #0]
    Kd = 0.1;
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <initialize_PID_constants+0x2c>)
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <initialize_PID_constants+0x30>)
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	200006c8 	.word	0x200006c8
 80014e0:	3a83126f 	.word	0x3a83126f
 80014e4:	200000fc 	.word	0x200000fc
 80014e8:	200003ec 	.word	0x200003ec
 80014ec:	3dcccccd 	.word	0x3dcccccd

080014f0 <move_rotor>:
uint16_t cnt_hall_last = 0;

/////////////////////////////////

// Функция изменяет ШИМ в соответсвии с указанным вектором тяги
void move_rotor(float to_angle) {
 80014f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	// Расчет потенциалов и заполнения шима для фаз
	U_PWM = pwm*1.122263439*(sin((to_angle)     * M_PI/180) + sin((to_angle)     * M_PI/60)/4);
 80014fa:	4bb7      	ldr	r3, [pc, #732]	; (80017d8 <move_rotor+0x2e8>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ffb4 	bl	800046c <__aeabi_i2d>
 8001504:	a3b0      	add	r3, pc, #704	; (adr r3, 80017c8 <move_rotor+0x2d8>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7ff f819 	bl	8000540 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4690      	mov	r8, r2
 8001514:	4699      	mov	r9, r3
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7fe ffba 	bl	8000490 <__aeabi_f2d>
 800151c:	a3ac      	add	r3, pc, #688	; (adr r3, 80017d0 <move_rotor+0x2e0>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7ff f80d 	bl	8000540 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4baa      	ldr	r3, [pc, #680]	; (80017dc <move_rotor+0x2ec>)
 8001534:	f7ff f92e 	bl	8000794 <__aeabi_ddiv>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f004 fff2 	bl	8006528 <sin>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7fe ffa1 	bl	8000490 <__aeabi_f2d>
 800154e:	a3a0      	add	r3, pc, #640	; (adr r3, 80017d0 <move_rotor+0x2e0>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7fe fff4 	bl	8000540 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b9e      	ldr	r3, [pc, #632]	; (80017e0 <move_rotor+0x2f0>)
 8001566:	f7ff f915 	bl	8000794 <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f004 ffd9 	bl	8006528 <sin>
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b9a      	ldr	r3, [pc, #616]	; (80017e4 <move_rotor+0x2f4>)
 800157c:	f7ff f90a 	bl	8000794 <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4620      	mov	r0, r4
 8001586:	4629      	mov	r1, r5
 8001588:	f7fe fe24 	bl	80001d4 <__adddf3>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4640      	mov	r0, r8
 8001592:	4649      	mov	r1, r9
 8001594:	f7fe ffd4 	bl	8000540 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff fa90 	bl	8000ac4 <__aeabi_d2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a90      	ldr	r2, [pc, #576]	; (80017e8 <move_rotor+0x2f8>)
 80015a8:	6013      	str	r3, [r2, #0]
	W_PWM = pwm*1.122263439*(sin((to_angle+240) * M_PI/180) + sin((to_angle+240) * M_PI/60)/4);
 80015aa:	4b8b      	ldr	r3, [pc, #556]	; (80017d8 <move_rotor+0x2e8>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff5c 	bl	800046c <__aeabi_i2d>
 80015b4:	a384      	add	r3, pc, #528	; (adr r3, 80017c8 <move_rotor+0x2d8>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7fe ffc1 	bl	8000540 <__aeabi_dmul>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4690      	mov	r8, r2
 80015c4:	4699      	mov	r9, r3
 80015c6:	4989      	ldr	r1, [pc, #548]	; (80017ec <move_rotor+0x2fc>)
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff fad1 	bl	8000b70 <__addsf3>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff5d 	bl	8000490 <__aeabi_f2d>
 80015d6:	a37e      	add	r3, pc, #504	; (adr r3, 80017d0 <move_rotor+0x2e0>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7fe ffb0 	bl	8000540 <__aeabi_dmul>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b7b      	ldr	r3, [pc, #492]	; (80017dc <move_rotor+0x2ec>)
 80015ee:	f7ff f8d1 	bl	8000794 <__aeabi_ddiv>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f004 ff95 	bl	8006528 <sin>
 80015fe:	4604      	mov	r4, r0
 8001600:	460d      	mov	r5, r1
 8001602:	497a      	ldr	r1, [pc, #488]	; (80017ec <move_rotor+0x2fc>)
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fab3 	bl	8000b70 <__addsf3>
 800160a:	4603      	mov	r3, r0
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff3f 	bl	8000490 <__aeabi_f2d>
 8001612:	a36f      	add	r3, pc, #444	; (adr r3, 80017d0 <move_rotor+0x2e0>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7fe ff92 	bl	8000540 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	4b6d      	ldr	r3, [pc, #436]	; (80017e0 <move_rotor+0x2f0>)
 800162a:	f7ff f8b3 	bl	8000794 <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f004 ff77 	bl	8006528 <sin>
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	4b69      	ldr	r3, [pc, #420]	; (80017e4 <move_rotor+0x2f4>)
 8001640:	f7ff f8a8 	bl	8000794 <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	f7fe fdc2 	bl	80001d4 <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4640      	mov	r0, r8
 8001656:	4649      	mov	r1, r9
 8001658:	f7fe ff72 	bl	8000540 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fa2e 	bl	8000ac4 <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	4a61      	ldr	r2, [pc, #388]	; (80017f0 <move_rotor+0x300>)
 800166c:	6013      	str	r3, [r2, #0]
	V_PWM = pwm*1.122263439*(sin((to_angle+120) * M_PI/180) + sin((to_angle+120) * M_PI/60)/4);
 800166e:	4b5a      	ldr	r3, [pc, #360]	; (80017d8 <move_rotor+0x2e8>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fefa 	bl	800046c <__aeabi_i2d>
 8001678:	a353      	add	r3, pc, #332	; (adr r3, 80017c8 <move_rotor+0x2d8>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7fe ff5f 	bl	8000540 <__aeabi_dmul>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4690      	mov	r8, r2
 8001688:	4699      	mov	r9, r3
 800168a:	495a      	ldr	r1, [pc, #360]	; (80017f4 <move_rotor+0x304>)
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fa6f 	bl	8000b70 <__addsf3>
 8001692:	4603      	mov	r3, r0
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe fefb 	bl	8000490 <__aeabi_f2d>
 800169a:	a34d      	add	r3, pc, #308	; (adr r3, 80017d0 <move_rotor+0x2e0>)
 800169c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a0:	f7fe ff4e 	bl	8000540 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <move_rotor+0x2ec>)
 80016b2:	f7ff f86f 	bl	8000794 <__aeabi_ddiv>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f004 ff33 	bl	8006528 <sin>
 80016c2:	4604      	mov	r4, r0
 80016c4:	460d      	mov	r5, r1
 80016c6:	494b      	ldr	r1, [pc, #300]	; (80017f4 <move_rotor+0x304>)
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff fa51 	bl	8000b70 <__addsf3>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fedd 	bl	8000490 <__aeabi_f2d>
 80016d6:	a33e      	add	r3, pc, #248	; (adr r3, 80017d0 <move_rotor+0x2e0>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7fe ff30 	bl	8000540 <__aeabi_dmul>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b3c      	ldr	r3, [pc, #240]	; (80017e0 <move_rotor+0x2f0>)
 80016ee:	f7ff f851 	bl	8000794 <__aeabi_ddiv>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f004 ff15 	bl	8006528 <sin>
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <move_rotor+0x2f4>)
 8001704:	f7ff f846 	bl	8000794 <__aeabi_ddiv>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fd60 	bl	80001d4 <__adddf3>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4640      	mov	r0, r8
 800171a:	4649      	mov	r1, r9
 800171c:	f7fe ff10 	bl	8000540 <__aeabi_dmul>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff f9cc 	bl	8000ac4 <__aeabi_d2f>
 800172c:	4603      	mov	r3, r0
 800172e:	4a32      	ldr	r2, [pc, #200]	; (80017f8 <move_rotor+0x308>)
 8001730:	6013      	str	r3, [r2, #0]
	/////////////////////////////////
	// Перенастройка шима на фазах

	if(U_PWM >= 0) { // if, т. к. позитивными и негативными ключами управляют разные каналы таймеров
 8001732:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <move_rotor+0x2f8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f04f 0100 	mov.w	r1, #0
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fcd2 	bl	80010e4 <__aeabi_fcmpge>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d011      	beq.n	800176a <move_rotor+0x27a>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001746:	2100      	movs	r1, #0
 8001748:	482c      	ldr	r0, [pc, #176]	; (80017fc <move_rotor+0x30c>)
 800174a:	f004 fdaf 	bl	80062ac <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR1 = (uint16_t)(U_PWM);
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <move_rotor+0x2f8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fd16 	bl	8001184 <__aeabi_f2uiz>
 8001758:	4603      	mov	r3, r0
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <move_rotor+0x310>)
 800175e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001760:	2100      	movs	r1, #0
 8001762:	4826      	ldr	r0, [pc, #152]	; (80017fc <move_rotor+0x30c>)
 8001764:	f003 fe36 	bl	80053d4 <HAL_TIM_PWM_Start>
 8001768:	e012      	b.n	8001790 <move_rotor+0x2a0>
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800176a:	2100      	movs	r1, #0
 800176c:	4823      	ldr	r0, [pc, #140]	; (80017fc <move_rotor+0x30c>)
 800176e:	f003 fe6f 	bl	8005450 <HAL_TIM_PWM_Stop>
		TIM1->CCR1 = (uint16_t)(-U_PWM);
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <move_rotor+0x2f8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fd02 	bl	8001184 <__aeabi_f2uiz>
 8001780:	4603      	mov	r3, r0
 8001782:	b29a      	uxth	r2, r3
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <move_rotor+0x310>)
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001788:	2100      	movs	r1, #0
 800178a:	481c      	ldr	r0, [pc, #112]	; (80017fc <move_rotor+0x30c>)
 800178c:	f004 fd64 	bl	8006258 <HAL_TIMEx_PWMN_Start>
	}

	if(W_PWM >= 0) {
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <move_rotor+0x300>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f04f 0100 	mov.w	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fca3 	bl	80010e4 <__aeabi_fcmpge>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d033      	beq.n	800180c <move_rotor+0x31c>
		HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 80017a4:	2100      	movs	r1, #0
 80017a6:	4817      	ldr	r0, [pc, #92]	; (8001804 <move_rotor+0x314>)
 80017a8:	f004 fd80 	bl	80062ac <HAL_TIMEx_PWMN_Stop>
		TIM8->CCR1 = (uint16_t)(V_PWM);
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <move_rotor+0x308>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fce7 	bl	8001184 <__aeabi_f2uiz>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <move_rotor+0x318>)
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80017be:	2100      	movs	r1, #0
 80017c0:	4810      	ldr	r0, [pc, #64]	; (8001804 <move_rotor+0x314>)
 80017c2:	f003 fe07 	bl	80053d4 <HAL_TIM_PWM_Start>
 80017c6:	e034      	b.n	8001832 <move_rotor+0x342>
 80017c8:	8200061b 	.word	0x8200061b
 80017cc:	3ff1f4ca 	.word	0x3ff1f4ca
 80017d0:	54442d18 	.word	0x54442d18
 80017d4:	400921fb 	.word	0x400921fb
 80017d8:	200000a6 	.word	0x200000a6
 80017dc:	40668000 	.word	0x40668000
 80017e0:	404e0000 	.word	0x404e0000
 80017e4:	40100000 	.word	0x40100000
 80017e8:	20000100 	.word	0x20000100
 80017ec:	43700000 	.word	0x43700000
 80017f0:	2000010c 	.word	0x2000010c
 80017f4:	42f00000 	.word	0x42f00000
 80017f8:	20000104 	.word	0x20000104
 80017fc:	20000b5c 	.word	0x20000b5c
 8001800:	40010000 	.word	0x40010000
 8001804:	200009a4 	.word	0x200009a4
 8001808:	40010400 	.word	0x40010400
	}
	else {
		HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800180c:	2100      	movs	r1, #0
 800180e:	4826      	ldr	r0, [pc, #152]	; (80018a8 <move_rotor+0x3b8>)
 8001810:	f003 fe1e 	bl	8005450 <HAL_TIM_PWM_Stop>
		TIM8->CCR1 = (uint16_t)(-V_PWM);
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <move_rotor+0x3bc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fcb1 	bl	8001184 <__aeabi_f2uiz>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <move_rotor+0x3c0>)
 8001828:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 800182a:	2100      	movs	r1, #0
 800182c:	481e      	ldr	r0, [pc, #120]	; (80018a8 <move_rotor+0x3b8>)
 800182e:	f004 fd13 	bl	8006258 <HAL_TIMEx_PWMN_Start>
	}

	if(W_PWM >= 0) {
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <move_rotor+0x3c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f04f 0100 	mov.w	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fc52 	bl	80010e4 <__aeabi_fcmpge>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d011      	beq.n	800186a <move_rotor+0x37a>
		HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001846:	2104      	movs	r1, #4
 8001848:	481b      	ldr	r0, [pc, #108]	; (80018b8 <move_rotor+0x3c8>)
 800184a:	f004 fd2f 	bl	80062ac <HAL_TIMEx_PWMN_Stop>
		TIM1->CCR2 = (uint16_t)(W_PWM);
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <move_rotor+0x3c4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fc96 	bl	8001184 <__aeabi_f2uiz>
 8001858:	4603      	mov	r3, r0
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b17      	ldr	r3, [pc, #92]	; (80018bc <move_rotor+0x3cc>)
 800185e:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001860:	2104      	movs	r1, #4
 8001862:	4815      	ldr	r0, [pc, #84]	; (80018b8 <move_rotor+0x3c8>)
 8001864:	f003 fdb6 	bl	80053d4 <HAL_TIM_PWM_Start>
 8001868:	e012      	b.n	8001890 <move_rotor+0x3a0>
	}
	else {
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800186a:	2104      	movs	r1, #4
 800186c:	4812      	ldr	r0, [pc, #72]	; (80018b8 <move_rotor+0x3c8>)
 800186e:	f003 fdef 	bl	8005450 <HAL_TIM_PWM_Stop>
		TIM1->CCR2 = (uint16_t)(-W_PWM);
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <move_rotor+0x3c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff fc82 	bl	8001184 <__aeabi_f2uiz>
 8001880:	4603      	mov	r3, r0
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <move_rotor+0x3cc>)
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001888:	2104      	movs	r1, #4
 800188a:	480b      	ldr	r0, [pc, #44]	; (80018b8 <move_rotor+0x3c8>)
 800188c:	f004 fce4 	bl	8006258 <HAL_TIMEx_PWMN_Start>
	}

	// Сброс счетчиков таймеров для синхронизации
	TIM1->CNT = 0;
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <move_rotor+0x3cc>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8->CNT = 0;
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <move_rotor+0x3c0>)
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
	return;
 800189c:	bf00      	nop
}
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80018a6:	bf00      	nop
 80018a8:	200009a4 	.word	0x200009a4
 80018ac:	20000104 	.word	0x20000104
 80018b0:	40010400 	.word	0x40010400
 80018b4:	2000010c 	.word	0x2000010c
 80018b8:	20000b5c 	.word	0x20000b5c
 80018bc:	40010000 	.word	0x40010000

080018c0 <motor_control>:

// Функция, управляющая последовательностью переключением обмоток двигателя
float offset = 90; // Датчики развернуты на +26.5 градусов отностительно статора; сдвиг в меньше 27- движение по часовой, в больше - против часовой
uint8_t next_step;
uint16_t error_hall;
void motor_control(uint8_t command, uint16_t pwm) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	460a      	mov	r2, r1
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	4613      	mov	r3, r2
 80018ce:	80bb      	strh	r3, [r7, #4]
	switch (command) {
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80aa 	beq.w	8001a2c <motor_control+0x16c>
 80018d8:	2b02      	cmp	r3, #2
 80018da:	f040 80c0 	bne.w	8001a5e <motor_control+0x19e>
		case Eright:
			switch (step) {
 80018de:	4b62      	ldr	r3, [pc, #392]	; (8001a68 <motor_control+0x1a8>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	f200 809f 	bhi.w	8001a28 <motor_control+0x168>
 80018ea:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <motor_control+0x30>)
 80018ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f0:	080019f9 	.word	0x080019f9
 80018f4:	08001999 	.word	0x08001999
 80018f8:	080019c9 	.word	0x080019c9
 80018fc:	08001939 	.word	0x08001939
 8001900:	08001909 	.word	0x08001909
 8001904:	08001969 	.word	0x08001969
			case 0b101: // Состояние 5
				rotor_angle = 30;
 8001908:	4b58      	ldr	r3, [pc, #352]	; (8001a6c <motor_control+0x1ac>)
 800190a:	4a59      	ldr	r2, [pc, #356]	; (8001a70 <motor_control+0x1b0>)
 800190c:	601a      	str	r2, [r3, #0]
				next_step = 0b001;
 800190e:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <motor_control+0x1b4>)
 8001910:	2201      	movs	r2, #1
 8001912:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 8001914:	4b55      	ldr	r3, [pc, #340]	; (8001a6c <motor_control+0x1ac>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a57      	ldr	r2, [pc, #348]	; (8001a78 <motor_control+0x1b8>)
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f926 	bl	8000b70 <__addsf3>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	4b54      	ldr	r3, [pc, #336]	; (8001a7c <motor_control+0x1bc>)
 800192a:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 800192c:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <motor_control+0x1bc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fddd 	bl	80014f0 <move_rotor>
				break;
 8001936:	e078      	b.n	8001a2a <motor_control+0x16a>
			case 0b100: // Состояние 4
				rotor_angle = 330;
 8001938:	4b4c      	ldr	r3, [pc, #304]	; (8001a6c <motor_control+0x1ac>)
 800193a:	4a51      	ldr	r2, [pc, #324]	; (8001a80 <motor_control+0x1c0>)
 800193c:	601a      	str	r2, [r3, #0]
				next_step = 0b101;
 800193e:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <motor_control+0x1b4>)
 8001940:	2205      	movs	r2, #5
 8001942:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 8001944:	4b49      	ldr	r3, [pc, #292]	; (8001a6c <motor_control+0x1ac>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <motor_control+0x1b8>)
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	4611      	mov	r1, r2
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f90e 	bl	8000b70 <__addsf3>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <motor_control+0x1bc>)
 800195a:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 800195c:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <motor_control+0x1bc>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fdc5 	bl	80014f0 <move_rotor>
				break;
 8001966:	e060      	b.n	8001a2a <motor_control+0x16a>
			case 0b110: // Состояние 6
				rotor_angle = 270;
 8001968:	4b40      	ldr	r3, [pc, #256]	; (8001a6c <motor_control+0x1ac>)
 800196a:	4a46      	ldr	r2, [pc, #280]	; (8001a84 <motor_control+0x1c4>)
 800196c:	601a      	str	r2, [r3, #0]
				next_step = 0b100;
 800196e:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <motor_control+0x1b4>)
 8001970:	2204      	movs	r2, #4
 8001972:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 8001974:	4b3d      	ldr	r3, [pc, #244]	; (8001a6c <motor_control+0x1ac>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a3f      	ldr	r2, [pc, #252]	; (8001a78 <motor_control+0x1b8>)
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f8f6 	bl	8000b70 <__addsf3>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4b3c      	ldr	r3, [pc, #240]	; (8001a7c <motor_control+0x1bc>)
 800198a:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 800198c:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <motor_control+0x1bc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fdad 	bl	80014f0 <move_rotor>
				break;
 8001996:	e048      	b.n	8001a2a <motor_control+0x16a>
			case 0b010: // Состояние 2
				rotor_angle = 210;
 8001998:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <motor_control+0x1ac>)
 800199a:	4a3b      	ldr	r2, [pc, #236]	; (8001a88 <motor_control+0x1c8>)
 800199c:	601a      	str	r2, [r3, #0]
				next_step = 0b110;
 800199e:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <motor_control+0x1b4>)
 80019a0:	2206      	movs	r2, #6
 80019a2:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 80019a4:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <motor_control+0x1ac>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a33      	ldr	r2, [pc, #204]	; (8001a78 <motor_control+0x1b8>)
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f8de 	bl	8000b70 <__addsf3>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <motor_control+0x1bc>)
 80019ba:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 80019bc:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <motor_control+0x1bc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fd95 	bl	80014f0 <move_rotor>
				break;
 80019c6:	e030      	b.n	8001a2a <motor_control+0x16a>
			case 0b011: // Состояние 3
				rotor_angle = 150;
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <motor_control+0x1ac>)
 80019ca:	4a30      	ldr	r2, [pc, #192]	; (8001a8c <motor_control+0x1cc>)
 80019cc:	601a      	str	r2, [r3, #0]
				next_step = 0b010;
 80019ce:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <motor_control+0x1b4>)
 80019d0:	2202      	movs	r2, #2
 80019d2:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 80019d4:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <motor_control+0x1ac>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a27      	ldr	r2, [pc, #156]	; (8001a78 <motor_control+0x1b8>)
 80019da:	6812      	ldr	r2, [r2, #0]
 80019dc:	4611      	mov	r1, r2
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f8c6 	bl	8000b70 <__addsf3>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <motor_control+0x1bc>)
 80019ea:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <motor_control+0x1bc>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fd7d 	bl	80014f0 <move_rotor>
				break;
 80019f6:	e018      	b.n	8001a2a <motor_control+0x16a>
			case 0b001: // Состояние 1
				rotor_angle = 90;
 80019f8:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <motor_control+0x1ac>)
 80019fa:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <motor_control+0x1d0>)
 80019fc:	601a      	str	r2, [r3, #0]
				next_step = 0b011;
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <motor_control+0x1b4>)
 8001a00:	2203      	movs	r2, #3
 8001a02:	701a      	strb	r2, [r3, #0]
				currentAngle = rotor_angle + offset;
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <motor_control+0x1ac>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <motor_control+0x1b8>)
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f8ae 	bl	8000b70 <__addsf3>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <motor_control+0x1bc>)
 8001a1a:	601a      	str	r2, [r3, #0]
				move_rotor(currentAngle);
 8001a1c:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <motor_control+0x1bc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff fd65 	bl	80014f0 <move_rotor>
				break;
 8001a26:	e000      	b.n	8001a2a <motor_control+0x16a>
			default:
				break;
 8001a28:	bf00      	nop
			}
			break;
 8001a2a:	e019      	b.n	8001a60 <motor_control+0x1a0>

		case Estop:
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4819      	ldr	r0, [pc, #100]	; (8001a94 <motor_control+0x1d4>)
 8001a30:	f003 fd0e 	bl	8005450 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001a34:	2100      	movs	r1, #0
 8001a36:	4817      	ldr	r0, [pc, #92]	; (8001a94 <motor_control+0x1d4>)
 8001a38:	f004 fc38 	bl	80062ac <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	4815      	ldr	r0, [pc, #84]	; (8001a94 <motor_control+0x1d4>)
 8001a40:	f003 fd06 	bl	8005450 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001a44:	2104      	movs	r1, #4
 8001a46:	4813      	ldr	r0, [pc, #76]	; (8001a94 <motor_control+0x1d4>)
 8001a48:	f004 fc30 	bl	80062ac <HAL_TIMEx_PWMN_Stop>

			HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4812      	ldr	r0, [pc, #72]	; (8001a98 <motor_control+0x1d8>)
 8001a50:	f003 fcfe 	bl	8005450 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim8, TIM_CHANNEL_1);
 8001a54:	2100      	movs	r1, #0
 8001a56:	4810      	ldr	r0, [pc, #64]	; (8001a98 <motor_control+0x1d8>)
 8001a58:	f004 fc28 	bl	80062ac <HAL_TIMEx_PWMN_Stop>
			break;
 8001a5c:	e000      	b.n	8001a60 <motor_control+0x1a0>
//			}
//
//			break;

		default:
			break;
 8001a5e:	bf00      	nop
	}
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	200000a4 	.word	0x200000a4
 8001a6c:	200000ac 	.word	0x200000ac
 8001a70:	41f00000 	.word	0x41f00000
 8001a74:	200000f2 	.word	0x200000f2
 8001a78:	2000000c 	.word	0x2000000c
 8001a7c:	200000b0 	.word	0x200000b0
 8001a80:	43a50000 	.word	0x43a50000
 8001a84:	43870000 	.word	0x43870000
 8001a88:	43520000 	.word	0x43520000
 8001a8c:	43160000 	.word	0x43160000
 8001a90:	42b40000 	.word	0x42b40000
 8001a94:	20000b5c 	.word	0x20000b5c
 8001a98:	200009a4 	.word	0x200009a4

08001a9c <cur_sector>:

// Чтение показателей датчиков Холла
void cur_sector() {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
	hal_U = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5);
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	4815      	ldr	r0, [pc, #84]	; (8001af8 <cur_sector+0x5c>)
 8001aa4:	f002 ff78 	bl	8004998 <HAL_GPIO_ReadPin>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <cur_sector+0x60>)
 8001aae:	701a      	strb	r2, [r3, #0]
	hal_V = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0);
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	4811      	ldr	r0, [pc, #68]	; (8001af8 <cur_sector+0x5c>)
 8001ab4:	f002 ff70 	bl	8004998 <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <cur_sector+0x64>)
 8001abe:	701a      	strb	r2, [r3, #0]
	hal_W = HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1);
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	480d      	ldr	r0, [pc, #52]	; (8001af8 <cur_sector+0x5c>)
 8001ac4:	f002 ff68 	bl	8004998 <HAL_GPIO_ReadPin>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <cur_sector+0x68>)
 8001ace:	701a      	strb	r2, [r3, #0]
	step = (hal_W) | (hal_V << 1) | (hal_U << 2);
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <cur_sector+0x64>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <cur_sector+0x68>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	b25a      	sxtb	r2, r3
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <cur_sector+0x60>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b25b      	sxtb	r3, r3
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <cur_sector+0x6c>)
 8001af2:	701a      	strb	r2, [r3, #0]
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40020000 	.word	0x40020000
 8001afc:	20000108 	.word	0x20000108
 8001b00:	20000110 	.word	0x20000110
 8001b04:	20000118 	.word	0x20000118
 8001b08:	200000a4 	.word	0x200000a4

08001b0c <calculateSpeed>:

#define PULSES_PER_REVOLUTION 	6
#define GEAR_RATIO 				28 // Передаточное число
#define STEPS_REDUCER 			2

void calculateSpeed(float count, float time) {
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
	currentSpeed = count * 60 / (336 * time / 1000); // Текущая скорость в об/мин. Расчет: cnt_hall * 3.571428 = 60 c * cnt_hall / 16.8 = , где  16.8 = 336 * 0.05 - кол-во прерываний датчика холла за 0.05 с, для вращения со скоростью 1 об/с
 8001b16:	490e      	ldr	r1, [pc, #56]	; (8001b50 <calculateSpeed+0x44>)
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff f931 	bl	8000d80 <__aeabi_fmul>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461c      	mov	r4, r3
 8001b22:	490c      	ldr	r1, [pc, #48]	; (8001b54 <calculateSpeed+0x48>)
 8001b24:	6838      	ldr	r0, [r7, #0]
 8001b26:	f7ff f92b 	bl	8000d80 <__aeabi_fmul>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	490a      	ldr	r1, [pc, #40]	; (8001b58 <calculateSpeed+0x4c>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f9da 	bl	8000ee8 <__aeabi_fdiv>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4619      	mov	r1, r3
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff f9d5 	bl	8000ee8 <__aeabi_fdiv>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <calculateSpeed+0x50>)
 8001b44:	601a      	str	r2, [r3, #0]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd90      	pop	{r4, r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	42700000 	.word	0x42700000
 8001b54:	43a80000 	.word	0x43a80000
 8001b58:	447a0000 	.word	0x447a0000
 8001b5c:	200000b4 	.word	0x200000b4

08001b60 <calculatePID>:


float tmp_pwm;
void calculatePID(float time) {
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
    error = targetRPM - currentSpeed;
 8001b68:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <calculatePID+0x108>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a3f      	ldr	r2, [pc, #252]	; (8001c6c <calculatePID+0x10c>)
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fffa 	bl	8000b6c <__aeabi_fsub>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b3c      	ldr	r3, [pc, #240]	; (8001c70 <calculatePID+0x110>)
 8001b7e:	601a      	str	r2, [r3, #0]
    integral += error * (time/1000);
 8001b80:	493c      	ldr	r1, [pc, #240]	; (8001c74 <calculatePID+0x114>)
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff f9b0 	bl	8000ee8 <__aeabi_fdiv>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <calculatePID+0x110>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4619      	mov	r1, r3
 8001b92:	4610      	mov	r0, r2
 8001b94:	f7ff f8f4 	bl	8000d80 <__aeabi_fmul>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <calculatePID+0x118>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	f7fe ffe4 	bl	8000b70 <__addsf3>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <calculatePID+0x118>)
 8001bae:	601a      	str	r2, [r3, #0]
    derivative = (error - lastError) / (time/1000);
 8001bb0:	4b2f      	ldr	r3, [pc, #188]	; (8001c70 <calculatePID+0x110>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a31      	ldr	r2, [pc, #196]	; (8001c7c <calculatePID+0x11c>)
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	4611      	mov	r1, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe ffd6 	bl	8000b6c <__aeabi_fsub>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	492b      	ldr	r1, [pc, #172]	; (8001c74 <calculatePID+0x114>)
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff f98e 	bl	8000ee8 <__aeabi_fdiv>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f7ff f989 	bl	8000ee8 <__aeabi_fdiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b29      	ldr	r3, [pc, #164]	; (8001c80 <calculatePID+0x120>)
 8001bdc:	601a      	str	r2, [r3, #0]

    tmp_pwm = Kp*error + Ki*integral + Kd*derivative;
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <calculatePID+0x124>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <calculatePID+0x110>)
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f8c9 	bl	8000d80 <__aeabi_fmul>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461c      	mov	r4, r3
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <calculatePID+0x128>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <calculatePID+0x118>)
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff f8bf 	bl	8000d80 <__aeabi_fmul>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4619      	mov	r1, r3
 8001c06:	4620      	mov	r0, r4
 8001c08:	f7fe ffb2 	bl	8000b70 <__addsf3>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461c      	mov	r4, r3
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <calculatePID+0x12c>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <calculatePID+0x120>)
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f8b0 	bl	8000d80 <__aeabi_fmul>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4619      	mov	r1, r3
 8001c24:	4620      	mov	r0, r4
 8001c26:	f7fe ffa3 	bl	8000b70 <__addsf3>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <calculatePID+0x130>)
 8001c30:	601a      	str	r2, [r3, #0]
    pwm = tmp_pwm;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <calculatePID+0x130>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff faa4 	bl	8001184 <__aeabi_f2uiz>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <calculatePID+0x134>)
 8001c42:	801a      	strh	r2, [r3, #0]
    if (pwm > 1499) pwm = 1499;
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <calculatePID+0x134>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	f240 52db 	movw	r2, #1499	; 0x5db
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d903      	bls.n	8001c58 <calculatePID+0xf8>
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <calculatePID+0x134>)
 8001c52:	f240 52db 	movw	r2, #1499	; 0x5db
 8001c56:	801a      	strh	r2, [r3, #0]
    if (pwm < 0) pwm = 0;
    lastError = error;
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <calculatePID+0x110>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <calculatePID+0x11c>)
 8001c5e:	6013      	str	r3, [r2, #0]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	200000b4 	.word	0x200000b4
 8001c70:	200003f0 	.word	0x200003f0
 8001c74:	447a0000 	.word	0x447a0000
 8001c78:	200006d0 	.word	0x200006d0
 8001c7c:	20000114 	.word	0x20000114
 8001c80:	200000f8 	.word	0x200000f8
 8001c84:	200006c8 	.word	0x200006c8
 8001c88:	200000fc 	.word	0x200000fc
 8001c8c:	200003ec 	.word	0x200003ec
 8001c90:	200000f4 	.word	0x200000f4
 8001c94:	200000a6 	.word	0x200000a6

08001c98 <HAL_GPIO_EXTI_Callback>:
uint32_t overflow_count = 0;
time = 0.0;

int counter = 0;
// Обработчик прерываний датчиков Холла
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	dc02      	bgt.n	8001cae <HAL_GPIO_EXTI_Callback+0x16>
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	dc03      	bgt.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x1c>
//			I_d = 2/3*(cos(currentAngle  * M_PI/180)+sin(currentAngle * M_PI/180));
//			I_q = 2/3*(-sin(currentAngle * M_PI/180)+cos(currentAngle * M_PI/180));
		}
		break;
	}
}
 8001cac:	e08c      	b.n	8001dc8 <HAL_GPIO_EXTI_Callback+0x130>
	switch(GPIO_Pin) {
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	f040 808a 	bne.w	8001dc8 <HAL_GPIO_EXTI_Callback+0x130>
		if (START_FLAG!=0){
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_GPIO_EXTI_Callback+0x138>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 8084 	beq.w	8001dc6 <HAL_GPIO_EXTI_Callback+0x12e>
			cur_sector();
 8001cbe:	f7ff feed 	bl	8001a9c <cur_sector>
			if(step==next_step) cnt_hall++;
 8001cc2:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	4b44      	ldr	r3, [pc, #272]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x140>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d106      	bne.n	8001cdc <HAL_GPIO_EXTI_Callback+0x44>
 8001cce:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x144>)
 8001cd0:	881b      	ldrh	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x144>)
 8001cd8:	801a      	strh	r2, [r3, #0]
 8001cda:	e005      	b.n	8001ce8 <HAL_GPIO_EXTI_Callback+0x50>
			else error_hall++;
 8001cdc:	4b40      	ldr	r3, [pc, #256]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x148>)
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x148>)
 8001ce6:	801a      	strh	r2, [r3, #0]
			end_time = __HAL_TIM_GET_COUNTER(&htim14);    // Считываем конечное время
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cee:	4a3e      	ldr	r2, [pc, #248]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001cf0:	6013      	str	r3, [r2, #0]
			if (end_time >= start_time) {
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_GPIO_EXTI_Callback+0x154>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d30e      	bcc.n	8001d1c <HAL_GPIO_EXTI_Callback+0x84>
				elapsed_time = end_time - start_time + (overflow_count * (14999 + 1));  // Вычисляем прошедшее время
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_GPIO_EXTI_Callback+0x154>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	1ad2      	subs	r2, r2, r3
 8001d08:	4b39      	ldr	r3, [pc, #228]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x158>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f643 2198 	movw	r1, #15000	; 0x3a98
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e010      	b.n	8001d3e <HAL_GPIO_EXTI_Callback+0xa6>
				elapsed_time = ((14999 + 1) - start_time + end_time) + (overflow_count * (14999 + 1));  // Вычисляем прошедшее время с учетом переполнения
 8001d1c:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <HAL_GPIO_EXTI_Callback+0x154>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	1ad2      	subs	r2, r2, r3
 8001d26:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x158>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f643 2198 	movw	r1, #15000	; 0x3a98
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001d38:	3318      	adds	r3, #24
 8001d3a:	4a2e      	ldr	r2, [pc, #184]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001d3c:	6013      	str	r3, [r2, #0]
			start_time = end_time;
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_GPIO_EXTI_Callback+0x150>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <HAL_GPIO_EXTI_Callback+0x154>)
 8001d44:	6013      	str	r3, [r2, #0]
			overflow_count = 0;
 8001d46:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x158>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
			elapsed_time_summ += elapsed_time;
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x160>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a28      	ldr	r2, [pc, #160]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x160>)
 8001d58:	6013      	str	r3, [r2, #0]
			counter++;
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x164>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	4a26      	ldr	r2, [pc, #152]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x164>)
 8001d62:	6013      	str	r3, [r2, #0]
			if (counter>=6) {
 8001d64:	4b25      	ldr	r3, [pc, #148]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x164>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	dd26      	ble.n	8001dba <HAL_GPIO_EXTI_Callback+0x122>
				time = TIME_TIM14_MS*(elapsed_time_summ/(14999 + 1));
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x160>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <HAL_GPIO_EXTI_Callback+0x168>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0b1b      	lsrs	r3, r3, #12
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe ffa9 	bl	8000cd0 <__aeabi_ui2f>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f7fe fffa 	bl	8000d80 <__aeabi_fmul>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f9d2 	bl	8001138 <__aeabi_f2iz>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x170>)
 8001d98:	6013      	str	r3, [r2, #0]
				calculateSpeed(6, time);
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x170>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe ff9a 	bl	8000cd8 <__aeabi_i2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4619      	mov	r1, r3
 8001da8:	4818      	ldr	r0, [pc, #96]	; (8001e0c <HAL_GPIO_EXTI_Callback+0x174>)
 8001daa:	f7ff feaf 	bl	8001b0c <calculateSpeed>
				elapsed_time_summ = 0;
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x160>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
				counter = 0;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x164>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
			motor_control(Eright, pwm);
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x178>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	2002      	movs	r0, #2
 8001dc2:	f7ff fd7d 	bl	80018c0 <motor_control>
		break;
 8001dc6:	bf00      	nop
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200000a8 	.word	0x200000a8
 8001dd4:	200000a4 	.word	0x200000a4
 8001dd8:	200000f2 	.word	0x200000f2
 8001ddc:	200000cc 	.word	0x200000cc
 8001de0:	200003f4 	.word	0x200003f4
 8001de4:	20000b9c 	.word	0x20000b9c
 8001de8:	200000d4 	.word	0x200000d4
 8001dec:	200000d0 	.word	0x200000d0
 8001df0:	200000e0 	.word	0x200000e0
 8001df4:	200000d8 	.word	0x200000d8
 8001df8:	200000dc 	.word	0x200000dc
 8001dfc:	200000e8 	.word	0x200000e8
 8001e00:	45e7b273 	.word	0x45e7b273
 8001e04:	20000004 	.word	0x20000004
 8001e08:	200000e4 	.word	0x200000e4
 8001e0c:	40c00000 	.word	0x40c00000
 8001e10:	200000a6 	.word	0x200000a6

08001e14 <HAL_TIM_PeriodElapsedCallback>:



// Обработчик прерываний таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	if (htim == &htim14) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a73      	ldr	r2, [pc, #460]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	f040 80de 	bne.w	8001fe2 <HAL_TIM_PeriodElapsedCallback+0x1ce>
		pid_time += TIME_TIM14_MS; // TIME_TIM14_MS мс - период таймера 14. Расчет: (TIM_ARR * TIM_PSC) / TIM_FREQ / ) = ((499+1) * (59+1)) / 60 000 000 = 0,0005 с = 0.5 мс
 8001e26:	4b72      	ldr	r3, [pc, #456]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001e2c:	6812      	ldr	r2, [r2, #0]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fe9d 	bl	8000b70 <__addsf3>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b6d      	ldr	r3, [pc, #436]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001e3c:	601a      	str	r2, [r3, #0]
		overflow_count++;
 8001e3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	4a6c      	ldr	r2, [pc, #432]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001e46:	6013      	str	r3, [r2, #0]
		if (overflow_count>(6*1000/((targetRPM/60)*336)/TIME_TIM14_MS)){
 8001e48:	4b6b      	ldr	r3, [pc, #428]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe ff3f 	bl	8000cd0 <__aeabi_ui2f>
 8001e52:	4604      	mov	r4, r0
 8001e54:	4b69      	ldr	r3, [pc, #420]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4969      	ldr	r1, [pc, #420]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f844 	bl	8000ee8 <__aeabi_fdiv>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4968      	ldr	r1, [pc, #416]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe ff8b 	bl	8000d80 <__aeabi_fmul>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4866      	ldr	r0, [pc, #408]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001e70:	f7ff f83a 	bl	8000ee8 <__aeabi_fdiv>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b5e      	ldr	r3, [pc, #376]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f7ff f832 	bl	8000ee8 <__aeabi_fdiv>
 8001e84:	4603      	mov	r3, r0
 8001e86:	4619      	mov	r1, r3
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f7ff f935 	bl	80010f8 <__aeabi_fcmpgt>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d02b      	beq.n	8001eec <HAL_TIM_PeriodElapsedCallback+0xd8>
			time = TIME_TIM14_MS*(((14999 + 1) - start_time + (overflow_count * (14999 + 1)))/(14999 + 1));
 8001e94:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001e9c:	fb02 f203 	mul.w	r2, r2, r3
 8001ea0:	4b5a      	ldr	r3, [pc, #360]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8001eaa:	3318      	adds	r3, #24
 8001eac:	4a58      	ldr	r2, [pc, #352]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	0b1b      	lsrs	r3, r3, #12
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe ff0b 	bl	8000cd0 <__aeabi_ui2f>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	f7fe ff5c 	bl	8000d80 <__aeabi_fmul>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f934 	bl	8001138 <__aeabi_f2iz>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	4a50      	ldr	r2, [pc, #320]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001ed4:	6013      	str	r3, [r2, #0]
			calculateSpeed(1, time);
 8001ed6:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fefc 	bl	8000cd8 <__aeabi_i2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001ee8:	f7ff fe10 	bl	8001b0c <calculateSpeed>
		}
		if(pid_time >= TIME_INTERVAL_MS) { // (pid_time >= TIME_INTERVAL_MS)||(cnt_hall >= 500)
 8001eec:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a49      	ldr	r2, [pc, #292]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff f8f4 	bl	80010e4 <__aeabi_fcmpge>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_TIM_PeriodElapsedCallback+0x100>
			calculatePID(pid_time);
 8001f02:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fe2a 	bl	8001b60 <calculatePID>
			pid_time = 0;
 8001f0c:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
		}

		currentAngle += (((targetRPM*56)/60) * 360) / (1/(TIME_TIM14_MS/1000));// targetRPM * 360 / (60 * 20)
 8001f14:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4940      	ldr	r1, [pc, #256]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe ff30 	bl	8000d80 <__aeabi_fmul>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4937      	ldr	r1, [pc, #220]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe ffdf 	bl	8000ee8 <__aeabi_fdiv>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	493c      	ldr	r1, [pc, #240]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe ff26 	bl	8000d80 <__aeabi_fmul>
 8001f34:	4603      	mov	r3, r0
 8001f36:	461c      	mov	r4, r3
 8001f38:	4b2e      	ldr	r3, [pc, #184]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4939      	ldr	r1, [pc, #228]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe ffd2 	bl	8000ee8 <__aeabi_fdiv>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001f4c:	f7fe ffcc 	bl	8000ee8 <__aeabi_fdiv>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4619      	mov	r1, r3
 8001f54:	4620      	mov	r0, r4
 8001f56:	f7fe ffc7 	bl	8000ee8 <__aeabi_fdiv>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b32      	ldr	r3, [pc, #200]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f7fe fe03 	bl	8000b70 <__addsf3>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f70:	601a      	str	r2, [r3, #0]
		if ((currentAngle>(rotor_angle+90))&&(currentSpeed>1)) currentAngle = fmodf(rotor_angle+60, 360);
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	492e      	ldr	r1, [pc, #184]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fdf9 	bl	8000b70 <__addsf3>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4619      	mov	r1, r3
 8001f88:	4610      	mov	r0, r2
 8001f8a:	f7ff f897 	bl	80010bc <__aeabi_fcmplt>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d018      	beq.n	8001fc6 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 8001f94:	4b27      	ldr	r3, [pc, #156]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff f8ab 	bl	80010f8 <__aeabi_fcmpgt>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00e      	beq.n	8001fc6 <HAL_TIM_PeriodElapsedCallback+0x1b2>
 8001fa8:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4914      	ldr	r1, [pc, #80]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fdde 	bl	8000b70 <__addsf3>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	491a      	ldr	r1, [pc, #104]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f004 fafb 	bl	80065b4 <fmodf>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a19      	ldr	r2, [pc, #100]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	e008      	b.n	8001fd8 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		else currentAngle = fmodf(currentAngle, 360);
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4915      	ldr	r1, [pc, #84]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f004 faf1 	bl	80065b4 <fmodf>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4a14      	ldr	r2, [pc, #80]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001fd6:	6013      	str	r3, [r2, #0]
		move_rotor(currentAngle);
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff fa87 	bl	80014f0 <move_rotor>
	}
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000b9c 	.word	0x20000b9c
 8001ff0:	200000b8 	.word	0x200000b8
 8001ff4:	20000004 	.word	0x20000004
 8001ff8:	200000e0 	.word	0x200000e0
 8001ffc:	20000008 	.word	0x20000008
 8002000:	42700000 	.word	0x42700000
 8002004:	43a80000 	.word	0x43a80000
 8002008:	45bb8000 	.word	0x45bb8000
 800200c:	200000d0 	.word	0x200000d0
 8002010:	45e7b273 	.word	0x45e7b273
 8002014:	200000e4 	.word	0x200000e4
 8002018:	20000000 	.word	0x20000000
 800201c:	42600000 	.word	0x42600000
 8002020:	43b40000 	.word	0x43b40000
 8002024:	447a0000 	.word	0x447a0000
 8002028:	200000b0 	.word	0x200000b0
 800202c:	200000ac 	.word	0x200000ac
 8002030:	42b40000 	.word	0x42b40000
 8002034:	200000b4 	.word	0x200000b4

08002038 <HAL_ADC_ConvCpltCallback>:

// Обработчик прерываний АЦП
float Sensitivity_I = 0.0066; // Чувствительность датчика тока в мВ/мА

// Обработка показаний АЦП по готовности всех 3-х каналов
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002038:	b5b0      	push	{r4, r5, r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	// где rawValues - показания АЦП; 3.3 В - питание АПЦ; 4096 - количество уровней квантования при 12 разрядах; ((5.62+10)/10)) - компенсация нормирующего делителя напряжения; 2.5 В - компинсация кривой датчика тока (точка отсчета 0 мА);
	// Расчет: (((2000*3.3)/4096)*(5.62+10)/10-2.5)/0.0066 = 2,56 мА; (((2000*3.3)/4096)*(5.62+10)/10-2.5)/0.0066-6,9739139441
	I_a = ((rawValues[0] * 3.3 / 4096) * (5.62+10) / 10 - 2.5) / Sensitivity_I;
 8002040:	4b79      	ldr	r3, [pc, #484]	; (8002228 <HAL_ADC_ConvCpltCallback+0x1f0>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa11 	bl	800046c <__aeabi_i2d>
 800204a:	a373      	add	r3, pc, #460	; (adr r3, 8002218 <HAL_ADC_ConvCpltCallback+0x1e0>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe fa76 	bl	8000540 <__aeabi_dmul>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	4b72      	ldr	r3, [pc, #456]	; (800222c <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002062:	f7fe fb97 	bl	8000794 <__aeabi_ddiv>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4610      	mov	r0, r2
 800206c:	4619      	mov	r1, r3
 800206e:	a36c      	add	r3, pc, #432	; (adr r3, 8002220 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8002070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002074:	f7fe fa64 	bl	8000540 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002086:	f7fe fb85 	bl	8000794 <__aeabi_ddiv>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002098:	f7fe f89a 	bl	80001d0 <__aeabi_dsub>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4614      	mov	r4, r2
 80020a2:	461d      	mov	r5, r3
 80020a4:	4b64      	ldr	r3, [pc, #400]	; (8002238 <HAL_ADC_ConvCpltCallback+0x200>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe f9f1 	bl	8000490 <__aeabi_f2d>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe fb6d 	bl	8000794 <__aeabi_ddiv>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7fe fcff 	bl	8000ac4 <__aeabi_d2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4a5c      	ldr	r2, [pc, #368]	; (800223c <HAL_ADC_ConvCpltCallback+0x204>)
 80020ca:	6013      	str	r3, [r2, #0]
	I_b = ((rawValues[1] * 3.3 / 4096) * (5.62+10) / 10 - 2.5) / Sensitivity_I;
 80020cc:	4b56      	ldr	r3, [pc, #344]	; (8002228 <HAL_ADC_ConvCpltCallback+0x1f0>)
 80020ce:	885b      	ldrh	r3, [r3, #2]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f9cb 	bl	800046c <__aeabi_i2d>
 80020d6:	a350      	add	r3, pc, #320	; (adr r3, 8002218 <HAL_ADC_ConvCpltCallback+0x1e0>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe fa30 	bl	8000540 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	4b4f      	ldr	r3, [pc, #316]	; (800222c <HAL_ADC_ConvCpltCallback+0x1f4>)
 80020ee:	f7fe fb51 	bl	8000794 <__aeabi_ddiv>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	a349      	add	r3, pc, #292	; (adr r3, 8002220 <HAL_ADC_ConvCpltCallback+0x1e8>)
 80020fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002100:	f7fe fa1e 	bl	8000540 <__aeabi_dmul>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	4b47      	ldr	r3, [pc, #284]	; (8002230 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002112:	f7fe fb3f 	bl	8000794 <__aeabi_ddiv>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4610      	mov	r0, r2
 800211c:	4619      	mov	r1, r3
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	4b44      	ldr	r3, [pc, #272]	; (8002234 <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002124:	f7fe f854 	bl	80001d0 <__aeabi_dsub>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4614      	mov	r4, r2
 800212e:	461d      	mov	r5, r3
 8002130:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_ADC_ConvCpltCallback+0x200>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe f9ab 	bl	8000490 <__aeabi_f2d>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4620      	mov	r0, r4
 8002140:	4629      	mov	r1, r5
 8002142:	f7fe fb27 	bl	8000794 <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f7fe fcb9 	bl	8000ac4 <__aeabi_d2f>
 8002152:	4603      	mov	r3, r0
 8002154:	4a3a      	ldr	r2, [pc, #232]	; (8002240 <HAL_ADC_ConvCpltCallback+0x208>)
 8002156:	6013      	str	r3, [r2, #0]
	I_c = ((rawValues[2] * 3.3 / 4096) * (5.62+10) / 10 - 2.5) / Sensitivity_I;
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <HAL_ADC_ConvCpltCallback+0x1f0>)
 800215a:	889b      	ldrh	r3, [r3, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f985 	bl	800046c <__aeabi_i2d>
 8002162:	a32d      	add	r3, pc, #180	; (adr r3, 8002218 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe f9ea 	bl	8000540 <__aeabi_dmul>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	4b2c      	ldr	r3, [pc, #176]	; (800222c <HAL_ADC_ConvCpltCallback+0x1f4>)
 800217a:	f7fe fb0b 	bl	8000794 <__aeabi_ddiv>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	a326      	add	r3, pc, #152	; (adr r3, 8002220 <HAL_ADC_ConvCpltCallback+0x1e8>)
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f7fe f9d8 	bl	8000540 <__aeabi_dmul>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4b24      	ldr	r3, [pc, #144]	; (8002230 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800219e:	f7fe faf9 	bl	8000794 <__aeabi_ddiv>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_ADC_ConvCpltCallback+0x1fc>)
 80021b0:	f7fe f80e 	bl	80001d0 <__aeabi_dsub>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	4614      	mov	r4, r2
 80021ba:	461d      	mov	r5, r3
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <HAL_ADC_ConvCpltCallback+0x200>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f965 	bl	8000490 <__aeabi_f2d>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4620      	mov	r0, r4
 80021cc:	4629      	mov	r1, r5
 80021ce:	f7fe fae1 	bl	8000794 <__aeabi_ddiv>
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	4610      	mov	r0, r2
 80021d8:	4619      	mov	r1, r3
 80021da:	f7fe fc73 	bl	8000ac4 <__aeabi_d2f>
 80021de:	4603      	mov	r3, r0
 80021e0:	4a18      	ldr	r2, [pc, #96]	; (8002244 <HAL_ADC_ConvCpltCallback+0x20c>)
 80021e2:	6013      	str	r3, [r2, #0]
	summ = I_a + I_b + I_c;
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_ADC_ConvCpltCallback+0x204>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a15      	ldr	r2, [pc, #84]	; (8002240 <HAL_ADC_ConvCpltCallback+0x208>)
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	4611      	mov	r1, r2
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fcbe 	bl	8000b70 <__addsf3>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_ADC_ConvCpltCallback+0x20c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	4610      	mov	r0, r2
 8002200:	f7fe fcb6 	bl	8000b70 <__addsf3>
 8002204:	4603      	mov	r3, r0
 8002206:	461a      	mov	r2, r3
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_ADC_ConvCpltCallback+0x210>)
 800220a:	601a      	str	r2, [r3, #0]
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bdb0      	pop	{r4, r5, r7, pc}
 8002214:	f3af 8000 	nop.w
 8002218:	66666666 	.word	0x66666666
 800221c:	400a6666 	.word	0x400a6666
 8002220:	a3d70a3e 	.word	0xa3d70a3e
 8002224:	402f3d70 	.word	0x402f3d70
 8002228:	200000ec 	.word	0x200000ec
 800222c:	40b00000 	.word	0x40b00000
 8002230:	40240000 	.word	0x40240000
 8002234:	40040000 	.word	0x40040000
 8002238:	20000010 	.word	0x20000010
 800223c:	200000bc 	.word	0x200000bc
 8002240:	200000c0 	.word	0x200000c0
 8002244:	200000c4 	.word	0x200000c4
 8002248:	200000c8 	.word	0x200000c8

0800224c <start>:
uint16_t VU[360];
uint16_t VV[360];
uint16_t VW[360];

// функция - инициализация
void start(){
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
	initialize_PID_constants();
 8002250:	f7ff f934 	bl	80014bc <initialize_PID_constants>
	START_FLAG=1;
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <start+0x28>)
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim14);
 800225a:	4807      	ldr	r0, [pc, #28]	; (8002278 <start+0x2c>)
 800225c:	f003 f82f 	bl	80052be <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawValues, 3);
 8002260:	2203      	movs	r2, #3
 8002262:	4906      	ldr	r1, [pc, #24]	; (800227c <start+0x30>)
 8002264:	4806      	ldr	r0, [pc, #24]	; (8002280 <start+0x34>)
 8002266:	f001 f99d 	bl	80035a4 <HAL_ADC_Start_DMA>
	cur_sector();
 800226a:	f7ff fc17 	bl	8001a9c <cur_sector>
//	move_rotor(0);
//	motor_control(Eright, pwm);
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200000a8 	.word	0x200000a8
 8002278:	20000b9c 	.word	0x20000b9c
 800227c:	200000ec 	.word	0x200000ec
 8002280:	20000a6c 	.word	0x20000a6c

08002284 <loop>:

// Бесконечный цикл
void loop(){
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002294:	f000 ff94 	bl	80031c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002298:	f000 f817 	bl	80022ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800229c:	f000 fb5e 	bl	800295c <MX_GPIO_Init>
  MX_DMA_Init();
 80022a0:	f000 fb3c 	bl	800291c <MX_DMA_Init>
  MX_ADC1_Init();
 80022a4:	f000 f858 	bl	8002358 <MX_ADC1_Init>
  MX_TIM1_Init();
 80022a8:	f000 f94e 	bl	8002548 <MX_TIM1_Init>
  MX_TIM8_Init();
 80022ac:	f000 fa4c 	bl	8002748 <MX_TIM8_Init>
  MX_TIM14_Init();
 80022b0:	f000 faea 	bl	8002888 <MX_TIM14_Init>
  MX_TIM4_Init();
 80022b4:	f000 f9f4 	bl	80026a0 <MX_TIM4_Init>
  MX_ADC2_Init();
 80022b8:	f000 f8b6 	bl	8002428 <MX_ADC2_Init>
  MX_ADC3_Init();
 80022bc:	f000 f8fc 	bl	80024b8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  start();
 80022c0:	f7ff ffc4 	bl	800224c <start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80022c4:	f7ff ffde 	bl	8002284 <loop>
 80022c8:	e7fc      	b.n	80022c4 <main+0x34>

080022ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b092      	sub	sp, #72	; 0x48
 80022ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022d0:	f107 0318 	add.w	r3, r7, #24
 80022d4:	2230      	movs	r2, #48	; 0x30
 80022d6:	2100      	movs	r1, #0
 80022d8:	4618      	mov	r0, r3
 80022da:	f004 f91d 	bl	8006518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022ec:	2301      	movs	r3, #1
 80022ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022f0:	2301      	movs	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022f4:	2302      	movs	r3, #2
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022fe:	2308      	movs	r3, #8
 8002300:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 8002302:	23f0      	movs	r3, #240	; 0xf0
 8002304:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002306:	2302      	movs	r3, #2
 8002308:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800230a:	2304      	movs	r3, #4
 800230c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800230e:	f107 0318 	add.w	r3, r7, #24
 8002312:	4618      	mov	r0, r3
 8002314:	f002 fb70 	bl	80049f8 <HAL_RCC_OscConfig>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800231e:	f000 fbed 	bl	8002afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002322:	230f      	movs	r3, #15
 8002324:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002326:	2302      	movs	r3, #2
 8002328:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800232e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2103      	movs	r1, #3
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fdc4 	bl	8004ecc <HAL_RCC_ClockConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <SystemClock_Config+0x84>
  {
    Error_Handler();
 800234a:	f000 fbd7 	bl	8002afc <Error_Handler>
  }
}
 800234e:	bf00      	nop
 8002350:	3748      	adds	r7, #72	; 0x48
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800236a:	1d3b      	adds	r3, r7, #4
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <MX_ADC1_Init+0xc4>)
 8002378:	4a29      	ldr	r2, [pc, #164]	; (8002420 <MX_ADC1_Init+0xc8>)
 800237a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800237c:	4b27      	ldr	r3, [pc, #156]	; (800241c <MX_ADC1_Init+0xc4>)
 800237e:	2200      	movs	r2, #0
 8002380:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002382:	4b26      	ldr	r3, [pc, #152]	; (800241c <MX_ADC1_Init+0xc4>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002388:	4b24      	ldr	r3, [pc, #144]	; (800241c <MX_ADC1_Init+0xc4>)
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800238e:	4b23      	ldr	r3, [pc, #140]	; (800241c <MX_ADC1_Init+0xc4>)
 8002390:	2201      	movs	r2, #1
 8002392:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002394:	4b21      	ldr	r3, [pc, #132]	; (800241c <MX_ADC1_Init+0xc4>)
 8002396:	2200      	movs	r2, #0
 8002398:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <MX_ADC1_Init+0xc4>)
 800239c:	2200      	movs	r2, #0
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023a0:	4b1e      	ldr	r3, [pc, #120]	; (800241c <MX_ADC1_Init+0xc4>)
 80023a2:	4a20      	ldr	r2, [pc, #128]	; (8002424 <MX_ADC1_Init+0xcc>)
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <MX_ADC1_Init+0xc4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <MX_ADC1_Init+0xc4>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <MX_ADC1_Init+0xc4>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80023b8:	4b18      	ldr	r3, [pc, #96]	; (800241c <MX_ADC1_Init+0xc4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023be:	4817      	ldr	r0, [pc, #92]	; (800241c <MX_ADC1_Init+0xc4>)
 80023c0:	f000 ff6c 	bl	800329c <HAL_ADC_Init>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80023ca:	f000 fb97 	bl	8002afc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 80023ce:	2316      	movs	r3, #22
 80023d0:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_1;
 80023d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023d6:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	4619      	mov	r1, r3
 80023e2:	480e      	ldr	r0, [pc, #56]	; (800241c <MX_ADC1_Init+0xc4>)
 80023e4:	f001 fc7c 	bl	8003ce0 <HAL_ADCEx_MultiModeConfigChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80023ee:	f000 fb85 	bl	8002afc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80023f2:	2304      	movs	r3, #4
 80023f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80023fa:	2307      	movs	r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4806      	ldr	r0, [pc, #24]	; (800241c <MX_ADC1_Init+0xc4>)
 8002404:	f001 f9bc 	bl	8003780 <HAL_ADC_ConfigChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 800240e:	f000 fb75 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000a6c 	.word	0x20000a6c
 8002420:	40012000 	.word	0x40012000
 8002424:	0f000001 	.word	0x0f000001

08002428 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800242e:	463b      	mov	r3, r7
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800243a:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <MX_ADC2_Init+0x88>)
 800243c:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <MX_ADC2_Init+0x8c>)
 800243e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <MX_ADC2_Init+0x88>)
 8002442:	2200      	movs	r2, #0
 8002444:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002446:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_ADC2_Init+0x88>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <MX_ADC2_Init+0x88>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002452:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_ADC2_Init+0x88>)
 8002454:	2201      	movs	r2, #1
 8002456:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <MX_ADC2_Init+0x88>)
 800245a:	2200      	movs	r2, #0
 800245c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_ADC2_Init+0x88>)
 8002460:	2200      	movs	r2, #0
 8002462:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_ADC2_Init+0x88>)
 8002466:	2201      	movs	r2, #1
 8002468:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_ADC2_Init+0x88>)
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_ADC2_Init+0x88>)
 8002472:	2201      	movs	r2, #1
 8002474:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002476:	480e      	ldr	r0, [pc, #56]	; (80024b0 <MX_ADC2_Init+0x88>)
 8002478:	f000 ff10 	bl	800329c <HAL_ADC_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_ADC2_Init+0x5e>
  {
    Error_Handler();
 8002482:	f000 fb3b 	bl	8002afc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002486:	230f      	movs	r3, #15
 8002488:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800248a:	2301      	movs	r3, #1
 800248c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002492:	463b      	mov	r3, r7
 8002494:	4619      	mov	r1, r3
 8002496:	4806      	ldr	r0, [pc, #24]	; (80024b0 <MX_ADC2_Init+0x88>)
 8002498:	f001 f972 	bl	8003780 <HAL_ADC_ConfigChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80024a2:	f000 fb2b 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000a24 	.word	0x20000a24
 80024b4:	40012100 	.word	0x40012100

080024b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024be:	463b      	mov	r3, r7
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80024ca:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <MX_ADC3_Init+0x88>)
 80024cc:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <MX_ADC3_Init+0x8c>)
 80024ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <MX_ADC3_Init+0x88>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80024d6:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <MX_ADC3_Init+0x88>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80024dc:	4b18      	ldr	r3, [pc, #96]	; (8002540 <MX_ADC3_Init+0x88>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80024e2:	4b17      	ldr	r3, [pc, #92]	; (8002540 <MX_ADC3_Init+0x88>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <MX_ADC3_Init+0x88>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024ee:	4b14      	ldr	r3, [pc, #80]	; (8002540 <MX_ADC3_Init+0x88>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <MX_ADC3_Init+0x88>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <MX_ADC3_Init+0x88>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <MX_ADC3_Init+0x88>)
 8002502:	2201      	movs	r2, #1
 8002504:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002506:	480e      	ldr	r0, [pc, #56]	; (8002540 <MX_ADC3_Init+0x88>)
 8002508:	f000 fec8 	bl	800329c <HAL_ADC_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_ADC3_Init+0x5e>
  {
    Error_Handler();
 8002512:	f000 faf3 	bl	8002afc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002516:	230d      	movs	r3, #13
 8002518:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800251a:	2301      	movs	r3, #1
 800251c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002522:	463b      	mov	r3, r7
 8002524:	4619      	mov	r1, r3
 8002526:	4806      	ldr	r0, [pc, #24]	; (8002540 <MX_ADC3_Init+0x88>)
 8002528:	f001 f92a 	bl	8003780 <HAL_ADC_ConfigChannel>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8002532:	f000 fae3 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000ab4 	.word	0x20000ab4
 8002544:	40012200 	.word	0x40012200

08002548 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b096      	sub	sp, #88	; 0x58
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	60da      	str	r2, [r3, #12]
 8002574:	611a      	str	r2, [r3, #16]
 8002576:	615a      	str	r2, [r3, #20]
 8002578:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	2220      	movs	r2, #32
 800257e:	2100      	movs	r1, #0
 8002580:	4618      	mov	r0, r3
 8002582:	f003 ffc9 	bl	8006518 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002586:	4b44      	ldr	r3, [pc, #272]	; (8002698 <MX_TIM1_Init+0x150>)
 8002588:	4a44      	ldr	r2, [pc, #272]	; (800269c <MX_TIM1_Init+0x154>)
 800258a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800258c:	4b42      	ldr	r3, [pc, #264]	; (8002698 <MX_TIM1_Init+0x150>)
 800258e:	2200      	movs	r2, #0
 8002590:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002592:	4b41      	ldr	r3, [pc, #260]	; (8002698 <MX_TIM1_Init+0x150>)
 8002594:	2220      	movs	r2, #32
 8002596:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1499;
 8002598:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <MX_TIM1_Init+0x150>)
 800259a:	f240 52db 	movw	r2, #1499	; 0x5db
 800259e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a0:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <MX_TIM1_Init+0x150>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025a6:	4b3c      	ldr	r3, [pc, #240]	; (8002698 <MX_TIM1_Init+0x150>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ac:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <MX_TIM1_Init+0x150>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025b2:	4839      	ldr	r0, [pc, #228]	; (8002698 <MX_TIM1_Init+0x150>)
 80025b4:	f002 fe58 	bl	8005268 <HAL_TIM_Base_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80025be:	f000 fa9d 	bl	8002afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80025c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025cc:	4619      	mov	r1, r3
 80025ce:	4832      	ldr	r0, [pc, #200]	; (8002698 <MX_TIM1_Init+0x150>)
 80025d0:	f003 fa56 	bl	8005a80 <HAL_TIM_ConfigClockSource>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80025da:	f000 fa8f 	bl	8002afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025de:	482e      	ldr	r0, [pc, #184]	; (8002698 <MX_TIM1_Init+0x150>)
 80025e0:	f002 fec4 	bl	800536c <HAL_TIM_PWM_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80025ea:	f000 fa87 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025fa:	4619      	mov	r1, r3
 80025fc:	4826      	ldr	r0, [pc, #152]	; (8002698 <MX_TIM1_Init+0x150>)
 80025fe:	f003 fe96 	bl	800632e <HAL_TIMEx_MasterConfigSynchronization>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002608:	f000 fa78 	bl	8002afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800260c:	2360      	movs	r3, #96	; 0x60
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800262c:	2200      	movs	r2, #0
 800262e:	4619      	mov	r1, r3
 8002630:	4819      	ldr	r0, [pc, #100]	; (8002698 <MX_TIM1_Init+0x150>)
 8002632:	f003 f95f 	bl	80058f4 <HAL_TIM_PWM_ConfigChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800263c:	f000 fa5e 	bl	8002afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002644:	2204      	movs	r2, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4813      	ldr	r0, [pc, #76]	; (8002698 <MX_TIM1_Init+0x150>)
 800264a:	f003 f953 	bl	80058f4 <HAL_TIM_PWM_ConfigChannel>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002654:	f000 fa52 	bl	8002afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800266c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002670:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	4619      	mov	r1, r3
 800267a:	4807      	ldr	r0, [pc, #28]	; (8002698 <MX_TIM1_Init+0x150>)
 800267c:	f003 fe9b 	bl	80063b6 <HAL_TIMEx_ConfigBreakDeadTime>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002686:	f000 fa39 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800268a:	4803      	ldr	r0, [pc, #12]	; (8002698 <MX_TIM1_Init+0x150>)
 800268c:	f000 fc3e 	bl	8002f0c <HAL_TIM_MspPostInit>

}
 8002690:	bf00      	nop
 8002692:	3758      	adds	r7, #88	; 0x58
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000b5c 	.word	0x20000b5c
 800269c:	40010000 	.word	0x40010000

080026a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08c      	sub	sp, #48	; 0x30
 80026a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	2224      	movs	r2, #36	; 0x24
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 ff32 	bl	8006518 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <MX_TIM4_Init+0xa0>)
 80026be:	4a21      	ldr	r2, [pc, #132]	; (8002744 <MX_TIM4_Init+0xa4>)
 80026c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80026c2:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <MX_TIM4_Init+0xa0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <MX_TIM4_Init+0xa0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <MX_TIM4_Init+0xa0>)
 80026d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <MX_TIM4_Init+0xa0>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <MX_TIM4_Init+0xa0>)
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80026e2:	2303      	movs	r3, #3
 80026e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026ea:	2301      	movs	r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80026f2:	230a      	movs	r3, #10
 80026f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026fa:	2301      	movs	r3, #1
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026fe:	2300      	movs	r3, #0
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002702:	230a      	movs	r3, #10
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	4619      	mov	r1, r3
 800270c:	480c      	ldr	r0, [pc, #48]	; (8002740 <MX_TIM4_Init+0xa0>)
 800270e:	f002 fef7 	bl	8005500 <HAL_TIM_Encoder_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002718:	f000 f9f0 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	4619      	mov	r1, r3
 8002728:	4805      	ldr	r0, [pc, #20]	; (8002740 <MX_TIM4_Init+0xa0>)
 800272a:	f003 fe00 	bl	800632e <HAL_TIMEx_MasterConfigSynchronization>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002734:	f000 f9e2 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002738:	bf00      	nop
 800273a:	3730      	adds	r7, #48	; 0x30
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	200009e4 	.word	0x200009e4
 8002744:	40000800 	.word	0x40000800

08002748 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b096      	sub	sp, #88	; 0x58
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800274e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800275c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	611a      	str	r2, [r3, #16]
 8002776:	615a      	str	r2, [r3, #20]
 8002778:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800277a:	1d3b      	adds	r3, r7, #4
 800277c:	2220      	movs	r2, #32
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fec9 	bl	8006518 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002786:	4b3e      	ldr	r3, [pc, #248]	; (8002880 <MX_TIM8_Init+0x138>)
 8002788:	4a3e      	ldr	r2, [pc, #248]	; (8002884 <MX_TIM8_Init+0x13c>)
 800278a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800278c:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <MX_TIM8_Init+0x138>)
 800278e:	2200      	movs	r2, #0
 8002790:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002792:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <MX_TIM8_Init+0x138>)
 8002794:	2220      	movs	r2, #32
 8002796:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1499;
 8002798:	4b39      	ldr	r3, [pc, #228]	; (8002880 <MX_TIM8_Init+0x138>)
 800279a:	f240 52db 	movw	r2, #1499	; 0x5db
 800279e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a0:	4b37      	ldr	r3, [pc, #220]	; (8002880 <MX_TIM8_Init+0x138>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027a6:	4b36      	ldr	r3, [pc, #216]	; (8002880 <MX_TIM8_Init+0x138>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <MX_TIM8_Init+0x138>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80027b2:	4833      	ldr	r0, [pc, #204]	; (8002880 <MX_TIM8_Init+0x138>)
 80027b4:	f002 fd58 	bl	8005268 <HAL_TIM_Base_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80027be:	f000 f99d 	bl	8002afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80027c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027cc:	4619      	mov	r1, r3
 80027ce:	482c      	ldr	r0, [pc, #176]	; (8002880 <MX_TIM8_Init+0x138>)
 80027d0:	f003 f956 	bl	8005a80 <HAL_TIM_ConfigClockSource>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80027da:	f000 f98f 	bl	8002afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80027de:	4828      	ldr	r0, [pc, #160]	; (8002880 <MX_TIM8_Init+0x138>)
 80027e0:	f002 fdc4 	bl	800536c <HAL_TIM_PWM_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80027ea:	f000 f987 	bl	8002afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80027f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027fa:	4619      	mov	r1, r3
 80027fc:	4820      	ldr	r0, [pc, #128]	; (8002880 <MX_TIM8_Init+0x138>)
 80027fe:	f003 fd96 	bl	800632e <HAL_TIMEx_MasterConfigSynchronization>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002808:	f000 f978 	bl	8002afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800280c:	2360      	movs	r3, #96	; 0x60
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002814:	2300      	movs	r3, #0
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002818:	2300      	movs	r3, #0
 800281a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002824:	2300      	movs	r3, #0
 8002826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282c:	2200      	movs	r2, #0
 800282e:	4619      	mov	r1, r3
 8002830:	4813      	ldr	r0, [pc, #76]	; (8002880 <MX_TIM8_Init+0x138>)
 8002832:	f003 f85f 	bl	80058f4 <HAL_TIM_PWM_ConfigChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800283c:	f000 f95e 	bl	8002afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002858:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800285a:	2300      	movs	r3, #0
 800285c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	4619      	mov	r1, r3
 8002862:	4807      	ldr	r0, [pc, #28]	; (8002880 <MX_TIM8_Init+0x138>)
 8002864:	f003 fda7 	bl	80063b6 <HAL_TIMEx_ConfigBreakDeadTime>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800286e:	f000 f945 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002872:	4803      	ldr	r0, [pc, #12]	; (8002880 <MX_TIM8_Init+0x138>)
 8002874:	f000 fb4a 	bl	8002f0c <HAL_TIM_MspPostInit>

}
 8002878:	bf00      	nop
 800287a:	3758      	adds	r7, #88	; 0x58
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200009a4 	.word	0x200009a4
 8002884:	40010400 	.word	0x40010400

08002888 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
 800289c:	615a      	str	r2, [r3, #20]
 800289e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80028a0:	4b1c      	ldr	r3, [pc, #112]	; (8002914 <MX_TIM14_Init+0x8c>)
 80028a2:	4a1d      	ldr	r2, [pc, #116]	; (8002918 <MX_TIM14_Init+0x90>)
 80028a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80028a6:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <MX_TIM14_Init+0x8c>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <MX_TIM14_Init+0x8c>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 14999;
 80028b2:	4b18      	ldr	r3, [pc, #96]	; (8002914 <MX_TIM14_Init+0x8c>)
 80028b4:	f643 2297 	movw	r2, #14999	; 0x3a97
 80028b8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <MX_TIM14_Init+0x8c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <MX_TIM14_Init+0x8c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80028c6:	4813      	ldr	r0, [pc, #76]	; (8002914 <MX_TIM14_Init+0x8c>)
 80028c8:	f002 fcce 	bl	8005268 <HAL_TIM_Base_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80028d2:	f000 f913 	bl	8002afc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80028d6:	480f      	ldr	r0, [pc, #60]	; (8002914 <MX_TIM14_Init+0x8c>)
 80028d8:	f002 fd14 	bl	8005304 <HAL_TIM_OC_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80028e2:	f000 f90b 	bl	8002afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80028e6:	2300      	movs	r3, #0
 80028e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028f6:	1d3b      	adds	r3, r7, #4
 80028f8:	2200      	movs	r2, #0
 80028fa:	4619      	mov	r1, r3
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_TIM14_Init+0x8c>)
 80028fe:	f002 ff99 	bl	8005834 <HAL_TIM_OC_ConfigChannel>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002908:	f000 f8f8 	bl	8002afc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	3720      	adds	r7, #32
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000b9c 	.word	0x20000b9c
 8002918:	40002000 	.word	0x40002000

0800291c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <MX_DMA_Init+0x3c>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <MX_DMA_Init+0x3c>)
 800292c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002930:	6313      	str	r3, [r2, #48]	; 0x30
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <MX_DMA_Init+0x3c>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293a:	607b      	str	r3, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	2038      	movs	r0, #56	; 0x38
 8002944:	f001 fae7 	bl	8003f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002948:	2038      	movs	r0, #56	; 0x38
 800294a:	f001 fb00 	bl	8003f4e <HAL_NVIC_EnableIRQ>

}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08c      	sub	sp, #48	; 0x30
 8002960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002962:	f107 031c 	add.w	r3, r7, #28
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	60da      	str	r2, [r3, #12]
 8002970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	4b5c      	ldr	r3, [pc, #368]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a5b      	ldr	r2, [pc, #364]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 800297c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298a:	61bb      	str	r3, [r7, #24]
 800298c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	4b55      	ldr	r3, [pc, #340]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a54      	ldr	r2, [pc, #336]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 8002998:	f043 0304 	orr.w	r3, r3, #4
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b52      	ldr	r3, [pc, #328]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	4b4e      	ldr	r3, [pc, #312]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a4d      	ldr	r2, [pc, #308]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b4b      	ldr	r3, [pc, #300]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a46      	ldr	r2, [pc, #280]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 80029d0:	f043 0302 	orr.w	r3, r3, #2
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b44      	ldr	r3, [pc, #272]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a3f      	ldr	r2, [pc, #252]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 80029ec:	f043 0310 	orr.w	r3, r3, #16
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
 8002a02:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a38      	ldr	r2, [pc, #224]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <MX_GPIO_Init+0x18c>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8002a1a:	2323      	movs	r3, #35	; 0x23
 8002a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a1e:	4b33      	ldr	r3, [pc, #204]	; (8002aec <MX_GPIO_Init+0x190>)
 8002a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4830      	ldr	r0, [pc, #192]	; (8002af0 <MX_GPIO_Init+0x194>)
 8002a2e:	f001 fe15 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a40:	2303      	movs	r3, #3
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a44:	2307      	movs	r3, #7
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a48:	f107 031c 	add.w	r3, r7, #28
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4829      	ldr	r0, [pc, #164]	; (8002af4 <MX_GPIO_Init+0x198>)
 8002a50:	f001 fe04 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <MX_GPIO_Init+0x190>)
 8002a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a60:	f107 031c 	add.w	r3, r7, #28
 8002a64:	4619      	mov	r1, r3
 8002a66:	4824      	ldr	r0, [pc, #144]	; (8002af8 <MX_GPIO_Init+0x19c>)
 8002a68:	f001 fdf8 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a72:	2312      	movs	r3, #18
 8002a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a82:	f107 031c 	add.w	r3, r7, #28
 8002a86:	4619      	mov	r1, r3
 8002a88:	481b      	ldr	r0, [pc, #108]	; (8002af8 <MX_GPIO_Init+0x19c>)
 8002a8a:	f001 fde7 	bl	800465c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a94:	2312      	movs	r3, #18
 8002a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa4:	f107 031c 	add.w	r3, r7, #28
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4811      	ldr	r0, [pc, #68]	; (8002af0 <MX_GPIO_Init+0x194>)
 8002aac:	f001 fdd6 	bl	800465c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	2006      	movs	r0, #6
 8002ab6:	f001 fa2e 	bl	8003f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002aba:	2006      	movs	r0, #6
 8002abc:	f001 fa47 	bl	8003f4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2007      	movs	r0, #7
 8002ac6:	f001 fa26 	bl	8003f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002aca:	2007      	movs	r0, #7
 8002acc:	f001 fa3f 	bl	8003f4e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	2017      	movs	r0, #23
 8002ad6:	f001 fa1e 	bl	8003f16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002ada:	2017      	movs	r0, #23
 8002adc:	f001 fa37 	bl	8003f4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ae0:	bf00      	nop
 8002ae2:	3730      	adds	r7, #48	; 0x30
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	10310000 	.word	0x10310000
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40020c00 	.word	0x40020c00
 8002af8:	40020800 	.word	0x40020800

08002afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b00:	b672      	cpsid	i
}
 8002b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b04:	e7fe      	b.n	8002b04 <Error_Handler+0x8>
	...

08002b08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <HAL_MspInit+0x48>)
 8002b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <HAL_MspInit+0x48>)
 8002b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <HAL_MspInit+0x48>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b26:	607b      	str	r3, [r7, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	603b      	str	r3, [r7, #0]
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <HAL_MspInit+0x48>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <HAL_MspInit+0x48>)
 8002b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_MspInit+0x48>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bc80      	pop	{r7}
 8002b4e:	4770      	bx	lr
 8002b50:	40023800 	.word	0x40023800

08002b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b090      	sub	sp, #64	; 0x40
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a83      	ldr	r2, [pc, #524]	; (8002d80 <HAL_ADC_MspInit+0x22c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	f040 8095 	bne.w	8002ca2 <HAL_ADC_MspInit+0x14e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b78:	2300      	movs	r3, #0
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7c:	4b81      	ldr	r3, [pc, #516]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	4a80      	ldr	r2, [pc, #512]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b86:	6453      	str	r3, [r2, #68]	; 0x44
 8002b88:	4b7e      	ldr	r3, [pc, #504]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b94:	2300      	movs	r3, #0
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
 8002b98:	4b7a      	ldr	r3, [pc, #488]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	4a79      	ldr	r2, [pc, #484]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002b9e:	f043 0304 	orr.w	r3, r3, #4
 8002ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba4:	4b77      	ldr	r3, [pc, #476]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	623b      	str	r3, [r7, #32]
 8002bb4:	4b73      	ldr	r3, [pc, #460]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	4a72      	ldr	r2, [pc, #456]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc0:	4b70      	ldr	r3, [pc, #448]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	623b      	str	r3, [r7, #32]
 8002bca:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bcc:	2300      	movs	r3, #0
 8002bce:	61fb      	str	r3, [r7, #28]
 8002bd0:	4b6c      	ldr	r3, [pc, #432]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4a6b      	ldr	r2, [pc, #428]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002bd6:	f043 0302 	orr.w	r3, r3, #2
 8002bda:	6313      	str	r3, [r2, #48]	; 0x30
 8002bdc:	4b69      	ldr	r3, [pc, #420]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	69fb      	ldr	r3, [r7, #28]
    PA4     ------> ADC1_IN4
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002be8:	2338      	movs	r3, #56	; 0x38
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bec:	2303      	movs	r3, #3
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4863      	ldr	r0, [pc, #396]	; (8002d88 <HAL_ADC_MspInit+0x234>)
 8002bfc:	f001 fd2e 	bl	800465c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8002c00:	2318      	movs	r3, #24
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c04:	2303      	movs	r3, #3
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c10:	4619      	mov	r1, r3
 8002c12:	485e      	ldr	r0, [pc, #376]	; (8002d8c <HAL_ADC_MspInit+0x238>)
 8002c14:	f001 fd22 	bl	800465c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c20:	2300      	movs	r3, #0
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4859      	ldr	r0, [pc, #356]	; (8002d90 <HAL_ADC_MspInit+0x23c>)
 8002c2c:	f001 fd16 	bl	800465c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c30:	4b58      	ldr	r3, [pc, #352]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c32:	4a59      	ldr	r2, [pc, #356]	; (8002d98 <HAL_ADC_MspInit+0x244>)
 8002c34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c36:	4b57      	ldr	r3, [pc, #348]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c3c:	4b55      	ldr	r3, [pc, #340]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c42:	4b54      	ldr	r3, [pc, #336]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c48:	4b52      	ldr	r3, [pc, #328]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c50:	4b50      	ldr	r3, [pc, #320]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c58:	4b4e      	ldr	r3, [pc, #312]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c60:	4b4c      	ldr	r3, [pc, #304]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c68:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c6e:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c74:	4847      	ldr	r0, [pc, #284]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c76:	f001 f985 	bl	8003f84 <HAL_DMA_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8002c80:	f7ff ff3c 	bl	8002afc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a43      	ldr	r2, [pc, #268]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c88:	639a      	str	r2, [r3, #56]	; 0x38
 8002c8a:	4a42      	ldr	r2, [pc, #264]	; (8002d94 <HAL_ADC_MspInit+0x240>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2101      	movs	r1, #1
 8002c94:	2012      	movs	r0, #18
 8002c96:	f001 f93e 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002c9a:	2012      	movs	r0, #18
 8002c9c:	f001 f957 	bl	8003f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002ca0:	e06a      	b.n	8002d78 <HAL_ADC_MspInit+0x224>
  else if(hadc->Instance==ADC2)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a3d      	ldr	r2, [pc, #244]	; (8002d9c <HAL_ADC_MspInit+0x248>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d130      	bne.n	8002d0e <HAL_ADC_MspInit+0x1ba>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb4:	4a33      	ldr	r2, [pc, #204]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cba:	6453      	str	r3, [r2, #68]	; 0x44
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	4b2d      	ldr	r3, [pc, #180]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	4a2c      	ldr	r2, [pc, #176]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002cd2:	f043 0304 	orr.w	r3, r3, #4
 8002cd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd8:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002ce4:	2328      	movs	r3, #40	; 0x28
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	2300      	movs	r3, #0
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4824      	ldr	r0, [pc, #144]	; (8002d88 <HAL_ADC_MspInit+0x234>)
 8002cf8:	f001 fcb0 	bl	800465c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2101      	movs	r1, #1
 8002d00:	2012      	movs	r0, #18
 8002d02:	f001 f908 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002d06:	2012      	movs	r0, #18
 8002d08:	f001 f921 	bl	8003f4e <HAL_NVIC_EnableIRQ>
}
 8002d0c:	e034      	b.n	8002d78 <HAL_ADC_MspInit+0x224>
  else if(hadc->Instance==ADC3)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a23      	ldr	r2, [pc, #140]	; (8002da0 <HAL_ADC_MspInit+0x24c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d12f      	bne.n	8002d78 <HAL_ADC_MspInit+0x224>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002d22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d26:	6453      	str	r3, [r2, #68]	; 0x44
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002d3e:	f043 0304 	orr.w	r3, r3, #4
 8002d42:	6313      	str	r3, [r2, #48]	; 0x30
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_ADC_MspInit+0x230>)
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d50:	2308      	movs	r3, #8
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d54:	2303      	movs	r3, #3
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d60:	4619      	mov	r1, r3
 8002d62:	4809      	ldr	r0, [pc, #36]	; (8002d88 <HAL_ADC_MspInit+0x234>)
 8002d64:	f001 fc7a 	bl	800465c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	2012      	movs	r0, #18
 8002d6e:	f001 f8d2 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002d72:	2012      	movs	r0, #18
 8002d74:	f001 f8eb 	bl	8003f4e <HAL_NVIC_EnableIRQ>
}
 8002d78:	bf00      	nop
 8002d7a:	3740      	adds	r7, #64	; 0x40
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40012000 	.word	0x40012000
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	40020400 	.word	0x40020400
 8002d94:	20000afc 	.word	0x20000afc
 8002d98:	40026410 	.word	0x40026410
 8002d9c:	40012100 	.word	0x40012100
 8002da0:	40012200 	.word	0x40012200

08002da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <HAL_TIM_Base_MspInit+0xb8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d116      	bne.n	8002de4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <HAL_TIM_Base_MspInit+0xbc>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <HAL_TIM_Base_MspInit+0xbc>)
 8002dc0:	f043 0301 	orr.w	r3, r3, #1
 8002dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc6:	4b26      	ldr	r3, [pc, #152]	; (8002e60 <HAL_TIM_Base_MspInit+0xbc>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2019      	movs	r0, #25
 8002dd8:	f001 f89d 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ddc:	2019      	movs	r0, #25
 8002dde:	f001 f8b6 	bl	8003f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002de2:	e036      	b.n	8002e52 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM8)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1e      	ldr	r2, [pc, #120]	; (8002e64 <HAL_TIM_Base_MspInit+0xc0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d116      	bne.n	8002e1c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_TIM_Base_MspInit+0xbc>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <HAL_TIM_Base_MspInit+0xbc>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <HAL_TIM_Base_MspInit+0xbc>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	202d      	movs	r0, #45	; 0x2d
 8002e10:	f001 f881 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e14:	202d      	movs	r0, #45	; 0x2d
 8002e16:	f001 f89a 	bl	8003f4e <HAL_NVIC_EnableIRQ>
}
 8002e1a:	e01a      	b.n	8002e52 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM14)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a11      	ldr	r2, [pc, #68]	; (8002e68 <HAL_TIM_Base_MspInit+0xc4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d115      	bne.n	8002e52 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <HAL_TIM_Base_MspInit+0xbc>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a0c      	ldr	r2, [pc, #48]	; (8002e60 <HAL_TIM_Base_MspInit+0xbc>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <HAL_TIM_Base_MspInit+0xbc>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002e42:	2200      	movs	r2, #0
 8002e44:	2100      	movs	r1, #0
 8002e46:	202d      	movs	r0, #45	; 0x2d
 8002e48:	f001 f865 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002e4c:	202d      	movs	r0, #45	; 0x2d
 8002e4e:	f001 f87e 	bl	8003f4e <HAL_NVIC_EnableIRQ>
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40010400 	.word	0x40010400
 8002e68:	40002000 	.word	0x40002000

08002e6c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <HAL_TIM_Encoder_MspInit+0x94>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d134      	bne.n	8002ef8 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8002e98:	f043 0304 	orr.w	r3, r3, #4
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a14      	ldr	r2, [pc, #80]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8002eb4:	f043 0308 	orr.w	r3, r3, #8
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <HAL_TIM_Encoder_MspInit+0x98>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002ec6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ecc:	2302      	movs	r3, #2
 8002ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002edc:	f107 0314 	add.w	r3, r7, #20
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4809      	ldr	r0, [pc, #36]	; (8002f08 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002ee4:	f001 fbba 	bl	800465c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2100      	movs	r1, #0
 8002eec:	201e      	movs	r0, #30
 8002eee:	f001 f812 	bl	8003f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ef2:	201e      	movs	r0, #30
 8002ef4:	f001 f82b 	bl	8003f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ef8:	bf00      	nop
 8002efa:	3728      	adds	r7, #40	; 0x28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40000800 	.word	0x40000800
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40020c00 	.word	0x40020c00

08002f0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f14:	f107 0314 	add.w	r3, r7, #20
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
 8002f22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a33      	ldr	r2, [pc, #204]	; (8002ff8 <HAL_TIM_MspPostInit+0xec>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d11f      	bne.n	8002f6e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
 8002f32:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <HAL_TIM_MspPostInit+0xf0>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <HAL_TIM_MspPostInit+0xf0>)
 8002f38:	f043 0310 	orr.w	r3, r3, #16
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <HAL_TIM_MspPostInit+0xf0>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	693b      	ldr	r3, [r7, #16]
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002f4a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	4619      	mov	r1, r3
 8002f66:	4826      	ldr	r0, [pc, #152]	; (8003000 <HAL_TIM_MspPostInit+0xf4>)
 8002f68:	f001 fb78 	bl	800465c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002f6c:	e040      	b.n	8002ff0 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a24      	ldr	r2, [pc, #144]	; (8003004 <HAL_TIM_MspPostInit+0xf8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d13b      	bne.n	8002ff0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <HAL_TIM_MspPostInit+0xf0>)
 8002f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f80:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <HAL_TIM_MspPostInit+0xf0>)
 8002f82:	f043 0301 	orr.w	r3, r3, #1
 8002f86:	6313      	str	r3, [r2, #48]	; 0x30
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <HAL_TIM_MspPostInit+0xf0>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	4b18      	ldr	r3, [pc, #96]	; (8002ffc <HAL_TIM_MspPostInit+0xf0>)
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	4a17      	ldr	r2, [pc, #92]	; (8002ffc <HAL_TIM_MspPostInit+0xf0>)
 8002f9e:	f043 0304 	orr.w	r3, r3, #4
 8002fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa4:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <HAL_TIM_MspPostInit+0xf0>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4619      	mov	r1, r3
 8002fca:	480f      	ldr	r0, [pc, #60]	; (8003008 <HAL_TIM_MspPostInit+0xfc>)
 8002fcc:	f001 fb46 	bl	800465c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fd0:	2340      	movs	r3, #64	; 0x40
 8002fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4808      	ldr	r0, [pc, #32]	; (800300c <HAL_TIM_MspPostInit+0x100>)
 8002fec:	f001 fb36 	bl	800465c <HAL_GPIO_Init>
}
 8002ff0:	bf00      	nop
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40021000 	.word	0x40021000
 8003004:	40010400 	.word	0x40010400
 8003008:	40020000 	.word	0x40020000
 800300c:	40020800 	.word	0x40020800

08003010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003014:	e7fe      	b.n	8003014 <NMI_Handler+0x4>

08003016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800301a:	e7fe      	b.n	800301a <HardFault_Handler+0x4>

0800301c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003020:	e7fe      	b.n	8003020 <MemManage_Handler+0x4>

08003022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003026:	e7fe      	b.n	8003026 <BusFault_Handler+0x4>

08003028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800302c:	e7fe      	b.n	800302c <UsageFault_Handler+0x4>

0800302e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003056:	f000 f905 	bl	8003264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}

0800305e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003062:	2001      	movs	r0, #1
 8003064:	f001 fcb0 	bl	80049c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}

0800306c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003070:	2002      	movs	r0, #2
 8003072:	f001 fca9 	bl	80049c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003080:	4805      	ldr	r0, [pc, #20]	; (8003098 <ADC_IRQHandler+0x1c>)
 8003082:	f000 f94e 	bl	8003322 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003086:	4805      	ldr	r0, [pc, #20]	; (800309c <ADC_IRQHandler+0x20>)
 8003088:	f000 f94b 	bl	8003322 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800308c:	4804      	ldr	r0, [pc, #16]	; (80030a0 <ADC_IRQHandler+0x24>)
 800308e:	f000 f948 	bl	8003322 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000a6c 	.word	0x20000a6c
 800309c:	20000a24 	.word	0x20000a24
 80030a0:	20000ab4 	.word	0x20000ab4

080030a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80030a8:	2020      	movs	r0, #32
 80030aa:	f001 fc8d 	bl	80049c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80030ae:	2080      	movs	r0, #128	; 0x80
 80030b0:	f001 fc8a 	bl	80049c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80030be:	f002 fab1 	bl	8005624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000b5c 	.word	0x20000b5c

080030cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <TIM4_IRQHandler+0x10>)
 80030d2:	f002 faa7 	bl	8005624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200009e4 	.word	0x200009e4

080030e0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80030e4:	4803      	ldr	r0, [pc, #12]	; (80030f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 80030e6:	f002 fa9d 	bl	8005624 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 80030ea:	4803      	ldr	r0, [pc, #12]	; (80030f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 80030ec:	f002 fa9a 	bl	8005624 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	200009a4 	.word	0x200009a4
 80030f8:	20000b9c 	.word	0x20000b9c

080030fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <DMA2_Stream0_IRQHandler+0x10>)
 8003102:	f001 f845 	bl	8004190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000afc 	.word	0x20000afc

08003110 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <SystemInit+0x50>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a11      	ldr	r2, [pc, #68]	; (8003160 <SystemInit+0x50>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003120:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <SystemInit+0x50>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003126:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <SystemInit+0x50>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <SystemInit+0x50>)
 800312c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <SystemInit+0x50>)
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <SystemInit+0x54>)
 800313a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <SystemInit+0x50>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <SystemInit+0x50>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003146:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <SystemInit+0x50>)
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <SystemInit+0x58>)
 8003150:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003154:	609a      	str	r2, [r3, #8]
#endif
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	24003010 	.word	0x24003010
 8003168:	e000ed00 	.word	0xe000ed00

0800316c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800316c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003170:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003172:	e003      	b.n	800317c <LoopCopyDataInit>

08003174 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003174:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003176:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003178:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800317a:	3104      	adds	r1, #4

0800317c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800317c:	480b      	ldr	r0, [pc, #44]	; (80031ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003180:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003182:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003184:	d3f6      	bcc.n	8003174 <CopyDataInit>
  ldr  r2, =_sbss
 8003186:	4a0b      	ldr	r2, [pc, #44]	; (80031b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003188:	e002      	b.n	8003190 <LoopFillZerobss>

0800318a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800318a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800318c:	f842 3b04 	str.w	r3, [r2], #4

08003190 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003192:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003194:	d3f9      	bcc.n	800318a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003196:	f7ff ffbb 	bl	8003110 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800319a:	f003 f999 	bl	80064d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800319e:	f7ff f877 	bl	8002290 <main>
  bx  lr
 80031a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80031a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80031a8:	080078a0 	.word	0x080078a0
  ldr  r0, =_sdata
 80031ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80031b0:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 80031b4:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80031b8:	20000be0 	.word	0x20000be0

080031bc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031bc:	e7fe      	b.n	80031bc <CAN1_RX0_IRQHandler>
	...

080031c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031c4:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_Init+0x40>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <HAL_Init+0x40>)
 80031ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_Init+0x40>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <HAL_Init+0x40>)
 80031d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_Init+0x40>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a07      	ldr	r2, [pc, #28]	; (8003200 <HAL_Init+0x40>)
 80031e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031e8:	2003      	movs	r0, #3
 80031ea:	f000 fe89 	bl	8003f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ee:	200f      	movs	r0, #15
 80031f0:	f000 f808 	bl	8003204 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80031f4:	f7ff fc88 	bl	8002b08 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023c00 	.word	0x40023c00

08003204 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <HAL_InitTick+0x54>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4b12      	ldr	r3, [pc, #72]	; (800325c <HAL_InitTick+0x58>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	4619      	mov	r1, r3
 8003216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800321a:	fbb3 f3f1 	udiv	r3, r3, r1
 800321e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fea1 	bl	8003f6a <HAL_SYSTICK_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e00e      	b.n	8003250 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b0f      	cmp	r3, #15
 8003236:	d80a      	bhi.n	800324e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003238:	2200      	movs	r2, #0
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	f04f 30ff 	mov.w	r0, #4294967295
 8003240:	f000 fe69 	bl	8003f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003244:	4a06      	ldr	r2, [pc, #24]	; (8003260 <HAL_InitTick+0x5c>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20000014 	.word	0x20000014
 800325c:	2000001c 	.word	0x2000001c
 8003260:	20000018 	.word	0x20000018

08003264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003268:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_IncTick+0x1c>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_IncTick+0x20>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4413      	add	r3, r2
 8003274:	4a03      	ldr	r2, [pc, #12]	; (8003284 <HAL_IncTick+0x20>)
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	2000001c 	.word	0x2000001c
 8003284:	20000bdc 	.word	0x20000bdc

08003288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return uwTick;
 800328c:	4b02      	ldr	r3, [pc, #8]	; (8003298 <HAL_GetTick+0x10>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	20000bdc 	.word	0x20000bdc

0800329c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e033      	b.n	800331a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f7ff fc4a 	bl	8002b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d118      	bne.n	800330c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032e2:	f023 0302 	bic.w	r3, r3, #2
 80032e6:	f043 0202 	orr.w	r2, r3, #2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fb66 	bl	80039c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f023 0303 	bic.w	r3, r3, #3
 8003302:	f043 0201 	orr.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40
 800330a:	e001      	b.n	8003310 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b084      	sub	sp, #16
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b02      	cmp	r3, #2
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b20      	cmp	r3, #32
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d049      	beq.n	80033f8 <HAL_ADC_IRQHandler+0xd6>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d046      	beq.n	80033f8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d105      	bne.n	8003382 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d12b      	bne.n	80033e8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003394:	2b00      	cmp	r3, #0
 8003396:	d127      	bne.n	80033e8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d006      	beq.n	80033b4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d119      	bne.n	80033e8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0220 	bic.w	r2, r2, #32
 80033c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f043 0201 	orr.w	r2, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7fe fe25 	bl	8002038 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f06f 0212 	mvn.w	r2, #18
 80033f6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b04      	cmp	r3, #4
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003418:	2b80      	cmp	r3, #128	; 0x80
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d057      	beq.n	80034da <HAL_ADC_IRQHandler+0x1b8>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d054      	beq.n	80034da <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b00      	cmp	r3, #0
 800343a:	d105      	bne.n	8003448 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d139      	bne.n	80034ca <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003460:	2b00      	cmp	r3, #0
 8003462:	d006      	beq.n	8003472 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800346e:	2b00      	cmp	r3, #0
 8003470:	d12b      	bne.n	80034ca <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800347c:	2b00      	cmp	r3, #0
 800347e:	d124      	bne.n	80034ca <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11d      	bne.n	80034ca <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003492:	2b00      	cmp	r3, #0
 8003494:	d119      	bne.n	80034ca <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034a4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d105      	bne.n	80034ca <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f043 0201 	orr.w	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fbfe 	bl	8003ccc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 020c 	mvn.w	r2, #12
 80034d8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d017      	beq.n	800353c <HAL_ADC_IRQHandler+0x21a>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d014      	beq.n	800353c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b01      	cmp	r3, #1
 800351e:	d10d      	bne.n	800353c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003524:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f914 	bl	800375a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f06f 0201 	mvn.w	r2, #1
 800353a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b20      	cmp	r3, #32
 8003548:	bf0c      	ite	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	2300      	movne	r3, #0
 800354e:	b2db      	uxtb	r3, r3
 8003550:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800355c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003560:	bf0c      	ite	eq
 8003562:	2301      	moveq	r3, #1
 8003564:	2300      	movne	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d015      	beq.n	800359c <HAL_ADC_IRQHandler+0x27a>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F2, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357a:	f043 0202 	orr.w	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f06f 0220 	mvn.w	r2, #32
 800358a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f8ed 	bl	800376c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f06f 0220 	mvn.w	r2, #32
 800359a:	601a      	str	r2, [r3, #0]
  }
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d101      	bne.n	80035c2 <HAL_ADC_Start_DMA+0x1e>
 80035be:	2302      	movs	r3, #2
 80035c0:	e0af      	b.n	8003722 <HAL_ADC_Start_DMA+0x17e>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d018      	beq.n	800360a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <HAL_ADC_Start_DMA+0x188>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a50      	ldr	r2, [pc, #320]	; (8003730 <HAL_ADC_Start_DMA+0x18c>)
 80035ee:	fba2 2303 	umull	r2, r3, r2, r3
 80035f2:	0c9a      	lsrs	r2, r3, #18
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 80035fc:	e002      	b.n	8003604 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	3b01      	subs	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f9      	bne.n	80035fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b01      	cmp	r3, #1
 8003616:	f040 8083 	bne.w	8003720 <HAL_ADC_Start_DMA+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003622:	f023 0301 	bic.w	r3, r3, #1
 8003626:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003644:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003658:	d106      	bne.n	8003668 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f023 0206 	bic.w	r2, r3, #6
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	; 0x44
 8003666:	e002      	b.n	800366e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	4a2e      	ldr	r2, [pc, #184]	; (8003734 <HAL_ADC_Start_DMA+0x190>)
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	4a2d      	ldr	r2, [pc, #180]	; (8003738 <HAL_ADC_Start_DMA+0x194>)
 8003684:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368a:	4a2c      	ldr	r2, [pc, #176]	; (800373c <HAL_ADC_Start_DMA+0x198>)
 800368c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003696:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80036a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	334c      	adds	r3, #76	; 0x4c
 80036c2:	4619      	mov	r1, r3
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f000 fd0a 	bl	80040e0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80036cc:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <HAL_ADC_Start_DMA+0x19c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10f      	bne.n	80036f8 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d11c      	bne.n	8003720 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036f4:	609a      	str	r2, [r3, #8]
 80036f6:	e013      	b.n	8003720 <HAL_ADC_Start_DMA+0x17c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a11      	ldr	r2, [pc, #68]	; (8003744 <HAL_ADC_Start_DMA+0x1a0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10e      	bne.n	8003720 <HAL_ADC_Start_DMA+0x17c>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d107      	bne.n	8003720 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800371e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000014 	.word	0x20000014
 8003730:	431bde83 	.word	0x431bde83
 8003734:	08003bc9 	.word	0x08003bc9
 8003738:	08003c83 	.word	0x08003c83
 800373c:	08003c9f 	.word	0x08003c9f
 8003740:	40012300 	.word	0x40012300
 8003744:	40012000 	.word	0x40012000

08003748 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	bc80      	pop	{r7}
 800376a:	4770      	bx	lr

0800376c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
	...

08003780 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_ADC_ConfigChannel+0x1c>
 8003798:	2302      	movs	r3, #2
 800379a:	e103      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x224>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b09      	cmp	r3, #9
 80037aa:	d925      	bls.n	80037f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68d9      	ldr	r1, [r3, #12]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	3b1e      	subs	r3, #30
 80037c2:	2207      	movs	r2, #7
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43da      	mvns	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	400a      	ands	r2, r1
 80037d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68d9      	ldr	r1, [r3, #12]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	4618      	mov	r0, r3
 80037e4:	4603      	mov	r3, r0
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	4403      	add	r3, r0
 80037ea:	3b1e      	subs	r3, #30
 80037ec:	409a      	lsls	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	e022      	b.n	800383e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6919      	ldr	r1, [r3, #16]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	b29b      	uxth	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	2207      	movs	r2, #7
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43da      	mvns	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	400a      	ands	r2, r1
 800381a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6919      	ldr	r1, [r3, #16]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689a      	ldr	r2, [r3, #8]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	4618      	mov	r0, r3
 800382e:	4603      	mov	r3, r0
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4403      	add	r3, r0
 8003834:	409a      	lsls	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b06      	cmp	r3, #6
 8003844:	d824      	bhi.n	8003890 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	3b05      	subs	r3, #5
 8003858:	221f      	movs	r2, #31
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43da      	mvns	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	400a      	ands	r2, r1
 8003866:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	4618      	mov	r0, r3
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	3b05      	subs	r3, #5
 8003882:	fa00 f203 	lsl.w	r2, r0, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	635a      	str	r2, [r3, #52]	; 0x34
 800388e:	e04c      	b.n	800392a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b0c      	cmp	r3, #12
 8003896:	d824      	bhi.n	80038e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	3b23      	subs	r3, #35	; 0x23
 80038aa:	221f      	movs	r2, #31
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	43da      	mvns	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	400a      	ands	r2, r1
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	4618      	mov	r0, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	3b23      	subs	r3, #35	; 0x23
 80038d4:	fa00 f203 	lsl.w	r2, r0, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	631a      	str	r2, [r3, #48]	; 0x30
 80038e0:	e023      	b.n	800392a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	3b41      	subs	r3, #65	; 0x41
 80038f4:	221f      	movs	r2, #31
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43da      	mvns	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	400a      	ands	r2, r1
 8003902:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	4618      	mov	r0, r3
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	3b41      	subs	r3, #65	; 0x41
 800391e:	fa00 f203 	lsl.w	r2, r0, r3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a20      	ldr	r2, [pc, #128]	; (80039b0 <HAL_ADC_ConfigChannel+0x230>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d109      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x1c8>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b12      	cmp	r3, #18
 800393a:	d105      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800393c:	4b1d      	ldr	r3, [pc, #116]	; (80039b4 <HAL_ADC_ConfigChannel+0x234>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <HAL_ADC_ConfigChannel+0x234>)
 8003942:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003946:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a18      	ldr	r2, [pc, #96]	; (80039b0 <HAL_ADC_ConfigChannel+0x230>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d123      	bne.n	800399a <HAL_ADC_ConfigChannel+0x21a>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b10      	cmp	r3, #16
 8003958:	d003      	beq.n	8003962 <HAL_ADC_ConfigChannel+0x1e2>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b11      	cmp	r3, #17
 8003960:	d11b      	bne.n	800399a <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <HAL_ADC_ConfigChannel+0x234>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <HAL_ADC_ConfigChannel+0x234>)
 8003968:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800396c:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b10      	cmp	r3, #16
 8003974:	d111      	bne.n	800399a <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <HAL_ADC_ConfigChannel+0x238>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a10      	ldr	r2, [pc, #64]	; (80039bc <HAL_ADC_ConfigChannel+0x23c>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	0c9a      	lsrs	r2, r3, #18
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800398c:	e002      	b.n	8003994 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3b01      	subs	r3, #1
 8003992:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f9      	bne.n	800398e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bc80      	pop	{r7}
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40012000 	.word	0x40012000
 80039b4:	40012300 	.word	0x40012300
 80039b8:	20000014 	.word	0x20000014
 80039bc:	431bde83 	.word	0x431bde83

080039c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80039c8:	4b7d      	ldr	r3, [pc, #500]	; (8003bc0 <ADC_Init+0x200>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	4a7c      	ldr	r2, [pc, #496]	; (8003bc0 <ADC_Init+0x200>)
 80039ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80039d2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80039d4:	4b7a      	ldr	r3, [pc, #488]	; (8003bc0 <ADC_Init+0x200>)
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4978      	ldr	r1, [pc, #480]	; (8003bc0 <ADC_Init+0x200>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	021a      	lsls	r2, r3, #8
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6859      	ldr	r1, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6899      	ldr	r1, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	4a5d      	ldr	r2, [pc, #372]	; (8003bc4 <ADC_Init+0x204>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d022      	beq.n	8003a9a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6899      	ldr	r1, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	e00f      	b.n	8003aba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ab8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0202 	bic.w	r2, r2, #2
 8003ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6899      	ldr	r1, [r3, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	005a      	lsls	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d027      	beq.n	8003b36 <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003af4:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b04:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003b10:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	fa92 f2a2 	rbit	r2, r2
 8003b18:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	fab2 f282 	clz	r2, r2
 8003b20:	b2d2      	uxtb	r2, r2
 8003b22:	fa03 f102 	lsl.w	r1, r3, r2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	e007      	b.n	8003b46 <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b44:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b54:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	051a      	lsls	r2, r3, #20
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689a      	ldr	r2, [r3, #8]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6899      	ldr	r1, [r3, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	025a      	lsls	r2, r3, #9
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6899      	ldr	r1, [r3, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	029a      	lsls	r2, r3, #10
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bc80      	pop	{r7}
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	40012300 	.word	0x40012300
 8003bc4:	0f000001 	.word	0x0f000001

08003bc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d13c      	bne.n	8003c5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d12b      	bne.n	8003c54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d127      	bne.n	8003c54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d006      	beq.n	8003c20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d119      	bne.n	8003c54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0220 	bic.w	r2, r2, #32
 8003c2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d105      	bne.n	8003c54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f043 0201 	orr.w	r2, r3, #1
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f7fe f9ef 	bl	8002038 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c5a:	e00e      	b.n	8003c7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff fd7f 	bl	800376c <HAL_ADC_ErrorCallback>
}
 8003c6e:	e004      	b.n	8003c7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4798      	blx	r3
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b084      	sub	sp, #16
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff fd59 	bl	8003748 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2240      	movs	r2, #64	; 0x40
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f043 0204 	orr.w	r2, r3, #4
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f7ff fd54 	bl	800376c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e02f      	b.n	8003d58 <HAL_ADCEx_MultiModeConfigChannel+0x78>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8003d00:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d06:	f023 031f 	bic.w	r3, r3, #31
 8003d0a:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->Mode;
 8003d0c:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4913      	ldr	r1, [pc, #76]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	604b      	str	r3, [r1, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8003d1a:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a11      	ldr	r2, [pc, #68]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d24:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	490d      	ldr	r1, [pc, #52]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	604b      	str	r3, [r1, #4]
  
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8003d34:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4906      	ldr	r1, [pc, #24]	; (8003d64 <HAL_ADCEx_MultiModeConfigChannel+0x84>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40012300 	.word	0x40012300

08003d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d84:	4013      	ands	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9a:	4a04      	ldr	r2, [pc, #16]	; (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	60d3      	str	r3, [r2, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	f003 0307 	and.w	r3, r3, #7
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	db0b      	blt.n	8003df6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	f003 021f 	and.w	r2, r3, #31
 8003de4:	4906      	ldr	r1, [pc, #24]	; (8003e00 <__NVIC_EnableIRQ+0x34>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2001      	movs	r0, #1
 8003dee:	fa00 f202 	lsl.w	r2, r0, r2
 8003df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr
 8003e00:	e000e100 	.word	0xe000e100

08003e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	db0a      	blt.n	8003e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	490c      	ldr	r1, [pc, #48]	; (8003e50 <__NVIC_SetPriority+0x4c>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	0112      	lsls	r2, r2, #4
 8003e24:	b2d2      	uxtb	r2, r2
 8003e26:	440b      	add	r3, r1
 8003e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e2c:	e00a      	b.n	8003e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4908      	ldr	r1, [pc, #32]	; (8003e54 <__NVIC_SetPriority+0x50>)
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	3b04      	subs	r3, #4
 8003e3c:	0112      	lsls	r2, r2, #4
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	440b      	add	r3, r1
 8003e42:	761a      	strb	r2, [r3, #24]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	e000e100 	.word	0xe000e100
 8003e54:	e000ed00 	.word	0xe000ed00

08003e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f1c3 0307 	rsb	r3, r3, #7
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	bf28      	it	cs
 8003e76:	2304      	movcs	r3, #4
 8003e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2b06      	cmp	r3, #6
 8003e80:	d902      	bls.n	8003e88 <NVIC_EncodePriority+0x30>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3b03      	subs	r3, #3
 8003e86:	e000      	b.n	8003e8a <NVIC_EncodePriority+0x32>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	43da      	mvns	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	43d9      	mvns	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb0:	4313      	orrs	r3, r2
         );
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3724      	adds	r7, #36	; 0x24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ecc:	d301      	bcc.n	8003ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00f      	b.n	8003ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <SysTick_Config+0x40>)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eda:	210f      	movs	r1, #15
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	f7ff ff90 	bl	8003e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <SysTick_Config+0x40>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eea:	4b04      	ldr	r3, [pc, #16]	; (8003efc <SysTick_Config+0x40>)
 8003eec:	2207      	movs	r2, #7
 8003eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	e000e010 	.word	0xe000e010

08003f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ff2d 	bl	8003d68 <__NVIC_SetPriorityGrouping>
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	607a      	str	r2, [r7, #4]
 8003f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f28:	f7ff ff42 	bl	8003db0 <__NVIC_GetPriorityGrouping>
 8003f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	6978      	ldr	r0, [r7, #20]
 8003f34:	f7ff ff90 	bl	8003e58 <NVIC_EncodePriority>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff ff5f 	bl	8003e04 <__NVIC_SetPriority>
}
 8003f46:	bf00      	nop
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	4603      	mov	r3, r0
 8003f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff35 	bl	8003dcc <__NVIC_EnableIRQ>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ffa2 	bl	8003ebc <SysTick_Config>
 8003f78:	4603      	mov	r3, r0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f90:	f7ff f97a 	bl	8003288 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e099      	b.n	80040d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fc0:	e00f      	b.n	8003fe2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fc2:	f7ff f961 	bl	8003288 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d908      	bls.n	8003fe2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2203      	movs	r2, #3
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e078      	b.n	80040d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e8      	bne.n	8003fc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4b38      	ldr	r3, [pc, #224]	; (80040dc <HAL_DMA_Init+0x158>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800400e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004026:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	2b04      	cmp	r3, #4
 800403a:	d107      	bne.n	800404c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	4313      	orrs	r3, r2
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0307 	bic.w	r3, r3, #7
 8004062:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	2b04      	cmp	r3, #4
 8004074:	d117      	bne.n	80040a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00e      	beq.n	80040a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fa6d 	bl	8004568 <DMA_CheckFifoParam>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d008      	beq.n	80040a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2240      	movs	r2, #64	; 0x40
 8004098:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040a2:	2301      	movs	r3, #1
 80040a4:	e016      	b.n	80040d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa26 	bl	8004500 <DMA_CalcBaseAndBitshift>
 80040b4:	4603      	mov	r3, r0
 80040b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	223f      	movs	r2, #63	; 0x3f
 80040be:	409a      	lsls	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	f010803f 	.word	0xf010803f

080040e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_DMA_Start_IT+0x26>
 8004102:	2302      	movs	r3, #2
 8004104:	e040      	b.n	8004188 <HAL_DMA_Start_IT+0xa8>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d12f      	bne.n	800417a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f9b8 	bl	80044a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	223f      	movs	r2, #63	; 0x3f
 800413a:	409a      	lsls	r2, r3
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0216 	orr.w	r2, r2, #22
 800414e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0208 	orr.w	r2, r2, #8
 8004166:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	e005      	b.n	8004186 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004182:	2302      	movs	r3, #2
 8004184:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004186:	7dfb      	ldrb	r3, [r7, #23]
}
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800419c:	4b92      	ldr	r3, [pc, #584]	; (80043e8 <HAL_DMA_IRQHandler+0x258>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a92      	ldr	r2, [pc, #584]	; (80043ec <HAL_DMA_IRQHandler+0x25c>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	0a9b      	lsrs	r3, r3, #10
 80041a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ba:	2208      	movs	r2, #8
 80041bc:	409a      	lsls	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d01a      	beq.n	80041fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d013      	beq.n	80041fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0204 	bic.w	r2, r2, #4
 80041e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	2208      	movs	r2, #8
 80041ea:	409a      	lsls	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f4:	f043 0201 	orr.w	r2, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004200:	2201      	movs	r2, #1
 8004202:	409a      	lsls	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d012      	beq.n	8004232 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00b      	beq.n	8004232 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421e:	2201      	movs	r2, #1
 8004220:	409a      	lsls	r2, r3
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	f043 0202 	orr.w	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	2204      	movs	r2, #4
 8004238:	409a      	lsls	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d012      	beq.n	8004268 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00b      	beq.n	8004268 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004254:	2204      	movs	r2, #4
 8004256:	409a      	lsls	r2, r3
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	f043 0204 	orr.w	r2, r3, #4
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	2210      	movs	r2, #16
 800426e:	409a      	lsls	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d043      	beq.n	8004300 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d03c      	beq.n	8004300 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428a:	2210      	movs	r2, #16
 800428c:	409a      	lsls	r2, r3
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d018      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d108      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d024      	beq.n	8004300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
 80042be:	e01f      	b.n	8004300 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d01b      	beq.n	8004300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
 80042d0:	e016      	b.n	8004300 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d107      	bne.n	80042f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0208 	bic.w	r2, r2, #8
 80042ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004304:	2220      	movs	r2, #32
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 808e 	beq.w	800442e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8086 	beq.w	800442e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004326:	2220      	movs	r2, #32
 8004328:	409a      	lsls	r2, r3
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b05      	cmp	r3, #5
 8004338:	d136      	bne.n	80043a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0216 	bic.w	r2, r2, #22
 8004348:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004358:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <HAL_DMA_IRQHandler+0x1da>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004366:	2b00      	cmp	r3, #0
 8004368:	d007      	beq.n	800437a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0208 	bic.w	r2, r2, #8
 8004378:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	223f      	movs	r2, #63	; 0x3f
 8004380:	409a      	lsls	r2, r3
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439a:	2b00      	cmp	r3, #0
 800439c:	d07d      	beq.n	800449a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
        }
        return;
 80043a6:	e078      	b.n	800449a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d01c      	beq.n	80043f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d108      	bne.n	80043d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d030      	beq.n	800442e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	4798      	blx	r3
 80043d4:	e02b      	b.n	800442e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d027      	beq.n	800442e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	4798      	blx	r3
 80043e6:	e022      	b.n	800442e <HAL_DMA_IRQHandler+0x29e>
 80043e8:	20000014 	.word	0x20000014
 80043ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0210 	bic.w	r2, r2, #16
 800440c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004432:	2b00      	cmp	r3, #0
 8004434:	d032      	beq.n	800449c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d022      	beq.n	8004488 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2205      	movs	r2, #5
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	3301      	adds	r3, #1
 800445e:	60bb      	str	r3, [r7, #8]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	429a      	cmp	r2, r3
 8004464:	d307      	bcc.n	8004476 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f2      	bne.n	800445a <HAL_DMA_IRQHandler+0x2ca>
 8004474:	e000      	b.n	8004478 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004476:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	4798      	blx	r3
 8004498:	e000      	b.n	800449c <HAL_DMA_IRQHandler+0x30c>
        return;
 800449a:	bf00      	nop
    }
  }
}
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop

080044a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d108      	bne.n	80044e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044e2:	e007      	b.n	80044f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	60da      	str	r2, [r3, #12]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr
	...

08004500 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	b2db      	uxtb	r3, r3
 800450e:	3b10      	subs	r3, #16
 8004510:	4a13      	ldr	r2, [pc, #76]	; (8004560 <DMA_CalcBaseAndBitshift+0x60>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	091b      	lsrs	r3, r3, #4
 8004518:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800451a:	4a12      	ldr	r2, [pc, #72]	; (8004564 <DMA_CalcBaseAndBitshift+0x64>)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b03      	cmp	r3, #3
 800452c:	d909      	bls.n	8004542 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004536:	f023 0303 	bic.w	r3, r3, #3
 800453a:	1d1a      	adds	r2, r3, #4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	659a      	str	r2, [r3, #88]	; 0x58
 8004540:	e007      	b.n	8004552 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800454a:	f023 0303 	bic.w	r3, r3, #3
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	aaaaaaab 	.word	0xaaaaaaab
 8004564:	080076a8 	.word	0x080076a8

08004568 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d11f      	bne.n	80045c2 <DMA_CheckFifoParam+0x5a>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d856      	bhi.n	8004636 <DMA_CheckFifoParam+0xce>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <DMA_CheckFifoParam+0x28>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045a1 	.word	0x080045a1
 8004594:	080045b3 	.word	0x080045b3
 8004598:	080045a1 	.word	0x080045a1
 800459c:	08004637 	.word	0x08004637
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d046      	beq.n	800463a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b0:	e043      	b.n	800463a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ba:	d140      	bne.n	800463e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c0:	e03d      	b.n	800463e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ca:	d121      	bne.n	8004610 <DMA_CheckFifoParam+0xa8>
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b03      	cmp	r3, #3
 80045d0:	d837      	bhi.n	8004642 <DMA_CheckFifoParam+0xda>
 80045d2:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <DMA_CheckFifoParam+0x70>)
 80045d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045ef 	.word	0x080045ef
 80045e0:	080045e9 	.word	0x080045e9
 80045e4:	08004601 	.word	0x08004601
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	73fb      	strb	r3, [r7, #15]
      break;
 80045ec:	e030      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d025      	beq.n	8004646 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045fe:	e022      	b.n	8004646 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004608:	d11f      	bne.n	800464a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800460e:	e01c      	b.n	800464a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d903      	bls.n	800461e <DMA_CheckFifoParam+0xb6>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d003      	beq.n	8004624 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800461c:	e018      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	73fb      	strb	r3, [r7, #15]
      break;
 8004622:	e015      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00e      	beq.n	800464e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e00b      	b.n	800464e <DMA_CheckFifoParam+0xe6>
      break;
 8004636:	bf00      	nop
 8004638:	e00a      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 800463a:	bf00      	nop
 800463c:	e008      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 800463e:	bf00      	nop
 8004640:	e006      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 8004642:	bf00      	nop
 8004644:	e004      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 8004646:	bf00      	nop
 8004648:	e002      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;   
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <DMA_CheckFifoParam+0xe8>
      break;
 800464e:	bf00      	nop
    }
  } 
  
  return status; 
 8004650:	7bfb      	ldrb	r3, [r7, #15]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800466a:	e16f      	b.n	800494c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	2101      	movs	r1, #1
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	fa01 f303 	lsl.w	r3, r1, r3
 8004678:	4013      	ands	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8161 	beq.w	8004946 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d00b      	beq.n	80046a4 <HAL_GPIO_Init+0x48>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d007      	beq.n	80046a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004698:	2b11      	cmp	r3, #17
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b12      	cmp	r3, #18
 80046a2:	d130      	bne.n	8004706 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	2203      	movs	r2, #3
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	43db      	mvns	r3, r3
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	4013      	ands	r3, r2
 80046ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046da:	2201      	movs	r2, #1
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43db      	mvns	r3, r3
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4013      	ands	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f003 0201 	and.w	r2, r3, #1
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	2203      	movs	r2, #3
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4013      	ands	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0xea>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b12      	cmp	r3, #18
 8004744:	d123      	bne.n	800478e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	08da      	lsrs	r2, r3, #3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3208      	adds	r2, #8
 800474e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004752:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	220f      	movs	r2, #15
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4013      	ands	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	08da      	lsrs	r2, r3, #3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3208      	adds	r2, #8
 8004788:	6939      	ldr	r1, [r7, #16]
 800478a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	2203      	movs	r2, #3
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4013      	ands	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f003 0203 	and.w	r2, r3, #3
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80bb 	beq.w	8004946 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d0:	2300      	movs	r3, #0
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	4b64      	ldr	r3, [pc, #400]	; (8004968 <HAL_GPIO_Init+0x30c>)
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	4a63      	ldr	r2, [pc, #396]	; (8004968 <HAL_GPIO_Init+0x30c>)
 80047da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047de:	6453      	str	r3, [r2, #68]	; 0x44
 80047e0:	4b61      	ldr	r3, [pc, #388]	; (8004968 <HAL_GPIO_Init+0x30c>)
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e8:	60bb      	str	r3, [r7, #8]
 80047ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80047ec:	4a5f      	ldr	r2, [pc, #380]	; (800496c <HAL_GPIO_Init+0x310>)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	089b      	lsrs	r3, r3, #2
 80047f2:	3302      	adds	r3, #2
 80047f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	220f      	movs	r2, #15
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4013      	ands	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a57      	ldr	r2, [pc, #348]	; (8004970 <HAL_GPIO_Init+0x314>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d031      	beq.n	800487c <HAL_GPIO_Init+0x220>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a56      	ldr	r2, [pc, #344]	; (8004974 <HAL_GPIO_Init+0x318>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d02b      	beq.n	8004878 <HAL_GPIO_Init+0x21c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a55      	ldr	r2, [pc, #340]	; (8004978 <HAL_GPIO_Init+0x31c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d025      	beq.n	8004874 <HAL_GPIO_Init+0x218>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a54      	ldr	r2, [pc, #336]	; (800497c <HAL_GPIO_Init+0x320>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d01f      	beq.n	8004870 <HAL_GPIO_Init+0x214>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a53      	ldr	r2, [pc, #332]	; (8004980 <HAL_GPIO_Init+0x324>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d019      	beq.n	800486c <HAL_GPIO_Init+0x210>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a52      	ldr	r2, [pc, #328]	; (8004984 <HAL_GPIO_Init+0x328>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <HAL_GPIO_Init+0x20c>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a51      	ldr	r2, [pc, #324]	; (8004988 <HAL_GPIO_Init+0x32c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00d      	beq.n	8004864 <HAL_GPIO_Init+0x208>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a50      	ldr	r2, [pc, #320]	; (800498c <HAL_GPIO_Init+0x330>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d007      	beq.n	8004860 <HAL_GPIO_Init+0x204>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a4f      	ldr	r2, [pc, #316]	; (8004990 <HAL_GPIO_Init+0x334>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d101      	bne.n	800485c <HAL_GPIO_Init+0x200>
 8004858:	2308      	movs	r3, #8
 800485a:	e010      	b.n	800487e <HAL_GPIO_Init+0x222>
 800485c:	2309      	movs	r3, #9
 800485e:	e00e      	b.n	800487e <HAL_GPIO_Init+0x222>
 8004860:	2307      	movs	r3, #7
 8004862:	e00c      	b.n	800487e <HAL_GPIO_Init+0x222>
 8004864:	2306      	movs	r3, #6
 8004866:	e00a      	b.n	800487e <HAL_GPIO_Init+0x222>
 8004868:	2305      	movs	r3, #5
 800486a:	e008      	b.n	800487e <HAL_GPIO_Init+0x222>
 800486c:	2304      	movs	r3, #4
 800486e:	e006      	b.n	800487e <HAL_GPIO_Init+0x222>
 8004870:	2303      	movs	r3, #3
 8004872:	e004      	b.n	800487e <HAL_GPIO_Init+0x222>
 8004874:	2302      	movs	r3, #2
 8004876:	e002      	b.n	800487e <HAL_GPIO_Init+0x222>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <HAL_GPIO_Init+0x222>
 800487c:	2300      	movs	r3, #0
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	f002 0203 	and.w	r2, r2, #3
 8004884:	0092      	lsls	r2, r2, #2
 8004886:	4093      	lsls	r3, r2
 8004888:	461a      	mov	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004890:	4936      	ldr	r1, [pc, #216]	; (800496c <HAL_GPIO_Init+0x310>)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	3302      	adds	r3, #2
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <HAL_GPIO_Init+0x338>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	43db      	mvns	r3, r3
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4013      	ands	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4313      	orrs	r3, r2
 80048c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80048c2:	4a34      	ldr	r2, [pc, #208]	; (8004994 <HAL_GPIO_Init+0x338>)
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048c8:	4b32      	ldr	r3, [pc, #200]	; (8004994 <HAL_GPIO_Init+0x338>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4013      	ands	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80048ec:	4a29      	ldr	r2, [pc, #164]	; (8004994 <HAL_GPIO_Init+0x338>)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048f2:	4b28      	ldr	r3, [pc, #160]	; (8004994 <HAL_GPIO_Init+0x338>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4013      	ands	r3, r2
 8004900:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004916:	4a1f      	ldr	r2, [pc, #124]	; (8004994 <HAL_GPIO_Init+0x338>)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800491c:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <HAL_GPIO_Init+0x338>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	43db      	mvns	r3, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4013      	ands	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004940:	4a14      	ldr	r2, [pc, #80]	; (8004994 <HAL_GPIO_Init+0x338>)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	3301      	adds	r3, #1
 800494a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	fa22 f303 	lsr.w	r3, r2, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	f47f ae88 	bne.w	800466c <HAL_GPIO_Init+0x10>
  }
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	40023800 	.word	0x40023800
 800496c:	40013800 	.word	0x40013800
 8004970:	40020000 	.word	0x40020000
 8004974:	40020400 	.word	0x40020400
 8004978:	40020800 	.word	0x40020800
 800497c:	40020c00 	.word	0x40020c00
 8004980:	40021000 	.word	0x40021000
 8004984:	40021400 	.word	0x40021400
 8004988:	40021800 	.word	0x40021800
 800498c:	40021c00 	.word	0x40021c00
 8004990:	40022000 	.word	0x40022000
 8004994:	40013c00 	.word	0x40013c00

08004998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	887b      	ldrh	r3, [r7, #2]
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049b0:	2301      	movs	r3, #1
 80049b2:	73fb      	strb	r3, [r7, #15]
 80049b4:	e001      	b.n	80049ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3714      	adds	r7, #20
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bc80      	pop	{r7}
 80049c4:	4770      	bx	lr
	...

080049c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049d2:	4b08      	ldr	r3, [pc, #32]	; (80049f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	88fb      	ldrh	r3, [r7, #6]
 80049d8:	4013      	ands	r3, r2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d006      	beq.n	80049ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049de:	4a05      	ldr	r2, [pc, #20]	; (80049f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049e0:	88fb      	ldrh	r3, [r7, #6]
 80049e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd f956 	bl	8001c98 <HAL_GPIO_EXTI_Callback>
  }
}
 80049ec:	bf00      	nop
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40013c00 	.word	0x40013c00

080049f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b090      	sub	sp, #64	; 0x40
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e253      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d050      	beq.n	8004ab8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a16:	4ba3      	ldr	r3, [pc, #652]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 030c 	and.w	r3, r3, #12
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d00c      	beq.n	8004a3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a22:	4ba0      	ldr	r3, [pc, #640]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d112      	bne.n	8004a54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a2e:	4b9d      	ldr	r3, [pc, #628]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3a:	d10b      	bne.n	8004a54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	4b99      	ldr	r3, [pc, #612]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d036      	beq.n	8004ab6 <HAL_RCC_OscConfig+0xbe>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d132      	bne.n	8004ab6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e22e      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	4b93      	ldr	r3, [pc, #588]	; (8004ca8 <HAL_RCC_OscConfig+0x2b0>)
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d013      	beq.n	8004a8e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a66:	f7fe fc0f 	bl	8003288 <HAL_GetTick>
 8004a6a:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a6e:	f7fe fc0b 	bl	8003288 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b64      	cmp	r3, #100	; 0x64
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e218      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a80:	4b88      	ldr	r3, [pc, #544]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d0f0      	beq.n	8004a6e <HAL_RCC_OscConfig+0x76>
 8004a8c:	e014      	b.n	8004ab8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8e:	f7fe fbfb 	bl	8003288 <HAL_GetTick>
 8004a92:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a96:	f7fe fbf7 	bl	8003288 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b64      	cmp	r3, #100	; 0x64
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e204      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa8:	4b7e      	ldr	r3, [pc, #504]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x9e>
 8004ab4:	e000      	b.n	8004ab8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d077      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ac4:	4b77      	ldr	r3, [pc, #476]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00b      	beq.n	8004ae8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ad0:	4b74      	ldr	r3, [pc, #464]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d126      	bne.n	8004b2a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004adc:	4b71      	ldr	r3, [pc, #452]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d120      	bne.n	8004b2a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae8:	4b6e      	ldr	r3, [pc, #440]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_OscConfig+0x108>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e1d8      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b00:	4b68      	ldr	r3, [pc, #416]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	21f8      	movs	r1, #248	; 0xf8
 8004b0e:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b12:	fa91 f1a1 	rbit	r1, r1
 8004b16:	62f9      	str	r1, [r7, #44]	; 0x2c
  return result;
 8004b18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b1a:	fab1 f181 	clz	r1, r1
 8004b1e:	b2c9      	uxtb	r1, r1
 8004b20:	408b      	lsls	r3, r1
 8004b22:	4960      	ldr	r1, [pc, #384]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b28:	e044      	b.n	8004bb4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d02a      	beq.n	8004b88 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b32:	4b5e      	ldr	r3, [pc, #376]	; (8004cac <HAL_RCC_OscConfig+0x2b4>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b38:	f7fe fba6 	bl	8003288 <HAL_GetTick>
 8004b3c:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b40:	f7fe fba2 	bl	8003288 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e1af      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b52:	4b54      	ldr	r3, [pc, #336]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0f0      	beq.n	8004b40 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5e:	4b51      	ldr	r3, [pc, #324]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	21f8      	movs	r1, #248	; 0xf8
 8004b6c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b70:	fa91 f1a1 	rbit	r1, r1
 8004b74:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8004b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b78:	fab1 f181 	clz	r1, r1
 8004b7c:	b2c9      	uxtb	r1, r1
 8004b7e:	408b      	lsls	r3, r1
 8004b80:	4948      	ldr	r1, [pc, #288]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]
 8004b86:	e015      	b.n	8004bb4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b88:	4b48      	ldr	r3, [pc, #288]	; (8004cac <HAL_RCC_OscConfig+0x2b4>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8e:	f7fe fb7b 	bl	8003288 <HAL_GetTick>
 8004b92:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b96:	f7fe fb77 	bl	8003288 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e184      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba8:	4b3e      	ldr	r3, [pc, #248]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d030      	beq.n	8004c22 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d016      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc8:	4b39      	ldr	r3, [pc, #228]	; (8004cb0 <HAL_RCC_OscConfig+0x2b8>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bce:	f7fe fb5b 	bl	8003288 <HAL_GetTick>
 8004bd2:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bd6:	f7fe fb57 	bl	8003288 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e164      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be8:	4b2e      	ldr	r3, [pc, #184]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0f0      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x1de>
 8004bf4:	e015      	b.n	8004c22 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bf6:	4b2e      	ldr	r3, [pc, #184]	; (8004cb0 <HAL_RCC_OscConfig+0x2b8>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfc:	f7fe fb44 	bl	8003288 <HAL_GetTick>
 8004c00:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c04:	f7fe fb40 	bl	8003288 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e14d      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c16:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f000 8088 	beq.w	8004d40 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c36:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d110      	bne.n	8004c64 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c50:	6413      	str	r3, [r2, #64]	; 0x40
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c64:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <HAL_RCC_OscConfig+0x2bc>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a12      	ldr	r2, [pc, #72]	; (8004cb4 <HAL_RCC_OscConfig+0x2bc>)
 8004c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c6e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c70:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <HAL_RCC_OscConfig+0x2bc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d123      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7c:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <HAL_RCC_OscConfig+0x2bc>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a0c      	ldr	r2, [pc, #48]	; (8004cb4 <HAL_RCC_OscConfig+0x2bc>)
 8004c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c88:	f7fe fafe 	bl	8003288 <HAL_GetTick>
 8004c8c:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8e:	e013      	b.n	8004cb8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c90:	f7fe fafa 	bl	8003288 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d90c      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e107      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
 8004ca2:	bf00      	nop
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40023802 	.word	0x40023802
 8004cac:	42470000 	.word	0x42470000
 8004cb0:	42470e80 	.word	0x42470e80
 8004cb4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb8:	4b80      	ldr	r3, [pc, #512]	; (8004ebc <HAL_RCC_OscConfig+0x4c4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0e5      	beq.n	8004c90 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	4b7d      	ldr	r3, [pc, #500]	; (8004ec0 <HAL_RCC_OscConfig+0x4c8>)
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d015      	beq.n	8004d02 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cd6:	f7fe fad7 	bl	8003288 <HAL_GetTick>
 8004cda:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cdc:	e00a      	b.n	8004cf4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cde:	f7fe fad3 	bl	8003288 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e0de      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf4:	4b73      	ldr	r3, [pc, #460]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ee      	beq.n	8004cde <HAL_RCC_OscConfig+0x2e6>
 8004d00:	e014      	b.n	8004d2c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d02:	f7fe fac1 	bl	8003288 <HAL_GetTick>
 8004d06:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d08:	e00a      	b.n	8004d20 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d0a:	f7fe fabd 	bl	8003288 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e0c8      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d20:	4b68      	ldr	r3, [pc, #416]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1ee      	bne.n	8004d0a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d105      	bne.n	8004d40 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d34:	4b63      	ldr	r3, [pc, #396]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	4a62      	ldr	r2, [pc, #392]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80b3 	beq.w	8004eb0 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d4a:	4b5e      	ldr	r3, [pc, #376]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d07d      	beq.n	8004e52 <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d162      	bne.n	8004e24 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5e:	4b5a      	ldr	r3, [pc, #360]	; (8004ec8 <HAL_RCC_OscConfig+0x4d0>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fe fa90 	bl	8003288 <HAL_GetTick>
 8004d68:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d6c:	f7fe fa8c 	bl	8003288 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	; 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e099      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7e:	4b51      	ldr	r3, [pc, #324]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69da      	ldr	r2, [r3, #28]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8004d9c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9e:	6939      	ldr	r1, [r7, #16]
 8004da0:	fa91 f1a1 	rbit	r1, r1
 8004da4:	60f9      	str	r1, [r7, #12]
  return result;
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	fab1 f181 	clz	r1, r1
 8004dac:	b2c9      	uxtb	r1, r1
 8004dae:	408b      	lsls	r3, r1
 8004db0:	431a      	orrs	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	085b      	lsrs	r3, r3, #1
 8004db8:	3b01      	subs	r3, #1
 8004dba:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8004dbe:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	69b9      	ldr	r1, [r7, #24]
 8004dc2:	fa91 f1a1 	rbit	r1, r1
 8004dc6:	6179      	str	r1, [r7, #20]
  return result;
 8004dc8:	6979      	ldr	r1, [r7, #20]
 8004dca:	fab1 f181 	clz	r1, r1
 8004dce:	b2c9      	uxtb	r1, r1
 8004dd0:	408b      	lsls	r3, r1
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd8:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8004ddc:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	6a39      	ldr	r1, [r7, #32]
 8004de0:	fa91 f1a1 	rbit	r1, r1
 8004de4:	61f9      	str	r1, [r7, #28]
  return result;
 8004de6:	69f9      	ldr	r1, [r7, #28]
 8004de8:	fab1 f181 	clz	r1, r1
 8004dec:	b2c9      	uxtb	r1, r1
 8004dee:	408b      	lsls	r3, r1
 8004df0:	4934      	ldr	r1, [pc, #208]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df6:	4b34      	ldr	r3, [pc, #208]	; (8004ec8 <HAL_RCC_OscConfig+0x4d0>)
 8004df8:	2201      	movs	r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfc:	f7fe fa44 	bl	8003288 <HAL_GetTick>
 8004e00:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e04:	f7fe fa40 	bl	8003288 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b64      	cmp	r3, #100	; 0x64
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e04d      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e16:	4b2b      	ldr	r3, [pc, #172]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0x40c>
 8004e22:	e045      	b.n	8004eb0 <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e24:	4b28      	ldr	r3, [pc, #160]	; (8004ec8 <HAL_RCC_OscConfig+0x4d0>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2a:	f7fe fa2d 	bl	8003288 <HAL_GetTick>
 8004e2e:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e30:	e008      	b.n	8004e44 <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e32:	f7fe fa29 	bl	8003288 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b64      	cmp	r3, #100	; 0x64
 8004e3e:	d901      	bls.n	8004e44 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e036      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e44:	4b1f      	ldr	r3, [pc, #124]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d1f0      	bne.n	8004e32 <HAL_RCC_OscConfig+0x43a>
 8004e50:	e02e      	b.n	8004eb0 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e029      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004e5e:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <HAL_RCC_OscConfig+0x4cc>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d11c      	bne.n	8004eac <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d115      	bne.n	8004eac <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e82:	099b      	lsrs	r3, r3, #6
 8004e84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d10d      	bne.n	8004eac <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d106      	bne.n	8004eac <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ea0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3740      	adds	r7, #64	; 0x40
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40007000 	.word	0x40007000
 8004ec0:	40023870 	.word	0x40023870
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	42470060 	.word	0x42470060

08004ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0d2      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b6b      	ldr	r3, [pc, #428]	; (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d90c      	bls.n	8004f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b68      	ldr	r3, [pc, #416]	; (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef6:	4b66      	ldr	r3, [pc, #408]	; (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0be      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d020      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f20:	4b5c      	ldr	r3, [pc, #368]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4a5b      	ldr	r2, [pc, #364]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004f26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8004f38:	4b56      	ldr	r3, [pc, #344]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4a55      	ldr	r2, [pc, #340]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f44:	4b53      	ldr	r3, [pc, #332]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4950      	ldr	r1, [pc, #320]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d040      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d107      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b4a      	ldr	r3, [pc, #296]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d115      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e085      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d107      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f82:	4b44      	ldr	r3, [pc, #272]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d109      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e079      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f92:	4b40      	ldr	r3, [pc, #256]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e071      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fa2:	4b3c      	ldr	r3, [pc, #240]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f023 0203 	bic.w	r2, r3, #3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	4939      	ldr	r1, [pc, #228]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fb4:	f7fe f968 	bl	8003288 <HAL_GetTick>
 8004fb8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fba:	e00a      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fbc:	f7fe f964 	bl	8003288 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e059      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd2:	4b30      	ldr	r3, [pc, #192]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 020c 	and.w	r2, r3, #12
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d1eb      	bne.n	8004fbc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fe4:	4b2a      	ldr	r3, [pc, #168]	; (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d20c      	bcs.n	800500c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff2:	4b27      	ldr	r3, [pc, #156]	; (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b25      	ldr	r3, [pc, #148]	; (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e03c      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005018:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	491b      	ldr	r1, [pc, #108]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005036:	4b17      	ldr	r3, [pc, #92]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4913      	ldr	r1, [pc, #76]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800504a:	f000 f82b 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 800504e:	4601      	mov	r1, r0
 8005050:	4b10      	ldr	r3, [pc, #64]	; (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005058:	22f0      	movs	r2, #240	; 0xf0
 800505a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	fa92 f2a2 	rbit	r2, r2
 8005062:	60fa      	str	r2, [r7, #12]
  return result;
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	fab2 f282 	clz	r2, r2
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	40d3      	lsrs	r3, r2
 800506e:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <HAL_RCC_ClockConfig+0x1cc>)
 8005070:	5cd3      	ldrb	r3, [r2, r3]
 8005072:	fa21 f303 	lsr.w	r3, r1, r3
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <HAL_RCC_ClockConfig+0x1d0>)
 8005078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <HAL_RCC_ClockConfig+0x1d4>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe f8c0 	bl	8003204 <HAL_InitTick>

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40023c00 	.word	0x40023c00
 8005094:	40023800 	.word	0x40023800
 8005098:	08007698 	.word	0x08007698
 800509c:	20000014 	.word	0x20000014
 80050a0:	20000018 	.word	0x20000018

080050a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	607b      	str	r3, [r7, #4]
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	2300      	movs	r3, #0
 80050b6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050bc:	4b67      	ldr	r3, [pc, #412]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 030c 	and.w	r3, r3, #12
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d00d      	beq.n	80050e4 <HAL_RCC_GetSysClockFreq+0x40>
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	f200 80bd 	bhi.w	8005248 <HAL_RCC_GetSysClockFreq+0x1a4>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x34>
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d003      	beq.n	80050de <HAL_RCC_GetSysClockFreq+0x3a>
 80050d6:	e0b7      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d8:	4b61      	ldr	r3, [pc, #388]	; (8005260 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050da:	60bb      	str	r3, [r7, #8]
       break;
 80050dc:	e0b7      	b.n	800524e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050de:	4b61      	ldr	r3, [pc, #388]	; (8005264 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80050e0:	60bb      	str	r3, [r7, #8]
      break;
 80050e2:	e0b4      	b.n	800524e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e4:	4b5d      	ldr	r3, [pc, #372]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ee:	4b5b      	ldr	r3, [pc, #364]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d04d      	beq.n	8005196 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fa:	4b58      	ldr	r3, [pc, #352]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	099b      	lsrs	r3, r3, #6
 8005100:	461a      	mov	r2, r3
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	f240 10ff 	movw	r0, #511	; 0x1ff
 800510a:	f04f 0100 	mov.w	r1, #0
 800510e:	ea02 0800 	and.w	r8, r2, r0
 8005112:	ea03 0901 	and.w	r9, r3, r1
 8005116:	4640      	mov	r0, r8
 8005118:	4649      	mov	r1, r9
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	014b      	lsls	r3, r1, #5
 8005124:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005128:	0142      	lsls	r2, r0, #5
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	ebb0 0008 	subs.w	r0, r0, r8
 8005132:	eb61 0109 	sbc.w	r1, r1, r9
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	018b      	lsls	r3, r1, #6
 8005140:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005144:	0182      	lsls	r2, r0, #6
 8005146:	1a12      	subs	r2, r2, r0
 8005148:	eb63 0301 	sbc.w	r3, r3, r1
 800514c:	f04f 0000 	mov.w	r0, #0
 8005150:	f04f 0100 	mov.w	r1, #0
 8005154:	00d9      	lsls	r1, r3, #3
 8005156:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800515a:	00d0      	lsls	r0, r2, #3
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	eb12 0208 	adds.w	r2, r2, r8
 8005164:	eb43 0309 	adc.w	r3, r3, r9
 8005168:	f04f 0000 	mov.w	r0, #0
 800516c:	f04f 0100 	mov.w	r1, #0
 8005170:	0259      	lsls	r1, r3, #9
 8005172:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005176:	0250      	lsls	r0, r2, #9
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4610      	mov	r0, r2
 800517e:	4619      	mov	r1, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	461a      	mov	r2, r3
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	f7fc f81c 	bl	80011c4 <__aeabi_uldivmod>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4613      	mov	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e04a      	b.n	800522c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005196:	4b31      	ldr	r3, [pc, #196]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	099b      	lsrs	r3, r3, #6
 800519c:	461a      	mov	r2, r3
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051a6:	f04f 0100 	mov.w	r1, #0
 80051aa:	ea02 0400 	and.w	r4, r2, r0
 80051ae:	ea03 0501 	and.w	r5, r3, r1
 80051b2:	4620      	mov	r0, r4
 80051b4:	4629      	mov	r1, r5
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	014b      	lsls	r3, r1, #5
 80051c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051c4:	0142      	lsls	r2, r0, #5
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	1b00      	subs	r0, r0, r4
 80051cc:	eb61 0105 	sbc.w	r1, r1, r5
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	018b      	lsls	r3, r1, #6
 80051da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051de:	0182      	lsls	r2, r0, #6
 80051e0:	1a12      	subs	r2, r2, r0
 80051e2:	eb63 0301 	sbc.w	r3, r3, r1
 80051e6:	f04f 0000 	mov.w	r0, #0
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	00d9      	lsls	r1, r3, #3
 80051f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051f4:	00d0      	lsls	r0, r2, #3
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	1912      	adds	r2, r2, r4
 80051fc:	eb45 0303 	adc.w	r3, r5, r3
 8005200:	f04f 0000 	mov.w	r0, #0
 8005204:	f04f 0100 	mov.w	r1, #0
 8005208:	0299      	lsls	r1, r3, #10
 800520a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800520e:	0290      	lsls	r0, r2, #10
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4610      	mov	r0, r2
 8005216:	4619      	mov	r1, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	461a      	mov	r2, r3
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	f7fb ffd0 	bl	80011c4 <__aeabi_uldivmod>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4613      	mov	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800522c:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	0c1b      	lsrs	r3, r3, #16
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	3301      	adds	r3, #1
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	60bb      	str	r3, [r7, #8]
      break;
 8005246:	e002      	b.n	800524e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800524a:	60bb      	str	r3, [r7, #8]
      break;
 800524c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800524e:	68bb      	ldr	r3, [r7, #8]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800525a:	bf00      	nop
 800525c:	40023800 	.word	0x40023800
 8005260:	00f42400 	.word	0x00f42400
 8005264:	007a1200 	.word	0x007a1200

08005268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e01d      	b.n	80052b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fd fd88 	bl	8002da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3304      	adds	r3, #4
 80052a4:	4619      	mov	r1, r3
 80052a6:	4610      	mov	r0, r2
 80052a8:	f000 fcd2 	bl	8005c50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b06      	cmp	r3, #6
 80052e6:	d007      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e01d      	b.n	8005352 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f815 	bl	800535a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f000 fc84 	bl	8005c50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr

0800536c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e01d      	b.n	80053ba <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f815 	bl	80053c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f000 fc50 	bl	8005c50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2201      	movs	r2, #1
 80053e4:	6839      	ldr	r1, [r7, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 ff12 	bl	8006210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a15      	ldr	r2, [pc, #84]	; (8005448 <HAL_TIM_PWM_Start+0x74>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d004      	beq.n	8005400 <HAL_TIM_PWM_Start+0x2c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a14      	ldr	r2, [pc, #80]	; (800544c <HAL_TIM_PWM_Start+0x78>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d101      	bne.n	8005404 <HAL_TIM_PWM_Start+0x30>
 8005400:	2301      	movs	r3, #1
 8005402:	e000      	b.n	8005406 <HAL_TIM_PWM_Start+0x32>
 8005404:	2300      	movs	r3, #0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005418:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b06      	cmp	r3, #6
 800542a:	d007      	beq.n	800543c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40010000 	.word	0x40010000
 800544c:	40010400 	.word	0x40010400

08005450 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2200      	movs	r2, #0
 8005460:	6839      	ldr	r1, [r7, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fed4 	bl	8006210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a22      	ldr	r2, [pc, #136]	; (80054f8 <HAL_TIM_PWM_Stop+0xa8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_TIM_PWM_Stop+0x2c>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a21      	ldr	r2, [pc, #132]	; (80054fc <HAL_TIM_PWM_Stop+0xac>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d101      	bne.n	8005480 <HAL_TIM_PWM_Stop+0x30>
 800547c:	2301      	movs	r3, #1
 800547e:	e000      	b.n	8005482 <HAL_TIM_PWM_Stop+0x32>
 8005480:	2300      	movs	r3, #0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d017      	beq.n	80054b6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	6a1a      	ldr	r2, [r3, #32]
 800548c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005490:	4013      	ands	r3, r2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10f      	bne.n	80054b6 <HAL_TIM_PWM_Stop+0x66>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6a1a      	ldr	r2, [r3, #32]
 800549c:	f240 4344 	movw	r3, #1092	; 0x444
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d107      	bne.n	80054b6 <HAL_TIM_PWM_Stop+0x66>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a1a      	ldr	r2, [r3, #32]
 80054bc:	f241 1311 	movw	r3, #4369	; 0x1111
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10f      	bne.n	80054e6 <HAL_TIM_PWM_Stop+0x96>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	f240 4344 	movw	r3, #1092	; 0x444
 80054d0:	4013      	ands	r3, r2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <HAL_TIM_PWM_Stop+0x96>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0201 	bic.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40010400 	.word	0x40010400

08005500 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e083      	b.n	800561c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d106      	bne.n	800552e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fd fc9f 	bl	8002e6c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2202      	movs	r2, #2
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6812      	ldr	r2, [r2, #0]
 8005540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005544:	f023 0307 	bic.w	r3, r3, #7
 8005548:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3304      	adds	r3, #4
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f000 fb7b 	bl	8005c50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	4313      	orrs	r3, r2
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80055a0:	f023 030c 	bic.w	r3, r3, #12
 80055a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	4313      	orrs	r3, r2
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	011a      	lsls	r2, r3, #4
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	031b      	lsls	r3, r3, #12
 80055d0:	4313      	orrs	r3, r2
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	4313      	orrs	r3, r2
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b02      	cmp	r3, #2
 8005638:	d122      	bne.n	8005680 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b02      	cmp	r3, #2
 8005646:	d11b      	bne.n	8005680 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0202 	mvn.w	r2, #2
 8005650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fad7 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 faca 	bl	8005c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fad9 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b04      	cmp	r3, #4
 800568c:	d122      	bne.n	80056d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b04      	cmp	r3, #4
 800569a:	d11b      	bne.n	80056d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0204 	mvn.w	r2, #4
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 faad 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 faa0 	bl	8005c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 faaf 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d122      	bne.n	8005728 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d11b      	bne.n	8005728 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0208 	mvn.w	r2, #8
 80056f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2204      	movs	r2, #4
 80056fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f003 0303 	and.w	r3, r3, #3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fa83 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 8005714:	e005      	b.n	8005722 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fa76 	bl	8005c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fa85 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b10      	cmp	r3, #16
 8005734:	d122      	bne.n	800577c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b10      	cmp	r3, #16
 8005742:	d11b      	bne.n	800577c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0210 	mvn.w	r2, #16
 800574c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2208      	movs	r2, #8
 8005752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa59 	bl	8005c1a <HAL_TIM_IC_CaptureCallback>
 8005768:	e005      	b.n	8005776 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa4c 	bl	8005c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fa5b 	bl	8005c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	d10e      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b01      	cmp	r3, #1
 8005796:	d107      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0201 	mvn.w	r2, #1
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fc fb36 	bl	8001e14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d10e      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	d107      	bne.n	80057d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fe4b 	bl	800646a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b40      	cmp	r3, #64	; 0x40
 80057e0:	d10e      	bne.n	8005800 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d107      	bne.n	8005800 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa1f 	bl	8005c3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b20      	cmp	r3, #32
 800580c:	d10e      	bne.n	800582c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0320 	and.w	r3, r3, #32
 8005818:	2b20      	cmp	r3, #32
 800581a:	d107      	bne.n	800582c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0220 	mvn.w	r2, #32
 8005824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fe16 	bl	8006458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_TIM_OC_ConfigChannel+0x1a>
 800584a:	2302      	movs	r3, #2
 800584c:	e04e      	b.n	80058ec <HAL_TIM_OC_ConfigChannel+0xb8>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b0c      	cmp	r3, #12
 8005862:	d839      	bhi.n	80058d8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <HAL_TIM_OC_ConfigChannel+0x38>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	080058a1 	.word	0x080058a1
 8005870:	080058d9 	.word	0x080058d9
 8005874:	080058d9 	.word	0x080058d9
 8005878:	080058d9 	.word	0x080058d9
 800587c:	080058af 	.word	0x080058af
 8005880:	080058d9 	.word	0x080058d9
 8005884:	080058d9 	.word	0x080058d9
 8005888:	080058d9 	.word	0x080058d9
 800588c:	080058bd 	.word	0x080058bd
 8005890:	080058d9 	.word	0x080058d9
 8005894:	080058d9 	.word	0x080058d9
 8005898:	080058d9 	.word	0x080058d9
 800589c:	080058cb 	.word	0x080058cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fa70 	bl	8005d8c <TIM_OC1_SetConfig>
      break;
 80058ac:	e015      	b.n	80058da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fad9 	bl	8005e6c <TIM_OC2_SetConfig>
      break;
 80058ba:	e00e      	b.n	80058da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fb46 	bl	8005f54 <TIM_OC3_SetConfig>
      break;
 80058c8:	e007      	b.n	80058da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fbb3 	bl	800603c <TIM_OC4_SetConfig>
      break;
 80058d6:	e000      	b.n	80058da <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80058d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800590a:	2302      	movs	r3, #2
 800590c:	e0b4      	b.n	8005a78 <HAL_TIM_PWM_ConfigChannel+0x184>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2202      	movs	r2, #2
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b0c      	cmp	r3, #12
 8005922:	f200 809f 	bhi.w	8005a64 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	08005961 	.word	0x08005961
 8005930:	08005a65 	.word	0x08005a65
 8005934:	08005a65 	.word	0x08005a65
 8005938:	08005a65 	.word	0x08005a65
 800593c:	080059a1 	.word	0x080059a1
 8005940:	08005a65 	.word	0x08005a65
 8005944:	08005a65 	.word	0x08005a65
 8005948:	08005a65 	.word	0x08005a65
 800594c:	080059e3 	.word	0x080059e3
 8005950:	08005a65 	.word	0x08005a65
 8005954:	08005a65 	.word	0x08005a65
 8005958:	08005a65 	.word	0x08005a65
 800595c:	08005a23 	.word	0x08005a23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fa10 	bl	8005d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0208 	orr.w	r2, r2, #8
 800597a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0204 	bic.w	r2, r2, #4
 800598a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6999      	ldr	r1, [r3, #24]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	619a      	str	r2, [r3, #24]
      break;
 800599e:	e062      	b.n	8005a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fa60 	bl	8005e6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699a      	ldr	r2, [r3, #24]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699a      	ldr	r2, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6999      	ldr	r1, [r3, #24]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	021a      	lsls	r2, r3, #8
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	619a      	str	r2, [r3, #24]
      break;
 80059e0:	e041      	b.n	8005a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fab3 	bl	8005f54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f042 0208 	orr.w	r2, r2, #8
 80059fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0204 	bic.w	r2, r2, #4
 8005a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69d9      	ldr	r1, [r3, #28]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	61da      	str	r2, [r3, #28]
      break;
 8005a20:	e021      	b.n	8005a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fb07 	bl	800603c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69d9      	ldr	r1, [r3, #28]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	021a      	lsls	r2, r3, #8
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	61da      	str	r2, [r3, #28]
      break;
 8005a62:	e000      	b.n	8005a66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005a64:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIM_ConfigClockSource+0x18>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e0b3      	b.n	8005c00 <HAL_TIM_ConfigClockSource+0x180>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ab6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005abe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad0:	d03e      	beq.n	8005b50 <HAL_TIM_ConfigClockSource+0xd0>
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad6:	f200 8087 	bhi.w	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ade:	f000 8085 	beq.w	8005bec <HAL_TIM_ConfigClockSource+0x16c>
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae6:	d87f      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005ae8:	2b70      	cmp	r3, #112	; 0x70
 8005aea:	d01a      	beq.n	8005b22 <HAL_TIM_ConfigClockSource+0xa2>
 8005aec:	2b70      	cmp	r3, #112	; 0x70
 8005aee:	d87b      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005af0:	2b60      	cmp	r3, #96	; 0x60
 8005af2:	d050      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0x116>
 8005af4:	2b60      	cmp	r3, #96	; 0x60
 8005af6:	d877      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005af8:	2b50      	cmp	r3, #80	; 0x50
 8005afa:	d03c      	beq.n	8005b76 <HAL_TIM_ConfigClockSource+0xf6>
 8005afc:	2b50      	cmp	r3, #80	; 0x50
 8005afe:	d873      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005b00:	2b40      	cmp	r3, #64	; 0x40
 8005b02:	d058      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x136>
 8005b04:	2b40      	cmp	r3, #64	; 0x40
 8005b06:	d86f      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005b08:	2b30      	cmp	r3, #48	; 0x30
 8005b0a:	d064      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x156>
 8005b0c:	2b30      	cmp	r3, #48	; 0x30
 8005b0e:	d86b      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d060      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x156>
 8005b14:	2b20      	cmp	r3, #32
 8005b16:	d867      	bhi.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d05c      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x156>
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d05a      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b20:	e062      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6818      	ldr	r0, [r3, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	6899      	ldr	r1, [r3, #8]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f000 fb4e 	bl	80061d2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	609a      	str	r2, [r3, #8]
      break;
 8005b4e:	e04e      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	6899      	ldr	r1, [r3, #8]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f000 fb37 	bl	80061d2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b72:	609a      	str	r2, [r3, #8]
      break;
 8005b74:	e03b      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6859      	ldr	r1, [r3, #4]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f000 faae 	bl	80060e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2150      	movs	r1, #80	; 0x50
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fb05 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005b94:	e02b      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6859      	ldr	r1, [r3, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	f000 facc 	bl	8006140 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2160      	movs	r1, #96	; 0x60
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 faf5 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005bb4:	e01b      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f000 fa8e 	bl	80060e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2140      	movs	r1, #64	; 0x40
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fae5 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e00b      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4619      	mov	r1, r3
 8005be0:	4610      	mov	r0, r2
 8005be2:	f000 fadc 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005be6:	e002      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005be8:	bf00      	nop
 8005bea:	e000      	b.n	8005bee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005bec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr

08005c1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr

08005c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a3f      	ldr	r2, [pc, #252]	; (8005d60 <TIM_Base_SetConfig+0x110>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6e:	d00f      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3c      	ldr	r2, [pc, #240]	; (8005d64 <TIM_Base_SetConfig+0x114>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00b      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3b      	ldr	r2, [pc, #236]	; (8005d68 <TIM_Base_SetConfig+0x118>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a3a      	ldr	r2, [pc, #232]	; (8005d6c <TIM_Base_SetConfig+0x11c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a39      	ldr	r2, [pc, #228]	; (8005d70 <TIM_Base_SetConfig+0x120>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d108      	bne.n	8005ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2e      	ldr	r2, [pc, #184]	; (8005d60 <TIM_Base_SetConfig+0x110>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d02b      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb0:	d027      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2b      	ldr	r2, [pc, #172]	; (8005d64 <TIM_Base_SetConfig+0x114>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d023      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2a      	ldr	r2, [pc, #168]	; (8005d68 <TIM_Base_SetConfig+0x118>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01f      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a29      	ldr	r2, [pc, #164]	; (8005d6c <TIM_Base_SetConfig+0x11c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d01b      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a28      	ldr	r2, [pc, #160]	; (8005d70 <TIM_Base_SetConfig+0x120>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d017      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a27      	ldr	r2, [pc, #156]	; (8005d74 <TIM_Base_SetConfig+0x124>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d013      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a26      	ldr	r2, [pc, #152]	; (8005d78 <TIM_Base_SetConfig+0x128>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00f      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a25      	ldr	r2, [pc, #148]	; (8005d7c <TIM_Base_SetConfig+0x12c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00b      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a24      	ldr	r2, [pc, #144]	; (8005d80 <TIM_Base_SetConfig+0x130>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d007      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a23      	ldr	r2, [pc, #140]	; (8005d84 <TIM_Base_SetConfig+0x134>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a22      	ldr	r2, [pc, #136]	; (8005d88 <TIM_Base_SetConfig+0x138>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d108      	bne.n	8005d14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <TIM_Base_SetConfig+0x110>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_Base_SetConfig+0xf8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a0b      	ldr	r2, [pc, #44]	; (8005d70 <TIM_Base_SetConfig+0x120>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d103      	bne.n	8005d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	615a      	str	r2, [r3, #20]
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bc80      	pop	{r7}
 8005d5e:	4770      	bx	lr
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40010400 	.word	0x40010400
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40014400 	.word	0x40014400
 8005d7c:	40014800 	.word	0x40014800
 8005d80:	40001800 	.word	0x40001800
 8005d84:	40001c00 	.word	0x40001c00
 8005d88:	40002000 	.word	0x40002000

08005d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	f023 0201 	bic.w	r2, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 0302 	bic.w	r3, r3, #2
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a20      	ldr	r2, [pc, #128]	; (8005e64 <TIM_OC1_SetConfig+0xd8>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d003      	beq.n	8005df0 <TIM_OC1_SetConfig+0x64>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a1f      	ldr	r2, [pc, #124]	; (8005e68 <TIM_OC1_SetConfig+0xdc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d10c      	bne.n	8005e0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f023 0308 	bic.w	r3, r3, #8
 8005df6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f023 0304 	bic.w	r3, r3, #4
 8005e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a15      	ldr	r2, [pc, #84]	; (8005e64 <TIM_OC1_SetConfig+0xd8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d003      	beq.n	8005e1a <TIM_OC1_SetConfig+0x8e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a14      	ldr	r2, [pc, #80]	; (8005e68 <TIM_OC1_SetConfig+0xdc>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d111      	bne.n	8005e3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	621a      	str	r2, [r3, #32]
}
 8005e58:	bf00      	nop
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40010400 	.word	0x40010400

08005e6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	f023 0210 	bic.w	r2, r3, #16
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	021b      	lsls	r3, r3, #8
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f023 0320 	bic.w	r3, r3, #32
 8005eb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	011b      	lsls	r3, r3, #4
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a21      	ldr	r2, [pc, #132]	; (8005f4c <TIM_OC2_SetConfig+0xe0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d003      	beq.n	8005ed4 <TIM_OC2_SetConfig+0x68>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a20      	ldr	r2, [pc, #128]	; (8005f50 <TIM_OC2_SetConfig+0xe4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d10d      	bne.n	8005ef0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a16      	ldr	r2, [pc, #88]	; (8005f4c <TIM_OC2_SetConfig+0xe0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC2_SetConfig+0x94>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <TIM_OC2_SetConfig+0xe4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d113      	bne.n	8005f28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40010400 	.word	0x40010400

08005f54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	021b      	lsls	r3, r3, #8
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a21      	ldr	r2, [pc, #132]	; (8006034 <TIM_OC3_SetConfig+0xe0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC3_SetConfig+0x66>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a20      	ldr	r2, [pc, #128]	; (8006038 <TIM_OC3_SetConfig+0xe4>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d10d      	bne.n	8005fd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a16      	ldr	r2, [pc, #88]	; (8006034 <TIM_OC3_SetConfig+0xe0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_OC3_SetConfig+0x92>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a15      	ldr	r2, [pc, #84]	; (8006038 <TIM_OC3_SetConfig+0xe4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d113      	bne.n	800600e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	621a      	str	r2, [r3, #32]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40010000 	.word	0x40010000
 8006038:	40010400 	.word	0x40010400

0800603c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	021b      	lsls	r3, r3, #8
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4313      	orrs	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	031b      	lsls	r3, r3, #12
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a11      	ldr	r2, [pc, #68]	; (80060dc <TIM_OC4_SetConfig+0xa0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_OC4_SetConfig+0x68>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a10      	ldr	r2, [pc, #64]	; (80060e0 <TIM_OC4_SetConfig+0xa4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d109      	bne.n	80060b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	019b      	lsls	r3, r3, #6
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	621a      	str	r2, [r3, #32]
}
 80060d2:	bf00      	nop
 80060d4:	371c      	adds	r7, #28
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bc80      	pop	{r7}
 80060da:	4770      	bx	lr
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40010400 	.word	0x40010400

080060e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f023 0201 	bic.w	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800610e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 030a 	bic.w	r3, r3, #10
 8006120:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	621a      	str	r2, [r3, #32]
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	4770      	bx	lr

08006140 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006140:	b480      	push	{r7}
 8006142:	b087      	sub	sp, #28
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	f023 0210 	bic.w	r2, r3, #16
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800616a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	031b      	lsls	r3, r3, #12
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800617c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	621a      	str	r2, [r3, #32]
}
 8006194:	bf00      	nop
 8006196:	371c      	adds	r7, #28
 8006198:	46bd      	mov	sp, r7
 800619a:	bc80      	pop	{r7}
 800619c:	4770      	bx	lr

0800619e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	f043 0307 	orr.w	r3, r3, #7
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bc80      	pop	{r7}
 80061d0:	4770      	bx	lr

080061d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b087      	sub	sp, #28
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
 80061de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	021a      	lsls	r2, r3, #8
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	609a      	str	r2, [r3, #8]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2201      	movs	r2, #1
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1a      	ldr	r2, [r3, #32]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	43db      	mvns	r3, r3
 8006232:	401a      	ands	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a1a      	ldr	r2, [r3, #32]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	fa01 f303 	lsl.w	r3, r1, r3
 8006248:	431a      	orrs	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr

08006258 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2204      	movs	r2, #4
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	4618      	mov	r0, r3
 800626c:	f000 f906 	bl	800647c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800627e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b06      	cmp	r3, #6
 8006290:	d007      	beq.n	80062a2 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0201 	orr.w	r2, r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2200      	movs	r2, #0
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f8dc 	bl	800647c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6a1a      	ldr	r2, [r3, #32]
 80062ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80062ce:	4013      	ands	r3, r2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10f      	bne.n	80062f4 <HAL_TIMEx_PWMN_Stop+0x48>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6a1a      	ldr	r2, [r3, #32]
 80062da:	f240 4344 	movw	r3, #1092	; 0x444
 80062de:	4013      	ands	r3, r2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d107      	bne.n	80062f4 <HAL_TIMEx_PWMN_Stop+0x48>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6a1a      	ldr	r2, [r3, #32]
 80062fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80062fe:	4013      	ands	r3, r2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10f      	bne.n	8006324 <HAL_TIMEx_PWMN_Stop+0x78>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6a1a      	ldr	r2, [r3, #32]
 800630a:	f240 4344 	movw	r3, #1092	; 0x444
 800630e:	4013      	ands	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d107      	bne.n	8006324 <HAL_TIMEx_PWMN_Stop+0x78>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0201 	bic.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633e:	2b01      	cmp	r3, #1
 8006340:	d101      	bne.n	8006346 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006342:	2302      	movs	r3, #2
 8006344:	e032      	b.n	80063ac <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2202      	movs	r2, #2
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800637e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	4313      	orrs	r3, r2
 8006388:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr

080063b6 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b085      	sub	sp, #20
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063ce:	2302      	movs	r3, #2
 80063d0:	e03d      	b.n	800644e <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4313      	orrs	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	69db      	ldr	r3, [r3, #28]
 8006438:	4313      	orrs	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr

08006458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	bc80      	pop	{r7}
 8006468:	4770      	bx	lr

0800646a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006472:	bf00      	nop
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f003 031f 	and.w	r3, r3, #31
 800648e:	2204      	movs	r2, #4
 8006490:	fa02 f303 	lsl.w	r3, r2, r3
 8006494:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a1a      	ldr	r2, [r3, #32]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	43db      	mvns	r3, r3
 800649e:	401a      	ands	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6a1a      	ldr	r2, [r3, #32]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f003 031f 	and.w	r3, r3, #31
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	fa01 f303 	lsl.w	r3, r1, r3
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	621a      	str	r2, [r3, #32]
}
 80064ba:	bf00      	nop
 80064bc:	371c      	adds	r7, #28
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr

080064c4 <__errno>:
 80064c4:	4b01      	ldr	r3, [pc, #4]	; (80064cc <__errno+0x8>)
 80064c6:	6818      	ldr	r0, [r3, #0]
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	20000020 	.word	0x20000020

080064d0 <__libc_init_array>:
 80064d0:	b570      	push	{r4, r5, r6, lr}
 80064d2:	2600      	movs	r6, #0
 80064d4:	4d0c      	ldr	r5, [pc, #48]	; (8006508 <__libc_init_array+0x38>)
 80064d6:	4c0d      	ldr	r4, [pc, #52]	; (800650c <__libc_init_array+0x3c>)
 80064d8:	1b64      	subs	r4, r4, r5
 80064da:	10a4      	asrs	r4, r4, #2
 80064dc:	42a6      	cmp	r6, r4
 80064de:	d109      	bne.n	80064f4 <__libc_init_array+0x24>
 80064e0:	f001 f8cc 	bl	800767c <_init>
 80064e4:	2600      	movs	r6, #0
 80064e6:	4d0a      	ldr	r5, [pc, #40]	; (8006510 <__libc_init_array+0x40>)
 80064e8:	4c0a      	ldr	r4, [pc, #40]	; (8006514 <__libc_init_array+0x44>)
 80064ea:	1b64      	subs	r4, r4, r5
 80064ec:	10a4      	asrs	r4, r4, #2
 80064ee:	42a6      	cmp	r6, r4
 80064f0:	d105      	bne.n	80064fe <__libc_init_array+0x2e>
 80064f2:	bd70      	pop	{r4, r5, r6, pc}
 80064f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f8:	4798      	blx	r3
 80064fa:	3601      	adds	r6, #1
 80064fc:	e7ee      	b.n	80064dc <__libc_init_array+0xc>
 80064fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006502:	4798      	blx	r3
 8006504:	3601      	adds	r6, #1
 8006506:	e7f2      	b.n	80064ee <__libc_init_array+0x1e>
 8006508:	08007898 	.word	0x08007898
 800650c:	08007898 	.word	0x08007898
 8006510:	08007898 	.word	0x08007898
 8006514:	0800789c 	.word	0x0800789c

08006518 <memset>:
 8006518:	4603      	mov	r3, r0
 800651a:	4402      	add	r2, r0
 800651c:	4293      	cmp	r3, r2
 800651e:	d100      	bne.n	8006522 <memset+0xa>
 8006520:	4770      	bx	lr
 8006522:	f803 1b01 	strb.w	r1, [r3], #1
 8006526:	e7f9      	b.n	800651c <memset+0x4>

08006528 <sin>:
 8006528:	b530      	push	{r4, r5, lr}
 800652a:	4a20      	ldr	r2, [pc, #128]	; (80065ac <sin+0x84>)
 800652c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006530:	4293      	cmp	r3, r2
 8006532:	b087      	sub	sp, #28
 8006534:	dc06      	bgt.n	8006544 <sin+0x1c>
 8006536:	2300      	movs	r3, #0
 8006538:	2200      	movs	r2, #0
 800653a:	9300      	str	r3, [sp, #0]
 800653c:	2300      	movs	r3, #0
 800653e:	f000 fedb 	bl	80072f8 <__kernel_sin>
 8006542:	e006      	b.n	8006552 <sin+0x2a>
 8006544:	4a1a      	ldr	r2, [pc, #104]	; (80065b0 <sin+0x88>)
 8006546:	4293      	cmp	r3, r2
 8006548:	dd05      	ble.n	8006556 <sin+0x2e>
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	f7f9 fe3f 	bl	80001d0 <__aeabi_dsub>
 8006552:	b007      	add	sp, #28
 8006554:	bd30      	pop	{r4, r5, pc}
 8006556:	aa02      	add	r2, sp, #8
 8006558:	f000 f856 	bl	8006608 <__ieee754_rem_pio2>
 800655c:	f000 0003 	and.w	r0, r0, #3
 8006560:	2801      	cmp	r0, #1
 8006562:	d009      	beq.n	8006578 <sin+0x50>
 8006564:	2802      	cmp	r0, #2
 8006566:	d00e      	beq.n	8006586 <sin+0x5e>
 8006568:	b9c0      	cbnz	r0, 800659c <sin+0x74>
 800656a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800656e:	2301      	movs	r3, #1
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006576:	e7e2      	b.n	800653e <sin+0x16>
 8006578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800657c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006580:	f000 fab2 	bl	8006ae8 <__kernel_cos>
 8006584:	e7e5      	b.n	8006552 <sin+0x2a>
 8006586:	2301      	movs	r3, #1
 8006588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006592:	f000 feb1 	bl	80072f8 <__kernel_sin>
 8006596:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800659a:	e7da      	b.n	8006552 <sin+0x2a>
 800659c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065a4:	f000 faa0 	bl	8006ae8 <__kernel_cos>
 80065a8:	e7f5      	b.n	8006596 <sin+0x6e>
 80065aa:	bf00      	nop
 80065ac:	3fe921fb 	.word	0x3fe921fb
 80065b0:	7fefffff 	.word	0x7fefffff

080065b4 <fmodf>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	4606      	mov	r6, r0
 80065b8:	460d      	mov	r5, r1
 80065ba:	f000 fa15 	bl	80069e8 <__ieee754_fmodf>
 80065be:	4b10      	ldr	r3, [pc, #64]	; (8006600 <fmodf+0x4c>)
 80065c0:	4604      	mov	r4, r0
 80065c2:	f993 3000 	ldrsb.w	r3, [r3]
 80065c6:	3301      	adds	r3, #1
 80065c8:	d017      	beq.n	80065fa <fmodf+0x46>
 80065ca:	4629      	mov	r1, r5
 80065cc:	4628      	mov	r0, r5
 80065ce:	f7fa fd9d 	bl	800110c <__aeabi_fcmpun>
 80065d2:	b990      	cbnz	r0, 80065fa <fmodf+0x46>
 80065d4:	4631      	mov	r1, r6
 80065d6:	4630      	mov	r0, r6
 80065d8:	f7fa fd98 	bl	800110c <__aeabi_fcmpun>
 80065dc:	b968      	cbnz	r0, 80065fa <fmodf+0x46>
 80065de:	2100      	movs	r1, #0
 80065e0:	4628      	mov	r0, r5
 80065e2:	f7fa fd61 	bl	80010a8 <__aeabi_fcmpeq>
 80065e6:	b140      	cbz	r0, 80065fa <fmodf+0x46>
 80065e8:	f7ff ff6c 	bl	80064c4 <__errno>
 80065ec:	2321      	movs	r3, #33	; 0x21
 80065ee:	2100      	movs	r1, #0
 80065f0:	6003      	str	r3, [r0, #0]
 80065f2:	4608      	mov	r0, r1
 80065f4:	f7fa fc78 	bl	8000ee8 <__aeabi_fdiv>
 80065f8:	4604      	mov	r4, r0
 80065fa:	4620      	mov	r0, r4
 80065fc:	bd70      	pop	{r4, r5, r6, pc}
 80065fe:	bf00      	nop
 8006600:	20000084 	.word	0x20000084
 8006604:	00000000 	.word	0x00000000

08006608 <__ieee754_rem_pio2>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	4614      	mov	r4, r2
 800660e:	4ac4      	ldr	r2, [pc, #784]	; (8006920 <__ieee754_rem_pio2+0x318>)
 8006610:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8006614:	b08d      	sub	sp, #52	; 0x34
 8006616:	4592      	cmp	sl, r2
 8006618:	9104      	str	r1, [sp, #16]
 800661a:	dc07      	bgt.n	800662c <__ieee754_rem_pio2+0x24>
 800661c:	2200      	movs	r2, #0
 800661e:	2300      	movs	r3, #0
 8006620:	e9c4 0100 	strd	r0, r1, [r4]
 8006624:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006628:	2500      	movs	r5, #0
 800662a:	e024      	b.n	8006676 <__ieee754_rem_pio2+0x6e>
 800662c:	4abd      	ldr	r2, [pc, #756]	; (8006924 <__ieee754_rem_pio2+0x31c>)
 800662e:	4592      	cmp	sl, r2
 8006630:	dc72      	bgt.n	8006718 <__ieee754_rem_pio2+0x110>
 8006632:	9b04      	ldr	r3, [sp, #16]
 8006634:	4dbc      	ldr	r5, [pc, #752]	; (8006928 <__ieee754_rem_pio2+0x320>)
 8006636:	2b00      	cmp	r3, #0
 8006638:	a3ab      	add	r3, pc, #684	; (adr r3, 80068e8 <__ieee754_rem_pio2+0x2e0>)
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	dd36      	ble.n	80066ae <__ieee754_rem_pio2+0xa6>
 8006640:	f7f9 fdc6 	bl	80001d0 <__aeabi_dsub>
 8006644:	45aa      	cmp	sl, r5
 8006646:	4606      	mov	r6, r0
 8006648:	460f      	mov	r7, r1
 800664a:	d018      	beq.n	800667e <__ieee754_rem_pio2+0x76>
 800664c:	a3a8      	add	r3, pc, #672	; (adr r3, 80068f0 <__ieee754_rem_pio2+0x2e8>)
 800664e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006652:	f7f9 fdbd 	bl	80001d0 <__aeabi_dsub>
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4630      	mov	r0, r6
 800665c:	e9c4 2300 	strd	r2, r3, [r4]
 8006660:	4639      	mov	r1, r7
 8006662:	f7f9 fdb5 	bl	80001d0 <__aeabi_dsub>
 8006666:	a3a2      	add	r3, pc, #648	; (adr r3, 80068f0 <__ieee754_rem_pio2+0x2e8>)
 8006668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666c:	f7f9 fdb0 	bl	80001d0 <__aeabi_dsub>
 8006670:	2501      	movs	r5, #1
 8006672:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006676:	4628      	mov	r0, r5
 8006678:	b00d      	add	sp, #52	; 0x34
 800667a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667e:	a39e      	add	r3, pc, #632	; (adr r3, 80068f8 <__ieee754_rem_pio2+0x2f0>)
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f7f9 fda4 	bl	80001d0 <__aeabi_dsub>
 8006688:	a39d      	add	r3, pc, #628	; (adr r3, 8006900 <__ieee754_rem_pio2+0x2f8>)
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	4606      	mov	r6, r0
 8006690:	460f      	mov	r7, r1
 8006692:	f7f9 fd9d 	bl	80001d0 <__aeabi_dsub>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4630      	mov	r0, r6
 800669c:	e9c4 2300 	strd	r2, r3, [r4]
 80066a0:	4639      	mov	r1, r7
 80066a2:	f7f9 fd95 	bl	80001d0 <__aeabi_dsub>
 80066a6:	a396      	add	r3, pc, #600	; (adr r3, 8006900 <__ieee754_rem_pio2+0x2f8>)
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	e7de      	b.n	800666c <__ieee754_rem_pio2+0x64>
 80066ae:	f7f9 fd91 	bl	80001d4 <__adddf3>
 80066b2:	45aa      	cmp	sl, r5
 80066b4:	4606      	mov	r6, r0
 80066b6:	460f      	mov	r7, r1
 80066b8:	d016      	beq.n	80066e8 <__ieee754_rem_pio2+0xe0>
 80066ba:	a38d      	add	r3, pc, #564	; (adr r3, 80068f0 <__ieee754_rem_pio2+0x2e8>)
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f7f9 fd88 	bl	80001d4 <__adddf3>
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4630      	mov	r0, r6
 80066ca:	e9c4 2300 	strd	r2, r3, [r4]
 80066ce:	4639      	mov	r1, r7
 80066d0:	f7f9 fd7e 	bl	80001d0 <__aeabi_dsub>
 80066d4:	a386      	add	r3, pc, #536	; (adr r3, 80068f0 <__ieee754_rem_pio2+0x2e8>)
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f7f9 fd7b 	bl	80001d4 <__adddf3>
 80066de:	f04f 35ff 	mov.w	r5, #4294967295
 80066e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80066e6:	e7c6      	b.n	8006676 <__ieee754_rem_pio2+0x6e>
 80066e8:	a383      	add	r3, pc, #524	; (adr r3, 80068f8 <__ieee754_rem_pio2+0x2f0>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f7f9 fd71 	bl	80001d4 <__adddf3>
 80066f2:	a383      	add	r3, pc, #524	; (adr r3, 8006900 <__ieee754_rem_pio2+0x2f8>)
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	4606      	mov	r6, r0
 80066fa:	460f      	mov	r7, r1
 80066fc:	f7f9 fd6a 	bl	80001d4 <__adddf3>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4630      	mov	r0, r6
 8006706:	e9c4 2300 	strd	r2, r3, [r4]
 800670a:	4639      	mov	r1, r7
 800670c:	f7f9 fd60 	bl	80001d0 <__aeabi_dsub>
 8006710:	a37b      	add	r3, pc, #492	; (adr r3, 8006900 <__ieee754_rem_pio2+0x2f8>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	e7e0      	b.n	80066da <__ieee754_rem_pio2+0xd2>
 8006718:	4a84      	ldr	r2, [pc, #528]	; (800692c <__ieee754_rem_pio2+0x324>)
 800671a:	4592      	cmp	sl, r2
 800671c:	f300 80d5 	bgt.w	80068ca <__ieee754_rem_pio2+0x2c2>
 8006720:	f000 fea0 	bl	8007464 <fabs>
 8006724:	a378      	add	r3, pc, #480	; (adr r3, 8006908 <__ieee754_rem_pio2+0x300>)
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	4606      	mov	r6, r0
 800672c:	460f      	mov	r7, r1
 800672e:	f7f9 ff07 	bl	8000540 <__aeabi_dmul>
 8006732:	2200      	movs	r2, #0
 8006734:	4b7e      	ldr	r3, [pc, #504]	; (8006930 <__ieee754_rem_pio2+0x328>)
 8006736:	f7f9 fd4d 	bl	80001d4 <__adddf3>
 800673a:	f7fa f99b 	bl	8000a74 <__aeabi_d2iz>
 800673e:	4605      	mov	r5, r0
 8006740:	f7f9 fe94 	bl	800046c <__aeabi_i2d>
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800674c:	a366      	add	r3, pc, #408	; (adr r3, 80068e8 <__ieee754_rem_pio2+0x2e0>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f7f9 fef5 	bl	8000540 <__aeabi_dmul>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4630      	mov	r0, r6
 800675c:	4639      	mov	r1, r7
 800675e:	f7f9 fd37 	bl	80001d0 <__aeabi_dsub>
 8006762:	a363      	add	r3, pc, #396	; (adr r3, 80068f0 <__ieee754_rem_pio2+0x2e8>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	4680      	mov	r8, r0
 800676a:	4689      	mov	r9, r1
 800676c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006770:	f7f9 fee6 	bl	8000540 <__aeabi_dmul>
 8006774:	2d1f      	cmp	r5, #31
 8006776:	4606      	mov	r6, r0
 8006778:	460f      	mov	r7, r1
 800677a:	dc0e      	bgt.n	800679a <__ieee754_rem_pio2+0x192>
 800677c:	4b6d      	ldr	r3, [pc, #436]	; (8006934 <__ieee754_rem_pio2+0x32c>)
 800677e:	1e6a      	subs	r2, r5, #1
 8006780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006784:	4553      	cmp	r3, sl
 8006786:	d008      	beq.n	800679a <__ieee754_rem_pio2+0x192>
 8006788:	4632      	mov	r2, r6
 800678a:	463b      	mov	r3, r7
 800678c:	4640      	mov	r0, r8
 800678e:	4649      	mov	r1, r9
 8006790:	f7f9 fd1e 	bl	80001d0 <__aeabi_dsub>
 8006794:	e9c4 0100 	strd	r0, r1, [r4]
 8006798:	e013      	b.n	80067c2 <__ieee754_rem_pio2+0x1ba>
 800679a:	463b      	mov	r3, r7
 800679c:	4632      	mov	r2, r6
 800679e:	4640      	mov	r0, r8
 80067a0:	4649      	mov	r1, r9
 80067a2:	f7f9 fd15 	bl	80001d0 <__aeabi_dsub>
 80067a6:	ea4f 532a 	mov.w	r3, sl, asr #20
 80067aa:	9305      	str	r3, [sp, #20]
 80067ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80067b0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 80067b4:	f1ba 0f10 	cmp.w	sl, #16
 80067b8:	dc1f      	bgt.n	80067fa <__ieee754_rem_pio2+0x1f2>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	e9c4 2300 	strd	r2, r3, [r4]
 80067c2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 80067c6:	4640      	mov	r0, r8
 80067c8:	4653      	mov	r3, sl
 80067ca:	4649      	mov	r1, r9
 80067cc:	f7f9 fd00 	bl	80001d0 <__aeabi_dsub>
 80067d0:	4632      	mov	r2, r6
 80067d2:	463b      	mov	r3, r7
 80067d4:	f7f9 fcfc 	bl	80001d0 <__aeabi_dsub>
 80067d8:	460b      	mov	r3, r1
 80067da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80067de:	9904      	ldr	r1, [sp, #16]
 80067e0:	4602      	mov	r2, r0
 80067e2:	2900      	cmp	r1, #0
 80067e4:	f6bf af47 	bge.w	8006676 <__ieee754_rem_pio2+0x6e>
 80067e8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80067ec:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80067f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80067f4:	60e3      	str	r3, [r4, #12]
 80067f6:	426d      	negs	r5, r5
 80067f8:	e73d      	b.n	8006676 <__ieee754_rem_pio2+0x6e>
 80067fa:	a33f      	add	r3, pc, #252	; (adr r3, 80068f8 <__ieee754_rem_pio2+0x2f0>)
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006804:	f7f9 fe9c 	bl	8000540 <__aeabi_dmul>
 8006808:	4606      	mov	r6, r0
 800680a:	460f      	mov	r7, r1
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4640      	mov	r0, r8
 8006812:	4649      	mov	r1, r9
 8006814:	f7f9 fcdc 	bl	80001d0 <__aeabi_dsub>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4682      	mov	sl, r0
 800681e:	468b      	mov	fp, r1
 8006820:	4640      	mov	r0, r8
 8006822:	4649      	mov	r1, r9
 8006824:	f7f9 fcd4 	bl	80001d0 <__aeabi_dsub>
 8006828:	4632      	mov	r2, r6
 800682a:	463b      	mov	r3, r7
 800682c:	f7f9 fcd0 	bl	80001d0 <__aeabi_dsub>
 8006830:	a333      	add	r3, pc, #204	; (adr r3, 8006900 <__ieee754_rem_pio2+0x2f8>)
 8006832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006836:	4606      	mov	r6, r0
 8006838:	460f      	mov	r7, r1
 800683a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800683e:	f7f9 fe7f 	bl	8000540 <__aeabi_dmul>
 8006842:	4632      	mov	r2, r6
 8006844:	463b      	mov	r3, r7
 8006846:	f7f9 fcc3 	bl	80001d0 <__aeabi_dsub>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4606      	mov	r6, r0
 8006850:	460f      	mov	r7, r1
 8006852:	4650      	mov	r0, sl
 8006854:	4659      	mov	r1, fp
 8006856:	f7f9 fcbb 	bl	80001d0 <__aeabi_dsub>
 800685a:	9a05      	ldr	r2, [sp, #20]
 800685c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b31      	cmp	r3, #49	; 0x31
 8006864:	dc06      	bgt.n	8006874 <__ieee754_rem_pio2+0x26c>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
 800686a:	46d0      	mov	r8, sl
 800686c:	46d9      	mov	r9, fp
 800686e:	e9c4 2300 	strd	r2, r3, [r4]
 8006872:	e7a6      	b.n	80067c2 <__ieee754_rem_pio2+0x1ba>
 8006874:	a326      	add	r3, pc, #152	; (adr r3, 8006910 <__ieee754_rem_pio2+0x308>)
 8006876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800687e:	f7f9 fe5f 	bl	8000540 <__aeabi_dmul>
 8006882:	4606      	mov	r6, r0
 8006884:	460f      	mov	r7, r1
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4650      	mov	r0, sl
 800688c:	4659      	mov	r1, fp
 800688e:	f7f9 fc9f 	bl	80001d0 <__aeabi_dsub>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4680      	mov	r8, r0
 8006898:	4689      	mov	r9, r1
 800689a:	4650      	mov	r0, sl
 800689c:	4659      	mov	r1, fp
 800689e:	f7f9 fc97 	bl	80001d0 <__aeabi_dsub>
 80068a2:	4632      	mov	r2, r6
 80068a4:	463b      	mov	r3, r7
 80068a6:	f7f9 fc93 	bl	80001d0 <__aeabi_dsub>
 80068aa:	a31b      	add	r3, pc, #108	; (adr r3, 8006918 <__ieee754_rem_pio2+0x310>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	4606      	mov	r6, r0
 80068b2:	460f      	mov	r7, r1
 80068b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068b8:	f7f9 fe42 	bl	8000540 <__aeabi_dmul>
 80068bc:	4632      	mov	r2, r6
 80068be:	463b      	mov	r3, r7
 80068c0:	f7f9 fc86 	bl	80001d0 <__aeabi_dsub>
 80068c4:	4606      	mov	r6, r0
 80068c6:	460f      	mov	r7, r1
 80068c8:	e75e      	b.n	8006788 <__ieee754_rem_pio2+0x180>
 80068ca:	4a1b      	ldr	r2, [pc, #108]	; (8006938 <__ieee754_rem_pio2+0x330>)
 80068cc:	4592      	cmp	sl, r2
 80068ce:	dd35      	ble.n	800693c <__ieee754_rem_pio2+0x334>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	f7f9 fc7c 	bl	80001d0 <__aeabi_dsub>
 80068d8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80068dc:	e9c4 0100 	strd	r0, r1, [r4]
 80068e0:	e6a2      	b.n	8006628 <__ieee754_rem_pio2+0x20>
 80068e2:	bf00      	nop
 80068e4:	f3af 8000 	nop.w
 80068e8:	54400000 	.word	0x54400000
 80068ec:	3ff921fb 	.word	0x3ff921fb
 80068f0:	1a626331 	.word	0x1a626331
 80068f4:	3dd0b461 	.word	0x3dd0b461
 80068f8:	1a600000 	.word	0x1a600000
 80068fc:	3dd0b461 	.word	0x3dd0b461
 8006900:	2e037073 	.word	0x2e037073
 8006904:	3ba3198a 	.word	0x3ba3198a
 8006908:	6dc9c883 	.word	0x6dc9c883
 800690c:	3fe45f30 	.word	0x3fe45f30
 8006910:	2e000000 	.word	0x2e000000
 8006914:	3ba3198a 	.word	0x3ba3198a
 8006918:	252049c1 	.word	0x252049c1
 800691c:	397b839a 	.word	0x397b839a
 8006920:	3fe921fb 	.word	0x3fe921fb
 8006924:	4002d97b 	.word	0x4002d97b
 8006928:	3ff921fb 	.word	0x3ff921fb
 800692c:	413921fb 	.word	0x413921fb
 8006930:	3fe00000 	.word	0x3fe00000
 8006934:	080076b0 	.word	0x080076b0
 8006938:	7fefffff 	.word	0x7fefffff
 800693c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006940:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006944:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006948:	460f      	mov	r7, r1
 800694a:	4606      	mov	r6, r0
 800694c:	f7fa f892 	bl	8000a74 <__aeabi_d2iz>
 8006950:	f7f9 fd8c 	bl	800046c <__aeabi_i2d>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4630      	mov	r0, r6
 800695a:	4639      	mov	r1, r7
 800695c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006960:	f7f9 fc36 	bl	80001d0 <__aeabi_dsub>
 8006964:	2200      	movs	r2, #0
 8006966:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <__ieee754_rem_pio2+0x3d8>)
 8006968:	f7f9 fdea 	bl	8000540 <__aeabi_dmul>
 800696c:	460f      	mov	r7, r1
 800696e:	4606      	mov	r6, r0
 8006970:	f7fa f880 	bl	8000a74 <__aeabi_d2iz>
 8006974:	f7f9 fd7a 	bl	800046c <__aeabi_i2d>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4630      	mov	r0, r6
 800697e:	4639      	mov	r1, r7
 8006980:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006984:	f7f9 fc24 	bl	80001d0 <__aeabi_dsub>
 8006988:	2200      	movs	r2, #0
 800698a:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <__ieee754_rem_pio2+0x3d8>)
 800698c:	f7f9 fdd8 	bl	8000540 <__aeabi_dmul>
 8006990:	f04f 0803 	mov.w	r8, #3
 8006994:	2600      	movs	r6, #0
 8006996:	2700      	movs	r7, #0
 8006998:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800699c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 80069a0:	4632      	mov	r2, r6
 80069a2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 80069a6:	463b      	mov	r3, r7
 80069a8:	46c2      	mov	sl, r8
 80069aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80069ae:	f7fa f82f 	bl	8000a10 <__aeabi_dcmpeq>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d1f4      	bne.n	80069a0 <__ieee754_rem_pio2+0x398>
 80069b6:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <__ieee754_rem_pio2+0x3dc>)
 80069b8:	462a      	mov	r2, r5
 80069ba:	9301      	str	r3, [sp, #4]
 80069bc:	2302      	movs	r3, #2
 80069be:	4621      	mov	r1, r4
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	a806      	add	r0, sp, #24
 80069c4:	4653      	mov	r3, sl
 80069c6:	f000 f94d 	bl	8006c64 <__kernel_rem_pio2>
 80069ca:	9b04      	ldr	r3, [sp, #16]
 80069cc:	4605      	mov	r5, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f6bf ae51 	bge.w	8006676 <__ieee754_rem_pio2+0x6e>
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80069da:	6063      	str	r3, [r4, #4]
 80069dc:	68e3      	ldr	r3, [r4, #12]
 80069de:	e707      	b.n	80067f0 <__ieee754_rem_pio2+0x1e8>
 80069e0:	41700000 	.word	0x41700000
 80069e4:	08007730 	.word	0x08007730

080069e8 <__ieee754_fmodf>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	f031 4500 	bics.w	r5, r1, #2147483648	; 0x80000000
 80069ee:	460e      	mov	r6, r1
 80069f0:	d008      	beq.n	8006a04 <__ieee754_fmodf+0x1c>
 80069f2:	f020 4c00 	bic.w	ip, r0, #2147483648	; 0x80000000
 80069f6:	f1bc 4fff 	cmp.w	ip, #2139095040	; 0x7f800000
 80069fa:	4607      	mov	r7, r0
 80069fc:	da02      	bge.n	8006a04 <__ieee754_fmodf+0x1c>
 80069fe:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006a02:	dd05      	ble.n	8006a10 <__ieee754_fmodf+0x28>
 8006a04:	f7fa f9bc 	bl	8000d80 <__aeabi_fmul>
 8006a08:	4601      	mov	r1, r0
 8006a0a:	f7fa fa6d 	bl	8000ee8 <__aeabi_fdiv>
 8006a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a10:	45ac      	cmp	ip, r5
 8006a12:	dbfc      	blt.n	8006a0e <__ieee754_fmodf+0x26>
 8006a14:	f000 4400 	and.w	r4, r0, #2147483648	; 0x80000000
 8006a18:	d104      	bne.n	8006a24 <__ieee754_fmodf+0x3c>
 8006a1a:	4a32      	ldr	r2, [pc, #200]	; (8006ae4 <__ieee754_fmodf+0xfc>)
 8006a1c:	0fe0      	lsrs	r0, r4, #31
 8006a1e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8006a22:	e7f4      	b.n	8006a0e <__ieee754_fmodf+0x26>
 8006a24:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8006a28:	d146      	bne.n	8006ab8 <__ieee754_fmodf+0xd0>
 8006a2a:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8006a2e:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	dc3d      	bgt.n	8006ab2 <__ieee754_fmodf+0xca>
 8006a36:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8006a3a:	d144      	bne.n	8006ac6 <__ieee754_fmodf+0xde>
 8006a3c:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8006a40:	022b      	lsls	r3, r5, #8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	da3c      	bge.n	8006ac0 <__ieee754_fmodf+0xd8>
 8006a46:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8006a4a:	bfb5      	itete	lt
 8006a4c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8006a50:	f3c7 0316 	ubfxge	r3, r7, #0, #23
 8006a54:	1a5b      	sublt	r3, r3, r1
 8006a56:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8006a5a:	bfb8      	it	lt
 8006a5c:	fa0c f303 	lsllt.w	r3, ip, r3
 8006a60:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8006a64:	bfb5      	itete	lt
 8006a66:	f06f 007d 	mvnlt.w	r0, #125	; 0x7d
 8006a6a:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8006a6e:	1a80      	sublt	r0, r0, r2
 8006a70:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8006a74:	bfb8      	it	lt
 8006a76:	4085      	lsllt	r5, r0
 8006a78:	1a89      	subs	r1, r1, r2
 8006a7a:	1b58      	subs	r0, r3, r5
 8006a7c:	bb31      	cbnz	r1, 8006acc <__ieee754_fmodf+0xe4>
 8006a7e:	ea13 0320 	ands.w	r3, r3, r0, asr #32
 8006a82:	bf38      	it	cc
 8006a84:	4603      	movcc	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0c7      	beq.n	8006a1a <__ieee754_fmodf+0x32>
 8006a8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a8e:	db25      	blt.n	8006adc <__ieee754_fmodf+0xf4>
 8006a90:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8006a94:	bfb5      	itete	lt
 8006a96:	f06f 007d 	mvnlt.w	r0, #125	; 0x7d
 8006a9a:	f5a3 0000 	subge.w	r0, r3, #8388608	; 0x800000
 8006a9e:	1a80      	sublt	r0, r0, r2
 8006aa0:	327f      	addge	r2, #127	; 0x7f
 8006aa2:	bfab      	itete	ge
 8006aa4:	4320      	orrge	r0, r4
 8006aa6:	fa43 f000 	asrlt.w	r0, r3, r0
 8006aaa:	ea40 50c2 	orrge.w	r0, r0, r2, lsl #23
 8006aae:	4320      	orrlt	r0, r4
 8006ab0:	e7ad      	b.n	8006a0e <__ieee754_fmodf+0x26>
 8006ab2:	3901      	subs	r1, #1
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	e7bc      	b.n	8006a32 <__ieee754_fmodf+0x4a>
 8006ab8:	ea4f 51ec 	mov.w	r1, ip, asr #23
 8006abc:	397f      	subs	r1, #127	; 0x7f
 8006abe:	e7ba      	b.n	8006a36 <__ieee754_fmodf+0x4e>
 8006ac0:	3a01      	subs	r2, #1
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	e7bd      	b.n	8006a42 <__ieee754_fmodf+0x5a>
 8006ac6:	15ea      	asrs	r2, r5, #23
 8006ac8:	3a7f      	subs	r2, #127	; 0x7f
 8006aca:	e7bc      	b.n	8006a46 <__ieee754_fmodf+0x5e>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	da02      	bge.n	8006ad6 <__ieee754_fmodf+0xee>
 8006ad0:	005b      	lsls	r3, r3, #1
 8006ad2:	3901      	subs	r1, #1
 8006ad4:	e7d1      	b.n	8006a7a <__ieee754_fmodf+0x92>
 8006ad6:	d0a0      	beq.n	8006a1a <__ieee754_fmodf+0x32>
 8006ad8:	0043      	lsls	r3, r0, #1
 8006ada:	e7fa      	b.n	8006ad2 <__ieee754_fmodf+0xea>
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	3a01      	subs	r2, #1
 8006ae0:	e7d3      	b.n	8006a8a <__ieee754_fmodf+0xa2>
 8006ae2:	bf00      	nop
 8006ae4:	08007838 	.word	0x08007838

08006ae8 <__kernel_cos>:
 8006ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006af0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8006af4:	4680      	mov	r8, r0
 8006af6:	460f      	mov	r7, r1
 8006af8:	e9cd 2300 	strd	r2, r3, [sp]
 8006afc:	da04      	bge.n	8006b08 <__kernel_cos+0x20>
 8006afe:	f7f9 ffb9 	bl	8000a74 <__aeabi_d2iz>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	f000 8086 	beq.w	8006c14 <__kernel_cos+0x12c>
 8006b08:	4642      	mov	r2, r8
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	4640      	mov	r0, r8
 8006b0e:	4639      	mov	r1, r7
 8006b10:	f7f9 fd16 	bl	8000540 <__aeabi_dmul>
 8006b14:	2200      	movs	r2, #0
 8006b16:	4b4e      	ldr	r3, [pc, #312]	; (8006c50 <__kernel_cos+0x168>)
 8006b18:	4604      	mov	r4, r0
 8006b1a:	460d      	mov	r5, r1
 8006b1c:	f7f9 fd10 	bl	8000540 <__aeabi_dmul>
 8006b20:	a33f      	add	r3, pc, #252	; (adr r3, 8006c20 <__kernel_cos+0x138>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	4682      	mov	sl, r0
 8006b28:	468b      	mov	fp, r1
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7f9 fd07 	bl	8000540 <__aeabi_dmul>
 8006b32:	a33d      	add	r3, pc, #244	; (adr r3, 8006c28 <__kernel_cos+0x140>)
 8006b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b38:	f7f9 fb4c 	bl	80001d4 <__adddf3>
 8006b3c:	4622      	mov	r2, r4
 8006b3e:	462b      	mov	r3, r5
 8006b40:	f7f9 fcfe 	bl	8000540 <__aeabi_dmul>
 8006b44:	a33a      	add	r3, pc, #232	; (adr r3, 8006c30 <__kernel_cos+0x148>)
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f7f9 fb41 	bl	80001d0 <__aeabi_dsub>
 8006b4e:	4622      	mov	r2, r4
 8006b50:	462b      	mov	r3, r5
 8006b52:	f7f9 fcf5 	bl	8000540 <__aeabi_dmul>
 8006b56:	a338      	add	r3, pc, #224	; (adr r3, 8006c38 <__kernel_cos+0x150>)
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	f7f9 fb3a 	bl	80001d4 <__adddf3>
 8006b60:	4622      	mov	r2, r4
 8006b62:	462b      	mov	r3, r5
 8006b64:	f7f9 fcec 	bl	8000540 <__aeabi_dmul>
 8006b68:	a335      	add	r3, pc, #212	; (adr r3, 8006c40 <__kernel_cos+0x158>)
 8006b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6e:	f7f9 fb2f 	bl	80001d0 <__aeabi_dsub>
 8006b72:	4622      	mov	r2, r4
 8006b74:	462b      	mov	r3, r5
 8006b76:	f7f9 fce3 	bl	8000540 <__aeabi_dmul>
 8006b7a:	a333      	add	r3, pc, #204	; (adr r3, 8006c48 <__kernel_cos+0x160>)
 8006b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b80:	f7f9 fb28 	bl	80001d4 <__adddf3>
 8006b84:	4622      	mov	r2, r4
 8006b86:	462b      	mov	r3, r5
 8006b88:	f7f9 fcda 	bl	8000540 <__aeabi_dmul>
 8006b8c:	4622      	mov	r2, r4
 8006b8e:	462b      	mov	r3, r5
 8006b90:	f7f9 fcd6 	bl	8000540 <__aeabi_dmul>
 8006b94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b98:	4604      	mov	r4, r0
 8006b9a:	460d      	mov	r5, r1
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4639      	mov	r1, r7
 8006ba0:	f7f9 fcce 	bl	8000540 <__aeabi_dmul>
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	4629      	mov	r1, r5
 8006baa:	4620      	mov	r0, r4
 8006bac:	f7f9 fb10 	bl	80001d0 <__aeabi_dsub>
 8006bb0:	4b28      	ldr	r3, [pc, #160]	; (8006c54 <__kernel_cos+0x16c>)
 8006bb2:	4680      	mov	r8, r0
 8006bb4:	429e      	cmp	r6, r3
 8006bb6:	4689      	mov	r9, r1
 8006bb8:	dc0e      	bgt.n	8006bd8 <__kernel_cos+0xf0>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4650      	mov	r0, sl
 8006bc0:	4659      	mov	r1, fp
 8006bc2:	f7f9 fb05 	bl	80001d0 <__aeabi_dsub>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	2000      	movs	r0, #0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4922      	ldr	r1, [pc, #136]	; (8006c58 <__kernel_cos+0x170>)
 8006bce:	f7f9 faff 	bl	80001d0 <__aeabi_dsub>
 8006bd2:	b003      	add	sp, #12
 8006bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd8:	2400      	movs	r4, #0
 8006bda:	4b20      	ldr	r3, [pc, #128]	; (8006c5c <__kernel_cos+0x174>)
 8006bdc:	4622      	mov	r2, r4
 8006bde:	429e      	cmp	r6, r3
 8006be0:	bfcc      	ite	gt
 8006be2:	4d1f      	ldrgt	r5, [pc, #124]	; (8006c60 <__kernel_cos+0x178>)
 8006be4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8006be8:	462b      	mov	r3, r5
 8006bea:	2000      	movs	r0, #0
 8006bec:	491a      	ldr	r1, [pc, #104]	; (8006c58 <__kernel_cos+0x170>)
 8006bee:	f7f9 faef 	bl	80001d0 <__aeabi_dsub>
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	4606      	mov	r6, r0
 8006bf6:	460f      	mov	r7, r1
 8006bf8:	462b      	mov	r3, r5
 8006bfa:	4650      	mov	r0, sl
 8006bfc:	4659      	mov	r1, fp
 8006bfe:	f7f9 fae7 	bl	80001d0 <__aeabi_dsub>
 8006c02:	4642      	mov	r2, r8
 8006c04:	464b      	mov	r3, r9
 8006c06:	f7f9 fae3 	bl	80001d0 <__aeabi_dsub>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4630      	mov	r0, r6
 8006c10:	4639      	mov	r1, r7
 8006c12:	e7dc      	b.n	8006bce <__kernel_cos+0xe6>
 8006c14:	2000      	movs	r0, #0
 8006c16:	4910      	ldr	r1, [pc, #64]	; (8006c58 <__kernel_cos+0x170>)
 8006c18:	e7db      	b.n	8006bd2 <__kernel_cos+0xea>
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w
 8006c20:	be8838d4 	.word	0xbe8838d4
 8006c24:	bda8fae9 	.word	0xbda8fae9
 8006c28:	bdb4b1c4 	.word	0xbdb4b1c4
 8006c2c:	3e21ee9e 	.word	0x3e21ee9e
 8006c30:	809c52ad 	.word	0x809c52ad
 8006c34:	3e927e4f 	.word	0x3e927e4f
 8006c38:	19cb1590 	.word	0x19cb1590
 8006c3c:	3efa01a0 	.word	0x3efa01a0
 8006c40:	16c15177 	.word	0x16c15177
 8006c44:	3f56c16c 	.word	0x3f56c16c
 8006c48:	5555554c 	.word	0x5555554c
 8006c4c:	3fa55555 	.word	0x3fa55555
 8006c50:	3fe00000 	.word	0x3fe00000
 8006c54:	3fd33332 	.word	0x3fd33332
 8006c58:	3ff00000 	.word	0x3ff00000
 8006c5c:	3fe90000 	.word	0x3fe90000
 8006c60:	3fd20000 	.word	0x3fd20000

08006c64 <__kernel_rem_pio2>:
 8006c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006c6c:	9308      	str	r3, [sp, #32]
 8006c6e:	9101      	str	r1, [sp, #4]
 8006c70:	4bc0      	ldr	r3, [pc, #768]	; (8006f74 <__kernel_rem_pio2+0x310>)
 8006c72:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8006c74:	f112 0f14 	cmn.w	r2, #20
 8006c78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006c7c:	bfa8      	it	ge
 8006c7e:	1ed4      	subge	r4, r2, #3
 8006c80:	9304      	str	r3, [sp, #16]
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	bfb8      	it	lt
 8006c86:	2400      	movlt	r4, #0
 8006c88:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c8c:	9306      	str	r3, [sp, #24]
 8006c8e:	bfa4      	itt	ge
 8006c90:	2318      	movge	r3, #24
 8006c92:	fb94 f4f3 	sdivge	r4, r4, r3
 8006c96:	f06f 0317 	mvn.w	r3, #23
 8006c9a:	fb04 3303 	mla	r3, r4, r3, r3
 8006c9e:	eb03 0a02 	add.w	sl, r3, r2
 8006ca2:	9a06      	ldr	r2, [sp, #24]
 8006ca4:	9b04      	ldr	r3, [sp, #16]
 8006ca6:	1aa7      	subs	r7, r4, r2
 8006ca8:	eb03 0802 	add.w	r8, r3, r2
 8006cac:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006cae:	2500      	movs	r5, #0
 8006cb0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9009      	str	r0, [sp, #36]	; 0x24
 8006cba:	ae20      	add	r6, sp, #128	; 0x80
 8006cbc:	4545      	cmp	r5, r8
 8006cbe:	dd19      	ble.n	8006cf4 <__kernel_rem_pio2+0x90>
 8006cc0:	9b08      	ldr	r3, [sp, #32]
 8006cc2:	aa20      	add	r2, sp, #128	; 0x80
 8006cc4:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006cc8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8006ccc:	f1c3 0301 	rsb	r3, r3, #1
 8006cd0:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006cd4:	9307      	str	r3, [sp, #28]
 8006cd6:	9b07      	ldr	r3, [sp, #28]
 8006cd8:	9a04      	ldr	r2, [sp, #16]
 8006cda:	4443      	add	r3, r8
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	db35      	blt.n	8006d4c <__kernel_rem_pio2+0xe8>
 8006ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f1a3 0908 	sub.w	r9, r3, #8
 8006ce8:	2300      	movs	r3, #0
 8006cea:	462f      	mov	r7, r5
 8006cec:	2600      	movs	r6, #0
 8006cee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cf2:	e01f      	b.n	8006d34 <__kernel_rem_pio2+0xd0>
 8006cf4:	42ef      	cmn	r7, r5
 8006cf6:	d40b      	bmi.n	8006d10 <__kernel_rem_pio2+0xac>
 8006cf8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006cfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d00:	f7f9 fbb4 	bl	800046c <__aeabi_i2d>
 8006d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d08:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006d0c:	3501      	adds	r5, #1
 8006d0e:	e7d5      	b.n	8006cbc <__kernel_rem_pio2+0x58>
 8006d10:	4610      	mov	r0, r2
 8006d12:	4619      	mov	r1, r3
 8006d14:	e7f8      	b.n	8006d08 <__kernel_rem_pio2+0xa4>
 8006d16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1a:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006d1e:	f7f9 fc0f 	bl	8000540 <__aeabi_dmul>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d2a:	f7f9 fa53 	bl	80001d4 <__adddf3>
 8006d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d32:	3601      	adds	r6, #1
 8006d34:	9b06      	ldr	r3, [sp, #24]
 8006d36:	3f08      	subs	r7, #8
 8006d38:	429e      	cmp	r6, r3
 8006d3a:	ddec      	ble.n	8006d16 <__kernel_rem_pio2+0xb2>
 8006d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d40:	3508      	adds	r5, #8
 8006d42:	e8eb 2302 	strd	r2, r3, [fp], #8
 8006d46:	f108 0801 	add.w	r8, r8, #1
 8006d4a:	e7c4      	b.n	8006cd6 <__kernel_rem_pio2+0x72>
 8006d4c:	9b04      	ldr	r3, [sp, #16]
 8006d4e:	aa0c      	add	r2, sp, #48	; 0x30
 8006d50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006d54:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d56:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8006d58:	9f04      	ldr	r7, [sp, #16]
 8006d5a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d60:	463e      	mov	r6, r7
 8006d62:	ab98      	add	r3, sp, #608	; 0x260
 8006d64:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8006d68:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d6c:	f8cd b008 	str.w	fp, [sp, #8]
 8006d70:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8006d74:	2e00      	cmp	r6, #0
 8006d76:	dc71      	bgt.n	8006e5c <__kernel_rem_pio2+0x1f8>
 8006d78:	4652      	mov	r2, sl
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	f000 fbf7 	bl	8007570 <scalbn>
 8006d82:	2200      	movs	r2, #0
 8006d84:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006d88:	4604      	mov	r4, r0
 8006d8a:	460d      	mov	r5, r1
 8006d8c:	f7f9 fbd8 	bl	8000540 <__aeabi_dmul>
 8006d90:	f000 fb6e 	bl	8007470 <floor>
 8006d94:	2200      	movs	r2, #0
 8006d96:	4b78      	ldr	r3, [pc, #480]	; (8006f78 <__kernel_rem_pio2+0x314>)
 8006d98:	f7f9 fbd2 	bl	8000540 <__aeabi_dmul>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	f7f9 fa14 	bl	80001d0 <__aeabi_dsub>
 8006da8:	460d      	mov	r5, r1
 8006daa:	4604      	mov	r4, r0
 8006dac:	f7f9 fe62 	bl	8000a74 <__aeabi_d2iz>
 8006db0:	9007      	str	r0, [sp, #28]
 8006db2:	f7f9 fb5b 	bl	800046c <__aeabi_i2d>
 8006db6:	4602      	mov	r2, r0
 8006db8:	460b      	mov	r3, r1
 8006dba:	4620      	mov	r0, r4
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	f7f9 fa07 	bl	80001d0 <__aeabi_dsub>
 8006dc2:	f1ba 0f00 	cmp.w	sl, #0
 8006dc6:	4680      	mov	r8, r0
 8006dc8:	4689      	mov	r9, r1
 8006dca:	dd70      	ble.n	8006eae <__kernel_rem_pio2+0x24a>
 8006dcc:	1e7a      	subs	r2, r7, #1
 8006dce:	ab0c      	add	r3, sp, #48	; 0x30
 8006dd0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006dd4:	9c07      	ldr	r4, [sp, #28]
 8006dd6:	f1ca 0118 	rsb	r1, sl, #24
 8006dda:	fa40 f301 	asr.w	r3, r0, r1
 8006dde:	441c      	add	r4, r3
 8006de0:	408b      	lsls	r3, r1
 8006de2:	1ac0      	subs	r0, r0, r3
 8006de4:	ab0c      	add	r3, sp, #48	; 0x30
 8006de6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8006dea:	f1ca 0317 	rsb	r3, sl, #23
 8006dee:	9407      	str	r4, [sp, #28]
 8006df0:	fa40 f303 	asr.w	r3, r0, r3
 8006df4:	9302      	str	r3, [sp, #8]
 8006df6:	9b02      	ldr	r3, [sp, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	dd66      	ble.n	8006eca <__kernel_rem_pio2+0x266>
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006e02:	4614      	mov	r4, r2
 8006e04:	9b07      	ldr	r3, [sp, #28]
 8006e06:	3301      	adds	r3, #1
 8006e08:	9307      	str	r3, [sp, #28]
 8006e0a:	4297      	cmp	r7, r2
 8006e0c:	f300 809f 	bgt.w	8006f4e <__kernel_rem_pio2+0x2ea>
 8006e10:	f1ba 0f00 	cmp.w	sl, #0
 8006e14:	dd07      	ble.n	8006e26 <__kernel_rem_pio2+0x1c2>
 8006e16:	f1ba 0f01 	cmp.w	sl, #1
 8006e1a:	f000 80b9 	beq.w	8006f90 <__kernel_rem_pio2+0x32c>
 8006e1e:	f1ba 0f02 	cmp.w	sl, #2
 8006e22:	f000 80bf 	beq.w	8006fa4 <__kernel_rem_pio2+0x340>
 8006e26:	9b02      	ldr	r3, [sp, #8]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d14e      	bne.n	8006eca <__kernel_rem_pio2+0x266>
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	2000      	movs	r0, #0
 8006e32:	4952      	ldr	r1, [pc, #328]	; (8006f7c <__kernel_rem_pio2+0x318>)
 8006e34:	f7f9 f9cc 	bl	80001d0 <__aeabi_dsub>
 8006e38:	4680      	mov	r8, r0
 8006e3a:	4689      	mov	r9, r1
 8006e3c:	2c00      	cmp	r4, #0
 8006e3e:	d044      	beq.n	8006eca <__kernel_rem_pio2+0x266>
 8006e40:	4652      	mov	r2, sl
 8006e42:	2000      	movs	r0, #0
 8006e44:	494d      	ldr	r1, [pc, #308]	; (8006f7c <__kernel_rem_pio2+0x318>)
 8006e46:	f000 fb93 	bl	8007570 <scalbn>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4640      	mov	r0, r8
 8006e50:	4649      	mov	r1, r9
 8006e52:	f7f9 f9bd 	bl	80001d0 <__aeabi_dsub>
 8006e56:	4680      	mov	r8, r0
 8006e58:	4689      	mov	r9, r1
 8006e5a:	e036      	b.n	8006eca <__kernel_rem_pio2+0x266>
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	4b48      	ldr	r3, [pc, #288]	; (8006f80 <__kernel_rem_pio2+0x31c>)
 8006e60:	4620      	mov	r0, r4
 8006e62:	4629      	mov	r1, r5
 8006e64:	f7f9 fb6c 	bl	8000540 <__aeabi_dmul>
 8006e68:	f7f9 fe04 	bl	8000a74 <__aeabi_d2iz>
 8006e6c:	f7f9 fafe 	bl	800046c <__aeabi_i2d>
 8006e70:	2200      	movs	r2, #0
 8006e72:	4b44      	ldr	r3, [pc, #272]	; (8006f84 <__kernel_rem_pio2+0x320>)
 8006e74:	4680      	mov	r8, r0
 8006e76:	4689      	mov	r9, r1
 8006e78:	f7f9 fb62 	bl	8000540 <__aeabi_dmul>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4620      	mov	r0, r4
 8006e82:	4629      	mov	r1, r5
 8006e84:	f7f9 f9a4 	bl	80001d0 <__aeabi_dsub>
 8006e88:	f7f9 fdf4 	bl	8000a74 <__aeabi_d2iz>
 8006e8c:	9b02      	ldr	r3, [sp, #8]
 8006e8e:	3e01      	subs	r6, #1
 8006e90:	f843 0b04 	str.w	r0, [r3], #4
 8006e94:	9302      	str	r3, [sp, #8]
 8006e96:	ab70      	add	r3, sp, #448	; 0x1c0
 8006e98:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	f7f9 f996 	bl	80001d4 <__adddf3>
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	460d      	mov	r5, r1
 8006eac:	e762      	b.n	8006d74 <__kernel_rem_pio2+0x110>
 8006eae:	d105      	bne.n	8006ebc <__kernel_rem_pio2+0x258>
 8006eb0:	1e7b      	subs	r3, r7, #1
 8006eb2:	aa0c      	add	r2, sp, #48	; 0x30
 8006eb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006eb8:	15c3      	asrs	r3, r0, #23
 8006eba:	e79b      	b.n	8006df4 <__kernel_rem_pio2+0x190>
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4b32      	ldr	r3, [pc, #200]	; (8006f88 <__kernel_rem_pio2+0x324>)
 8006ec0:	f7f9 fdc4 	bl	8000a4c <__aeabi_dcmpge>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d13f      	bne.n	8006f48 <__kernel_rem_pio2+0x2e4>
 8006ec8:	9002      	str	r0, [sp, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4640      	mov	r0, r8
 8006ed0:	4649      	mov	r1, r9
 8006ed2:	f7f9 fd9d 	bl	8000a10 <__aeabi_dcmpeq>
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f000 80b5 	beq.w	8007046 <__kernel_rem_pio2+0x3e2>
 8006edc:	1e7c      	subs	r4, r7, #1
 8006ede:	4623      	mov	r3, r4
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	9904      	ldr	r1, [sp, #16]
 8006ee4:	428b      	cmp	r3, r1
 8006ee6:	da64      	bge.n	8006fb2 <__kernel_rem_pio2+0x34e>
 8006ee8:	2a00      	cmp	r2, #0
 8006eea:	d078      	beq.n	8006fde <__kernel_rem_pio2+0x37a>
 8006eec:	ab0c      	add	r3, sp, #48	; 0x30
 8006eee:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006ef2:	f1aa 0a18 	sub.w	sl, sl, #24
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 80a3 	beq.w	8007042 <__kernel_rem_pio2+0x3de>
 8006efc:	4652      	mov	r2, sl
 8006efe:	2000      	movs	r0, #0
 8006f00:	491e      	ldr	r1, [pc, #120]	; (8006f7c <__kernel_rem_pio2+0x318>)
 8006f02:	f000 fb35 	bl	8007570 <scalbn>
 8006f06:	46a2      	mov	sl, r4
 8006f08:	4606      	mov	r6, r0
 8006f0a:	460f      	mov	r7, r1
 8006f0c:	f04f 0800 	mov.w	r8, #0
 8006f10:	00e3      	lsls	r3, r4, #3
 8006f12:	9306      	str	r3, [sp, #24]
 8006f14:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8006f80 <__kernel_rem_pio2+0x31c>
 8006f18:	ab70      	add	r3, sp, #448	; 0x1c0
 8006f1a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 8006f1e:	f1ba 0f00 	cmp.w	sl, #0
 8006f22:	f280 80c6 	bge.w	80070b2 <__kernel_rem_pio2+0x44e>
 8006f26:	4627      	mov	r7, r4
 8006f28:	f04f 0800 	mov.w	r8, #0
 8006f2c:	2f00      	cmp	r7, #0
 8006f2e:	f2c0 80f3 	blt.w	8007118 <__kernel_rem_pio2+0x4b4>
 8006f32:	4b16      	ldr	r3, [pc, #88]	; (8006f8c <__kernel_rem_pio2+0x328>)
 8006f34:	f04f 0a00 	mov.w	sl, #0
 8006f38:	461d      	mov	r5, r3
 8006f3a:	ab70      	add	r3, sp, #448	; 0x1c0
 8006f3c:	f04f 0b00 	mov.w	fp, #0
 8006f40:	2600      	movs	r6, #0
 8006f42:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8006f46:	e0d9      	b.n	80070fc <__kernel_rem_pio2+0x498>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	9302      	str	r3, [sp, #8]
 8006f4c:	e756      	b.n	8006dfc <__kernel_rem_pio2+0x198>
 8006f4e:	f8db 3000 	ldr.w	r3, [fp]
 8006f52:	b954      	cbnz	r4, 8006f6a <__kernel_rem_pio2+0x306>
 8006f54:	b123      	cbz	r3, 8006f60 <__kernel_rem_pio2+0x2fc>
 8006f56:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006f5a:	f8cb 3000 	str.w	r3, [fp]
 8006f5e:	2301      	movs	r3, #1
 8006f60:	461c      	mov	r4, r3
 8006f62:	3201      	adds	r2, #1
 8006f64:	f10b 0b04 	add.w	fp, fp, #4
 8006f68:	e74f      	b.n	8006e0a <__kernel_rem_pio2+0x1a6>
 8006f6a:	1acb      	subs	r3, r1, r3
 8006f6c:	f8cb 3000 	str.w	r3, [fp]
 8006f70:	4623      	mov	r3, r4
 8006f72:	e7f5      	b.n	8006f60 <__kernel_rem_pio2+0x2fc>
 8006f74:	08007880 	.word	0x08007880
 8006f78:	40200000 	.word	0x40200000
 8006f7c:	3ff00000 	.word	0x3ff00000
 8006f80:	3e700000 	.word	0x3e700000
 8006f84:	41700000 	.word	0x41700000
 8006f88:	3fe00000 	.word	0x3fe00000
 8006f8c:	08007840 	.word	0x08007840
 8006f90:	1e7a      	subs	r2, r7, #1
 8006f92:	ab0c      	add	r3, sp, #48	; 0x30
 8006f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f98:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006f9c:	a90c      	add	r1, sp, #48	; 0x30
 8006f9e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006fa2:	e740      	b.n	8006e26 <__kernel_rem_pio2+0x1c2>
 8006fa4:	1e7a      	subs	r2, r7, #1
 8006fa6:	ab0c      	add	r3, sp, #48	; 0x30
 8006fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006fb0:	e7f4      	b.n	8006f9c <__kernel_rem_pio2+0x338>
 8006fb2:	a90c      	add	r1, sp, #48	; 0x30
 8006fb4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	e791      	b.n	8006ee2 <__kernel_rem_pio2+0x27e>
 8006fbe:	3401      	adds	r4, #1
 8006fc0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006fc4:	2a00      	cmp	r2, #0
 8006fc6:	d0fa      	beq.n	8006fbe <__kernel_rem_pio2+0x35a>
 8006fc8:	9b08      	ldr	r3, [sp, #32]
 8006fca:	1c7e      	adds	r6, r7, #1
 8006fcc:	18fd      	adds	r5, r7, r3
 8006fce:	ab20      	add	r3, sp, #128	; 0x80
 8006fd0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006fd4:	443c      	add	r4, r7
 8006fd6:	42b4      	cmp	r4, r6
 8006fd8:	da04      	bge.n	8006fe4 <__kernel_rem_pio2+0x380>
 8006fda:	4627      	mov	r7, r4
 8006fdc:	e6c0      	b.n	8006d60 <__kernel_rem_pio2+0xfc>
 8006fde:	2401      	movs	r4, #1
 8006fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fe2:	e7ed      	b.n	8006fc0 <__kernel_rem_pio2+0x35c>
 8006fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fe6:	462f      	mov	r7, r5
 8006fe8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006fec:	f7f9 fa3e 	bl	800046c <__aeabi_i2d>
 8006ff0:	f04f 0b00 	mov.w	fp, #0
 8006ff4:	f04f 0800 	mov.w	r8, #0
 8006ff8:	f04f 0900 	mov.w	r9, #0
 8006ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ffe:	e8e7 0102 	strd	r0, r1, [r7], #8
 8007002:	3b08      	subs	r3, #8
 8007004:	9302      	str	r3, [sp, #8]
 8007006:	9b06      	ldr	r3, [sp, #24]
 8007008:	459b      	cmp	fp, r3
 800700a:	dd07      	ble.n	800701c <__kernel_rem_pio2+0x3b8>
 800700c:	ab70      	add	r3, sp, #448	; 0x1c0
 800700e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007012:	463d      	mov	r5, r7
 8007014:	e9c3 8900 	strd	r8, r9, [r3]
 8007018:	3601      	adds	r6, #1
 800701a:	e7dc      	b.n	8006fd6 <__kernel_rem_pio2+0x372>
 800701c:	9902      	ldr	r1, [sp, #8]
 800701e:	f10b 0b01 	add.w	fp, fp, #1
 8007022:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8007026:	9102      	str	r1, [sp, #8]
 8007028:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800702c:	f7f9 fa88 	bl	8000540 <__aeabi_dmul>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	4640      	mov	r0, r8
 8007036:	4649      	mov	r1, r9
 8007038:	f7f9 f8cc 	bl	80001d4 <__adddf3>
 800703c:	4680      	mov	r8, r0
 800703e:	4689      	mov	r9, r1
 8007040:	e7e1      	b.n	8007006 <__kernel_rem_pio2+0x3a2>
 8007042:	3c01      	subs	r4, #1
 8007044:	e752      	b.n	8006eec <__kernel_rem_pio2+0x288>
 8007046:	f1ca 0200 	rsb	r2, sl, #0
 800704a:	4640      	mov	r0, r8
 800704c:	4649      	mov	r1, r9
 800704e:	f000 fa8f 	bl	8007570 <scalbn>
 8007052:	2200      	movs	r2, #0
 8007054:	4ba5      	ldr	r3, [pc, #660]	; (80072ec <__kernel_rem_pio2+0x688>)
 8007056:	4604      	mov	r4, r0
 8007058:	460d      	mov	r5, r1
 800705a:	f7f9 fcf7 	bl	8000a4c <__aeabi_dcmpge>
 800705e:	b1f8      	cbz	r0, 80070a0 <__kernel_rem_pio2+0x43c>
 8007060:	2200      	movs	r2, #0
 8007062:	4ba3      	ldr	r3, [pc, #652]	; (80072f0 <__kernel_rem_pio2+0x68c>)
 8007064:	4620      	mov	r0, r4
 8007066:	4629      	mov	r1, r5
 8007068:	f7f9 fa6a 	bl	8000540 <__aeabi_dmul>
 800706c:	f7f9 fd02 	bl	8000a74 <__aeabi_d2iz>
 8007070:	4606      	mov	r6, r0
 8007072:	f7f9 f9fb 	bl	800046c <__aeabi_i2d>
 8007076:	2200      	movs	r2, #0
 8007078:	4b9c      	ldr	r3, [pc, #624]	; (80072ec <__kernel_rem_pio2+0x688>)
 800707a:	f7f9 fa61 	bl	8000540 <__aeabi_dmul>
 800707e:	460b      	mov	r3, r1
 8007080:	4602      	mov	r2, r0
 8007082:	4629      	mov	r1, r5
 8007084:	4620      	mov	r0, r4
 8007086:	f7f9 f8a3 	bl	80001d0 <__aeabi_dsub>
 800708a:	f7f9 fcf3 	bl	8000a74 <__aeabi_d2iz>
 800708e:	1c7c      	adds	r4, r7, #1
 8007090:	ab0c      	add	r3, sp, #48	; 0x30
 8007092:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8007096:	f10a 0a18 	add.w	sl, sl, #24
 800709a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800709e:	e72d      	b.n	8006efc <__kernel_rem_pio2+0x298>
 80070a0:	4620      	mov	r0, r4
 80070a2:	4629      	mov	r1, r5
 80070a4:	f7f9 fce6 	bl	8000a74 <__aeabi_d2iz>
 80070a8:	ab0c      	add	r3, sp, #48	; 0x30
 80070aa:	463c      	mov	r4, r7
 80070ac:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80070b0:	e724      	b.n	8006efc <__kernel_rem_pio2+0x298>
 80070b2:	ab0c      	add	r3, sp, #48	; 0x30
 80070b4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80070b8:	f7f9 f9d8 	bl	800046c <__aeabi_i2d>
 80070bc:	4632      	mov	r2, r6
 80070be:	463b      	mov	r3, r7
 80070c0:	f7f9 fa3e 	bl	8000540 <__aeabi_dmul>
 80070c4:	4642      	mov	r2, r8
 80070c6:	e86b 0102 	strd	r0, r1, [fp], #-8
 80070ca:	464b      	mov	r3, r9
 80070cc:	4630      	mov	r0, r6
 80070ce:	4639      	mov	r1, r7
 80070d0:	f7f9 fa36 	bl	8000540 <__aeabi_dmul>
 80070d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070d8:	4606      	mov	r6, r0
 80070da:	460f      	mov	r7, r1
 80070dc:	e71f      	b.n	8006f1e <__kernel_rem_pio2+0x2ba>
 80070de:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80070e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80070e6:	f7f9 fa2b 	bl	8000540 <__aeabi_dmul>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	4650      	mov	r0, sl
 80070f0:	4659      	mov	r1, fp
 80070f2:	f7f9 f86f 	bl	80001d4 <__adddf3>
 80070f6:	4682      	mov	sl, r0
 80070f8:	468b      	mov	fp, r1
 80070fa:	3601      	adds	r6, #1
 80070fc:	9b04      	ldr	r3, [sp, #16]
 80070fe:	429e      	cmp	r6, r3
 8007100:	dc01      	bgt.n	8007106 <__kernel_rem_pio2+0x4a2>
 8007102:	45b0      	cmp	r8, r6
 8007104:	daeb      	bge.n	80070de <__kernel_rem_pio2+0x47a>
 8007106:	ab48      	add	r3, sp, #288	; 0x120
 8007108:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800710c:	e9c3 ab00 	strd	sl, fp, [r3]
 8007110:	3f01      	subs	r7, #1
 8007112:	f108 0801 	add.w	r8, r8, #1
 8007116:	e709      	b.n	8006f2c <__kernel_rem_pio2+0x2c8>
 8007118:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800711a:	2b02      	cmp	r3, #2
 800711c:	dc09      	bgt.n	8007132 <__kernel_rem_pio2+0x4ce>
 800711e:	2b00      	cmp	r3, #0
 8007120:	dc34      	bgt.n	800718c <__kernel_rem_pio2+0x528>
 8007122:	d05e      	beq.n	80071e2 <__kernel_rem_pio2+0x57e>
 8007124:	9b07      	ldr	r3, [sp, #28]
 8007126:	f003 0007 	and.w	r0, r3, #7
 800712a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800712e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007132:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8007134:	2b03      	cmp	r3, #3
 8007136:	d1f5      	bne.n	8007124 <__kernel_rem_pio2+0x4c0>
 8007138:	9a06      	ldr	r2, [sp, #24]
 800713a:	ab48      	add	r3, sp, #288	; 0x120
 800713c:	441a      	add	r2, r3
 800713e:	4615      	mov	r5, r2
 8007140:	4692      	mov	sl, r2
 8007142:	46a3      	mov	fp, r4
 8007144:	f1bb 0f00 	cmp.w	fp, #0
 8007148:	dc7a      	bgt.n	8007240 <__kernel_rem_pio2+0x5dc>
 800714a:	46aa      	mov	sl, r5
 800714c:	46a3      	mov	fp, r4
 800714e:	f1bb 0f01 	cmp.w	fp, #1
 8007152:	f300 8094 	bgt.w	800727e <__kernel_rem_pio2+0x61a>
 8007156:	2700      	movs	r7, #0
 8007158:	463e      	mov	r6, r7
 800715a:	2c01      	cmp	r4, #1
 800715c:	f300 80ae 	bgt.w	80072bc <__kernel_rem_pio2+0x658>
 8007160:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8007164:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 8007168:	9b02      	ldr	r3, [sp, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 80b0 	bne.w	80072d0 <__kernel_rem_pio2+0x66c>
 8007170:	4603      	mov	r3, r0
 8007172:	462a      	mov	r2, r5
 8007174:	9801      	ldr	r0, [sp, #4]
 8007176:	e9c0 2300 	strd	r2, r3, [r0]
 800717a:	4622      	mov	r2, r4
 800717c:	460b      	mov	r3, r1
 800717e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007182:	463a      	mov	r2, r7
 8007184:	4633      	mov	r3, r6
 8007186:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800718a:	e7cb      	b.n	8007124 <__kernel_rem_pio2+0x4c0>
 800718c:	2000      	movs	r0, #0
 800718e:	9a06      	ldr	r2, [sp, #24]
 8007190:	ab48      	add	r3, sp, #288	; 0x120
 8007192:	441a      	add	r2, r3
 8007194:	4615      	mov	r5, r2
 8007196:	46a0      	mov	r8, r4
 8007198:	4601      	mov	r1, r0
 800719a:	f1b8 0f00 	cmp.w	r8, #0
 800719e:	da3c      	bge.n	800721a <__kernel_rem_pio2+0x5b6>
 80071a0:	9b02      	ldr	r3, [sp, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d040      	beq.n	8007228 <__kernel_rem_pio2+0x5c4>
 80071a6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80071aa:	4602      	mov	r2, r0
 80071ac:	462b      	mov	r3, r5
 80071ae:	9d01      	ldr	r5, [sp, #4]
 80071b0:	2601      	movs	r6, #1
 80071b2:	e9c5 2300 	strd	r2, r3, [r5]
 80071b6:	460b      	mov	r3, r1
 80071b8:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80071bc:	f7f9 f808 	bl	80001d0 <__aeabi_dsub>
 80071c0:	4684      	mov	ip, r0
 80071c2:	460f      	mov	r7, r1
 80071c4:	ad48      	add	r5, sp, #288	; 0x120
 80071c6:	42b4      	cmp	r4, r6
 80071c8:	f105 0508 	add.w	r5, r5, #8
 80071cc:	da2e      	bge.n	800722c <__kernel_rem_pio2+0x5c8>
 80071ce:	9b02      	ldr	r3, [sp, #8]
 80071d0:	b10b      	cbz	r3, 80071d6 <__kernel_rem_pio2+0x572>
 80071d2:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80071d6:	4662      	mov	r2, ip
 80071d8:	463b      	mov	r3, r7
 80071da:	9901      	ldr	r1, [sp, #4]
 80071dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80071e0:	e7a0      	b.n	8007124 <__kernel_rem_pio2+0x4c0>
 80071e2:	9a06      	ldr	r2, [sp, #24]
 80071e4:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80071e6:	ab48      	add	r3, sp, #288	; 0x120
 80071e8:	441a      	add	r2, r3
 80071ea:	4615      	mov	r5, r2
 80071ec:	4637      	mov	r7, r6
 80071ee:	2c00      	cmp	r4, #0
 80071f0:	da09      	bge.n	8007206 <__kernel_rem_pio2+0x5a2>
 80071f2:	9b02      	ldr	r3, [sp, #8]
 80071f4:	b10b      	cbz	r3, 80071fa <__kernel_rem_pio2+0x596>
 80071f6:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80071fa:	4632      	mov	r2, r6
 80071fc:	463b      	mov	r3, r7
 80071fe:	9901      	ldr	r1, [sp, #4]
 8007200:	e9c1 2300 	strd	r2, r3, [r1]
 8007204:	e78e      	b.n	8007124 <__kernel_rem_pio2+0x4c0>
 8007206:	4630      	mov	r0, r6
 8007208:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800720c:	4639      	mov	r1, r7
 800720e:	f7f8 ffe1 	bl	80001d4 <__adddf3>
 8007212:	3c01      	subs	r4, #1
 8007214:	4606      	mov	r6, r0
 8007216:	460f      	mov	r7, r1
 8007218:	e7e9      	b.n	80071ee <__kernel_rem_pio2+0x58a>
 800721a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800721e:	f7f8 ffd9 	bl	80001d4 <__adddf3>
 8007222:	f108 38ff 	add.w	r8, r8, #4294967295
 8007226:	e7b8      	b.n	800719a <__kernel_rem_pio2+0x536>
 8007228:	460d      	mov	r5, r1
 800722a:	e7be      	b.n	80071aa <__kernel_rem_pio2+0x546>
 800722c:	4660      	mov	r0, ip
 800722e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007232:	4639      	mov	r1, r7
 8007234:	f7f8 ffce 	bl	80001d4 <__adddf3>
 8007238:	3601      	adds	r6, #1
 800723a:	4684      	mov	ip, r0
 800723c:	460f      	mov	r7, r1
 800723e:	e7c2      	b.n	80071c6 <__kernel_rem_pio2+0x562>
 8007240:	e9da 6700 	ldrd	r6, r7, [sl]
 8007244:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8007248:	4632      	mov	r2, r6
 800724a:	463b      	mov	r3, r7
 800724c:	4640      	mov	r0, r8
 800724e:	4649      	mov	r1, r9
 8007250:	f7f8 ffc0 	bl	80001d4 <__adddf3>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800725c:	4640      	mov	r0, r8
 800725e:	4649      	mov	r1, r9
 8007260:	f7f8 ffb6 	bl	80001d0 <__aeabi_dsub>
 8007264:	4632      	mov	r2, r6
 8007266:	463b      	mov	r3, r7
 8007268:	f7f8 ffb4 	bl	80001d4 <__adddf3>
 800726c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007270:	e86a 0102 	strd	r0, r1, [sl], #-8
 8007274:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007278:	e9ca 2300 	strd	r2, r3, [sl]
 800727c:	e762      	b.n	8007144 <__kernel_rem_pio2+0x4e0>
 800727e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007282:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8007286:	4642      	mov	r2, r8
 8007288:	464b      	mov	r3, r9
 800728a:	4630      	mov	r0, r6
 800728c:	4639      	mov	r1, r7
 800728e:	f7f8 ffa1 	bl	80001d4 <__adddf3>
 8007292:	4602      	mov	r2, r0
 8007294:	460b      	mov	r3, r1
 8007296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800729a:	4630      	mov	r0, r6
 800729c:	4639      	mov	r1, r7
 800729e:	f7f8 ff97 	bl	80001d0 <__aeabi_dsub>
 80072a2:	4642      	mov	r2, r8
 80072a4:	464b      	mov	r3, r9
 80072a6:	f7f8 ff95 	bl	80001d4 <__adddf3>
 80072aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ae:	e86a 0102 	strd	r0, r1, [sl], #-8
 80072b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072b6:	e9ca 2300 	strd	r2, r3, [sl]
 80072ba:	e748      	b.n	800714e <__kernel_rem_pio2+0x4ea>
 80072bc:	4638      	mov	r0, r7
 80072be:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80072c2:	4631      	mov	r1, r6
 80072c4:	f7f8 ff86 	bl	80001d4 <__adddf3>
 80072c8:	3c01      	subs	r4, #1
 80072ca:	4607      	mov	r7, r0
 80072cc:	460e      	mov	r6, r1
 80072ce:	e744      	b.n	800715a <__kernel_rem_pio2+0x4f6>
 80072d0:	9b01      	ldr	r3, [sp, #4]
 80072d2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80072d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80072da:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 80072de:	e9c3 0401 	strd	r0, r4, [r3, #4]
 80072e2:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80072e6:	601d      	str	r5, [r3, #0]
 80072e8:	615e      	str	r6, [r3, #20]
 80072ea:	e71b      	b.n	8007124 <__kernel_rem_pio2+0x4c0>
 80072ec:	41700000 	.word	0x41700000
 80072f0:	3e700000 	.word	0x3e700000
 80072f4:	00000000 	.word	0x00000000

080072f8 <__kernel_sin>:
 80072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	b086      	sub	sp, #24
 80072fe:	e9cd 2300 	strd	r2, r3, [sp]
 8007302:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007306:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800730a:	4682      	mov	sl, r0
 800730c:	460c      	mov	r4, r1
 800730e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8007310:	da03      	bge.n	800731a <__kernel_sin+0x22>
 8007312:	f7f9 fbaf 	bl	8000a74 <__aeabi_d2iz>
 8007316:	2800      	cmp	r0, #0
 8007318:	d050      	beq.n	80073bc <__kernel_sin+0xc4>
 800731a:	4652      	mov	r2, sl
 800731c:	4623      	mov	r3, r4
 800731e:	4650      	mov	r0, sl
 8007320:	4621      	mov	r1, r4
 8007322:	f7f9 f90d 	bl	8000540 <__aeabi_dmul>
 8007326:	4606      	mov	r6, r0
 8007328:	460f      	mov	r7, r1
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4650      	mov	r0, sl
 8007330:	4621      	mov	r1, r4
 8007332:	f7f9 f905 	bl	8000540 <__aeabi_dmul>
 8007336:	a33e      	add	r3, pc, #248	; (adr r3, 8007430 <__kernel_sin+0x138>)
 8007338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733c:	4680      	mov	r8, r0
 800733e:	4689      	mov	r9, r1
 8007340:	4630      	mov	r0, r6
 8007342:	4639      	mov	r1, r7
 8007344:	f7f9 f8fc 	bl	8000540 <__aeabi_dmul>
 8007348:	a33b      	add	r3, pc, #236	; (adr r3, 8007438 <__kernel_sin+0x140>)
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	f7f8 ff3f 	bl	80001d0 <__aeabi_dsub>
 8007352:	4632      	mov	r2, r6
 8007354:	463b      	mov	r3, r7
 8007356:	f7f9 f8f3 	bl	8000540 <__aeabi_dmul>
 800735a:	a339      	add	r3, pc, #228	; (adr r3, 8007440 <__kernel_sin+0x148>)
 800735c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007360:	f7f8 ff38 	bl	80001d4 <__adddf3>
 8007364:	4632      	mov	r2, r6
 8007366:	463b      	mov	r3, r7
 8007368:	f7f9 f8ea 	bl	8000540 <__aeabi_dmul>
 800736c:	a336      	add	r3, pc, #216	; (adr r3, 8007448 <__kernel_sin+0x150>)
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	f7f8 ff2d 	bl	80001d0 <__aeabi_dsub>
 8007376:	4632      	mov	r2, r6
 8007378:	463b      	mov	r3, r7
 800737a:	f7f9 f8e1 	bl	8000540 <__aeabi_dmul>
 800737e:	a334      	add	r3, pc, #208	; (adr r3, 8007450 <__kernel_sin+0x158>)
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	f7f8 ff26 	bl	80001d4 <__adddf3>
 8007388:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800738c:	b9dd      	cbnz	r5, 80073c6 <__kernel_sin+0xce>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4630      	mov	r0, r6
 8007394:	4639      	mov	r1, r7
 8007396:	f7f9 f8d3 	bl	8000540 <__aeabi_dmul>
 800739a:	a32f      	add	r3, pc, #188	; (adr r3, 8007458 <__kernel_sin+0x160>)
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	f7f8 ff16 	bl	80001d0 <__aeabi_dsub>
 80073a4:	4642      	mov	r2, r8
 80073a6:	464b      	mov	r3, r9
 80073a8:	f7f9 f8ca 	bl	8000540 <__aeabi_dmul>
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4650      	mov	r0, sl
 80073b2:	4621      	mov	r1, r4
 80073b4:	f7f8 ff0e 	bl	80001d4 <__adddf3>
 80073b8:	4682      	mov	sl, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	4650      	mov	r0, sl
 80073be:	4621      	mov	r1, r4
 80073c0:	b006      	add	sp, #24
 80073c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073c6:	2200      	movs	r2, #0
 80073c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073cc:	4b24      	ldr	r3, [pc, #144]	; (8007460 <__kernel_sin+0x168>)
 80073ce:	f7f9 f8b7 	bl	8000540 <__aeabi_dmul>
 80073d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f9 f8af 	bl	8000540 <__aeabi_dmul>
 80073e2:	4602      	mov	r2, r0
 80073e4:	460b      	mov	r3, r1
 80073e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ea:	f7f8 fef1 	bl	80001d0 <__aeabi_dsub>
 80073ee:	4632      	mov	r2, r6
 80073f0:	463b      	mov	r3, r7
 80073f2:	f7f9 f8a5 	bl	8000540 <__aeabi_dmul>
 80073f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073fa:	f7f8 fee9 	bl	80001d0 <__aeabi_dsub>
 80073fe:	a316      	add	r3, pc, #88	; (adr r3, 8007458 <__kernel_sin+0x160>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	4606      	mov	r6, r0
 8007406:	460f      	mov	r7, r1
 8007408:	4640      	mov	r0, r8
 800740a:	4649      	mov	r1, r9
 800740c:	f7f9 f898 	bl	8000540 <__aeabi_dmul>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4630      	mov	r0, r6
 8007416:	4639      	mov	r1, r7
 8007418:	f7f8 fedc 	bl	80001d4 <__adddf3>
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4650      	mov	r0, sl
 8007422:	4621      	mov	r1, r4
 8007424:	f7f8 fed4 	bl	80001d0 <__aeabi_dsub>
 8007428:	e7c6      	b.n	80073b8 <__kernel_sin+0xc0>
 800742a:	bf00      	nop
 800742c:	f3af 8000 	nop.w
 8007430:	5acfd57c 	.word	0x5acfd57c
 8007434:	3de5d93a 	.word	0x3de5d93a
 8007438:	8a2b9ceb 	.word	0x8a2b9ceb
 800743c:	3e5ae5e6 	.word	0x3e5ae5e6
 8007440:	57b1fe7d 	.word	0x57b1fe7d
 8007444:	3ec71de3 	.word	0x3ec71de3
 8007448:	19c161d5 	.word	0x19c161d5
 800744c:	3f2a01a0 	.word	0x3f2a01a0
 8007450:	1110f8a6 	.word	0x1110f8a6
 8007454:	3f811111 	.word	0x3f811111
 8007458:	55555549 	.word	0x55555549
 800745c:	3fc55555 	.word	0x3fc55555
 8007460:	3fe00000 	.word	0x3fe00000

08007464 <fabs>:
 8007464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007468:	4770      	bx	lr
 800746a:	0000      	movs	r0, r0
 800746c:	0000      	movs	r0, r0
	...

08007470 <floor>:
 8007470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007474:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8007478:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800747c:	2e13      	cmp	r6, #19
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	4607      	mov	r7, r0
 8007484:	460c      	mov	r4, r1
 8007486:	4605      	mov	r5, r0
 8007488:	dc34      	bgt.n	80074f4 <floor+0x84>
 800748a:	2e00      	cmp	r6, #0
 800748c:	da15      	bge.n	80074ba <floor+0x4a>
 800748e:	a334      	add	r3, pc, #208	; (adr r3, 8007560 <floor+0xf0>)
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f7f8 fe9e 	bl	80001d4 <__adddf3>
 8007498:	2200      	movs	r2, #0
 800749a:	2300      	movs	r3, #0
 800749c:	f7f9 fae0 	bl	8000a60 <__aeabi_dcmpgt>
 80074a0:	b140      	cbz	r0, 80074b4 <floor+0x44>
 80074a2:	2c00      	cmp	r4, #0
 80074a4:	da59      	bge.n	800755a <floor+0xea>
 80074a6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80074aa:	ea57 0503 	orrs.w	r5, r7, r3
 80074ae:	d001      	beq.n	80074b4 <floor+0x44>
 80074b0:	2500      	movs	r5, #0
 80074b2:	4c2d      	ldr	r4, [pc, #180]	; (8007568 <floor+0xf8>)
 80074b4:	4623      	mov	r3, r4
 80074b6:	462f      	mov	r7, r5
 80074b8:	e025      	b.n	8007506 <floor+0x96>
 80074ba:	4a2c      	ldr	r2, [pc, #176]	; (800756c <floor+0xfc>)
 80074bc:	fa42 f806 	asr.w	r8, r2, r6
 80074c0:	ea01 0208 	and.w	r2, r1, r8
 80074c4:	4302      	orrs	r2, r0
 80074c6:	d01e      	beq.n	8007506 <floor+0x96>
 80074c8:	a325      	add	r3, pc, #148	; (adr r3, 8007560 <floor+0xf0>)
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f7f8 fe81 	bl	80001d4 <__adddf3>
 80074d2:	2200      	movs	r2, #0
 80074d4:	2300      	movs	r3, #0
 80074d6:	f7f9 fac3 	bl	8000a60 <__aeabi_dcmpgt>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d0ea      	beq.n	80074b4 <floor+0x44>
 80074de:	2c00      	cmp	r4, #0
 80074e0:	bfbe      	ittt	lt
 80074e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80074e6:	fa43 f606 	asrlt.w	r6, r3, r6
 80074ea:	19a4      	addlt	r4, r4, r6
 80074ec:	2500      	movs	r5, #0
 80074ee:	ea24 0408 	bic.w	r4, r4, r8
 80074f2:	e7df      	b.n	80074b4 <floor+0x44>
 80074f4:	2e33      	cmp	r6, #51	; 0x33
 80074f6:	dd0a      	ble.n	800750e <floor+0x9e>
 80074f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80074fc:	d103      	bne.n	8007506 <floor+0x96>
 80074fe:	f7f8 fe69 	bl	80001d4 <__adddf3>
 8007502:	4607      	mov	r7, r0
 8007504:	460b      	mov	r3, r1
 8007506:	4638      	mov	r0, r7
 8007508:	4619      	mov	r1, r3
 800750a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750e:	f04f 32ff 	mov.w	r2, #4294967295
 8007512:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8007516:	fa22 f808 	lsr.w	r8, r2, r8
 800751a:	ea18 0f00 	tst.w	r8, r0
 800751e:	d0f2      	beq.n	8007506 <floor+0x96>
 8007520:	a30f      	add	r3, pc, #60	; (adr r3, 8007560 <floor+0xf0>)
 8007522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007526:	f7f8 fe55 	bl	80001d4 <__adddf3>
 800752a:	2200      	movs	r2, #0
 800752c:	2300      	movs	r3, #0
 800752e:	f7f9 fa97 	bl	8000a60 <__aeabi_dcmpgt>
 8007532:	2800      	cmp	r0, #0
 8007534:	d0be      	beq.n	80074b4 <floor+0x44>
 8007536:	2c00      	cmp	r4, #0
 8007538:	da02      	bge.n	8007540 <floor+0xd0>
 800753a:	2e14      	cmp	r6, #20
 800753c:	d103      	bne.n	8007546 <floor+0xd6>
 800753e:	3401      	adds	r4, #1
 8007540:	ea25 0508 	bic.w	r5, r5, r8
 8007544:	e7b6      	b.n	80074b4 <floor+0x44>
 8007546:	2301      	movs	r3, #1
 8007548:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800754c:	fa03 f606 	lsl.w	r6, r3, r6
 8007550:	4435      	add	r5, r6
 8007552:	42bd      	cmp	r5, r7
 8007554:	bf38      	it	cc
 8007556:	18e4      	addcc	r4, r4, r3
 8007558:	e7f2      	b.n	8007540 <floor+0xd0>
 800755a:	2500      	movs	r5, #0
 800755c:	462c      	mov	r4, r5
 800755e:	e7a9      	b.n	80074b4 <floor+0x44>
 8007560:	8800759c 	.word	0x8800759c
 8007564:	7e37e43c 	.word	0x7e37e43c
 8007568:	bff00000 	.word	0xbff00000
 800756c:	000fffff 	.word	0x000fffff

08007570 <scalbn>:
 8007570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007572:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8007576:	4604      	mov	r4, r0
 8007578:	460d      	mov	r5, r1
 800757a:	4617      	mov	r7, r2
 800757c:	460b      	mov	r3, r1
 800757e:	b996      	cbnz	r6, 80075a6 <scalbn+0x36>
 8007580:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007584:	4303      	orrs	r3, r0
 8007586:	d039      	beq.n	80075fc <scalbn+0x8c>
 8007588:	4b35      	ldr	r3, [pc, #212]	; (8007660 <scalbn+0xf0>)
 800758a:	2200      	movs	r2, #0
 800758c:	f7f8 ffd8 	bl	8000540 <__aeabi_dmul>
 8007590:	4b34      	ldr	r3, [pc, #208]	; (8007664 <scalbn+0xf4>)
 8007592:	4604      	mov	r4, r0
 8007594:	429f      	cmp	r7, r3
 8007596:	460d      	mov	r5, r1
 8007598:	da0f      	bge.n	80075ba <scalbn+0x4a>
 800759a:	a32d      	add	r3, pc, #180	; (adr r3, 8007650 <scalbn+0xe0>)
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f7f8 ffce 	bl	8000540 <__aeabi_dmul>
 80075a4:	e006      	b.n	80075b4 <scalbn+0x44>
 80075a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80075aa:	4296      	cmp	r6, r2
 80075ac:	d10a      	bne.n	80075c4 <scalbn+0x54>
 80075ae:	4602      	mov	r2, r0
 80075b0:	f7f8 fe10 	bl	80001d4 <__adddf3>
 80075b4:	4604      	mov	r4, r0
 80075b6:	460d      	mov	r5, r1
 80075b8:	e020      	b.n	80075fc <scalbn+0x8c>
 80075ba:	460b      	mov	r3, r1
 80075bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80075c0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 80075c4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80075c8:	19b9      	adds	r1, r7, r6
 80075ca:	4291      	cmp	r1, r2
 80075cc:	dd0e      	ble.n	80075ec <scalbn+0x7c>
 80075ce:	a322      	add	r3, pc, #136	; (adr r3, 8007658 <scalbn+0xe8>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80075d8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80075dc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80075e0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 80075e4:	4820      	ldr	r0, [pc, #128]	; (8007668 <scalbn+0xf8>)
 80075e6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 80075ea:	e7d9      	b.n	80075a0 <scalbn+0x30>
 80075ec:	2900      	cmp	r1, #0
 80075ee:	dd08      	ble.n	8007602 <scalbn+0x92>
 80075f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80075fc:	4620      	mov	r0, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007602:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8007606:	da16      	bge.n	8007636 <scalbn+0xc6>
 8007608:	f24c 3350 	movw	r3, #50000	; 0xc350
 800760c:	429f      	cmp	r7, r3
 800760e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8007612:	dd08      	ble.n	8007626 <scalbn+0xb6>
 8007614:	4c15      	ldr	r4, [pc, #84]	; (800766c <scalbn+0xfc>)
 8007616:	4814      	ldr	r0, [pc, #80]	; (8007668 <scalbn+0xf8>)
 8007618:	f363 74df 	bfi	r4, r3, #31, #1
 800761c:	a30e      	add	r3, pc, #56	; (adr r3, 8007658 <scalbn+0xe8>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	4621      	mov	r1, r4
 8007624:	e7bc      	b.n	80075a0 <scalbn+0x30>
 8007626:	4c12      	ldr	r4, [pc, #72]	; (8007670 <scalbn+0x100>)
 8007628:	4812      	ldr	r0, [pc, #72]	; (8007674 <scalbn+0x104>)
 800762a:	f363 74df 	bfi	r4, r3, #31, #1
 800762e:	a308      	add	r3, pc, #32	; (adr r3, 8007650 <scalbn+0xe0>)
 8007630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007634:	e7f5      	b.n	8007622 <scalbn+0xb2>
 8007636:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800763a:	3136      	adds	r1, #54	; 0x36
 800763c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007640:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8007644:	4620      	mov	r0, r4
 8007646:	4629      	mov	r1, r5
 8007648:	2200      	movs	r2, #0
 800764a:	4b0b      	ldr	r3, [pc, #44]	; (8007678 <scalbn+0x108>)
 800764c:	e7a8      	b.n	80075a0 <scalbn+0x30>
 800764e:	bf00      	nop
 8007650:	c2f8f359 	.word	0xc2f8f359
 8007654:	01a56e1f 	.word	0x01a56e1f
 8007658:	8800759c 	.word	0x8800759c
 800765c:	7e37e43c 	.word	0x7e37e43c
 8007660:	43500000 	.word	0x43500000
 8007664:	ffff3cb0 	.word	0xffff3cb0
 8007668:	8800759c 	.word	0x8800759c
 800766c:	7e37e43c 	.word	0x7e37e43c
 8007670:	01a56e1f 	.word	0x01a56e1f
 8007674:	c2f8f359 	.word	0xc2f8f359
 8007678:	3c900000 	.word	0x3c900000

0800767c <_init>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr

08007688 <_fini>:
 8007688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768a:	bf00      	nop
 800768c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768e:	bc08      	pop	{r3}
 8007690:	469e      	mov	lr, r3
 8007692:	4770      	bx	lr
